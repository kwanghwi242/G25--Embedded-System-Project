
Simple Periodic Time-Triggered Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008540  08008540  00009540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d0  080089d0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080089d0  080089d0  000099d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d8  080089d8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  200001d4  08008bb4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08008bb4  0000a5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f07b  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002273  00000000  00000000  00019278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  0001c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3a  00000000  00000000  0001d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012217  00000000  00000000  00035dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7a5  00000000  00000000  00048011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d67b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  000d67fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000dbf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008524 	.word	0x08008524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008524 	.word	0x08008524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dfe:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e0a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2a:	bf00      	nop
     __ASM volatile ("NOP");
 8000e2c:	bf00      	nop
  __ASM volatile ("NOP");
 8000e2e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e000      	b.n	8000e3e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000e3c:	2301      	movs	r3, #1
  }
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000edf0 	.word	0xe000edf0
 8000e4c:	e0001000 	.word	0xe0001000

08000e50 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <delay+0x40>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e5e:	f002 f96d 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <delay+0x44>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e74:	bf00      	nop
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <delay+0x40>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3f8      	bcc.n	8000e76 <delay+0x26>
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e0001000 	.word	0xe0001000
 8000e94:	431bde83 	.word	0x431bde83

08000e98 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 ff29 	bl	8001d1c <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 ff0c 	bl	8001d1c <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DHT_Start>:


void DHT_Start (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f10:	f7ff ff6e 	bl	8000df0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f14:	2108      	movs	r1, #8
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <DHT_Start+0x40>)
 8000f18:	f7ff ffbe 	bl	8000e98 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2108      	movs	r1, #8
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <DHT_Start+0x40>)
 8000f22:	f001 f896 	bl	8002052 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f26:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000f2a:	f7ff ff91 	bl	8000e50 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2108      	movs	r1, #8
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <DHT_Start+0x40>)
 8000f34:	f001 f88d 	bl	8002052 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000f38:	2014      	movs	r0, #20
 8000f3a:	f7ff ff89 	bl	8000e50 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <DHT_Start+0x40>)
 8000f42:	f7ff ffc6 	bl	8000ed2 <Set_Pin_Input>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010800 	.word	0x40010800

08000f50 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f7ff ff78 	bl	8000e50 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f60:	2108      	movs	r1, #8
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f64:	f001 f85e 	bl	8002024 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000f6e:	2050      	movs	r0, #80	@ 0x50
 8000f70:	f7ff ff6e 	bl	8000e50 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f74:	2108      	movs	r1, #8
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f78:	f001 f854 	bl	8002024 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <DHT_Check_Response+0x38>
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <DHT_Check_Response+0x3c>
		else Response = -1;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f92:	f001 f847 	bl	8002024 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f8      	bne.n	8000f8e <DHT_Check_Response+0x3e>

	return Response;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	e037      	b.n	8001028 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fb8:	bf00      	nop
 8000fba:	2108      	movs	r1, #8
 8000fbc:	481e      	ldr	r0, [pc, #120]	@ (8001038 <DHT_Read+0x8c>)
 8000fbe:	f001 f831 	bl	8002024 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000fc8:	2028      	movs	r0, #40	@ 0x28
 8000fca:	f7ff ff41 	bl	8000e50 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fce:	2108      	movs	r1, #8
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <DHT_Read+0x8c>)
 8000fd2:	f001 f827 	bl	8002024 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e00b      	b.n	8001012 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f1c3 0307 	rsb	r3, r3, #7
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001012:	bf00      	nop
 8001014:	2108      	movs	r1, #8
 8001016:	4808      	ldr	r0, [pc, #32]	@ (8001038 <DHT_Read+0x8c>)
 8001018:	f001 f804 	bl	8002024 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f8      	bne.n	8001014 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9c4      	bls.n	8000fb8 <DHT_Read+0xc>
	}
	return i;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010800 	.word	0x40010800

0800103c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001044:	f7ff ff62 	bl	8000f0c <DHT_Start>
	Presence = DHT_Check_Response ();
 8001048:	f7ff ff82 	bl	8000f50 <DHT_Check_Response>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <DHT_GetData+0xa0>)
 8001052:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001054:	f7ff ffaa 	bl	8000fac <DHT_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <DHT_GetData+0xa4>)
 800105e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001060:	f7ff ffa4 	bl	8000fac <DHT_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <DHT_GetData+0xa8>)
 800106a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800106c:	f7ff ff9e 	bl	8000fac <DHT_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <DHT_GetData+0xac>)
 8001076:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001078:	f7ff ff98 	bl	8000fac <DHT_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <DHT_GetData+0xb0>)
 8001082:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001084:	f7ff ff92 	bl	8000fac <DHT_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <DHT_GetData+0xb4>)
 800108e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <DHT_GetData+0xb4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <DHT_GetData+0xa4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <DHT_GetData+0xa8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <DHT_GetData+0xac>)
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <DHT_GetData+0xb0>)
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4299      	cmp	r1, r3
 80010b0:	d10f      	bne.n	80010d2 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <DHT_GetData+0xac>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe0c 	bl	8000cd4 <__aeabi_ui2f>
 80010bc:	4602      	mov	r2, r0
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <DHT_GetData+0xa4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe04 	bl	8000cd4 <__aeabi_ui2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001f6 	.word	0x200001f6
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	200001f1 	.word	0x200001f1
 80010e8:	200001f2 	.word	0x200001f2
 80010ec:	200001f3 	.word	0x200001f3
 80010f0:	200001f4 	.word	0x200001f4

080010f4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f023 030f 	bic.w	r3, r3, #15
 8001104:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f043 030c 	orr.w	r3, r3, #12
 8001112:	b2db      	uxtb	r3, r3
 8001114:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	f043 030c 	orr.w	r3, r3, #12
 8001126:	b2db      	uxtb	r3, r3
 8001128:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	b2db      	uxtb	r3, r3
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2304      	movs	r3, #4
 800113e:	214e      	movs	r1, #78	@ 0x4e
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <lcd_send_cmd+0x5c>)
 8001142:	f001 f8e3 	bl	800230c <HAL_I2C_Master_Transmit>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001f8 	.word	0x200001f8

08001154 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 030d 	orr.w	r3, r3, #13
 8001172:	b2db      	uxtb	r3, r3
 8001174:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 0309 	orr.w	r3, r3, #9
 800117c:	b2db      	uxtb	r3, r3
 800117e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	f043 030d 	orr.w	r3, r3, #13
 8001186:	b2db      	uxtb	r3, r3
 8001188:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f043 0309 	orr.w	r3, r3, #9
 8001190:	b2db      	uxtb	r3, r3
 8001192:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2304      	movs	r3, #4
 800119e:	214e      	movs	r1, #78	@ 0x4e
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <lcd_send_data+0x5c>)
 80011a2:	f001 f8b3 	bl	800230c <HAL_I2C_Master_Transmit>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001f8 	.word	0x200001f8

080011b4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    switch (row)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <lcd_put_cur+0x18>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <lcd_put_cur+0x22>
 80011ca:	e009      	b.n	80011e0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d2:	603b      	str	r3, [r7, #0]
            break;
 80011d4:	e004      	b.n	80011e0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011dc:	603b      	str	r3, [r7, #0]
            break;
 80011de:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff85 	bl	80010f4 <lcd_send_cmd>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <lcd_init>:


void lcd_init (void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011f6:	2032      	movs	r0, #50	@ 0x32
 80011f8:	f000 fc5e 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011fc:	2030      	movs	r0, #48	@ 0x30
 80011fe:	f7ff ff79 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001202:	2005      	movs	r0, #5
 8001204:	f000 fc58 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001208:	2030      	movs	r0, #48	@ 0x30
 800120a:	f7ff ff73 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fc52 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001214:	2030      	movs	r0, #48	@ 0x30
 8001216:	f7ff ff6d 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f000 fc4c 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001220:	2020      	movs	r0, #32
 8001222:	f7ff ff67 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 fc46 	bl	8001ab8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800122c:	2028      	movs	r0, #40	@ 0x28
 800122e:	f7ff ff61 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 fc40 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001238:	2008      	movs	r0, #8
 800123a:	f7ff ff5b 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fc3a 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff55 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 fc34 	bl	8001ab8 <HAL_Delay>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fc31 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff ff4c 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f000 fc2b 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001262:	200c      	movs	r0, #12
 8001264:	f7ff ff46 	bl	80010f4 <lcd_send_cmd>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001274:	e006      	b.n	8001284 <lcd_send_string+0x18>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff68 	bl	8001154 <lcd_send_data>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f4      	bne.n	8001276 <lcd_send_string+0xa>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) { // Kiểm tra nếu ngắt từ TIM2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a6:	d105      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x1e>
        // Thực hiện tuần tự Task 1 → Task 2 → Task 3
        task1(); // Thực hiện Task 1
 80012a8:	f000 f924 	bl	80014f4 <task1>

        task2(); // Thực hiện Task 2
 80012ac:	f000 f92c 	bl	8001508 <task2>

        task3(); // Thực hiện Task 3
 80012b0:	f000 f95c 	bl	800156c <task3>

        // Kết thúc chương trình ngắt
    }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f000 fb98 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f812 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 f8f2 	bl	80014b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012cc:	f000 f878 	bl	80013c0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012d0:	f000 f848 	bl	8001364 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012d4:	f000 f8c2 	bl	800145c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012d8:	f7ff ff8b 	bl	80011f2 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2); // Bắt đầu timer với ngắt
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <main+0x2c>)
 80012de:	f001 ffcd 	bl	800327c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <main+0x26>
 80012e6:	bf00      	nop
 80012e8:	2000024c 	.word	0x2000024c

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	@ 0x40
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2228      	movs	r2, #40	@ 0x28
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fd49 	bl	8004d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fb4a 	bl	80029bc <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800132e:	f000 f957 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fdb8 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001356:	f000 f943 	bl	80015e0 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3740      	adds	r7, #64	@ 0x40
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <MX_I2C1_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_I2C1_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_I2C1_Init+0x50>)
 80013a2:	f000 fe6f 	bl	8002084 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 f918 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	40005400 	.word	0x40005400
 80013bc:	000186a0 	.word	0x000186a0

080013c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_TIM2_Init+0x98>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_TIM2_Init+0x98>)
 80013e6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_TIM2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_TIM2_Init+0x98>)
 80013f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_TIM2_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_TIM2_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <MX_TIM2_Init+0x98>)
 8001408:	f001 fee8 	bl	80031dc <HAL_TIM_Base_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001412:	f000 f8e5 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_TIM2_Init+0x98>)
 8001424:	f002 f86c 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800142e:	f000 f8d7 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	@ (8001458 <MX_TIM2_Init+0x98>)
 8001440:	f002 fa4e 	bl	80038e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800144a:	f000 f8c9 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000024c 	.word	0x2000024c

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f002 fa94 	bl	80039c0 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f89f 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000294 	.word	0x20000294
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <MX_GPIO_Init+0x40>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000

080014f4 <task1>:

/* USER CODE BEGIN 4 */
void task1(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	DHT_GetData(&dht);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <task1+0x10>)
 80014fa:	f7ff fd9f 	bl	800103c <DHT_GetData>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002dc 	.word	0x200002dc

08001508 <task2>:

void task2(){
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af04      	add	r7, sp, #16
	 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
	uint8_t length = snprintf(message, sizeof(message), "Nhiet do: %f va Do am: %f", dht.Temperature, dht.Humidity);
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <task2+0x54>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff88 	bl	8000428 <__aeabi_f2d>
 8001518:	4604      	mov	r4, r0
 800151a:	460d      	mov	r5, r1
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <task2+0x54>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800152e:	e9cd 4500 	strd	r4, r5, [sp]
 8001532:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <task2+0x58>)
 8001534:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <task2+0x5c>)
 800153a:	f003 fb93 	bl	8004c64 <sniprintf>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	b29a      	uxth	r2, r3
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	4906      	ldr	r1, [pc, #24]	@ (8001564 <task2+0x5c>)
 800154c:	4806      	ldr	r0, [pc, #24]	@ (8001568 <task2+0x60>)
 800154e:	f002 fa87 	bl	8003a60 <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	bf00      	nop
 800155c:	200002dc 	.word	0x200002dc
 8001560:	08008540 	.word	0x08008540
 8001564:	200002e4 	.word	0x200002e4
 8001568:	20000294 	.word	0x20000294

0800156c <task3>:

void task3(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af02      	add	r7, sp, #8
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	lcd_put_cur(0,0);
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe1d 	bl	80011b4 <lcd_put_cur>
	snprintf(temp,sizeof(temp),"Nhiet do: %f",dht.Temperature);
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <task3+0x60>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff52 	bl	8000428 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9cd 2300 	strd	r2, r3, [sp]
 800158c:	4a10      	ldr	r2, [pc, #64]	@ (80015d0 <task3+0x64>)
 800158e:	2132      	movs	r1, #50	@ 0x32
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <task3+0x68>)
 8001592:	f003 fb67 	bl	8004c64 <sniprintf>
	snprintf(humid,sizeof(humid),"Do am: %f",dht.Humidity);
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <task3+0x60>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff44 	bl	8000428 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9cd 2300 	strd	r2, r3, [sp]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <task3+0x6c>)
 80015aa:	2132      	movs	r1, #50	@ 0x32
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <task3+0x70>)
 80015ae:	f003 fb59 	bl	8004c64 <sniprintf>
	lcd_send_string(temp);
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <task3+0x68>)
 80015b4:	f7ff fe5a 	bl	800126c <lcd_send_string>
	lcd_put_cur(1,0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fdfa 	bl	80011b4 <lcd_put_cur>
	lcd_send_string(humid);
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <task3+0x70>)
 80015c2:	f7ff fe53 	bl	800126c <lcd_send_string>
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002dc 	.word	0x200002dc
 80015d0:	0800855c 	.word	0x0800855c
 80015d4:	20000410 	.word	0x20000410
 80015d8:	0800856c 	.word	0x0800856c
 80015dc:	20000444 	.word	0x20000444

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <Error_Handler+0x8>

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_MspInit+0x5c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <HAL_MspInit+0x5c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6193      	str	r3, [r2, #24]
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_MspInit+0x5c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x5c>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_MspInit+0x5c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_MspInit+0x60>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_MspInit+0x60>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_I2C_MspInit+0x70>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d123      	bne.n	80016b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001688:	23c0      	movs	r3, #192	@ 0xc0
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	480b      	ldr	r0, [pc, #44]	@ (80016c8 <HAL_I2C_MspInit+0x78>)
 800169c:	f000 fb3e 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	61d3      	str	r3, [r2, #28]
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_I2C_MspInit+0x74>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010c00 	.word	0x40010c00

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016dc:	d113      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201c      	movs	r0, #28
 80016fc:	f000 fad7 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001700:	201c      	movs	r0, #28
 8001702:	f000 faf0 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_UART_MspInit+0x8c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d131      	bne.n	8001798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_UART_MspInit+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	@ (80017a8 <HAL_UART_MspInit+0x94>)
 800177a:	f000 facf 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800177e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <HAL_UART_MspInit+0x94>)
 8001794:	f000 fac2 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <NMI_Handler+0x4>

080017b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <MemManage_Handler+0x4>

080017c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 f940 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <TIM2_IRQHandler+0x10>)
 800180a:	f001 fd89 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000024c 	.word	0x2000024c

08001818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <_kill>:

int _kill(int pid, int sig)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001830:	f003 fb02 	bl	8004e38 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	2216      	movs	r2, #22
 8001838:	601a      	str	r2, [r3, #0]
  return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_exit>:

void _exit (int status)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffe7 	bl	8001826 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <_exit+0x12>

0800185c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e00a      	b.n	8001884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186e:	f3af 8000 	nop.w
 8001872:	4601      	mov	r1, r0
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf0      	blt.n	800186e <_read+0x12>
  }

  return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e009      	b.n	80018bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf1      	blt.n	80018a8 <_write+0x12>
  }
  return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_close>:

int _close(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f4:	605a      	str	r2, [r3, #4]
  return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
	...

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f003 fa6a 	bl	8004e38 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20005000 	.word	0x20005000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000478 	.word	0x20000478
 8001998:	200005d0 	.word	0x200005d0

0800199c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff fff8 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	@ (80019dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ae:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c4:	4c09      	ldr	r4, [pc, #36]	@ (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f003 fa37 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fc71 	bl	80012bc <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019e4:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 80019e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019ec:	200005cc 	.word	0x200005cc

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f947 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fdec 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f95f 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 f927 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	2000047c 	.word	0x2000047c

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	@ (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	2000047c 	.word	0x2000047c

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffe0 	bl	8001aa4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	@ (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	@ 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e169      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8158 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a9a      	ldr	r2, [pc, #616]	@ (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a98      	ldr	r2, [pc, #608]	@ (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a98      	ldr	r2, [pc, #608]	@ (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a96      	ldr	r2, [pc, #600]	@ (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a96      	ldr	r2, [pc, #600]	@ (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a94      	ldr	r2, [pc, #592]	@ (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a94      	ldr	r2, [pc, #592]	@ (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a92      	ldr	r2, [pc, #584]	@ (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a92      	ldr	r2, [pc, #584]	@ (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a90      	ldr	r2, [pc, #576]	@ (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a79      	ldr	r2, [pc, #484]	@ (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	@ 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	@ 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80b1 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	@ (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	@ (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b2d      	ldr	r3, [pc, #180]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	492c      	ldr	r1, [pc, #176]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4928      	ldr	r1, [pc, #160]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4922      	ldr	r1, [pc, #136]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491e      	ldr	r1, [pc, #120]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4918      	ldr	r1, [pc, #96]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4914      	ldr	r1, [pc, #80]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	490e      	ldr	r1, [pc, #56]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x2e2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4909      	ldr	r1, [pc, #36]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae8e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	372c      	adds	r7, #44	@ 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002062:	787b      	ldrb	r3, [r7, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206e:	e003      	b.n	8002078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	611a      	str	r2, [r3, #16]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e12b      	b.n	80022ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fad0 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2224      	movs	r2, #36	@ 0x24
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e8:	f001 f832 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 80020ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a81      	ldr	r2, [pc, #516]	@ (80022f8 <HAL_I2C_Init+0x274>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d807      	bhi.n	8002108 <HAL_I2C_Init+0x84>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a80      	ldr	r2, [pc, #512]	@ (80022fc <HAL_I2C_Init+0x278>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bf94      	ite	ls
 8002100:	2301      	movls	r3, #1
 8002102:	2300      	movhi	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e006      	b.n	8002116 <HAL_I2C_Init+0x92>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a7d      	ldr	r2, [pc, #500]	@ (8002300 <HAL_I2C_Init+0x27c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0e7      	b.n	80022ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a78      	ldr	r2, [pc, #480]	@ (8002304 <HAL_I2C_Init+0x280>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0c9b      	lsrs	r3, r3, #18
 8002128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a6a      	ldr	r2, [pc, #424]	@ (80022f8 <HAL_I2C_Init+0x274>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d802      	bhi.n	8002158 <HAL_I2C_Init+0xd4>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3301      	adds	r3, #1
 8002156:	e009      	b.n	800216c <HAL_I2C_Init+0xe8>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	4a69      	ldr	r2, [pc, #420]	@ (8002308 <HAL_I2C_Init+0x284>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	3301      	adds	r3, #1
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800217e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	495c      	ldr	r1, [pc, #368]	@ (80022f8 <HAL_I2C_Init+0x274>)
 8002188:	428b      	cmp	r3, r1
 800218a:	d819      	bhi.n	80021c0 <HAL_I2C_Init+0x13c>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e59      	subs	r1, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fbb1 f3f3 	udiv	r3, r1, r3
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021a0:	400b      	ands	r3, r1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_I2C_Init+0x138>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1e59      	subs	r1, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ba:	e051      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 80021bc:	2304      	movs	r3, #4
 80021be:	e04f      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d111      	bne.n	80021ec <HAL_I2C_Init+0x168>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e58      	subs	r0, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e012      	b.n	8002212 <HAL_I2C_Init+0x18e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x196>
 8002216:	2301      	movs	r3, #1
 8002218:	e022      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10e      	bne.n	8002240 <HAL_I2C_Init+0x1bc>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e58      	subs	r0, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	440b      	add	r3, r1
 8002230:	fbb0 f3f3 	udiv	r3, r0, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800223e:	e00f      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800228e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6911      	ldr	r1, [r2, #16]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68d2      	ldr	r2, [r2, #12]
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	000186a0 	.word	0x000186a0
 80022fc:	001e847f 	.word	0x001e847f
 8002300:	003d08ff 	.word	0x003d08ff
 8002304:	431bde83 	.word	0x431bde83
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	460b      	mov	r3, r1
 800231a:	817b      	strh	r3, [r7, #10]
 800231c:	4613      	mov	r3, r2
 800231e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff fbc0 	bl	8001aa4 <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 80e0 	bne.w	80024f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	4970      	ldr	r1, [pc, #448]	@ (8002500 <HAL_I2C_Master_Transmit+0x1f4>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f964 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	e0d3      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_I2C_Master_Transmit+0x50>
 8002358:	2302      	movs	r3, #2
 800235a:	e0cc      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d007      	beq.n	8002382 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2221      	movs	r2, #33	@ 0x21
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_I2C_Master_Transmit+0x1f8>)
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023c4:	8979      	ldrh	r1, [r7, #10]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f89c 	bl	8002508 <I2C_MasterRequestWrite>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e08d      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023f0:	e066      	b.n	80024c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fa22 	bl	8002840 <I2C_WaitOnTXEFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b04      	cmp	r3, #4
 8002408:	d107      	bne.n	800241a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d11b      	bne.n	8002494 <HAL_I2C_Master_Transmit+0x188>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6a39      	ldr	r1, [r7, #32]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fa19 	bl	80028d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d107      	bne.n	80024bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e01a      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d194      	bne.n	80023f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	00100002 	.word	0x00100002
 8002504:	ffff0000 	.word	0xffff0000

08002508 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	460b      	mov	r3, r1
 8002516:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d006      	beq.n	8002532 <I2C_MasterRequestWrite+0x2a>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d003      	beq.n	8002532 <I2C_MasterRequestWrite+0x2a>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002530:	d108      	bne.n	8002544 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e00b      	b.n	800255c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	2b12      	cmp	r3, #18
 800254a:	d107      	bne.n	800255c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f84f 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002582:	d103      	bne.n	800258c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e035      	b.n	80025fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002598:	d108      	bne.n	80025ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e01b      	b.n	80025e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025ac:	897b      	ldrh	r3, [r7, #10]
 80025ae:	11db      	asrs	r3, r3, #7
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0306 	and.w	r3, r3, #6
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f063 030f 	orn	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	490e      	ldr	r1, [pc, #56]	@ (8002604 <I2C_MasterRequestWrite+0xfc>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f898 	bl	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e010      	b.n	80025fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4907      	ldr	r1, [pc, #28]	@ (8002608 <I2C_MasterRequestWrite+0x100>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f888 	bl	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	00010008 	.word	0x00010008
 8002608:	00010002 	.word	0x00010002

0800260c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261c:	e048      	b.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d044      	beq.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7ff fa3d 	bl	8001aa4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d139      	bne.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10d      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	43da      	mvns	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	e00c      	b.n	800267c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	429a      	cmp	r2, r3
 8002680:	d116      	bne.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e023      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10d      	bne.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	43da      	mvns	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	e00c      	b.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	43da      	mvns	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d093      	beq.n	800261e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270e:	e071      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	d123      	bne.n	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e067      	b.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d041      	beq.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002770:	f7ff f998 	bl	8001aa4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d136      	bne.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10c      	bne.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e00b      	b.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e021      	b.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10c      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e00b      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af6d 	bne.w	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800284c:	e034      	b.n	80028b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f886 	bl	8002960 <I2C_IsAcknowledgeFailed>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e034      	b.n	80028c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d028      	beq.n	80028b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7ff f91d 	bl	8001aa4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11d      	bne.n	80028b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	2b80      	cmp	r3, #128	@ 0x80
 8002888:	d016      	beq.n	80028b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e007      	b.n	80028c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	2b80      	cmp	r3, #128	@ 0x80
 80028c4:	d1c3      	bne.n	800284e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028dc:	e034      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f83e 	bl	8002960 <I2C_IsAcknowledgeFailed>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e034      	b.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d028      	beq.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f6:	f7ff f8d5 	bl	8001aa4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11d      	bne.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d016      	beq.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d1c3      	bne.n	80028de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002976:	d11b      	bne.n	80029b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e272      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8087 	beq.w	8002aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029dc:	4b92      	ldr	r3, [pc, #584]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d00c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d112      	bne.n	8002a1a <HAL_RCC_OscConfig+0x5e>
 80029f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d10b      	bne.n	8002a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a02:	4b89      	ldr	r3, [pc, #548]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d06c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x12c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d168      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e24c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x76>
 8002a24:	4b80      	ldr	r3, [pc, #512]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a7f      	ldr	r2, [pc, #508]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e02e      	b.n	8002a90 <HAL_RCC_OscConfig+0xd4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x98>
 8002a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b78      	ldr	r3, [pc, #480]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a77      	ldr	r2, [pc, #476]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0xd4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0xbc>
 8002a5e:	4b72      	ldr	r3, [pc, #456]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a71      	ldr	r2, [pc, #452]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0xd4>
 8002a78:	4b6b      	ldr	r3, [pc, #428]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a67      	ldr	r2, [pc, #412]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f804 	bl	8001aa4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f800 	bl	8001aa4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e200      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xe4>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fff0 	bl	8001aa4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe ffec 	bl	8001aa4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	@ 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1ec      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x10c>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b02:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x18c>
 8002b0e:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	4b43      	ldr	r3, [pc, #268]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x176>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e1c0      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4939      	ldr	r1, [pc, #228]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e03a      	b.n	8002bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe ffa5 	bl	8001aa4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe ffa1 	bl	8001aa4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1a1      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4927      	ldr	r1, [pc, #156]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe ff84 	bl	8001aa4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe ff80 	bl	8001aa4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e180      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03a      	beq.n	8002c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d019      	beq.n	8002c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fe ff64 	bl	8001aa4 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe ff60 	bl	8001aa4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e160      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f000 face 	bl	80031a0 <RCC_Delay>
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_RCC_OscConfig+0x274>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ff4a 	bl	8001aa4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c12:	e00f      	b.n	8002c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe ff46 	bl	8001aa4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d908      	bls.n	8002c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e146      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	42420000 	.word	0x42420000
 8002c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b92      	ldr	r3, [pc, #584]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e9      	bne.n	8002c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a6 	beq.w	8002d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b8b      	ldr	r3, [pc, #556]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b88      	ldr	r3, [pc, #544]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4a87      	ldr	r2, [pc, #540]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	61d3      	str	r3, [r2, #28]
 8002c6a:	4b85      	ldr	r3, [pc, #532]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b82      	ldr	r3, [pc, #520]	@ (8002e84 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b7f      	ldr	r3, [pc, #508]	@ (8002e84 <HAL_RCC_OscConfig+0x4c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e84 <HAL_RCC_OscConfig+0x4c8>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe ff07 	bl	8001aa4 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9a:	f7fe ff03 	bl	8001aa4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	@ 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e103      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b75      	ldr	r3, [pc, #468]	@ (8002e84 <HAL_RCC_OscConfig+0x4c8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x312>
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	e02d      	b.n	8002d2a <HAL_RCC_OscConfig+0x36e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x334>
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a69      	ldr	r2, [pc, #420]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	4b67      	ldr	r3, [pc, #412]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a66      	ldr	r2, [pc, #408]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	e01c      	b.n	8002d2a <HAL_RCC_OscConfig+0x36e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x356>
 8002cf8:	4b61      	ldr	r3, [pc, #388]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a60      	ldr	r2, [pc, #384]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	4b5e      	ldr	r3, [pc, #376]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a5d      	ldr	r2, [pc, #372]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x36e>
 8002d12:	4b5b      	ldr	r3, [pc, #364]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a5a      	ldr	r2, [pc, #360]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4b58      	ldr	r3, [pc, #352]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a57      	ldr	r2, [pc, #348]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe feb7 	bl	8001aa4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe feb3 	bl	8001aa4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0b1      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b4b      	ldr	r3, [pc, #300]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ee      	beq.n	8002d3a <HAL_RCC_OscConfig+0x37e>
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fea1 	bl	8001aa4 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fe9d 	bl	8001aa4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e09b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	4b40      	ldr	r3, [pc, #256]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a3b      	ldr	r2, [pc, #236]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8087 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da4:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d061      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d146      	bne.n	8002e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4b33      	ldr	r3, [pc, #204]	@ (8002e88 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fe71 	bl	8001aa4 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fe6d 	bl	8001aa4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e06d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	4b29      	ldr	r3, [pc, #164]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4921      	ldr	r1, [pc, #132]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e00:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a19      	ldr	r1, [r3, #32]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	430b      	orrs	r3, r1
 8002e12:	491b      	ldr	r1, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fe41 	bl	8001aa4 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fe fe3d 	bl	8001aa4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e03d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x46a>
 8002e44:	e035      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fe2a 	bl	8001aa4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fe26 	bl	8001aa4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e026      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x498>
 8002e72:	e01e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e019      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_OscConfig+0x500>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0d0      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d910      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b67      	ldr	r3, [pc, #412]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4965      	ldr	r1, [pc, #404]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b63      	ldr	r3, [pc, #396]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0b8      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a58      	ldr	r2, [pc, #352]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f34:	4b53      	ldr	r3, [pc, #332]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a52      	ldr	r2, [pc, #328]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b50      	ldr	r3, [pc, #320]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	494d      	ldr	r1, [pc, #308]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d040      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b47      	ldr	r3, [pc, #284]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d115      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07f      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b41      	ldr	r3, [pc, #260]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e073      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06b      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b39      	ldr	r3, [pc, #228]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4936      	ldr	r1, [pc, #216]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fd78 	bl	8001aa4 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fe fd74 	bl	8001aa4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e053      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b27      	ldr	r3, [pc, #156]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d210      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4922      	ldr	r1, [pc, #136]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e032      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4916      	ldr	r1, [pc, #88]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303a:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	490e      	ldr	r1, [pc, #56]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800304e:	f000 f821 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003052:	4602      	mov	r2, r0
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	490a      	ldr	r1, [pc, #40]	@ (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	5ccb      	ldrb	r3, [r1, r3]
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	4a09      	ldr	r2, [pc, #36]	@ (800308c <HAL_RCC_ClockConfig+0x1cc>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306a:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <HAL_RCC_ClockConfig+0x1d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fcd6 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	40021000 	.word	0x40021000
 8003088:	08008578 	.word	0x08008578
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x30>
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x36>
 80030c2:	e027      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 80030c6:	613b      	str	r3, [r7, #16]
      break;
 80030c8:	e027      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e2:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x94>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0c5b      	lsrs	r3, r3, #17
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a0d      	ldr	r2, [pc, #52]	@ (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f6:	fb03 f202 	mul.w	r2, r3, r2
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e004      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	613b      	str	r3, [r7, #16]
      break;
 8003112:	e002      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 8003116:	613b      	str	r3, [r7, #16]
      break;
 8003118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311a:	693b      	ldr	r3, [r7, #16]
}
 800311c:	4618      	mov	r0, r3
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200
 8003130:	08008590 	.word	0x08008590
 8003134:	080085a0 	.word	0x080085a0
 8003138:	003d0900 	.word	0x003d0900

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b02      	ldr	r3, [pc, #8]	@ (800314c <HAL_RCC_GetHCLKFreq+0x10>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003154:	f7ff fff2 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08008588 	.word	0x08008588

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317c:	f7ff ffde 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	08008588 	.word	0x08008588

080031a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031a8:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <RCC_Delay+0x34>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <RCC_Delay+0x38>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0a5b      	lsrs	r3, r3, #9
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031bc:	bf00      	nop
  }
  while (Delay --);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	60fa      	str	r2, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f9      	bne.n	80031bc <RCC_Delay+0x1c>
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000000 	.word	0x20000000
 80031d8:	10624dd3 	.word	0x10624dd3

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe fa62 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fa5c 	bl	80036d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03a      	b.n	800330a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_TIM_Base_Start_IT+0x98>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032be:	d009      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <HAL_TIM_Base_Start_IT+0x9c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a13      	ldr	r2, [pc, #76]	@ (800331c <HAL_TIM_Base_Start_IT+0xa0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d010      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	e007      	b.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0202 	mvn.w	r2, #2
 8003354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f998 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f98b 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f99a 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f972 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f965 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f974 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0208 	mvn.w	r2, #8
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2204      	movs	r2, #4
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f94c 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f93f 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f94e 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d020      	beq.n	8003468 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0210 	mvn.w	r2, #16
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2208      	movs	r2, #8
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f926 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f919 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f928 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd ff05 	bl	8001296 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa7f 	bl	80039ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8f8 	bl	80036c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0220 	mvn.w	r2, #32
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa52 	bl	800399c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIM_ConfigClockSource+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e0b4      	b.n	8003686 <HAL_TIM_ConfigClockSource+0x186>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003554:	d03e      	beq.n	80035d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355a:	f200 8087 	bhi.w	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003562:	f000 8086 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x172>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	d87f      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b70      	cmp	r3, #112	@ 0x70
 800356e:	d01a      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003570:	2b70      	cmp	r3, #112	@ 0x70
 8003572:	d87b      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b60      	cmp	r3, #96	@ 0x60
 8003576:	d050      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x11a>
 8003578:	2b60      	cmp	r3, #96	@ 0x60
 800357a:	d877      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b50      	cmp	r3, #80	@ 0x50
 800357e:	d03c      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0xfa>
 8003580:	2b50      	cmp	r3, #80	@ 0x50
 8003582:	d873      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b40      	cmp	r3, #64	@ 0x40
 8003586:	d058      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x13a>
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	d86f      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b30      	cmp	r3, #48	@ 0x30
 800358e:	d064      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b30      	cmp	r3, #48	@ 0x30
 8003592:	d86b      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d060      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d867      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05c      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d05a      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 80035a4:	e062      	b.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035b6:	f000 f974 	bl	80038a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	609a      	str	r2, [r3, #8]
      break;
 80035d2:	e04f      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035e4:	f000 f95d 	bl	80038a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035f6:	609a      	str	r2, [r3, #8]
      break;
 80035f8:	e03c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	461a      	mov	r2, r3
 8003608:	f000 f8d4 	bl	80037b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2150      	movs	r1, #80	@ 0x50
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f92b 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 8003618:	e02c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003626:	461a      	mov	r2, r3
 8003628:	f000 f8f2 	bl	8003810 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2160      	movs	r1, #96	@ 0x60
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f91b 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 8003638:	e01c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	461a      	mov	r2, r3
 8003648:	f000 f8b4 	bl	80037b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2140      	movs	r1, #64	@ 0x40
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f90b 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 8003658:	e00c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 f902 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800366a:	e003      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e000      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
	...

080036d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <TIM_Base_SetConfig+0xd0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f6:	d007      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a2c      	ldr	r2, [pc, #176]	@ (80037ac <TIM_Base_SetConfig+0xd4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a2b      	ldr	r2, [pc, #172]	@ (80037b0 <TIM_Base_SetConfig+0xd8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <TIM_Base_SetConfig+0xd0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1f      	ldr	r2, [pc, #124]	@ (80037ac <TIM_Base_SetConfig+0xd4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1e      	ldr	r2, [pc, #120]	@ (80037b0 <TIM_Base_SetConfig+0xd8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <TIM_Base_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]
  }
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800

080037b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0201 	bic.w	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 030a 	bic.w	r3, r3, #10
 80037f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0210 	bic.w	r2, r3, #16
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800383a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	031b      	lsls	r3, r3, #12
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800384c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	621a      	str	r2, [r3, #32]
}
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	f043 0307 	orr.w	r3, r3, #7
 8003890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	021a      	lsls	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	609a      	str	r2, [r3, #8]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e046      	b.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a16      	ldr	r2, [pc, #88]	@ (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003944:	d009      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d10c      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800

0800399c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e042      	b.n	8003a58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fe94 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f971 	bl	8003cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d175      	bne.n	8003b6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Transmit+0x2c>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e06e      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2221      	movs	r2, #33	@ 0x21
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f801 	bl	8001aa4 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02e      	b.n	8003b34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f848 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e03a      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3302      	adds	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e007      	b.n	8003b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1cb      	bne.n	8003ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f814 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	e03b      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d037      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fd ff88 	bl	8001aa4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e03a      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d020      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d01d      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d116      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f81d 	bl	8003c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e00f      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d0b4      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b095      	sub	sp, #84	@ 0x54
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d119      	bne.n	8003cd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc0:	61ba      	str	r2, [r7, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ce2:	bf00      	nop
 8003ce4:	3754      	adds	r7, #84	@ 0x54
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d26:	f023 030c 	bic.w	r3, r3, #12
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <UART_SetConfig+0x114>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d103      	bne.n	8003d5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7ff fa10 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	e002      	b.n	8003d62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f7ff f9f8 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009a      	lsls	r2, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <UART_SetConfig+0x118>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	0119      	lsls	r1, r3, #4
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d98:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <UART_SetConfig+0x118>)
 8003d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2064      	movs	r0, #100	@ 0x64
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	@ 0x32
 8003dac:	4a15      	ldr	r2, [pc, #84]	@ (8003e04 <UART_SetConfig+0x118>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db8:	4419      	add	r1, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009a      	lsls	r2, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <UART_SetConfig+0x118>)
 8003dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2064      	movs	r0, #100	@ 0x64
 8003dda:	fb00 f303 	mul.w	r3, r0, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	@ 0x32
 8003de4:	4a07      	ldr	r2, [pc, #28]	@ (8003e04 <UART_SetConfig+0x118>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	440a      	add	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40013800 	.word	0x40013800
 8003e04:	51eb851f 	.word	0x51eb851f

08003e08 <__cvt>:
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0e:	461d      	mov	r5, r3
 8003e10:	bfbb      	ittet	lt
 8003e12:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e16:	461d      	movlt	r5, r3
 8003e18:	2300      	movge	r3, #0
 8003e1a:	232d      	movlt	r3, #45	@ 0x2d
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	4614      	mov	r4, r2
 8003e20:	bfb8      	it	lt
 8003e22:	4614      	movlt	r4, r2
 8003e24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e28:	7013      	strb	r3, [r2, #0]
 8003e2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e30:	f023 0820 	bic.w	r8, r3, #32
 8003e34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e38:	d005      	beq.n	8003e46 <__cvt+0x3e>
 8003e3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e3e:	d100      	bne.n	8003e42 <__cvt+0x3a>
 8003e40:	3601      	adds	r6, #1
 8003e42:	2302      	movs	r3, #2
 8003e44:	e000      	b.n	8003e48 <__cvt+0x40>
 8003e46:	2303      	movs	r3, #3
 8003e48:	aa07      	add	r2, sp, #28
 8003e4a:	9204      	str	r2, [sp, #16]
 8003e4c:	aa06      	add	r2, sp, #24
 8003e4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e52:	e9cd 3600 	strd	r3, r6, [sp]
 8003e56:	4622      	mov	r2, r4
 8003e58:	462b      	mov	r3, r5
 8003e5a:	f001 f8b5 	bl	8004fc8 <_dtoa_r>
 8003e5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e62:	4607      	mov	r7, r0
 8003e64:	d119      	bne.n	8003e9a <__cvt+0x92>
 8003e66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003e68:	07db      	lsls	r3, r3, #31
 8003e6a:	d50e      	bpl.n	8003e8a <__cvt+0x82>
 8003e6c:	eb00 0906 	add.w	r9, r0, r6
 8003e70:	2200      	movs	r2, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8003e7c:	b108      	cbz	r0, 8003e82 <__cvt+0x7a>
 8003e7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e82:	2230      	movs	r2, #48	@ 0x30
 8003e84:	9b07      	ldr	r3, [sp, #28]
 8003e86:	454b      	cmp	r3, r9
 8003e88:	d31e      	bcc.n	8003ec8 <__cvt+0xc0>
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	9b07      	ldr	r3, [sp, #28]
 8003e8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003e90:	1bdb      	subs	r3, r3, r7
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	b008      	add	sp, #32
 8003e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e9e:	eb00 0906 	add.w	r9, r0, r6
 8003ea2:	d1e5      	bne.n	8003e70 <__cvt+0x68>
 8003ea4:	7803      	ldrb	r3, [r0, #0]
 8003ea6:	2b30      	cmp	r3, #48	@ 0x30
 8003ea8:	d10a      	bne.n	8003ec0 <__cvt+0xb8>
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2300      	movs	r3, #0
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f7fc fd79 	bl	80009a8 <__aeabi_dcmpeq>
 8003eb6:	b918      	cbnz	r0, 8003ec0 <__cvt+0xb8>
 8003eb8:	f1c6 0601 	rsb	r6, r6, #1
 8003ebc:	f8ca 6000 	str.w	r6, [sl]
 8003ec0:	f8da 3000 	ldr.w	r3, [sl]
 8003ec4:	4499      	add	r9, r3
 8003ec6:	e7d3      	b.n	8003e70 <__cvt+0x68>
 8003ec8:	1c59      	adds	r1, r3, #1
 8003eca:	9107      	str	r1, [sp, #28]
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e7d9      	b.n	8003e84 <__cvt+0x7c>

08003ed0 <__exponent>:
 8003ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	bfb6      	itet	lt
 8003ed6:	232d      	movlt	r3, #45	@ 0x2d
 8003ed8:	232b      	movge	r3, #43	@ 0x2b
 8003eda:	4249      	neglt	r1, r1
 8003edc:	2909      	cmp	r1, #9
 8003ede:	7002      	strb	r2, [r0, #0]
 8003ee0:	7043      	strb	r3, [r0, #1]
 8003ee2:	dd29      	ble.n	8003f38 <__exponent+0x68>
 8003ee4:	f10d 0307 	add.w	r3, sp, #7
 8003ee8:	461d      	mov	r5, r3
 8003eea:	270a      	movs	r7, #10
 8003eec:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	fb07 1416 	mls	r4, r7, r6, r1
 8003ef6:	3430      	adds	r4, #48	@ 0x30
 8003ef8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003efc:	460c      	mov	r4, r1
 8003efe:	2c63      	cmp	r4, #99	@ 0x63
 8003f00:	4631      	mov	r1, r6
 8003f02:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f06:	dcf1      	bgt.n	8003eec <__exponent+0x1c>
 8003f08:	3130      	adds	r1, #48	@ 0x30
 8003f0a:	1e94      	subs	r4, r2, #2
 8003f0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f10:	4623      	mov	r3, r4
 8003f12:	1c41      	adds	r1, r0, #1
 8003f14:	42ab      	cmp	r3, r5
 8003f16:	d30a      	bcc.n	8003f2e <__exponent+0x5e>
 8003f18:	f10d 0309 	add.w	r3, sp, #9
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	42ac      	cmp	r4, r5
 8003f20:	bf88      	it	hi
 8003f22:	2300      	movhi	r3, #0
 8003f24:	3302      	adds	r3, #2
 8003f26:	4403      	add	r3, r0
 8003f28:	1a18      	subs	r0, r3, r0
 8003f2a:	b003      	add	sp, #12
 8003f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f36:	e7ed      	b.n	8003f14 <__exponent+0x44>
 8003f38:	2330      	movs	r3, #48	@ 0x30
 8003f3a:	3130      	adds	r1, #48	@ 0x30
 8003f3c:	7083      	strb	r3, [r0, #2]
 8003f3e:	70c1      	strb	r1, [r0, #3]
 8003f40:	1d03      	adds	r3, r0, #4
 8003f42:	e7f1      	b.n	8003f28 <__exponent+0x58>

08003f44 <_printf_float>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	b091      	sub	sp, #68	@ 0x44
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003f50:	4616      	mov	r6, r2
 8003f52:	461f      	mov	r7, r3
 8003f54:	4605      	mov	r5, r0
 8003f56:	f000 ff25 	bl	8004da4 <_localeconv_r>
 8003f5a:	6803      	ldr	r3, [r0, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	9308      	str	r3, [sp, #32]
 8003f60:	f7fc f8f6 	bl	8000150 <strlen>
 8003f64:	2300      	movs	r3, #0
 8003f66:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f68:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f6e:	3307      	adds	r3, #7
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	f103 0208 	add.w	r2, r3, #8
 8003f78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f7c:	f8d4 b000 	ldr.w	fp, [r4]
 8003f80:	f8c8 2000 	str.w	r2, [r8]
 8003f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f8e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295
 8003f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004210 <_printf_float+0x2cc>)
 8003fa0:	f7fc fd34 	bl	8000a0c <__aeabi_dcmpun>
 8003fa4:	bb70      	cbnz	r0, 8004004 <_printf_float+0xc0>
 8003fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <_printf_float+0x2cc>)
 8003fb0:	f7fc fd0e 	bl	80009d0 <__aeabi_dcmple>
 8003fb4:	bb30      	cbnz	r0, 8004004 <_printf_float+0xc0>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	f7fc fcfd 	bl	80009bc <__aeabi_dcmplt>
 8003fc2:	b110      	cbz	r0, 8003fca <_printf_float+0x86>
 8003fc4:	232d      	movs	r3, #45	@ 0x2d
 8003fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fca:	4a92      	ldr	r2, [pc, #584]	@ (8004214 <_printf_float+0x2d0>)
 8003fcc:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <_printf_float+0x2d4>)
 8003fce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fd2:	bf94      	ite	ls
 8003fd4:	4690      	movls	r8, r2
 8003fd6:	4698      	movhi	r8, r3
 8003fd8:	2303      	movs	r3, #3
 8003fda:	f04f 0900 	mov.w	r9, #0
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	f02b 0304 	bic.w	r3, fp, #4
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	4633      	mov	r3, r6
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	9700      	str	r7, [sp, #0]
 8003fee:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003ff0:	f000 f9d4 	bl	800439c <_printf_common>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f040 8090 	bne.w	800411a <_printf_float+0x1d6>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	b011      	add	sp, #68	@ 0x44
 8004000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc fcfe 	bl	8000a0c <__aeabi_dcmpun>
 8004010:	b148      	cbz	r0, 8004026 <_printf_float+0xe2>
 8004012:	464b      	mov	r3, r9
 8004014:	2b00      	cmp	r3, #0
 8004016:	bfb8      	it	lt
 8004018:	232d      	movlt	r3, #45	@ 0x2d
 800401a:	4a80      	ldr	r2, [pc, #512]	@ (800421c <_printf_float+0x2d8>)
 800401c:	bfb8      	it	lt
 800401e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004022:	4b7f      	ldr	r3, [pc, #508]	@ (8004220 <_printf_float+0x2dc>)
 8004024:	e7d3      	b.n	8003fce <_printf_float+0x8a>
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	d13f      	bne.n	80040b0 <_printf_float+0x16c>
 8004030:	2306      	movs	r3, #6
 8004032:	6063      	str	r3, [r4, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	9206      	str	r2, [sp, #24]
 800403e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004040:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004044:	aa0d      	add	r2, sp, #52	@ 0x34
 8004046:	9203      	str	r2, [sp, #12]
 8004048:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800404c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	4642      	mov	r2, r8
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4628      	mov	r0, r5
 8004058:	464b      	mov	r3, r9
 800405a:	910a      	str	r1, [sp, #40]	@ 0x28
 800405c:	f7ff fed4 	bl	8003e08 <__cvt>
 8004060:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004062:	4680      	mov	r8, r0
 8004064:	2947      	cmp	r1, #71	@ 0x47
 8004066:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004068:	d128      	bne.n	80040bc <_printf_float+0x178>
 800406a:	1cc8      	adds	r0, r1, #3
 800406c:	db02      	blt.n	8004074 <_printf_float+0x130>
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	4299      	cmp	r1, r3
 8004072:	dd40      	ble.n	80040f6 <_printf_float+0x1b2>
 8004074:	f1aa 0a02 	sub.w	sl, sl, #2
 8004078:	fa5f fa8a 	uxtb.w	sl, sl
 800407c:	4652      	mov	r2, sl
 800407e:	3901      	subs	r1, #1
 8004080:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004084:	910d      	str	r1, [sp, #52]	@ 0x34
 8004086:	f7ff ff23 	bl	8003ed0 <__exponent>
 800408a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800408c:	4681      	mov	r9, r0
 800408e:	1813      	adds	r3, r2, r0
 8004090:	2a01      	cmp	r2, #1
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	dc02      	bgt.n	800409c <_printf_float+0x158>
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	07d2      	lsls	r2, r2, #31
 800409a:	d501      	bpl.n	80040a0 <_printf_float+0x15c>
 800409c:	3301      	adds	r3, #1
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d09e      	beq.n	8003fe6 <_printf_float+0xa2>
 80040a8:	232d      	movs	r3, #45	@ 0x2d
 80040aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ae:	e79a      	b.n	8003fe6 <_printf_float+0xa2>
 80040b0:	2947      	cmp	r1, #71	@ 0x47
 80040b2:	d1bf      	bne.n	8004034 <_printf_float+0xf0>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1bd      	bne.n	8004034 <_printf_float+0xf0>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e7ba      	b.n	8004032 <_printf_float+0xee>
 80040bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040c0:	d9dc      	bls.n	800407c <_printf_float+0x138>
 80040c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040c6:	d118      	bne.n	80040fa <_printf_float+0x1b6>
 80040c8:	2900      	cmp	r1, #0
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	dd0b      	ble.n	80040e6 <_printf_float+0x1a2>
 80040ce:	6121      	str	r1, [r4, #16]
 80040d0:	b913      	cbnz	r3, 80040d8 <_printf_float+0x194>
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	07d0      	lsls	r0, r2, #31
 80040d6:	d502      	bpl.n	80040de <_printf_float+0x19a>
 80040d8:	3301      	adds	r3, #1
 80040da:	440b      	add	r3, r1
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	f04f 0900 	mov.w	r9, #0
 80040e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040e4:	e7dc      	b.n	80040a0 <_printf_float+0x15c>
 80040e6:	b913      	cbnz	r3, 80040ee <_printf_float+0x1aa>
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	07d2      	lsls	r2, r2, #31
 80040ec:	d501      	bpl.n	80040f2 <_printf_float+0x1ae>
 80040ee:	3302      	adds	r3, #2
 80040f0:	e7f4      	b.n	80040dc <_printf_float+0x198>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7f2      	b.n	80040dc <_printf_float+0x198>
 80040f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040fc:	4299      	cmp	r1, r3
 80040fe:	db05      	blt.n	800410c <_printf_float+0x1c8>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	6121      	str	r1, [r4, #16]
 8004104:	07d8      	lsls	r0, r3, #31
 8004106:	d5ea      	bpl.n	80040de <_printf_float+0x19a>
 8004108:	1c4b      	adds	r3, r1, #1
 800410a:	e7e7      	b.n	80040dc <_printf_float+0x198>
 800410c:	2900      	cmp	r1, #0
 800410e:	bfcc      	ite	gt
 8004110:	2201      	movgt	r2, #1
 8004112:	f1c1 0202 	rsble	r2, r1, #2
 8004116:	4413      	add	r3, r2
 8004118:	e7e0      	b.n	80040dc <_printf_float+0x198>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	055a      	lsls	r2, r3, #21
 800411e:	d407      	bmi.n	8004130 <_printf_float+0x1ec>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	4642      	mov	r2, r8
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	d12b      	bne.n	8004186 <_printf_float+0x242>
 800412e:	e764      	b.n	8003ffa <_printf_float+0xb6>
 8004130:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004134:	f240 80dc 	bls.w	80042f0 <_printf_float+0x3ac>
 8004138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800413c:	2200      	movs	r2, #0
 800413e:	2300      	movs	r3, #0
 8004140:	f7fc fc32 	bl	80009a8 <__aeabi_dcmpeq>
 8004144:	2800      	cmp	r0, #0
 8004146:	d033      	beq.n	80041b0 <_printf_float+0x26c>
 8004148:	2301      	movs	r3, #1
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	4a35      	ldr	r2, [pc, #212]	@ (8004224 <_printf_float+0x2e0>)
 8004150:	47b8      	blx	r7
 8004152:	3001      	adds	r0, #1
 8004154:	f43f af51 	beq.w	8003ffa <_printf_float+0xb6>
 8004158:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800415c:	4543      	cmp	r3, r8
 800415e:	db02      	blt.n	8004166 <_printf_float+0x222>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	07d8      	lsls	r0, r3, #31
 8004164:	d50f      	bpl.n	8004186 <_printf_float+0x242>
 8004166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	f43f af42 	beq.w	8003ffa <_printf_float+0xb6>
 8004176:	f04f 0900 	mov.w	r9, #0
 800417a:	f108 38ff 	add.w	r8, r8, #4294967295
 800417e:	f104 0a1a 	add.w	sl, r4, #26
 8004182:	45c8      	cmp	r8, r9
 8004184:	dc09      	bgt.n	800419a <_printf_float+0x256>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	079b      	lsls	r3, r3, #30
 800418a:	f100 8102 	bmi.w	8004392 <_printf_float+0x44e>
 800418e:	68e0      	ldr	r0, [r4, #12]
 8004190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004192:	4298      	cmp	r0, r3
 8004194:	bfb8      	it	lt
 8004196:	4618      	movlt	r0, r3
 8004198:	e731      	b.n	8003ffe <_printf_float+0xba>
 800419a:	2301      	movs	r3, #1
 800419c:	4652      	mov	r2, sl
 800419e:	4631      	mov	r1, r6
 80041a0:	4628      	mov	r0, r5
 80041a2:	47b8      	blx	r7
 80041a4:	3001      	adds	r0, #1
 80041a6:	f43f af28 	beq.w	8003ffa <_printf_float+0xb6>
 80041aa:	f109 0901 	add.w	r9, r9, #1
 80041ae:	e7e8      	b.n	8004182 <_printf_float+0x23e>
 80041b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	dc38      	bgt.n	8004228 <_printf_float+0x2e4>
 80041b6:	2301      	movs	r3, #1
 80041b8:	4631      	mov	r1, r6
 80041ba:	4628      	mov	r0, r5
 80041bc:	4a19      	ldr	r2, [pc, #100]	@ (8004224 <_printf_float+0x2e0>)
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f af1a 	beq.w	8003ffa <_printf_float+0xb6>
 80041c6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80041ca:	ea59 0303 	orrs.w	r3, r9, r3
 80041ce:	d102      	bne.n	80041d6 <_printf_float+0x292>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	07d9      	lsls	r1, r3, #31
 80041d4:	d5d7      	bpl.n	8004186 <_printf_float+0x242>
 80041d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041da:	4631      	mov	r1, r6
 80041dc:	4628      	mov	r0, r5
 80041de:	47b8      	blx	r7
 80041e0:	3001      	adds	r0, #1
 80041e2:	f43f af0a 	beq.w	8003ffa <_printf_float+0xb6>
 80041e6:	f04f 0a00 	mov.w	sl, #0
 80041ea:	f104 0b1a 	add.w	fp, r4, #26
 80041ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041f0:	425b      	negs	r3, r3
 80041f2:	4553      	cmp	r3, sl
 80041f4:	dc01      	bgt.n	80041fa <_printf_float+0x2b6>
 80041f6:	464b      	mov	r3, r9
 80041f8:	e793      	b.n	8004122 <_printf_float+0x1de>
 80041fa:	2301      	movs	r3, #1
 80041fc:	465a      	mov	r2, fp
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f aef8 	beq.w	8003ffa <_printf_float+0xb6>
 800420a:	f10a 0a01 	add.w	sl, sl, #1
 800420e:	e7ee      	b.n	80041ee <_printf_float+0x2aa>
 8004210:	7fefffff 	.word	0x7fefffff
 8004214:	080085a2 	.word	0x080085a2
 8004218:	080085a6 	.word	0x080085a6
 800421c:	080085aa 	.word	0x080085aa
 8004220:	080085ae 	.word	0x080085ae
 8004224:	080085b2 	.word	0x080085b2
 8004228:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800422a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800422e:	4553      	cmp	r3, sl
 8004230:	bfa8      	it	ge
 8004232:	4653      	movge	r3, sl
 8004234:	2b00      	cmp	r3, #0
 8004236:	4699      	mov	r9, r3
 8004238:	dc36      	bgt.n	80042a8 <_printf_float+0x364>
 800423a:	f04f 0b00 	mov.w	fp, #0
 800423e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004242:	f104 021a 	add.w	r2, r4, #26
 8004246:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004248:	930a      	str	r3, [sp, #40]	@ 0x28
 800424a:	eba3 0309 	sub.w	r3, r3, r9
 800424e:	455b      	cmp	r3, fp
 8004250:	dc31      	bgt.n	80042b6 <_printf_float+0x372>
 8004252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004254:	459a      	cmp	sl, r3
 8004256:	dc3a      	bgt.n	80042ce <_printf_float+0x38a>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07da      	lsls	r2, r3, #31
 800425c:	d437      	bmi.n	80042ce <_printf_float+0x38a>
 800425e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004260:	ebaa 0903 	sub.w	r9, sl, r3
 8004264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004266:	ebaa 0303 	sub.w	r3, sl, r3
 800426a:	4599      	cmp	r9, r3
 800426c:	bfa8      	it	ge
 800426e:	4699      	movge	r9, r3
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	dc33      	bgt.n	80042de <_printf_float+0x39a>
 8004276:	f04f 0800 	mov.w	r8, #0
 800427a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800427e:	f104 0b1a 	add.w	fp, r4, #26
 8004282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004284:	ebaa 0303 	sub.w	r3, sl, r3
 8004288:	eba3 0309 	sub.w	r3, r3, r9
 800428c:	4543      	cmp	r3, r8
 800428e:	f77f af7a 	ble.w	8004186 <_printf_float+0x242>
 8004292:	2301      	movs	r3, #1
 8004294:	465a      	mov	r2, fp
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	47b8      	blx	r7
 800429c:	3001      	adds	r0, #1
 800429e:	f43f aeac 	beq.w	8003ffa <_printf_float+0xb6>
 80042a2:	f108 0801 	add.w	r8, r8, #1
 80042a6:	e7ec      	b.n	8004282 <_printf_float+0x33e>
 80042a8:	4642      	mov	r2, r8
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	d1c2      	bne.n	800423a <_printf_float+0x2f6>
 80042b4:	e6a1      	b.n	8003ffa <_printf_float+0xb6>
 80042b6:	2301      	movs	r3, #1
 80042b8:	4631      	mov	r1, r6
 80042ba:	4628      	mov	r0, r5
 80042bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae9a 	beq.w	8003ffa <_printf_float+0xb6>
 80042c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042c8:	f10b 0b01 	add.w	fp, fp, #1
 80042cc:	e7bb      	b.n	8004246 <_printf_float+0x302>
 80042ce:	4631      	mov	r1, r6
 80042d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	d1c0      	bne.n	800425e <_printf_float+0x31a>
 80042dc:	e68d      	b.n	8003ffa <_printf_float+0xb6>
 80042de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042e0:	464b      	mov	r3, r9
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	4442      	add	r2, r8
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	d1c3      	bne.n	8004276 <_printf_float+0x332>
 80042ee:	e684      	b.n	8003ffa <_printf_float+0xb6>
 80042f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80042f4:	f1ba 0f01 	cmp.w	sl, #1
 80042f8:	dc01      	bgt.n	80042fe <_printf_float+0x3ba>
 80042fa:	07db      	lsls	r3, r3, #31
 80042fc:	d536      	bpl.n	800436c <_printf_float+0x428>
 80042fe:	2301      	movs	r3, #1
 8004300:	4642      	mov	r2, r8
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	f43f ae76 	beq.w	8003ffa <_printf_float+0xb6>
 800430e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	f43f ae6e 	beq.w	8003ffa <_printf_float+0xb6>
 800431e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004322:	2200      	movs	r2, #0
 8004324:	2300      	movs	r3, #0
 8004326:	f10a 3aff 	add.w	sl, sl, #4294967295
 800432a:	f7fc fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800432e:	b9c0      	cbnz	r0, 8004362 <_printf_float+0x41e>
 8004330:	4653      	mov	r3, sl
 8004332:	f108 0201 	add.w	r2, r8, #1
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	d10c      	bne.n	800435a <_printf_float+0x416>
 8004340:	e65b      	b.n	8003ffa <_printf_float+0xb6>
 8004342:	2301      	movs	r3, #1
 8004344:	465a      	mov	r2, fp
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	f43f ae54 	beq.w	8003ffa <_printf_float+0xb6>
 8004352:	f108 0801 	add.w	r8, r8, #1
 8004356:	45d0      	cmp	r8, sl
 8004358:	dbf3      	blt.n	8004342 <_printf_float+0x3fe>
 800435a:	464b      	mov	r3, r9
 800435c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004360:	e6e0      	b.n	8004124 <_printf_float+0x1e0>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	f104 0b1a 	add.w	fp, r4, #26
 800436a:	e7f4      	b.n	8004356 <_printf_float+0x412>
 800436c:	2301      	movs	r3, #1
 800436e:	4642      	mov	r2, r8
 8004370:	e7e1      	b.n	8004336 <_printf_float+0x3f2>
 8004372:	2301      	movs	r3, #1
 8004374:	464a      	mov	r2, r9
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	47b8      	blx	r7
 800437c:	3001      	adds	r0, #1
 800437e:	f43f ae3c 	beq.w	8003ffa <_printf_float+0xb6>
 8004382:	f108 0801 	add.w	r8, r8, #1
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800438a:	1a5b      	subs	r3, r3, r1
 800438c:	4543      	cmp	r3, r8
 800438e:	dcf0      	bgt.n	8004372 <_printf_float+0x42e>
 8004390:	e6fd      	b.n	800418e <_printf_float+0x24a>
 8004392:	f04f 0800 	mov.w	r8, #0
 8004396:	f104 0919 	add.w	r9, r4, #25
 800439a:	e7f4      	b.n	8004386 <_printf_float+0x442>

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4698      	mov	r8, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4607      	mov	r7, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfb8      	it	lt
 80043ae:	4613      	movlt	r3, r2
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc2b      	bgt.n	800443c <_printf_common+0xa0>
 80043e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	3b00      	subs	r3, #0
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d430      	bmi.n	8004456 <_printf_common+0xba>
 80043f4:	4641      	mov	r1, r8
 80043f6:	4638      	mov	r0, r7
 80043f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043fc:	47c8      	blx	r9
 80043fe:	3001      	adds	r0, #1
 8004400:	d023      	beq.n	800444a <_printf_common+0xae>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf14      	ite	ne
 800440e:	2500      	movne	r5, #0
 8004410:	6833      	ldreq	r3, [r6, #0]
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	bf08      	it	eq
 8004418:	68e5      	ldreq	r5, [r4, #12]
 800441a:	f104 041a 	add.w	r4, r4, #26
 800441e:	bf08      	it	eq
 8004420:	1aed      	subeq	r5, r5, r3
 8004422:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004426:	bf08      	it	eq
 8004428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800442c:	4293      	cmp	r3, r2
 800442e:	bfc4      	itt	gt
 8004430:	1a9b      	subgt	r3, r3, r2
 8004432:	18ed      	addgt	r5, r5, r3
 8004434:	42b5      	cmp	r5, r6
 8004436:	d11a      	bne.n	800446e <_printf_common+0xd2>
 8004438:	2000      	movs	r0, #0
 800443a:	e008      	b.n	800444e <_printf_common+0xb2>
 800443c:	2301      	movs	r3, #1
 800443e:	4652      	mov	r2, sl
 8004440:	4641      	mov	r1, r8
 8004442:	4638      	mov	r0, r7
 8004444:	47c8      	blx	r9
 8004446:	3001      	adds	r0, #1
 8004448:	d103      	bne.n	8004452 <_printf_common+0xb6>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	3501      	adds	r5, #1
 8004454:	e7c1      	b.n	80043da <_printf_common+0x3e>
 8004456:	2030      	movs	r0, #48	@ 0x30
 8004458:	18e1      	adds	r1, r4, r3
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004464:	4422      	add	r2, r4
 8004466:	3302      	adds	r3, #2
 8004468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800446c:	e7c2      	b.n	80043f4 <_printf_common+0x58>
 800446e:	2301      	movs	r3, #1
 8004470:	4622      	mov	r2, r4
 8004472:	4641      	mov	r1, r8
 8004474:	4638      	mov	r0, r7
 8004476:	47c8      	blx	r9
 8004478:	3001      	adds	r0, #1
 800447a:	d0e6      	beq.n	800444a <_printf_common+0xae>
 800447c:	3601      	adds	r6, #1
 800447e:	e7d9      	b.n	8004434 <_printf_common+0x98>

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	7e0f      	ldrb	r7, [r1, #24]
 8004486:	4691      	mov	r9, r2
 8004488:	2f78      	cmp	r7, #120	@ 0x78
 800448a:	4680      	mov	r8, r0
 800448c:	460c      	mov	r4, r1
 800448e:	469a      	mov	sl, r3
 8004490:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	@ 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d3 	beq.w	8004648 <_printf_i+0x1c8>
 80044a2:	2f58      	cmp	r7, #88	@ 0x58
 80044a4:	f000 80ba 	beq.w	800461c <_printf_i+0x19c>
 80044a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a101      	add	r1, pc, #4	@ (adr r1, 80044c0 <_printf_i+0x40>)
 80044bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	0800462f 	.word	0x0800462f
 80044f0:	08004557 	.word	0x08004557
 80044f4:	080045e9 	.word	0x080045e9
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	08004651 	.word	0x08004651
 8004504:	080044a9 	.word	0x080044a9
 8004508:	08004557 	.word	0x08004557
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	080045f1 	.word	0x080045f1
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6032      	str	r2, [r6, #0]
 8004520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e09e      	b.n	800466a <_printf_i+0x1ea>
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6031      	str	r1, [r6, #0]
 8004534:	0606      	lsls	r6, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xbc>
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	e003      	b.n	8004544 <_printf_i+0xc4>
 800453c:	0645      	lsls	r5, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xb8>
 8004540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004544:	2d00      	cmp	r5, #0
 8004546:	da03      	bge.n	8004550 <_printf_i+0xd0>
 8004548:	232d      	movs	r3, #45	@ 0x2d
 800454a:	426d      	negs	r5, r5
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004550:	230a      	movs	r3, #10
 8004552:	4859      	ldr	r0, [pc, #356]	@ (80046b8 <_printf_i+0x238>)
 8004554:	e011      	b.n	800457a <_printf_i+0xfa>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	0608      	lsls	r0, r1, #24
 800455c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0xe8>
 8004562:	0649      	lsls	r1, r1, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	2f6f      	cmp	r7, #111	@ 0x6f
 800456a:	6033      	str	r3, [r6, #0]
 800456c:	bf14      	ite	ne
 800456e:	230a      	movne	r3, #10
 8004570:	2308      	moveq	r3, #8
 8004572:	4851      	ldr	r0, [pc, #324]	@ (80046b8 <_printf_i+0x238>)
 8004574:	2100      	movs	r1, #0
 8004576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800457a:	6866      	ldr	r6, [r4, #4]
 800457c:	2e00      	cmp	r6, #0
 800457e:	bfa8      	it	ge
 8004580:	6821      	ldrge	r1, [r4, #0]
 8004582:	60a6      	str	r6, [r4, #8]
 8004584:	bfa4      	itt	ge
 8004586:	f021 0104 	bicge.w	r1, r1, #4
 800458a:	6021      	strge	r1, [r4, #0]
 800458c:	b90d      	cbnz	r5, 8004592 <_printf_i+0x112>
 800458e:	2e00      	cmp	r6, #0
 8004590:	d04b      	beq.n	800462a <_printf_i+0x1aa>
 8004592:	4616      	mov	r6, r2
 8004594:	fbb5 f1f3 	udiv	r1, r5, r3
 8004598:	fb03 5711 	mls	r7, r3, r1, r5
 800459c:	5dc7      	ldrb	r7, [r0, r7]
 800459e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a2:	462f      	mov	r7, r5
 80045a4:	42bb      	cmp	r3, r7
 80045a6:	460d      	mov	r5, r1
 80045a8:	d9f4      	bls.n	8004594 <_printf_i+0x114>
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d10b      	bne.n	80045c6 <_printf_i+0x146>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	07df      	lsls	r7, r3, #31
 80045b2:	d508      	bpl.n	80045c6 <_printf_i+0x146>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6861      	ldr	r1, [r4, #4]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	bfde      	ittt	le
 80045bc:	2330      	movle	r3, #48	@ 0x30
 80045be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c6:	1b92      	subs	r2, r2, r6
 80045c8:	6122      	str	r2, [r4, #16]
 80045ca:	464b      	mov	r3, r9
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f8cd a000 	str.w	sl, [sp]
 80045d4:	aa03      	add	r2, sp, #12
 80045d6:	f7ff fee1 	bl	800439c <_printf_common>
 80045da:	3001      	adds	r0, #1
 80045dc:	d14a      	bne.n	8004674 <_printf_i+0x1f4>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	b004      	add	sp, #16
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f043 0320 	orr.w	r3, r3, #32
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	2778      	movs	r7, #120	@ 0x78
 80045f2:	4832      	ldr	r0, [pc, #200]	@ (80046bc <_printf_i+0x23c>)
 80045f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	061f      	lsls	r7, r3, #24
 80045fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004602:	d402      	bmi.n	800460a <_printf_i+0x18a>
 8004604:	065f      	lsls	r7, r3, #25
 8004606:	bf48      	it	mi
 8004608:	b2ad      	uxthmi	r5, r5
 800460a:	6031      	str	r1, [r6, #0]
 800460c:	07d9      	lsls	r1, r3, #31
 800460e:	bf44      	itt	mi
 8004610:	f043 0320 	orrmi.w	r3, r3, #32
 8004614:	6023      	strmi	r3, [r4, #0]
 8004616:	b11d      	cbz	r5, 8004620 <_printf_i+0x1a0>
 8004618:	2310      	movs	r3, #16
 800461a:	e7ab      	b.n	8004574 <_printf_i+0xf4>
 800461c:	4826      	ldr	r0, [pc, #152]	@ (80046b8 <_printf_i+0x238>)
 800461e:	e7e9      	b.n	80045f4 <_printf_i+0x174>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	e7f6      	b.n	8004618 <_printf_i+0x198>
 800462a:	4616      	mov	r6, r2
 800462c:	e7bd      	b.n	80045aa <_printf_i+0x12a>
 800462e:	6833      	ldr	r3, [r6, #0]
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	1d18      	adds	r0, r3, #4
 8004634:	6961      	ldr	r1, [r4, #20]
 8004636:	6030      	str	r0, [r6, #0]
 8004638:	062e      	lsls	r6, r5, #24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	d501      	bpl.n	8004642 <_printf_i+0x1c2>
 800463e:	6019      	str	r1, [r3, #0]
 8004640:	e002      	b.n	8004648 <_printf_i+0x1c8>
 8004642:	0668      	lsls	r0, r5, #25
 8004644:	d5fb      	bpl.n	800463e <_printf_i+0x1be>
 8004646:	8019      	strh	r1, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	4616      	mov	r6, r2
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	e7bc      	b.n	80045ca <_printf_i+0x14a>
 8004650:	6833      	ldr	r3, [r6, #0]
 8004652:	2100      	movs	r1, #0
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	6032      	str	r2, [r6, #0]
 8004658:	681e      	ldr	r6, [r3, #0]
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	4630      	mov	r0, r6
 800465e:	f000 fc18 	bl	8004e92 <memchr>
 8004662:	b108      	cbz	r0, 8004668 <_printf_i+0x1e8>
 8004664:	1b80      	subs	r0, r0, r6
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2300      	movs	r3, #0
 800466e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004672:	e7aa      	b.n	80045ca <_printf_i+0x14a>
 8004674:	4632      	mov	r2, r6
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	47d0      	blx	sl
 800467e:	3001      	adds	r0, #1
 8004680:	d0ad      	beq.n	80045de <_printf_i+0x15e>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d413      	bmi.n	80046b0 <_printf_i+0x230>
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4298      	cmp	r0, r3
 800468e:	bfb8      	it	lt
 8004690:	4618      	movlt	r0, r3
 8004692:	e7a6      	b.n	80045e2 <_printf_i+0x162>
 8004694:	2301      	movs	r3, #1
 8004696:	4632      	mov	r2, r6
 8004698:	4649      	mov	r1, r9
 800469a:	4640      	mov	r0, r8
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d09d      	beq.n	80045de <_printf_i+0x15e>
 80046a2:	3501      	adds	r5, #1
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	9903      	ldr	r1, [sp, #12]
 80046a8:	1a5b      	subs	r3, r3, r1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dcf2      	bgt.n	8004694 <_printf_i+0x214>
 80046ae:	e7eb      	b.n	8004688 <_printf_i+0x208>
 80046b0:	2500      	movs	r5, #0
 80046b2:	f104 0619 	add.w	r6, r4, #25
 80046b6:	e7f5      	b.n	80046a4 <_printf_i+0x224>
 80046b8:	080085b4 	.word	0x080085b4
 80046bc:	080085c5 	.word	0x080085c5

080046c0 <_scanf_float>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	b087      	sub	sp, #28
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	688b      	ldr	r3, [r1, #8]
 80046ca:	4617      	mov	r7, r2
 80046cc:	1e5a      	subs	r2, r3, #1
 80046ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80046d2:	bf82      	ittt	hi
 80046d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80046d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80046dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80046e0:	460a      	mov	r2, r1
 80046e2:	f04f 0500 	mov.w	r5, #0
 80046e6:	bf88      	it	hi
 80046e8:	608b      	strhi	r3, [r1, #8]
 80046ea:	680b      	ldr	r3, [r1, #0]
 80046ec:	4680      	mov	r8, r0
 80046ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80046f2:	f842 3b1c 	str.w	r3, [r2], #28
 80046f6:	460c      	mov	r4, r1
 80046f8:	bf98      	it	ls
 80046fa:	f04f 0b00 	movls.w	fp, #0
 80046fe:	4616      	mov	r6, r2
 8004700:	46aa      	mov	sl, r5
 8004702:	46a9      	mov	r9, r5
 8004704:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004708:	9201      	str	r2, [sp, #4]
 800470a:	9502      	str	r5, [sp, #8]
 800470c:	68a2      	ldr	r2, [r4, #8]
 800470e:	b152      	cbz	r2, 8004726 <_scanf_float+0x66>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b4e      	cmp	r3, #78	@ 0x4e
 8004716:	d865      	bhi.n	80047e4 <_scanf_float+0x124>
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d83d      	bhi.n	8004798 <_scanf_float+0xd8>
 800471c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004720:	b2c8      	uxtb	r0, r1
 8004722:	280e      	cmp	r0, #14
 8004724:	d93b      	bls.n	800479e <_scanf_float+0xde>
 8004726:	f1b9 0f00 	cmp.w	r9, #0
 800472a:	d003      	beq.n	8004734 <_scanf_float+0x74>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004738:	f1ba 0f01 	cmp.w	sl, #1
 800473c:	f200 8118 	bhi.w	8004970 <_scanf_float+0x2b0>
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	429e      	cmp	r6, r3
 8004744:	f200 8109 	bhi.w	800495a <_scanf_float+0x29a>
 8004748:	2001      	movs	r0, #1
 800474a:	b007      	add	sp, #28
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004754:	2a0d      	cmp	r2, #13
 8004756:	d8e6      	bhi.n	8004726 <_scanf_float+0x66>
 8004758:	a101      	add	r1, pc, #4	@ (adr r1, 8004760 <_scanf_float+0xa0>)
 800475a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800475e:	bf00      	nop
 8004760:	080048a7 	.word	0x080048a7
 8004764:	08004727 	.word	0x08004727
 8004768:	08004727 	.word	0x08004727
 800476c:	08004727 	.word	0x08004727
 8004770:	08004907 	.word	0x08004907
 8004774:	080048df 	.word	0x080048df
 8004778:	08004727 	.word	0x08004727
 800477c:	08004727 	.word	0x08004727
 8004780:	080048b5 	.word	0x080048b5
 8004784:	08004727 	.word	0x08004727
 8004788:	08004727 	.word	0x08004727
 800478c:	08004727 	.word	0x08004727
 8004790:	08004727 	.word	0x08004727
 8004794:	0800486d 	.word	0x0800486d
 8004798:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800479c:	e7da      	b.n	8004754 <_scanf_float+0x94>
 800479e:	290e      	cmp	r1, #14
 80047a0:	d8c1      	bhi.n	8004726 <_scanf_float+0x66>
 80047a2:	a001      	add	r0, pc, #4	@ (adr r0, 80047a8 <_scanf_float+0xe8>)
 80047a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80047a8:	0800485d 	.word	0x0800485d
 80047ac:	08004727 	.word	0x08004727
 80047b0:	0800485d 	.word	0x0800485d
 80047b4:	080048f3 	.word	0x080048f3
 80047b8:	08004727 	.word	0x08004727
 80047bc:	08004805 	.word	0x08004805
 80047c0:	08004843 	.word	0x08004843
 80047c4:	08004843 	.word	0x08004843
 80047c8:	08004843 	.word	0x08004843
 80047cc:	08004843 	.word	0x08004843
 80047d0:	08004843 	.word	0x08004843
 80047d4:	08004843 	.word	0x08004843
 80047d8:	08004843 	.word	0x08004843
 80047dc:	08004843 	.word	0x08004843
 80047e0:	08004843 	.word	0x08004843
 80047e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80047e6:	d809      	bhi.n	80047fc <_scanf_float+0x13c>
 80047e8:	2b60      	cmp	r3, #96	@ 0x60
 80047ea:	d8b1      	bhi.n	8004750 <_scanf_float+0x90>
 80047ec:	2b54      	cmp	r3, #84	@ 0x54
 80047ee:	d07b      	beq.n	80048e8 <_scanf_float+0x228>
 80047f0:	2b59      	cmp	r3, #89	@ 0x59
 80047f2:	d198      	bne.n	8004726 <_scanf_float+0x66>
 80047f4:	2d07      	cmp	r5, #7
 80047f6:	d196      	bne.n	8004726 <_scanf_float+0x66>
 80047f8:	2508      	movs	r5, #8
 80047fa:	e02c      	b.n	8004856 <_scanf_float+0x196>
 80047fc:	2b74      	cmp	r3, #116	@ 0x74
 80047fe:	d073      	beq.n	80048e8 <_scanf_float+0x228>
 8004800:	2b79      	cmp	r3, #121	@ 0x79
 8004802:	e7f6      	b.n	80047f2 <_scanf_float+0x132>
 8004804:	6821      	ldr	r1, [r4, #0]
 8004806:	05c8      	lsls	r0, r1, #23
 8004808:	d51b      	bpl.n	8004842 <_scanf_float+0x182>
 800480a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800480e:	6021      	str	r1, [r4, #0]
 8004810:	f109 0901 	add.w	r9, r9, #1
 8004814:	f1bb 0f00 	cmp.w	fp, #0
 8004818:	d003      	beq.n	8004822 <_scanf_float+0x162>
 800481a:	3201      	adds	r2, #1
 800481c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004820:	60a2      	str	r2, [r4, #8]
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	3b01      	subs	r3, #1
 8004826:	60a3      	str	r3, [r4, #8]
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	3301      	adds	r3, #1
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3b01      	subs	r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	f340 8087 	ble.w	8004948 <_scanf_float+0x288>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	e764      	b.n	800470c <_scanf_float+0x4c>
 8004842:	eb1a 0105 	adds.w	r1, sl, r5
 8004846:	f47f af6e 	bne.w	8004726 <_scanf_float+0x66>
 800484a:	460d      	mov	r5, r1
 800484c:	468a      	mov	sl, r1
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	f806 3b01 	strb.w	r3, [r6], #1
 800485a:	e7e2      	b.n	8004822 <_scanf_float+0x162>
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	0610      	lsls	r0, r2, #24
 8004860:	f57f af61 	bpl.w	8004726 <_scanf_float+0x66>
 8004864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	e7f4      	b.n	8004856 <_scanf_float+0x196>
 800486c:	f1ba 0f00 	cmp.w	sl, #0
 8004870:	d10e      	bne.n	8004890 <_scanf_float+0x1d0>
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	d10e      	bne.n	8004896 <_scanf_float+0x1d6>
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800487e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004882:	d108      	bne.n	8004896 <_scanf_float+0x1d6>
 8004884:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004888:	f04f 0a01 	mov.w	sl, #1
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	e7e2      	b.n	8004856 <_scanf_float+0x196>
 8004890:	f1ba 0f02 	cmp.w	sl, #2
 8004894:	d055      	beq.n	8004942 <_scanf_float+0x282>
 8004896:	2d01      	cmp	r5, #1
 8004898:	d002      	beq.n	80048a0 <_scanf_float+0x1e0>
 800489a:	2d04      	cmp	r5, #4
 800489c:	f47f af43 	bne.w	8004726 <_scanf_float+0x66>
 80048a0:	3501      	adds	r5, #1
 80048a2:	b2ed      	uxtb	r5, r5
 80048a4:	e7d7      	b.n	8004856 <_scanf_float+0x196>
 80048a6:	f1ba 0f01 	cmp.w	sl, #1
 80048aa:	f47f af3c 	bne.w	8004726 <_scanf_float+0x66>
 80048ae:	f04f 0a02 	mov.w	sl, #2
 80048b2:	e7d0      	b.n	8004856 <_scanf_float+0x196>
 80048b4:	b97d      	cbnz	r5, 80048d6 <_scanf_float+0x216>
 80048b6:	f1b9 0f00 	cmp.w	r9, #0
 80048ba:	f47f af37 	bne.w	800472c <_scanf_float+0x6c>
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048c8:	f040 8103 	bne.w	8004ad2 <_scanf_float+0x412>
 80048cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048d0:	2501      	movs	r5, #1
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	e7bf      	b.n	8004856 <_scanf_float+0x196>
 80048d6:	2d03      	cmp	r5, #3
 80048d8:	d0e2      	beq.n	80048a0 <_scanf_float+0x1e0>
 80048da:	2d05      	cmp	r5, #5
 80048dc:	e7de      	b.n	800489c <_scanf_float+0x1dc>
 80048de:	2d02      	cmp	r5, #2
 80048e0:	f47f af21 	bne.w	8004726 <_scanf_float+0x66>
 80048e4:	2503      	movs	r5, #3
 80048e6:	e7b6      	b.n	8004856 <_scanf_float+0x196>
 80048e8:	2d06      	cmp	r5, #6
 80048ea:	f47f af1c 	bne.w	8004726 <_scanf_float+0x66>
 80048ee:	2507      	movs	r5, #7
 80048f0:	e7b1      	b.n	8004856 <_scanf_float+0x196>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	0591      	lsls	r1, r2, #22
 80048f6:	f57f af16 	bpl.w	8004726 <_scanf_float+0x66>
 80048fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	f8cd 9008 	str.w	r9, [sp, #8]
 8004904:	e7a7      	b.n	8004856 <_scanf_float+0x196>
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800490c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004910:	d006      	beq.n	8004920 <_scanf_float+0x260>
 8004912:	0550      	lsls	r0, r2, #21
 8004914:	f57f af07 	bpl.w	8004726 <_scanf_float+0x66>
 8004918:	f1b9 0f00 	cmp.w	r9, #0
 800491c:	f000 80d9 	beq.w	8004ad2 <_scanf_float+0x412>
 8004920:	0591      	lsls	r1, r2, #22
 8004922:	bf58      	it	pl
 8004924:	9902      	ldrpl	r1, [sp, #8]
 8004926:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800492a:	bf58      	it	pl
 800492c:	eba9 0101 	subpl.w	r1, r9, r1
 8004930:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004934:	f04f 0900 	mov.w	r9, #0
 8004938:	bf58      	it	pl
 800493a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	e789      	b.n	8004856 <_scanf_float+0x196>
 8004942:	f04f 0a03 	mov.w	sl, #3
 8004946:	e786      	b.n	8004856 <_scanf_float+0x196>
 8004948:	4639      	mov	r1, r7
 800494a:	4640      	mov	r0, r8
 800494c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004950:	4798      	blx	r3
 8004952:	2800      	cmp	r0, #0
 8004954:	f43f aeda 	beq.w	800470c <_scanf_float+0x4c>
 8004958:	e6e5      	b.n	8004726 <_scanf_float+0x66>
 800495a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800495e:	463a      	mov	r2, r7
 8004960:	4640      	mov	r0, r8
 8004962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004966:	4798      	blx	r3
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	3b01      	subs	r3, #1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	e6e7      	b.n	8004740 <_scanf_float+0x80>
 8004970:	1e6b      	subs	r3, r5, #1
 8004972:	2b06      	cmp	r3, #6
 8004974:	d824      	bhi.n	80049c0 <_scanf_float+0x300>
 8004976:	2d02      	cmp	r5, #2
 8004978:	d836      	bhi.n	80049e8 <_scanf_float+0x328>
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	429e      	cmp	r6, r3
 800497e:	f67f aee3 	bls.w	8004748 <_scanf_float+0x88>
 8004982:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004986:	463a      	mov	r2, r7
 8004988:	4640      	mov	r0, r8
 800498a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800498e:	4798      	blx	r3
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	3b01      	subs	r3, #1
 8004994:	6123      	str	r3, [r4, #16]
 8004996:	e7f0      	b.n	800497a <_scanf_float+0x2ba>
 8004998:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800499c:	463a      	mov	r2, r7
 800499e:	4640      	mov	r0, r8
 80049a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80049a4:	4798      	blx	r3
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049b0:	fa5f fa8a 	uxtb.w	sl, sl
 80049b4:	f1ba 0f02 	cmp.w	sl, #2
 80049b8:	d1ee      	bne.n	8004998 <_scanf_float+0x2d8>
 80049ba:	3d03      	subs	r5, #3
 80049bc:	b2ed      	uxtb	r5, r5
 80049be:	1b76      	subs	r6, r6, r5
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	05da      	lsls	r2, r3, #23
 80049c4:	d530      	bpl.n	8004a28 <_scanf_float+0x368>
 80049c6:	055b      	lsls	r3, r3, #21
 80049c8:	d511      	bpl.n	80049ee <_scanf_float+0x32e>
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	429e      	cmp	r6, r3
 80049ce:	f67f aebb 	bls.w	8004748 <_scanf_float+0x88>
 80049d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049d6:	463a      	mov	r2, r7
 80049d8:	4640      	mov	r0, r8
 80049da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049de:	4798      	blx	r3
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	e7f0      	b.n	80049ca <_scanf_float+0x30a>
 80049e8:	46aa      	mov	sl, r5
 80049ea:	46b3      	mov	fp, r6
 80049ec:	e7de      	b.n	80049ac <_scanf_float+0x2ec>
 80049ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	2965      	cmp	r1, #101	@ 0x65
 80049f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	d00c      	beq.n	8004a1c <_scanf_float+0x35c>
 8004a02:	2945      	cmp	r1, #69	@ 0x45
 8004a04:	d00a      	beq.n	8004a1c <_scanf_float+0x35c>
 8004a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a0a:	463a      	mov	r2, r7
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4798      	blx	r3
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	1eb5      	subs	r5, r6, #2
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	463a      	mov	r2, r7
 8004a1e:	4640      	mov	r0, r8
 8004a20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a24:	4798      	blx	r3
 8004a26:	462e      	mov	r6, r5
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	f012 0210 	ands.w	r2, r2, #16
 8004a2e:	d001      	beq.n	8004a34 <_scanf_float+0x374>
 8004a30:	2000      	movs	r0, #0
 8004a32:	e68a      	b.n	800474a <_scanf_float+0x8a>
 8004a34:	7032      	strb	r2, [r6, #0]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a40:	d11c      	bne.n	8004a7c <_scanf_float+0x3bc>
 8004a42:	9b02      	ldr	r3, [sp, #8]
 8004a44:	454b      	cmp	r3, r9
 8004a46:	eba3 0209 	sub.w	r2, r3, r9
 8004a4a:	d123      	bne.n	8004a94 <_scanf_float+0x3d4>
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4640      	mov	r0, r8
 8004a50:	9901      	ldr	r1, [sp, #4]
 8004a52:	f002 fc21 	bl	8007298 <_strtod_r>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	6825      	ldr	r5, [r4, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f015 0f02 	tst.w	r5, #2
 8004a60:	4606      	mov	r6, r0
 8004a62:	460f      	mov	r7, r1
 8004a64:	f103 0204 	add.w	r2, r3, #4
 8004a68:	d01f      	beq.n	8004aaa <_scanf_float+0x3ea>
 8004a6a:	9903      	ldr	r1, [sp, #12]
 8004a6c:	600a      	str	r2, [r1, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	e9c3 6700 	strd	r6, r7, [r3]
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60e3      	str	r3, [r4, #12]
 8004a7a:	e7d9      	b.n	8004a30 <_scanf_float+0x370>
 8004a7c:	9b04      	ldr	r3, [sp, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0e4      	beq.n	8004a4c <_scanf_float+0x38c>
 8004a82:	9905      	ldr	r1, [sp, #20]
 8004a84:	230a      	movs	r3, #10
 8004a86:	4640      	mov	r0, r8
 8004a88:	3101      	adds	r1, #1
 8004a8a:	f002 fc85 	bl	8007398 <_strtol_r>
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	9e05      	ldr	r6, [sp, #20]
 8004a92:	1ac2      	subs	r2, r0, r3
 8004a94:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a98:	429e      	cmp	r6, r3
 8004a9a:	bf28      	it	cs
 8004a9c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	490d      	ldr	r1, [pc, #52]	@ (8004ad8 <_scanf_float+0x418>)
 8004aa4:	f000 f912 	bl	8004ccc <siprintf>
 8004aa8:	e7d0      	b.n	8004a4c <_scanf_float+0x38c>
 8004aaa:	076d      	lsls	r5, r5, #29
 8004aac:	d4dd      	bmi.n	8004a6a <_scanf_float+0x3aa>
 8004aae:	9d03      	ldr	r5, [sp, #12]
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	681d      	ldr	r5, [r3, #0]
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	f7fb ffa8 	bl	8000a0c <__aeabi_dcmpun>
 8004abc:	b120      	cbz	r0, 8004ac8 <_scanf_float+0x408>
 8004abe:	4807      	ldr	r0, [pc, #28]	@ (8004adc <_scanf_float+0x41c>)
 8004ac0:	f000 f9f6 	bl	8004eb0 <nanf>
 8004ac4:	6028      	str	r0, [r5, #0]
 8004ac6:	e7d5      	b.n	8004a74 <_scanf_float+0x3b4>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fb fffc 	bl	8000ac8 <__aeabi_d2f>
 8004ad0:	e7f8      	b.n	8004ac4 <_scanf_float+0x404>
 8004ad2:	f04f 0900 	mov.w	r9, #0
 8004ad6:	e62d      	b.n	8004734 <_scanf_float+0x74>
 8004ad8:	080085d6 	.word	0x080085d6
 8004adc:	0800896d 	.word	0x0800896d

08004ae0 <std>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aee:	6083      	str	r3, [r0, #8]
 8004af0:	8181      	strh	r1, [r0, #12]
 8004af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004af4:	81c2      	strh	r2, [r0, #14]
 8004af6:	6183      	str	r3, [r0, #24]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2208      	movs	r2, #8
 8004afc:	305c      	adds	r0, #92	@ 0x5c
 8004afe:	f000 f948 	bl	8004d92 <memset>
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x58>)
 8004b04:	6224      	str	r4, [r4, #32]
 8004b06:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b08:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <std+0x5c>)
 8004b0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <std+0x60>)
 8004b0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <std+0x64>)
 8004b12:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <std+0x68>)
 8004b16:	429c      	cmp	r4, r3
 8004b18:	d006      	beq.n	8004b28 <std+0x48>
 8004b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b1e:	4294      	cmp	r4, r2
 8004b20:	d002      	beq.n	8004b28 <std+0x48>
 8004b22:	33d0      	adds	r3, #208	@ 0xd0
 8004b24:	429c      	cmp	r4, r3
 8004b26:	d105      	bne.n	8004b34 <std+0x54>
 8004b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b30:	f000 b9ac 	b.w	8004e8c <__retarget_lock_init_recursive>
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	bf00      	nop
 8004b38:	08004d0d 	.word	0x08004d0d
 8004b3c:	08004d2f 	.word	0x08004d2f
 8004b40:	08004d67 	.word	0x08004d67
 8004b44:	08004d8b 	.word	0x08004d8b
 8004b48:	20000480 	.word	0x20000480

08004b4c <stdio_exit_handler>:
 8004b4c:	4a02      	ldr	r2, [pc, #8]	@ (8004b58 <stdio_exit_handler+0xc>)
 8004b4e:	4903      	ldr	r1, [pc, #12]	@ (8004b5c <stdio_exit_handler+0x10>)
 8004b50:	4803      	ldr	r0, [pc, #12]	@ (8004b60 <stdio_exit_handler+0x14>)
 8004b52:	f000 b869 	b.w	8004c28 <_fwalk_sglue>
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	0800774d 	.word	0x0800774d
 8004b60:	2000001c 	.word	0x2000001c

08004b64 <cleanup_stdio>:
 8004b64:	6841      	ldr	r1, [r0, #4]
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <cleanup_stdio+0x34>)
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	d001      	beq.n	8004b74 <cleanup_stdio+0x10>
 8004b70:	f002 fdec 	bl	800774c <_fflush_r>
 8004b74:	68a1      	ldr	r1, [r4, #8]
 8004b76:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <cleanup_stdio+0x38>)
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	d002      	beq.n	8004b82 <cleanup_stdio+0x1e>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f002 fde5 	bl	800774c <_fflush_r>
 8004b82:	68e1      	ldr	r1, [r4, #12]
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <cleanup_stdio+0x3c>)
 8004b86:	4299      	cmp	r1, r3
 8004b88:	d004      	beq.n	8004b94 <cleanup_stdio+0x30>
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b90:	f002 bddc 	b.w	800774c <_fflush_r>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	bf00      	nop
 8004b98:	20000480 	.word	0x20000480
 8004b9c:	200004e8 	.word	0x200004e8
 8004ba0:	20000550 	.word	0x20000550

08004ba4 <global_stdio_init.part.0>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <global_stdio_init.part.0+0x30>)
 8004ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8004bd8 <global_stdio_init.part.0+0x34>)
 8004baa:	4a0c      	ldr	r2, [pc, #48]	@ (8004bdc <global_stdio_init.part.0+0x38>)
 8004bac:	4620      	mov	r0, r4
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f7ff ff94 	bl	8004ae0 <std>
 8004bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	2109      	movs	r1, #9
 8004bc0:	f7ff ff8e 	bl	8004ae0 <std>
 8004bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bc8:	2202      	movs	r2, #2
 8004bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bce:	2112      	movs	r1, #18
 8004bd0:	f7ff bf86 	b.w	8004ae0 <std>
 8004bd4:	200005b8 	.word	0x200005b8
 8004bd8:	20000480 	.word	0x20000480
 8004bdc:	08004b4d 	.word	0x08004b4d

08004be0 <__sfp_lock_acquire>:
 8004be0:	4801      	ldr	r0, [pc, #4]	@ (8004be8 <__sfp_lock_acquire+0x8>)
 8004be2:	f000 b954 	b.w	8004e8e <__retarget_lock_acquire_recursive>
 8004be6:	bf00      	nop
 8004be8:	200005c1 	.word	0x200005c1

08004bec <__sfp_lock_release>:
 8004bec:	4801      	ldr	r0, [pc, #4]	@ (8004bf4 <__sfp_lock_release+0x8>)
 8004bee:	f000 b94f 	b.w	8004e90 <__retarget_lock_release_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	200005c1 	.word	0x200005c1

08004bf8 <__sinit>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	f7ff fff0 	bl	8004be0 <__sfp_lock_acquire>
 8004c00:	6a23      	ldr	r3, [r4, #32]
 8004c02:	b11b      	cbz	r3, 8004c0c <__sinit+0x14>
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c08:	f7ff bff0 	b.w	8004bec <__sfp_lock_release>
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__sinit+0x28>)
 8004c0e:	6223      	str	r3, [r4, #32]
 8004c10:	4b04      	ldr	r3, [pc, #16]	@ (8004c24 <__sinit+0x2c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f5      	bne.n	8004c04 <__sinit+0xc>
 8004c18:	f7ff ffc4 	bl	8004ba4 <global_stdio_init.part.0>
 8004c1c:	e7f2      	b.n	8004c04 <__sinit+0xc>
 8004c1e:	bf00      	nop
 8004c20:	08004b65 	.word	0x08004b65
 8004c24:	200005b8 	.word	0x200005b8

08004c28 <_fwalk_sglue>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	4688      	mov	r8, r1
 8004c30:	4614      	mov	r4, r2
 8004c32:	2600      	movs	r6, #0
 8004c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c38:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3c:	d505      	bpl.n	8004c4a <_fwalk_sglue+0x22>
 8004c3e:	6824      	ldr	r4, [r4, #0]
 8004c40:	2c00      	cmp	r4, #0
 8004c42:	d1f7      	bne.n	8004c34 <_fwalk_sglue+0xc>
 8004c44:	4630      	mov	r0, r6
 8004c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4a:	89ab      	ldrh	r3, [r5, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d907      	bls.n	8004c60 <_fwalk_sglue+0x38>
 8004c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c54:	3301      	adds	r3, #1
 8004c56:	d003      	beq.n	8004c60 <_fwalk_sglue+0x38>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c0      	blx	r8
 8004c5e:	4306      	orrs	r6, r0
 8004c60:	3568      	adds	r5, #104	@ 0x68
 8004c62:	e7e9      	b.n	8004c38 <_fwalk_sglue+0x10>

08004c64 <sniprintf>:
 8004c64:	b40c      	push	{r2, r3}
 8004c66:	b530      	push	{r4, r5, lr}
 8004c68:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <sniprintf+0x64>)
 8004c6a:	1e0c      	subs	r4, r1, #0
 8004c6c:	681d      	ldr	r5, [r3, #0]
 8004c6e:	b09d      	sub	sp, #116	@ 0x74
 8004c70:	da08      	bge.n	8004c84 <sniprintf+0x20>
 8004c72:	238b      	movs	r3, #139	@ 0x8b
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	b01d      	add	sp, #116	@ 0x74
 8004c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c80:	b002      	add	sp, #8
 8004c82:	4770      	bx	lr
 8004c84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c8c:	bf0c      	ite	eq
 8004c8e:	4623      	moveq	r3, r4
 8004c90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9307      	str	r3, [sp, #28]
 8004c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c9c:	9002      	str	r0, [sp, #8]
 8004c9e:	9006      	str	r0, [sp, #24]
 8004ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	ab21      	add	r3, sp, #132	@ 0x84
 8004ca8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004caa:	a902      	add	r1, sp, #8
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	f002 fbd1 	bl	8007454 <_svfiprintf_r>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	bfbc      	itt	lt
 8004cb6:	238b      	movlt	r3, #139	@ 0x8b
 8004cb8:	602b      	strlt	r3, [r5, #0]
 8004cba:	2c00      	cmp	r4, #0
 8004cbc:	d0dd      	beq.n	8004c7a <sniprintf+0x16>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	9b02      	ldr	r3, [sp, #8]
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e7d9      	b.n	8004c7a <sniprintf+0x16>
 8004cc6:	bf00      	nop
 8004cc8:	20000018 	.word	0x20000018

08004ccc <siprintf>:
 8004ccc:	b40e      	push	{r1, r2, r3}
 8004cce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cd2:	b500      	push	{lr}
 8004cd4:	b09c      	sub	sp, #112	@ 0x70
 8004cd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cd8:	9002      	str	r0, [sp, #8]
 8004cda:	9006      	str	r0, [sp, #24]
 8004cdc:	9107      	str	r1, [sp, #28]
 8004cde:	9104      	str	r1, [sp, #16]
 8004ce0:	4808      	ldr	r0, [pc, #32]	@ (8004d04 <siprintf+0x38>)
 8004ce2:	4909      	ldr	r1, [pc, #36]	@ (8004d08 <siprintf+0x3c>)
 8004ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	a902      	add	r1, sp, #8
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	f002 fbb0 	bl	8007454 <_svfiprintf_r>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	9b02      	ldr	r3, [sp, #8]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	b01c      	add	sp, #112	@ 0x70
 8004cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d00:	b003      	add	sp, #12
 8004d02:	4770      	bx	lr
 8004d04:	20000018 	.word	0x20000018
 8004d08:	ffff0208 	.word	0xffff0208

08004d0c <__sread>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	460c      	mov	r4, r1
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	f000 f86c 	bl	8004df0 <_read_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	bfab      	itete	ge
 8004d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d20:	181b      	addge	r3, r3, r0
 8004d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d26:	bfac      	ite	ge
 8004d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d2a:	81a3      	strhlt	r3, [r4, #12]
 8004d2c:	bd10      	pop	{r4, pc}

08004d2e <__swrite>:
 8004d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	461f      	mov	r7, r3
 8004d34:	898b      	ldrh	r3, [r1, #12]
 8004d36:	4605      	mov	r5, r0
 8004d38:	05db      	lsls	r3, r3, #23
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	d505      	bpl.n	8004d4c <__swrite+0x1e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	2200      	movs	r2, #0
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	f000 f840 	bl	8004dcc <_lseek_r>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	4632      	mov	r2, r6
 8004d50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	4628      	mov	r0, r5
 8004d58:	463b      	mov	r3, r7
 8004d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d62:	f000 b857 	b.w	8004e14 <_write_r>

08004d66 <__sseek>:
 8004d66:	b510      	push	{r4, lr}
 8004d68:	460c      	mov	r4, r1
 8004d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6e:	f000 f82d 	bl	8004dcc <_lseek_r>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	bf15      	itete	ne
 8004d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d82:	81a3      	strheq	r3, [r4, #12]
 8004d84:	bf18      	it	ne
 8004d86:	81a3      	strhne	r3, [r4, #12]
 8004d88:	bd10      	pop	{r4, pc}

08004d8a <__sclose>:
 8004d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8e:	f000 b80d 	b.w	8004dac <_close_r>

08004d92 <memset>:
 8004d92:	4603      	mov	r3, r0
 8004d94:	4402      	add	r2, r0
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d100      	bne.n	8004d9c <memset+0xa>
 8004d9a:	4770      	bx	lr
 8004d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004da0:	e7f9      	b.n	8004d96 <memset+0x4>
	...

08004da4 <_localeconv_r>:
 8004da4:	4800      	ldr	r0, [pc, #0]	@ (8004da8 <_localeconv_r+0x4>)
 8004da6:	4770      	bx	lr
 8004da8:	20000158 	.word	0x20000158

08004dac <_close_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	2300      	movs	r3, #0
 8004db0:	4d05      	ldr	r5, [pc, #20]	@ (8004dc8 <_close_r+0x1c>)
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fc fd89 	bl	80018ce <_close>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_close_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_close_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200005bc 	.word	0x200005bc

08004dcc <_lseek_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4d05      	ldr	r5, [pc, #20]	@ (8004dec <_lseek_r+0x20>)
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fc fd9b 	bl	8001916 <_lseek>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_lseek_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_lseek_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	200005bc 	.word	0x200005bc

08004df0 <_read_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4d05      	ldr	r5, [pc, #20]	@ (8004e10 <_read_r+0x20>)
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc fd2c 	bl	800185c <_read>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_read_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_read_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	200005bc 	.word	0x200005bc

08004e14 <_write_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4d05      	ldr	r5, [pc, #20]	@ (8004e34 <_write_r+0x20>)
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc fd37 	bl	8001896 <_write>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_write_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_write_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	200005bc 	.word	0x200005bc

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	@ (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000018 	.word	0x20000018

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	2600      	movs	r6, #0
 8004e48:	4d0c      	ldr	r5, [pc, #48]	@ (8004e7c <__libc_init_array+0x38>)
 8004e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8004e80 <__libc_init_array+0x3c>)
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	f003 fb66 	bl	8008524 <_init>
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004e84 <__libc_init_array+0x40>)
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e88 <__libc_init_array+0x44>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	080089d8 	.word	0x080089d8
 8004e80:	080089d8 	.word	0x080089d8
 8004e84:	080089d8 	.word	0x080089d8
 8004e88:	080089dc 	.word	0x080089dc

08004e8c <__retarget_lock_init_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_acquire_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <__retarget_lock_release_recursive>:
 8004e90:	4770      	bx	lr

08004e92 <memchr>:
 8004e92:	4603      	mov	r3, r0
 8004e94:	b510      	push	{r4, lr}
 8004e96:	b2c9      	uxtb	r1, r1
 8004e98:	4402      	add	r2, r0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	d101      	bne.n	8004ea4 <memchr+0x12>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e003      	b.n	8004eac <memchr+0x1a>
 8004ea4:	7804      	ldrb	r4, [r0, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	428c      	cmp	r4, r1
 8004eaa:	d1f6      	bne.n	8004e9a <memchr+0x8>
 8004eac:	bd10      	pop	{r4, pc}
	...

08004eb0 <nanf>:
 8004eb0:	4800      	ldr	r0, [pc, #0]	@ (8004eb4 <nanf+0x4>)
 8004eb2:	4770      	bx	lr
 8004eb4:	7fc00000 	.word	0x7fc00000

08004eb8 <quorem>:
 8004eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	6903      	ldr	r3, [r0, #16]
 8004ebe:	690c      	ldr	r4, [r1, #16]
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	db7e      	blt.n	8004fc4 <quorem+0x10c>
 8004ec6:	3c01      	subs	r4, #1
 8004ec8:	00a3      	lsls	r3, r4, #2
 8004eca:	f100 0514 	add.w	r5, r0, #20
 8004ece:	f101 0814 	add.w	r8, r1, #20
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eee:	d32e      	bcc.n	8004f4e <quorem+0x96>
 8004ef0:	f04f 0a00 	mov.w	sl, #0
 8004ef4:	46c4      	mov	ip, r8
 8004ef6:	46ae      	mov	lr, r5
 8004ef8:	46d3      	mov	fp, sl
 8004efa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004efe:	b298      	uxth	r0, r3
 8004f00:	fb06 a000 	mla	r0, r6, r0, sl
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	0c02      	lsrs	r2, r0, #16
 8004f08:	fb06 2303 	mla	r3, r6, r3, r2
 8004f0c:	f8de 2000 	ldr.w	r2, [lr]
 8004f10:	b280      	uxth	r0, r0
 8004f12:	b292      	uxth	r2, r2
 8004f14:	1a12      	subs	r2, r2, r0
 8004f16:	445a      	add	r2, fp
 8004f18:	f8de 0000 	ldr.w	r0, [lr]
 8004f1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f30:	45e1      	cmp	r9, ip
 8004f32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f36:	f84e 2b04 	str.w	r2, [lr], #4
 8004f3a:	d2de      	bcs.n	8004efa <quorem+0x42>
 8004f3c:	9b00      	ldr	r3, [sp, #0]
 8004f3e:	58eb      	ldr	r3, [r5, r3]
 8004f40:	b92b      	cbnz	r3, 8004f4e <quorem+0x96>
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	429d      	cmp	r5, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	d32f      	bcc.n	8004fac <quorem+0xf4>
 8004f4c:	613c      	str	r4, [r7, #16]
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f001 f9c2 	bl	80062d8 <__mcmp>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	db25      	blt.n	8004fa4 <quorem+0xec>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f60:	f8d1 c000 	ldr.w	ip, [r1]
 8004f64:	fa1f fe82 	uxth.w	lr, r2
 8004f68:	fa1f f38c 	uxth.w	r3, ip
 8004f6c:	eba3 030e 	sub.w	r3, r3, lr
 8004f70:	4403      	add	r3, r0
 8004f72:	0c12      	lsrs	r2, r2, #16
 8004f74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f82:	45c1      	cmp	r9, r8
 8004f84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f88:	f841 3b04 	str.w	r3, [r1], #4
 8004f8c:	d2e6      	bcs.n	8004f5c <quorem+0xa4>
 8004f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f96:	b922      	cbnz	r2, 8004fa2 <quorem+0xea>
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	d30b      	bcc.n	8004fb8 <quorem+0x100>
 8004fa0:	613c      	str	r4, [r7, #16]
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	b003      	add	sp, #12
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d1cb      	bne.n	8004f4c <quorem+0x94>
 8004fb4:	3c01      	subs	r4, #1
 8004fb6:	e7c6      	b.n	8004f46 <quorem+0x8e>
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	d1ef      	bne.n	8004fa0 <quorem+0xe8>
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	e7ea      	b.n	8004f9a <quorem+0xe2>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e7ee      	b.n	8004fa6 <quorem+0xee>

08004fc8 <_dtoa_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	69c7      	ldr	r7, [r0, #28]
 8004fd2:	b097      	sub	sp, #92	@ 0x5c
 8004fd4:	4683      	mov	fp, r0
 8004fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fdc:	b97f      	cbnz	r7, 8004ffe <_dtoa_r+0x36>
 8004fde:	2010      	movs	r0, #16
 8004fe0:	f000 fe02 	bl	8005be8 <malloc>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004fea:	b920      	cbnz	r0, 8004ff6 <_dtoa_r+0x2e>
 8004fec:	21ef      	movs	r1, #239	@ 0xef
 8004fee:	4ba8      	ldr	r3, [pc, #672]	@ (8005290 <_dtoa_r+0x2c8>)
 8004ff0:	48a8      	ldr	r0, [pc, #672]	@ (8005294 <_dtoa_r+0x2cc>)
 8004ff2:	f002 fc23 	bl	800783c <__assert_func>
 8004ff6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ffa:	6007      	str	r7, [r0, #0]
 8004ffc:	60c7      	str	r7, [r0, #12]
 8004ffe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	b159      	cbz	r1, 800501e <_dtoa_r+0x56>
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	2301      	movs	r3, #1
 800500a:	4093      	lsls	r3, r2
 800500c:	604a      	str	r2, [r1, #4]
 800500e:	608b      	str	r3, [r1, #8]
 8005010:	4658      	mov	r0, fp
 8005012:	f000 fedf 	bl	8005dd4 <_Bfree>
 8005016:	2200      	movs	r2, #0
 8005018:	f8db 301c 	ldr.w	r3, [fp, #28]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	1e2b      	subs	r3, r5, #0
 8005020:	bfaf      	iteee	ge
 8005022:	2300      	movge	r3, #0
 8005024:	2201      	movlt	r2, #1
 8005026:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800502a:	9303      	strlt	r3, [sp, #12]
 800502c:	bfa8      	it	ge
 800502e:	6033      	strge	r3, [r6, #0]
 8005030:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005034:	4b98      	ldr	r3, [pc, #608]	@ (8005298 <_dtoa_r+0x2d0>)
 8005036:	bfb8      	it	lt
 8005038:	6032      	strlt	r2, [r6, #0]
 800503a:	ea33 0308 	bics.w	r3, r3, r8
 800503e:	d112      	bne.n	8005066 <_dtoa_r+0x9e>
 8005040:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005044:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800504c:	4323      	orrs	r3, r4
 800504e:	f000 8550 	beq.w	8005af2 <_dtoa_r+0xb2a>
 8005052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005054:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800529c <_dtoa_r+0x2d4>
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8552 	beq.w	8005b02 <_dtoa_r+0xb3a>
 800505e:	f10a 0303 	add.w	r3, sl, #3
 8005062:	f000 bd4c 	b.w	8005afe <_dtoa_r+0xb36>
 8005066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800506a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800506e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb fc97 	bl	80009a8 <__aeabi_dcmpeq>
 800507a:	4607      	mov	r7, r0
 800507c:	b158      	cbz	r0, 8005096 <_dtoa_r+0xce>
 800507e:	2301      	movs	r3, #1
 8005080:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005086:	b113      	cbz	r3, 800508e <_dtoa_r+0xc6>
 8005088:	4b85      	ldr	r3, [pc, #532]	@ (80052a0 <_dtoa_r+0x2d8>)
 800508a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80052a4 <_dtoa_r+0x2dc>
 8005092:	f000 bd36 	b.w	8005b02 <_dtoa_r+0xb3a>
 8005096:	ab14      	add	r3, sp, #80	@ 0x50
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	ab15      	add	r3, sp, #84	@ 0x54
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4658      	mov	r0, fp
 80050a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050a4:	f001 fa30 	bl	8006508 <__d2b>
 80050a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050ac:	4681      	mov	r9, r0
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d077      	beq.n	80051a2 <_dtoa_r+0x1da>
 80050b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80050ca:	4619      	mov	r1, r3
 80050cc:	2200      	movs	r2, #0
 80050ce:	4b76      	ldr	r3, [pc, #472]	@ (80052a8 <_dtoa_r+0x2e0>)
 80050d0:	f7fb f84a 	bl	8000168 <__aeabi_dsub>
 80050d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005278 <_dtoa_r+0x2b0>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	a368      	add	r3, pc, #416	@ (adr r3, 8005280 <_dtoa_r+0x2b8>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb f842 	bl	800016c <__adddf3>
 80050e8:	4604      	mov	r4, r0
 80050ea:	4630      	mov	r0, r6
 80050ec:	460d      	mov	r5, r1
 80050ee:	f7fb f989 	bl	8000404 <__aeabi_i2d>
 80050f2:	a365      	add	r3, pc, #404	@ (adr r3, 8005288 <_dtoa_r+0x2c0>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f9ee 	bl	80004d8 <__aeabi_dmul>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb f832 	bl	800016c <__adddf3>
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	f7fb fc94 	bl	8000a38 <__aeabi_d2iz>
 8005110:	2200      	movs	r2, #0
 8005112:	4607      	mov	r7, r0
 8005114:	2300      	movs	r3, #0
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb fc4f 	bl	80009bc <__aeabi_dcmplt>
 800511e:	b140      	cbz	r0, 8005132 <_dtoa_r+0x16a>
 8005120:	4638      	mov	r0, r7
 8005122:	f7fb f96f 	bl	8000404 <__aeabi_i2d>
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	f7fb fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800512e:	b900      	cbnz	r0, 8005132 <_dtoa_r+0x16a>
 8005130:	3f01      	subs	r7, #1
 8005132:	2f16      	cmp	r7, #22
 8005134:	d853      	bhi.n	80051de <_dtoa_r+0x216>
 8005136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800513a:	4b5c      	ldr	r3, [pc, #368]	@ (80052ac <_dtoa_r+0x2e4>)
 800513c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f7fb fc3a 	bl	80009bc <__aeabi_dcmplt>
 8005148:	2800      	cmp	r0, #0
 800514a:	d04a      	beq.n	80051e2 <_dtoa_r+0x21a>
 800514c:	2300      	movs	r3, #0
 800514e:	3f01      	subs	r7, #1
 8005150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005152:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005154:	1b9b      	subs	r3, r3, r6
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	bf46      	itte	mi
 800515a:	f1c3 0801 	rsbmi	r8, r3, #1
 800515e:	2300      	movmi	r3, #0
 8005160:	f04f 0800 	movpl.w	r8, #0
 8005164:	9209      	str	r2, [sp, #36]	@ 0x24
 8005166:	bf48      	it	mi
 8005168:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800516a:	2f00      	cmp	r7, #0
 800516c:	db3b      	blt.n	80051e6 <_dtoa_r+0x21e>
 800516e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005170:	970e      	str	r7, [sp, #56]	@ 0x38
 8005172:	443b      	add	r3, r7
 8005174:	9309      	str	r3, [sp, #36]	@ 0x24
 8005176:	2300      	movs	r3, #0
 8005178:	930a      	str	r3, [sp, #40]	@ 0x28
 800517a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800517c:	2b09      	cmp	r3, #9
 800517e:	d866      	bhi.n	800524e <_dtoa_r+0x286>
 8005180:	2b05      	cmp	r3, #5
 8005182:	bfc4      	itt	gt
 8005184:	3b04      	subgt	r3, #4
 8005186:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005188:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800518a:	bfc8      	it	gt
 800518c:	2400      	movgt	r4, #0
 800518e:	f1a3 0302 	sub.w	r3, r3, #2
 8005192:	bfd8      	it	le
 8005194:	2401      	movle	r4, #1
 8005196:	2b03      	cmp	r3, #3
 8005198:	d864      	bhi.n	8005264 <_dtoa_r+0x29c>
 800519a:	e8df f003 	tbb	[pc, r3]
 800519e:	382b      	.short	0x382b
 80051a0:	5636      	.short	0x5636
 80051a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051a6:	441e      	add	r6, r3
 80051a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	bfc1      	itttt	gt
 80051b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80051b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051c0:	bfd6      	itet	le
 80051c2:	f1c3 0320 	rsble	r3, r3, #32
 80051c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80051ca:	fa04 f003 	lslle.w	r0, r4, r3
 80051ce:	f7fb f909 	bl	80003e4 <__aeabi_ui2d>
 80051d2:	2201      	movs	r2, #1
 80051d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051d8:	3e01      	subs	r6, #1
 80051da:	9212      	str	r2, [sp, #72]	@ 0x48
 80051dc:	e775      	b.n	80050ca <_dtoa_r+0x102>
 80051de:	2301      	movs	r3, #1
 80051e0:	e7b6      	b.n	8005150 <_dtoa_r+0x188>
 80051e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051e4:	e7b5      	b.n	8005152 <_dtoa_r+0x18a>
 80051e6:	427b      	negs	r3, r7
 80051e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ea:	2300      	movs	r3, #0
 80051ec:	eba8 0807 	sub.w	r8, r8, r7
 80051f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80051f2:	e7c2      	b.n	800517a <_dtoa_r+0x1b2>
 80051f4:	2300      	movs	r3, #0
 80051f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dc35      	bgt.n	800526a <_dtoa_r+0x2a2>
 80051fe:	2301      	movs	r3, #1
 8005200:	461a      	mov	r2, r3
 8005202:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005206:	9221      	str	r2, [sp, #132]	@ 0x84
 8005208:	e00b      	b.n	8005222 <_dtoa_r+0x25a>
 800520a:	2301      	movs	r3, #1
 800520c:	e7f3      	b.n	80051f6 <_dtoa_r+0x22e>
 800520e:	2300      	movs	r3, #0
 8005210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	9308      	str	r3, [sp, #32]
 8005218:	3301      	adds	r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	9307      	str	r3, [sp, #28]
 800521e:	bfb8      	it	lt
 8005220:	2301      	movlt	r3, #1
 8005222:	2100      	movs	r1, #0
 8005224:	2204      	movs	r2, #4
 8005226:	f8db 001c 	ldr.w	r0, [fp, #28]
 800522a:	f102 0514 	add.w	r5, r2, #20
 800522e:	429d      	cmp	r5, r3
 8005230:	d91f      	bls.n	8005272 <_dtoa_r+0x2aa>
 8005232:	6041      	str	r1, [r0, #4]
 8005234:	4658      	mov	r0, fp
 8005236:	f000 fd8d 	bl	8005d54 <_Balloc>
 800523a:	4682      	mov	sl, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	d139      	bne.n	80052b4 <_dtoa_r+0x2ec>
 8005240:	4602      	mov	r2, r0
 8005242:	f240 11af 	movw	r1, #431	@ 0x1af
 8005246:	4b1a      	ldr	r3, [pc, #104]	@ (80052b0 <_dtoa_r+0x2e8>)
 8005248:	e6d2      	b.n	8004ff0 <_dtoa_r+0x28>
 800524a:	2301      	movs	r3, #1
 800524c:	e7e0      	b.n	8005210 <_dtoa_r+0x248>
 800524e:	2401      	movs	r4, #1
 8005250:	2300      	movs	r3, #0
 8005252:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005254:	9320      	str	r3, [sp, #128]	@ 0x80
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	2200      	movs	r2, #0
 800525c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005260:	2312      	movs	r3, #18
 8005262:	e7d0      	b.n	8005206 <_dtoa_r+0x23e>
 8005264:	2301      	movs	r3, #1
 8005266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005268:	e7f5      	b.n	8005256 <_dtoa_r+0x28e>
 800526a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800526c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005270:	e7d7      	b.n	8005222 <_dtoa_r+0x25a>
 8005272:	3101      	adds	r1, #1
 8005274:	0052      	lsls	r2, r2, #1
 8005276:	e7d8      	b.n	800522a <_dtoa_r+0x262>
 8005278:	636f4361 	.word	0x636f4361
 800527c:	3fd287a7 	.word	0x3fd287a7
 8005280:	8b60c8b3 	.word	0x8b60c8b3
 8005284:	3fc68a28 	.word	0x3fc68a28
 8005288:	509f79fb 	.word	0x509f79fb
 800528c:	3fd34413 	.word	0x3fd34413
 8005290:	080085e8 	.word	0x080085e8
 8005294:	080085ff 	.word	0x080085ff
 8005298:	7ff00000 	.word	0x7ff00000
 800529c:	080085e4 	.word	0x080085e4
 80052a0:	080085b3 	.word	0x080085b3
 80052a4:	080085b2 	.word	0x080085b2
 80052a8:	3ff80000 	.word	0x3ff80000
 80052ac:	080086f8 	.word	0x080086f8
 80052b0:	08008657 	.word	0x08008657
 80052b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052b8:	6018      	str	r0, [r3, #0]
 80052ba:	9b07      	ldr	r3, [sp, #28]
 80052bc:	2b0e      	cmp	r3, #14
 80052be:	f200 80a4 	bhi.w	800540a <_dtoa_r+0x442>
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	f000 80a1 	beq.w	800540a <_dtoa_r+0x442>
 80052c8:	2f00      	cmp	r7, #0
 80052ca:	dd33      	ble.n	8005334 <_dtoa_r+0x36c>
 80052cc:	4b86      	ldr	r3, [pc, #536]	@ (80054e8 <_dtoa_r+0x520>)
 80052ce:	f007 020f 	and.w	r2, r7, #15
 80052d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d6:	05f8      	lsls	r0, r7, #23
 80052d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052e4:	d516      	bpl.n	8005314 <_dtoa_r+0x34c>
 80052e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ea:	4b80      	ldr	r3, [pc, #512]	@ (80054ec <_dtoa_r+0x524>)
 80052ec:	2603      	movs	r6, #3
 80052ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052f2:	f7fb fa1b 	bl	800072c <__aeabi_ddiv>
 80052f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052fa:	f004 040f 	and.w	r4, r4, #15
 80052fe:	4d7b      	ldr	r5, [pc, #492]	@ (80054ec <_dtoa_r+0x524>)
 8005300:	b954      	cbnz	r4, 8005318 <_dtoa_r+0x350>
 8005302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530a:	f7fb fa0f 	bl	800072c <__aeabi_ddiv>
 800530e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005312:	e028      	b.n	8005366 <_dtoa_r+0x39e>
 8005314:	2602      	movs	r6, #2
 8005316:	e7f2      	b.n	80052fe <_dtoa_r+0x336>
 8005318:	07e1      	lsls	r1, r4, #31
 800531a:	d508      	bpl.n	800532e <_dtoa_r+0x366>
 800531c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005324:	f7fb f8d8 	bl	80004d8 <__aeabi_dmul>
 8005328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800532c:	3601      	adds	r6, #1
 800532e:	1064      	asrs	r4, r4, #1
 8005330:	3508      	adds	r5, #8
 8005332:	e7e5      	b.n	8005300 <_dtoa_r+0x338>
 8005334:	f000 80d2 	beq.w	80054dc <_dtoa_r+0x514>
 8005338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800533c:	427c      	negs	r4, r7
 800533e:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <_dtoa_r+0x520>)
 8005340:	f004 020f 	and.w	r2, r4, #15
 8005344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f7fb f8c4 	bl	80004d8 <__aeabi_dmul>
 8005350:	2602      	movs	r6, #2
 8005352:	2300      	movs	r3, #0
 8005354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005358:	4d64      	ldr	r5, [pc, #400]	@ (80054ec <_dtoa_r+0x524>)
 800535a:	1124      	asrs	r4, r4, #4
 800535c:	2c00      	cmp	r4, #0
 800535e:	f040 80b2 	bne.w	80054c6 <_dtoa_r+0x4fe>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d3      	bne.n	800530e <_dtoa_r+0x346>
 8005366:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800536a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80b7 	beq.w	80054e0 <_dtoa_r+0x518>
 8005372:	2200      	movs	r2, #0
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	4b5d      	ldr	r3, [pc, #372]	@ (80054f0 <_dtoa_r+0x528>)
 800537a:	f7fb fb1f 	bl	80009bc <__aeabi_dcmplt>
 800537e:	2800      	cmp	r0, #0
 8005380:	f000 80ae 	beq.w	80054e0 <_dtoa_r+0x518>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80aa 	beq.w	80054e0 <_dtoa_r+0x518>
 800538c:	9b08      	ldr	r3, [sp, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd37      	ble.n	8005402 <_dtoa_r+0x43a>
 8005392:	1e7b      	subs	r3, r7, #1
 8005394:	4620      	mov	r0, r4
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	2200      	movs	r2, #0
 800539a:	4629      	mov	r1, r5
 800539c:	4b55      	ldr	r3, [pc, #340]	@ (80054f4 <_dtoa_r+0x52c>)
 800539e:	f7fb f89b 	bl	80004d8 <__aeabi_dmul>
 80053a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a6:	9c08      	ldr	r4, [sp, #32]
 80053a8:	3601      	adds	r6, #1
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7fb f82a 	bl	8000404 <__aeabi_i2d>
 80053b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b4:	f7fb f890 	bl	80004d8 <__aeabi_dmul>
 80053b8:	2200      	movs	r2, #0
 80053ba:	4b4f      	ldr	r3, [pc, #316]	@ (80054f8 <_dtoa_r+0x530>)
 80053bc:	f7fa fed6 	bl	800016c <__adddf3>
 80053c0:	4605      	mov	r5, r0
 80053c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	f040 809a 	bne.w	8005500 <_dtoa_r+0x538>
 80053cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b4a      	ldr	r3, [pc, #296]	@ (80054fc <_dtoa_r+0x534>)
 80053d4:	f7fa fec8 	bl	8000168 <__aeabi_dsub>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053e0:	462a      	mov	r2, r5
 80053e2:	4633      	mov	r3, r6
 80053e4:	f7fb fb08 	bl	80009f8 <__aeabi_dcmpgt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f040 828e 	bne.w	800590a <_dtoa_r+0x942>
 80053ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f2:	462a      	mov	r2, r5
 80053f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053f8:	f7fb fae0 	bl	80009bc <__aeabi_dcmplt>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f040 8127 	bne.w	8005650 <_dtoa_r+0x688>
 8005402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800540a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800540c:	2b00      	cmp	r3, #0
 800540e:	f2c0 8163 	blt.w	80056d8 <_dtoa_r+0x710>
 8005412:	2f0e      	cmp	r7, #14
 8005414:	f300 8160 	bgt.w	80056d8 <_dtoa_r+0x710>
 8005418:	4b33      	ldr	r3, [pc, #204]	@ (80054e8 <_dtoa_r+0x520>)
 800541a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800541e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005428:	2b00      	cmp	r3, #0
 800542a:	da03      	bge.n	8005434 <_dtoa_r+0x46c>
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f340 8100 	ble.w	8005634 <_dtoa_r+0x66c>
 8005434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005438:	4656      	mov	r6, sl
 800543a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb f973 	bl	800072c <__aeabi_ddiv>
 8005446:	f7fb faf7 	bl	8000a38 <__aeabi_d2iz>
 800544a:	4680      	mov	r8, r0
 800544c:	f7fa ffda 	bl	8000404 <__aeabi_i2d>
 8005450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005454:	f7fb f840 	bl	80004d8 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fa fe82 	bl	8000168 <__aeabi_dsub>
 8005464:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005468:	9d07      	ldr	r5, [sp, #28]
 800546a:	f806 4b01 	strb.w	r4, [r6], #1
 800546e:	eba6 040a 	sub.w	r4, r6, sl
 8005472:	42a5      	cmp	r5, r4
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	f040 8116 	bne.w	80056a8 <_dtoa_r+0x6e0>
 800547c:	f7fa fe76 	bl	800016c <__adddf3>
 8005480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005484:	4604      	mov	r4, r0
 8005486:	460d      	mov	r5, r1
 8005488:	f7fb fab6 	bl	80009f8 <__aeabi_dcmpgt>
 800548c:	2800      	cmp	r0, #0
 800548e:	f040 80f8 	bne.w	8005682 <_dtoa_r+0x6ba>
 8005492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fb fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800549e:	b118      	cbz	r0, 80054a8 <_dtoa_r+0x4e0>
 80054a0:	f018 0f01 	tst.w	r8, #1
 80054a4:	f040 80ed 	bne.w	8005682 <_dtoa_r+0x6ba>
 80054a8:	4649      	mov	r1, r9
 80054aa:	4658      	mov	r0, fp
 80054ac:	f000 fc92 	bl	8005dd4 <_Bfree>
 80054b0:	2300      	movs	r3, #0
 80054b2:	7033      	strb	r3, [r6, #0]
 80054b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80054b6:	3701      	adds	r7, #1
 80054b8:	601f      	str	r7, [r3, #0]
 80054ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8320 	beq.w	8005b02 <_dtoa_r+0xb3a>
 80054c2:	601e      	str	r6, [r3, #0]
 80054c4:	e31d      	b.n	8005b02 <_dtoa_r+0xb3a>
 80054c6:	07e2      	lsls	r2, r4, #31
 80054c8:	d505      	bpl.n	80054d6 <_dtoa_r+0x50e>
 80054ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ce:	f7fb f803 	bl	80004d8 <__aeabi_dmul>
 80054d2:	2301      	movs	r3, #1
 80054d4:	3601      	adds	r6, #1
 80054d6:	1064      	asrs	r4, r4, #1
 80054d8:	3508      	adds	r5, #8
 80054da:	e73f      	b.n	800535c <_dtoa_r+0x394>
 80054dc:	2602      	movs	r6, #2
 80054de:	e742      	b.n	8005366 <_dtoa_r+0x39e>
 80054e0:	9c07      	ldr	r4, [sp, #28]
 80054e2:	9704      	str	r7, [sp, #16]
 80054e4:	e761      	b.n	80053aa <_dtoa_r+0x3e2>
 80054e6:	bf00      	nop
 80054e8:	080086f8 	.word	0x080086f8
 80054ec:	080086d0 	.word	0x080086d0
 80054f0:	3ff00000 	.word	0x3ff00000
 80054f4:	40240000 	.word	0x40240000
 80054f8:	401c0000 	.word	0x401c0000
 80054fc:	40140000 	.word	0x40140000
 8005500:	4b70      	ldr	r3, [pc, #448]	@ (80056c4 <_dtoa_r+0x6fc>)
 8005502:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800550c:	4454      	add	r4, sl
 800550e:	2900      	cmp	r1, #0
 8005510:	d045      	beq.n	800559e <_dtoa_r+0x5d6>
 8005512:	2000      	movs	r0, #0
 8005514:	496c      	ldr	r1, [pc, #432]	@ (80056c8 <_dtoa_r+0x700>)
 8005516:	f7fb f909 	bl	800072c <__aeabi_ddiv>
 800551a:	4633      	mov	r3, r6
 800551c:	462a      	mov	r2, r5
 800551e:	f7fa fe23 	bl	8000168 <__aeabi_dsub>
 8005522:	4656      	mov	r6, sl
 8005524:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800552c:	f7fb fa84 	bl	8000a38 <__aeabi_d2iz>
 8005530:	4605      	mov	r5, r0
 8005532:	f7fa ff67 	bl	8000404 <__aeabi_i2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	3530      	adds	r5, #48	@ 0x30
 8005548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800554c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005550:	f806 5b01 	strb.w	r5, [r6], #1
 8005554:	f7fb fa32 	bl	80009bc <__aeabi_dcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	d163      	bne.n	8005624 <_dtoa_r+0x65c>
 800555c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005560:	2000      	movs	r0, #0
 8005562:	495a      	ldr	r1, [pc, #360]	@ (80056cc <_dtoa_r+0x704>)
 8005564:	f7fa fe00 	bl	8000168 <__aeabi_dsub>
 8005568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800556c:	f7fb fa26 	bl	80009bc <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 8087 	bne.w	8005684 <_dtoa_r+0x6bc>
 8005576:	42a6      	cmp	r6, r4
 8005578:	f43f af43 	beq.w	8005402 <_dtoa_r+0x43a>
 800557c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <_dtoa_r+0x708>)
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005592:	4b4f      	ldr	r3, [pc, #316]	@ (80056d0 <_dtoa_r+0x708>)
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800559c:	e7c4      	b.n	8005528 <_dtoa_r+0x560>
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	f7fa ff99 	bl	80004d8 <__aeabi_dmul>
 80055a6:	4656      	mov	r6, sl
 80055a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b2:	f7fb fa41 	bl	8000a38 <__aeabi_d2iz>
 80055b6:	4605      	mov	r5, r0
 80055b8:	f7fa ff24 	bl	8000404 <__aeabi_i2d>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c4:	f7fa fdd0 	bl	8000168 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	3530      	adds	r5, #48	@ 0x30
 80055ce:	f806 5b01 	strb.w	r5, [r6], #1
 80055d2:	42a6      	cmp	r6, r4
 80055d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	d124      	bne.n	8005628 <_dtoa_r+0x660>
 80055de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055e2:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <_dtoa_r+0x700>)
 80055e4:	f7fa fdc2 	bl	800016c <__adddf3>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f0:	f7fb fa02 	bl	80009f8 <__aeabi_dcmpgt>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d145      	bne.n	8005684 <_dtoa_r+0x6bc>
 80055f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055fc:	2000      	movs	r0, #0
 80055fe:	4932      	ldr	r1, [pc, #200]	@ (80056c8 <_dtoa_r+0x700>)
 8005600:	f7fa fdb2 	bl	8000168 <__aeabi_dsub>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560c:	f7fb f9d6 	bl	80009bc <__aeabi_dcmplt>
 8005610:	2800      	cmp	r0, #0
 8005612:	f43f aef6 	beq.w	8005402 <_dtoa_r+0x43a>
 8005616:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005618:	1e73      	subs	r3, r6, #1
 800561a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800561c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005620:	2b30      	cmp	r3, #48	@ 0x30
 8005622:	d0f8      	beq.n	8005616 <_dtoa_r+0x64e>
 8005624:	9f04      	ldr	r7, [sp, #16]
 8005626:	e73f      	b.n	80054a8 <_dtoa_r+0x4e0>
 8005628:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <_dtoa_r+0x708>)
 800562a:	f7fa ff55 	bl	80004d8 <__aeabi_dmul>
 800562e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005632:	e7bc      	b.n	80055ae <_dtoa_r+0x5e6>
 8005634:	d10c      	bne.n	8005650 <_dtoa_r+0x688>
 8005636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800563a:	2200      	movs	r2, #0
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <_dtoa_r+0x70c>)
 800563e:	f7fa ff4b 	bl	80004d8 <__aeabi_dmul>
 8005642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005646:	f7fb f9cd 	bl	80009e4 <__aeabi_dcmpge>
 800564a:	2800      	cmp	r0, #0
 800564c:	f000 815b 	beq.w	8005906 <_dtoa_r+0x93e>
 8005650:	2400      	movs	r4, #0
 8005652:	4625      	mov	r5, r4
 8005654:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005656:	4656      	mov	r6, sl
 8005658:	43db      	mvns	r3, r3
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	2700      	movs	r7, #0
 800565e:	4621      	mov	r1, r4
 8005660:	4658      	mov	r0, fp
 8005662:	f000 fbb7 	bl	8005dd4 <_Bfree>
 8005666:	2d00      	cmp	r5, #0
 8005668:	d0dc      	beq.n	8005624 <_dtoa_r+0x65c>
 800566a:	b12f      	cbz	r7, 8005678 <_dtoa_r+0x6b0>
 800566c:	42af      	cmp	r7, r5
 800566e:	d003      	beq.n	8005678 <_dtoa_r+0x6b0>
 8005670:	4639      	mov	r1, r7
 8005672:	4658      	mov	r0, fp
 8005674:	f000 fbae 	bl	8005dd4 <_Bfree>
 8005678:	4629      	mov	r1, r5
 800567a:	4658      	mov	r0, fp
 800567c:	f000 fbaa 	bl	8005dd4 <_Bfree>
 8005680:	e7d0      	b.n	8005624 <_dtoa_r+0x65c>
 8005682:	9704      	str	r7, [sp, #16]
 8005684:	4633      	mov	r3, r6
 8005686:	461e      	mov	r6, r3
 8005688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568c:	2a39      	cmp	r2, #57	@ 0x39
 800568e:	d107      	bne.n	80056a0 <_dtoa_r+0x6d8>
 8005690:	459a      	cmp	sl, r3
 8005692:	d1f8      	bne.n	8005686 <_dtoa_r+0x6be>
 8005694:	9a04      	ldr	r2, [sp, #16]
 8005696:	3201      	adds	r2, #1
 8005698:	9204      	str	r2, [sp, #16]
 800569a:	2230      	movs	r2, #48	@ 0x30
 800569c:	f88a 2000 	strb.w	r2, [sl]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	3201      	adds	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e7bd      	b.n	8005624 <_dtoa_r+0x65c>
 80056a8:	2200      	movs	r2, #0
 80056aa:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <_dtoa_r+0x708>)
 80056ac:	f7fa ff14 	bl	80004d8 <__aeabi_dmul>
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f7fb f976 	bl	80009a8 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f43f aebc 	beq.w	800543a <_dtoa_r+0x472>
 80056c2:	e6f1      	b.n	80054a8 <_dtoa_r+0x4e0>
 80056c4:	080086f8 	.word	0x080086f8
 80056c8:	3fe00000 	.word	0x3fe00000
 80056cc:	3ff00000 	.word	0x3ff00000
 80056d0:	40240000 	.word	0x40240000
 80056d4:	40140000 	.word	0x40140000
 80056d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 80db 	beq.w	8005896 <_dtoa_r+0x8ce>
 80056e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	f300 80bf 	bgt.w	8005866 <_dtoa_r+0x89e>
 80056e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	f000 80b7 	beq.w	800585e <_dtoa_r+0x896>
 80056f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056f4:	4646      	mov	r6, r8
 80056f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056fa:	2101      	movs	r1, #1
 80056fc:	441a      	add	r2, r3
 80056fe:	4658      	mov	r0, fp
 8005700:	4498      	add	r8, r3
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f000 fc64 	bl	8005fd0 <__i2b>
 8005708:	4605      	mov	r5, r0
 800570a:	b15e      	cbz	r6, 8005724 <_dtoa_r+0x75c>
 800570c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd08      	ble.n	8005724 <_dtoa_r+0x75c>
 8005712:	42b3      	cmp	r3, r6
 8005714:	bfa8      	it	ge
 8005716:	4633      	movge	r3, r6
 8005718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800571a:	eba8 0803 	sub.w	r8, r8, r3
 800571e:	1af6      	subs	r6, r6, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	9309      	str	r3, [sp, #36]	@ 0x24
 8005724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005726:	b1f3      	cbz	r3, 8005766 <_dtoa_r+0x79e>
 8005728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80b7 	beq.w	800589e <_dtoa_r+0x8d6>
 8005730:	b18c      	cbz	r4, 8005756 <_dtoa_r+0x78e>
 8005732:	4629      	mov	r1, r5
 8005734:	4622      	mov	r2, r4
 8005736:	4658      	mov	r0, fp
 8005738:	f000 fd08 	bl	800614c <__pow5mult>
 800573c:	464a      	mov	r2, r9
 800573e:	4601      	mov	r1, r0
 8005740:	4605      	mov	r5, r0
 8005742:	4658      	mov	r0, fp
 8005744:	f000 fc5a 	bl	8005ffc <__multiply>
 8005748:	4649      	mov	r1, r9
 800574a:	9004      	str	r0, [sp, #16]
 800574c:	4658      	mov	r0, fp
 800574e:	f000 fb41 	bl	8005dd4 <_Bfree>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	4699      	mov	r9, r3
 8005756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005758:	1b1a      	subs	r2, r3, r4
 800575a:	d004      	beq.n	8005766 <_dtoa_r+0x79e>
 800575c:	4649      	mov	r1, r9
 800575e:	4658      	mov	r0, fp
 8005760:	f000 fcf4 	bl	800614c <__pow5mult>
 8005764:	4681      	mov	r9, r0
 8005766:	2101      	movs	r1, #1
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fc31 	bl	8005fd0 <__i2b>
 800576e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005770:	4604      	mov	r4, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 81c9 	beq.w	8005b0a <_dtoa_r+0xb42>
 8005778:	461a      	mov	r2, r3
 800577a:	4601      	mov	r1, r0
 800577c:	4658      	mov	r0, fp
 800577e:	f000 fce5 	bl	800614c <__pow5mult>
 8005782:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005784:	4604      	mov	r4, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	f300 808f 	bgt.w	80058aa <_dtoa_r+0x8e2>
 800578c:	9b02      	ldr	r3, [sp, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 8087 	bne.w	80058a2 <_dtoa_r+0x8da>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 8083 	bne.w	80058a6 <_dtoa_r+0x8de>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057a6:	0d1b      	lsrs	r3, r3, #20
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	b12b      	cbz	r3, 80057b8 <_dtoa_r+0x7f0>
 80057ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ae:	f108 0801 	add.w	r8, r8, #1
 80057b2:	3301      	adds	r3, #1
 80057b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057b6:	2301      	movs	r3, #1
 80057b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 81aa 	beq.w	8005b16 <_dtoa_r+0xb4e>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c8:	6918      	ldr	r0, [r3, #16]
 80057ca:	f000 fbb5 	bl	8005f38 <__hi0bits>
 80057ce:	f1c0 0020 	rsb	r0, r0, #32
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	4418      	add	r0, r3
 80057d6:	f010 001f 	ands.w	r0, r0, #31
 80057da:	d071      	beq.n	80058c0 <_dtoa_r+0x8f8>
 80057dc:	f1c0 0320 	rsb	r3, r0, #32
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	dd65      	ble.n	80058b0 <_dtoa_r+0x8e8>
 80057e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e6:	f1c0 001c 	rsb	r0, r0, #28
 80057ea:	4403      	add	r3, r0
 80057ec:	4480      	add	r8, r0
 80057ee:	4406      	add	r6, r0
 80057f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f2:	f1b8 0f00 	cmp.w	r8, #0
 80057f6:	dd05      	ble.n	8005804 <_dtoa_r+0x83c>
 80057f8:	4649      	mov	r1, r9
 80057fa:	4642      	mov	r2, r8
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fcff 	bl	8006200 <__lshift>
 8005802:	4681      	mov	r9, r0
 8005804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd05      	ble.n	8005816 <_dtoa_r+0x84e>
 800580a:	4621      	mov	r1, r4
 800580c:	461a      	mov	r2, r3
 800580e:	4658      	mov	r0, fp
 8005810:	f000 fcf6 	bl	8006200 <__lshift>
 8005814:	4604      	mov	r4, r0
 8005816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d053      	beq.n	80058c4 <_dtoa_r+0x8fc>
 800581c:	4621      	mov	r1, r4
 800581e:	4648      	mov	r0, r9
 8005820:	f000 fd5a 	bl	80062d8 <__mcmp>
 8005824:	2800      	cmp	r0, #0
 8005826:	da4d      	bge.n	80058c4 <_dtoa_r+0x8fc>
 8005828:	1e7b      	subs	r3, r7, #1
 800582a:	4649      	mov	r1, r9
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	220a      	movs	r2, #10
 8005830:	2300      	movs	r3, #0
 8005832:	4658      	mov	r0, fp
 8005834:	f000 faf0 	bl	8005e18 <__multadd>
 8005838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800583a:	4681      	mov	r9, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 816c 	beq.w	8005b1a <_dtoa_r+0xb52>
 8005842:	2300      	movs	r3, #0
 8005844:	4629      	mov	r1, r5
 8005846:	220a      	movs	r2, #10
 8005848:	4658      	mov	r0, fp
 800584a:	f000 fae5 	bl	8005e18 <__multadd>
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	4605      	mov	r5, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc61      	bgt.n	800591a <_dtoa_r+0x952>
 8005856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005858:	2b02      	cmp	r3, #2
 800585a:	dc3b      	bgt.n	80058d4 <_dtoa_r+0x90c>
 800585c:	e05d      	b.n	800591a <_dtoa_r+0x952>
 800585e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005860:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005864:	e746      	b.n	80056f4 <_dtoa_r+0x72c>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	1e5c      	subs	r4, r3, #1
 800586a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800586c:	42a3      	cmp	r3, r4
 800586e:	bfbf      	itttt	lt
 8005870:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005872:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005874:	1ae3      	sublt	r3, r4, r3
 8005876:	18d2      	addlt	r2, r2, r3
 8005878:	bfa8      	it	ge
 800587a:	1b1c      	subge	r4, r3, r4
 800587c:	9b07      	ldr	r3, [sp, #28]
 800587e:	bfbe      	ittt	lt
 8005880:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005882:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005884:	2400      	movlt	r4, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	bfb5      	itete	lt
 800588a:	eba8 0603 	sublt.w	r6, r8, r3
 800588e:	4646      	movge	r6, r8
 8005890:	2300      	movlt	r3, #0
 8005892:	9b07      	ldrge	r3, [sp, #28]
 8005894:	e730      	b.n	80056f8 <_dtoa_r+0x730>
 8005896:	4646      	mov	r6, r8
 8005898:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800589a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800589c:	e735      	b.n	800570a <_dtoa_r+0x742>
 800589e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a0:	e75c      	b.n	800575c <_dtoa_r+0x794>
 80058a2:	2300      	movs	r3, #0
 80058a4:	e788      	b.n	80057b8 <_dtoa_r+0x7f0>
 80058a6:	9b02      	ldr	r3, [sp, #8]
 80058a8:	e786      	b.n	80057b8 <_dtoa_r+0x7f0>
 80058aa:	2300      	movs	r3, #0
 80058ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ae:	e788      	b.n	80057c2 <_dtoa_r+0x7fa>
 80058b0:	d09f      	beq.n	80057f2 <_dtoa_r+0x82a>
 80058b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058b4:	331c      	adds	r3, #28
 80058b6:	441a      	add	r2, r3
 80058b8:	4498      	add	r8, r3
 80058ba:	441e      	add	r6, r3
 80058bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80058be:	e798      	b.n	80057f2 <_dtoa_r+0x82a>
 80058c0:	4603      	mov	r3, r0
 80058c2:	e7f6      	b.n	80058b2 <_dtoa_r+0x8ea>
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	9704      	str	r7, [sp, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dc20      	bgt.n	800590e <_dtoa_r+0x946>
 80058cc:	9308      	str	r3, [sp, #32]
 80058ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	dd1e      	ble.n	8005912 <_dtoa_r+0x94a>
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f47f aebc 	bne.w	8005654 <_dtoa_r+0x68c>
 80058dc:	4621      	mov	r1, r4
 80058de:	2205      	movs	r2, #5
 80058e0:	4658      	mov	r0, fp
 80058e2:	f000 fa99 	bl	8005e18 <__multadd>
 80058e6:	4601      	mov	r1, r0
 80058e8:	4604      	mov	r4, r0
 80058ea:	4648      	mov	r0, r9
 80058ec:	f000 fcf4 	bl	80062d8 <__mcmp>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f77f aeaf 	ble.w	8005654 <_dtoa_r+0x68c>
 80058f6:	2331      	movs	r3, #49	@ 0x31
 80058f8:	4656      	mov	r6, sl
 80058fa:	f806 3b01 	strb.w	r3, [r6], #1
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	e6aa      	b.n	800565c <_dtoa_r+0x694>
 8005906:	9c07      	ldr	r4, [sp, #28]
 8005908:	9704      	str	r7, [sp, #16]
 800590a:	4625      	mov	r5, r4
 800590c:	e7f3      	b.n	80058f6 <_dtoa_r+0x92e>
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8104 	beq.w	8005b22 <_dtoa_r+0xb5a>
 800591a:	2e00      	cmp	r6, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x962>
 800591e:	4629      	mov	r1, r5
 8005920:	4632      	mov	r2, r6
 8005922:	4658      	mov	r0, fp
 8005924:	f000 fc6c 	bl	8006200 <__lshift>
 8005928:	4605      	mov	r5, r0
 800592a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05a      	beq.n	80059e6 <_dtoa_r+0xa1e>
 8005930:	4658      	mov	r0, fp
 8005932:	6869      	ldr	r1, [r5, #4]
 8005934:	f000 fa0e 	bl	8005d54 <_Balloc>
 8005938:	4606      	mov	r6, r0
 800593a:	b928      	cbnz	r0, 8005948 <_dtoa_r+0x980>
 800593c:	4602      	mov	r2, r0
 800593e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005942:	4b83      	ldr	r3, [pc, #524]	@ (8005b50 <_dtoa_r+0xb88>)
 8005944:	f7ff bb54 	b.w	8004ff0 <_dtoa_r+0x28>
 8005948:	692a      	ldr	r2, [r5, #16]
 800594a:	f105 010c 	add.w	r1, r5, #12
 800594e:	3202      	adds	r2, #2
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	300c      	adds	r0, #12
 8005954:	f001 ff5e 	bl	8007814 <memcpy>
 8005958:	2201      	movs	r2, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4658      	mov	r0, fp
 800595e:	f000 fc4f 	bl	8006200 <__lshift>
 8005962:	462f      	mov	r7, r5
 8005964:	4605      	mov	r5, r0
 8005966:	f10a 0301 	add.w	r3, sl, #1
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	4453      	add	r3, sl
 8005970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005972:	9b02      	ldr	r3, [sp, #8]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	930a      	str	r3, [sp, #40]	@ 0x28
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	4621      	mov	r1, r4
 800597e:	3b01      	subs	r3, #1
 8005980:	4648      	mov	r0, r9
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	f7ff fa98 	bl	8004eb8 <quorem>
 8005988:	4639      	mov	r1, r7
 800598a:	9008      	str	r0, [sp, #32]
 800598c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005990:	4648      	mov	r0, r9
 8005992:	f000 fca1 	bl	80062d8 <__mcmp>
 8005996:	462a      	mov	r2, r5
 8005998:	9009      	str	r0, [sp, #36]	@ 0x24
 800599a:	4621      	mov	r1, r4
 800599c:	4658      	mov	r0, fp
 800599e:	f000 fcb7 	bl	8006310 <__mdiff>
 80059a2:	68c2      	ldr	r2, [r0, #12]
 80059a4:	4606      	mov	r6, r0
 80059a6:	bb02      	cbnz	r2, 80059ea <_dtoa_r+0xa22>
 80059a8:	4601      	mov	r1, r0
 80059aa:	4648      	mov	r0, r9
 80059ac:	f000 fc94 	bl	80062d8 <__mcmp>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4631      	mov	r1, r6
 80059b4:	4658      	mov	r0, fp
 80059b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80059b8:	f000 fa0c 	bl	8005dd4 <_Bfree>
 80059bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059c0:	9e07      	ldr	r6, [sp, #28]
 80059c2:	ea43 0102 	orr.w	r1, r3, r2
 80059c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c8:	4319      	orrs	r1, r3
 80059ca:	d110      	bne.n	80059ee <_dtoa_r+0xa26>
 80059cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059d0:	d029      	beq.n	8005a26 <_dtoa_r+0xa5e>
 80059d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dd02      	ble.n	80059de <_dtoa_r+0xa16>
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059de:	9b02      	ldr	r3, [sp, #8]
 80059e0:	f883 8000 	strb.w	r8, [r3]
 80059e4:	e63b      	b.n	800565e <_dtoa_r+0x696>
 80059e6:	4628      	mov	r0, r5
 80059e8:	e7bb      	b.n	8005962 <_dtoa_r+0x99a>
 80059ea:	2201      	movs	r2, #1
 80059ec:	e7e1      	b.n	80059b2 <_dtoa_r+0x9ea>
 80059ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	db04      	blt.n	80059fe <_dtoa_r+0xa36>
 80059f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80059f6:	430b      	orrs	r3, r1
 80059f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059fa:	430b      	orrs	r3, r1
 80059fc:	d120      	bne.n	8005a40 <_dtoa_r+0xa78>
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	dded      	ble.n	80059de <_dtoa_r+0xa16>
 8005a02:	4649      	mov	r1, r9
 8005a04:	2201      	movs	r2, #1
 8005a06:	4658      	mov	r0, fp
 8005a08:	f000 fbfa 	bl	8006200 <__lshift>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4681      	mov	r9, r0
 8005a10:	f000 fc62 	bl	80062d8 <__mcmp>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dc03      	bgt.n	8005a20 <_dtoa_r+0xa58>
 8005a18:	d1e1      	bne.n	80059de <_dtoa_r+0xa16>
 8005a1a:	f018 0f01 	tst.w	r8, #1
 8005a1e:	d0de      	beq.n	80059de <_dtoa_r+0xa16>
 8005a20:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a24:	d1d8      	bne.n	80059d8 <_dtoa_r+0xa10>
 8005a26:	2339      	movs	r3, #57	@ 0x39
 8005a28:	9a02      	ldr	r2, [sp, #8]
 8005a2a:	7013      	strb	r3, [r2, #0]
 8005a2c:	4633      	mov	r3, r6
 8005a2e:	461e      	mov	r6, r3
 8005a30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	2a39      	cmp	r2, #57	@ 0x39
 8005a38:	d052      	beq.n	8005ae0 <_dtoa_r+0xb18>
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e60e      	b.n	800565e <_dtoa_r+0x696>
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	dd07      	ble.n	8005a54 <_dtoa_r+0xa8c>
 8005a44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a48:	d0ed      	beq.n	8005a26 <_dtoa_r+0xa5e>
 8005a4a:	9a02      	ldr	r2, [sp, #8]
 8005a4c:	f108 0301 	add.w	r3, r8, #1
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	e604      	b.n	800565e <_dtoa_r+0x696>
 8005a54:	9b07      	ldr	r3, [sp, #28]
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d028      	beq.n	8005ab4 <_dtoa_r+0xaec>
 8005a62:	4649      	mov	r1, r9
 8005a64:	2300      	movs	r3, #0
 8005a66:	220a      	movs	r2, #10
 8005a68:	4658      	mov	r0, fp
 8005a6a:	f000 f9d5 	bl	8005e18 <__multadd>
 8005a6e:	42af      	cmp	r7, r5
 8005a70:	4681      	mov	r9, r0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	f04f 020a 	mov.w	r2, #10
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4658      	mov	r0, fp
 8005a7e:	d107      	bne.n	8005a90 <_dtoa_r+0xac8>
 8005a80:	f000 f9ca 	bl	8005e18 <__multadd>
 8005a84:	4607      	mov	r7, r0
 8005a86:	4605      	mov	r5, r0
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9307      	str	r3, [sp, #28]
 8005a8e:	e774      	b.n	800597a <_dtoa_r+0x9b2>
 8005a90:	f000 f9c2 	bl	8005e18 <__multadd>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4607      	mov	r7, r0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 f9bb 	bl	8005e18 <__multadd>
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	e7f0      	b.n	8005a88 <_dtoa_r+0xac0>
 8005aa6:	9b08      	ldr	r3, [sp, #32]
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bfcc      	ite	gt
 8005aae:	461e      	movgt	r6, r3
 8005ab0:	2601      	movle	r6, #1
 8005ab2:	4456      	add	r6, sl
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4658      	mov	r0, fp
 8005aba:	f000 fba1 	bl	8006200 <__lshift>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	f000 fc09 	bl	80062d8 <__mcmp>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	dcb0      	bgt.n	8005a2c <_dtoa_r+0xa64>
 8005aca:	d102      	bne.n	8005ad2 <_dtoa_r+0xb0a>
 8005acc:	f018 0f01 	tst.w	r8, #1
 8005ad0:	d1ac      	bne.n	8005a2c <_dtoa_r+0xa64>
 8005ad2:	4633      	mov	r3, r6
 8005ad4:	461e      	mov	r6, r3
 8005ad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ada:	2a30      	cmp	r2, #48	@ 0x30
 8005adc:	d0fa      	beq.n	8005ad4 <_dtoa_r+0xb0c>
 8005ade:	e5be      	b.n	800565e <_dtoa_r+0x696>
 8005ae0:	459a      	cmp	sl, r3
 8005ae2:	d1a4      	bne.n	8005a2e <_dtoa_r+0xa66>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	2331      	movs	r3, #49	@ 0x31
 8005aec:	f88a 3000 	strb.w	r3, [sl]
 8005af0:	e5b5      	b.n	800565e <_dtoa_r+0x696>
 8005af2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005af4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b54 <_dtoa_r+0xb8c>
 8005af8:	b11b      	cbz	r3, 8005b02 <_dtoa_r+0xb3a>
 8005afa:	f10a 0308 	add.w	r3, sl, #8
 8005afe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	4650      	mov	r0, sl
 8005b04:	b017      	add	sp, #92	@ 0x5c
 8005b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	f77f ae3d 	ble.w	800578c <_dtoa_r+0x7c4>
 8005b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b16:	2001      	movs	r0, #1
 8005b18:	e65b      	b.n	80057d2 <_dtoa_r+0x80a>
 8005b1a:	9b08      	ldr	r3, [sp, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f77f aed6 	ble.w	80058ce <_dtoa_r+0x906>
 8005b22:	4656      	mov	r6, sl
 8005b24:	4621      	mov	r1, r4
 8005b26:	4648      	mov	r0, r9
 8005b28:	f7ff f9c6 	bl	8004eb8 <quorem>
 8005b2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	f806 8b01 	strb.w	r8, [r6], #1
 8005b36:	eba6 020a 	sub.w	r2, r6, sl
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	ddb3      	ble.n	8005aa6 <_dtoa_r+0xade>
 8005b3e:	4649      	mov	r1, r9
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 f967 	bl	8005e18 <__multadd>
 8005b4a:	4681      	mov	r9, r0
 8005b4c:	e7ea      	b.n	8005b24 <_dtoa_r+0xb5c>
 8005b4e:	bf00      	nop
 8005b50:	08008657 	.word	0x08008657
 8005b54:	080085db 	.word	0x080085db

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d040      	beq.n	8005be2 <_free_r+0x8a>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f000 f8e6 	bl	8005d3c <__malloc_lock>
 8005b70:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <_free_r+0x8c>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	b933      	cbnz	r3, 8005b84 <_free_r+0x2c>
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	6014      	str	r4, [r2, #0]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b80:	f000 b8e2 	b.w	8005d48 <__malloc_unlock>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d908      	bls.n	8005b9a <_free_r+0x42>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf01      	itttt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	e7ed      	b.n	8005b76 <_free_r+0x1e>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x4c>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x42>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1850      	adds	r0, r2, r1
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x6c>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	4401      	add	r1, r0
 8005bb0:	1850      	adds	r0, r2, r1
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1e0      	bne.n	8005b7a <_free_r+0x22>
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4408      	add	r0, r1
 8005bbe:	6010      	str	r0, [r2, #0]
 8005bc0:	6053      	str	r3, [r2, #4]
 8005bc2:	e7da      	b.n	8005b7a <_free_r+0x22>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x74>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	e7d6      	b.n	8005b7a <_free_r+0x22>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	1821      	adds	r1, r4, r0
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf01      	itttt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6054      	str	r4, [r2, #4]
 8005be0:	e7cb      	b.n	8005b7a <_free_r+0x22>
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200005c8 	.word	0x200005c8

08005be8 <malloc>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	@ (8005bf4 <malloc+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f000 b825 	b.w	8005c3c <_malloc_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000018 	.word	0x20000018

08005bf8 <sbrk_aligned>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8005c38 <sbrk_aligned+0x40>)
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	6831      	ldr	r1, [r6, #0]
 8005c00:	4605      	mov	r5, r0
 8005c02:	b911      	cbnz	r1, 8005c0a <sbrk_aligned+0x12>
 8005c04:	f001 fdf6 	bl	80077f4 <_sbrk_r>
 8005c08:	6030      	str	r0, [r6, #0]
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f001 fdf1 	bl	80077f4 <_sbrk_r>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d103      	bne.n	8005c1e <sbrk_aligned+0x26>
 8005c16:	f04f 34ff 	mov.w	r4, #4294967295
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	1cc4      	adds	r4, r0, #3
 8005c20:	f024 0403 	bic.w	r4, r4, #3
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d0f8      	beq.n	8005c1a <sbrk_aligned+0x22>
 8005c28:	1a21      	subs	r1, r4, r0
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f001 fde2 	bl	80077f4 <_sbrk_r>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d1f2      	bne.n	8005c1a <sbrk_aligned+0x22>
 8005c34:	e7ef      	b.n	8005c16 <sbrk_aligned+0x1e>
 8005c36:	bf00      	nop
 8005c38:	200005c4 	.word	0x200005c4

08005c3c <_malloc_r>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	1ccd      	adds	r5, r1, #3
 8005c42:	f025 0503 	bic.w	r5, r5, #3
 8005c46:	3508      	adds	r5, #8
 8005c48:	2d0c      	cmp	r5, #12
 8005c4a:	bf38      	it	cc
 8005c4c:	250c      	movcc	r5, #12
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	4606      	mov	r6, r0
 8005c52:	db01      	blt.n	8005c58 <_malloc_r+0x1c>
 8005c54:	42a9      	cmp	r1, r5
 8005c56:	d904      	bls.n	8005c62 <_malloc_r+0x26>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d38 <_malloc_r+0xfc>
 8005c66:	f000 f869 	bl	8005d3c <__malloc_lock>
 8005c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6e:	461c      	mov	r4, r3
 8005c70:	bb44      	cbnz	r4, 8005cc4 <_malloc_r+0x88>
 8005c72:	4629      	mov	r1, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ffbf 	bl	8005bf8 <sbrk_aligned>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	d158      	bne.n	8005d32 <_malloc_r+0xf6>
 8005c80:	f8d8 4000 	ldr.w	r4, [r8]
 8005c84:	4627      	mov	r7, r4
 8005c86:	2f00      	cmp	r7, #0
 8005c88:	d143      	bne.n	8005d12 <_malloc_r+0xd6>
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d04b      	beq.n	8005d26 <_malloc_r+0xea>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	4639      	mov	r1, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	eb04 0903 	add.w	r9, r4, r3
 8005c98:	f001 fdac 	bl	80077f4 <_sbrk_r>
 8005c9c:	4581      	cmp	r9, r0
 8005c9e:	d142      	bne.n	8005d26 <_malloc_r+0xea>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	1a6d      	subs	r5, r5, r1
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7ff ffa6 	bl	8005bf8 <sbrk_aligned>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d03a      	beq.n	8005d26 <_malloc_r+0xea>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	442b      	add	r3, r5
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	bb62      	cbnz	r2, 8005d18 <_malloc_r+0xdc>
 8005cbe:	f8c8 7000 	str.w	r7, [r8]
 8005cc2:	e00f      	b.n	8005ce4 <_malloc_r+0xa8>
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	1b52      	subs	r2, r2, r5
 8005cc8:	d420      	bmi.n	8005d0c <_malloc_r+0xd0>
 8005cca:	2a0b      	cmp	r2, #11
 8005ccc:	d917      	bls.n	8005cfe <_malloc_r+0xc2>
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	6025      	str	r5, [r4, #0]
 8005cd4:	bf18      	it	ne
 8005cd6:	6059      	strne	r1, [r3, #4]
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	bf08      	it	eq
 8005cdc:	f8c8 1000 	streq.w	r1, [r8]
 8005ce0:	5162      	str	r2, [r4, r5]
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f82f 	bl	8005d48 <__malloc_unlock>
 8005cea:	f104 000b 	add.w	r0, r4, #11
 8005cee:	1d23      	adds	r3, r4, #4
 8005cf0:	f020 0007 	bic.w	r0, r0, #7
 8005cf4:	1ac2      	subs	r2, r0, r3
 8005cf6:	bf1c      	itt	ne
 8005cf8:	1a1b      	subne	r3, r3, r0
 8005cfa:	50a3      	strne	r3, [r4, r2]
 8005cfc:	e7af      	b.n	8005c5e <_malloc_r+0x22>
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	bf0c      	ite	eq
 8005d04:	f8c8 2000 	streq.w	r2, [r8]
 8005d08:	605a      	strne	r2, [r3, #4]
 8005d0a:	e7eb      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	6864      	ldr	r4, [r4, #4]
 8005d10:	e7ae      	b.n	8005c70 <_malloc_r+0x34>
 8005d12:	463c      	mov	r4, r7
 8005d14:	687f      	ldr	r7, [r7, #4]
 8005d16:	e7b6      	b.n	8005c86 <_malloc_r+0x4a>
 8005d18:	461a      	mov	r2, r3
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d1fb      	bne.n	8005d18 <_malloc_r+0xdc>
 8005d20:	2300      	movs	r3, #0
 8005d22:	6053      	str	r3, [r2, #4]
 8005d24:	e7de      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d26:	230c      	movs	r3, #12
 8005d28:	4630      	mov	r0, r6
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	f000 f80c 	bl	8005d48 <__malloc_unlock>
 8005d30:	e794      	b.n	8005c5c <_malloc_r+0x20>
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	e7d6      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d36:	bf00      	nop
 8005d38:	200005c8 	.word	0x200005c8

08005d3c <__malloc_lock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	@ (8005d44 <__malloc_lock+0x8>)
 8005d3e:	f7ff b8a6 	b.w	8004e8e <__retarget_lock_acquire_recursive>
 8005d42:	bf00      	nop
 8005d44:	200005c0 	.word	0x200005c0

08005d48 <__malloc_unlock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	@ (8005d50 <__malloc_unlock+0x8>)
 8005d4a:	f7ff b8a1 	b.w	8004e90 <__retarget_lock_release_recursive>
 8005d4e:	bf00      	nop
 8005d50:	200005c0 	.word	0x200005c0

08005d54 <_Balloc>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	69c6      	ldr	r6, [r0, #28]
 8005d58:	4604      	mov	r4, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	b976      	cbnz	r6, 8005d7c <_Balloc+0x28>
 8005d5e:	2010      	movs	r0, #16
 8005d60:	f7ff ff42 	bl	8005be8 <malloc>
 8005d64:	4602      	mov	r2, r0
 8005d66:	61e0      	str	r0, [r4, #28]
 8005d68:	b920      	cbnz	r0, 8005d74 <_Balloc+0x20>
 8005d6a:	216b      	movs	r1, #107	@ 0x6b
 8005d6c:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <_Balloc+0x78>)
 8005d6e:	4818      	ldr	r0, [pc, #96]	@ (8005dd0 <_Balloc+0x7c>)
 8005d70:	f001 fd64 	bl	800783c <__assert_func>
 8005d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d78:	6006      	str	r6, [r0, #0]
 8005d7a:	60c6      	str	r6, [r0, #12]
 8005d7c:	69e6      	ldr	r6, [r4, #28]
 8005d7e:	68f3      	ldr	r3, [r6, #12]
 8005d80:	b183      	cbz	r3, 8005da4 <_Balloc+0x50>
 8005d82:	69e3      	ldr	r3, [r4, #28]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d8a:	b9b8      	cbnz	r0, 8005dbc <_Balloc+0x68>
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d92:	1d72      	adds	r2, r6, #5
 8005d94:	4620      	mov	r0, r4
 8005d96:	0092      	lsls	r2, r2, #2
 8005d98:	f001 fd6e 	bl	8007878 <_calloc_r>
 8005d9c:	b160      	cbz	r0, 8005db8 <_Balloc+0x64>
 8005d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005da2:	e00e      	b.n	8005dc2 <_Balloc+0x6e>
 8005da4:	2221      	movs	r2, #33	@ 0x21
 8005da6:	2104      	movs	r1, #4
 8005da8:	4620      	mov	r0, r4
 8005daa:	f001 fd65 	bl	8007878 <_calloc_r>
 8005dae:	69e3      	ldr	r3, [r4, #28]
 8005db0:	60f0      	str	r0, [r6, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e4      	bne.n	8005d82 <_Balloc+0x2e>
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	6802      	ldr	r2, [r0, #0]
 8005dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dc8:	e7f7      	b.n	8005dba <_Balloc+0x66>
 8005dca:	bf00      	nop
 8005dcc:	080085e8 	.word	0x080085e8
 8005dd0:	08008668 	.word	0x08008668

08005dd4 <_Bfree>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	69c6      	ldr	r6, [r0, #28]
 8005dd8:	4605      	mov	r5, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	b976      	cbnz	r6, 8005dfc <_Bfree+0x28>
 8005dde:	2010      	movs	r0, #16
 8005de0:	f7ff ff02 	bl	8005be8 <malloc>
 8005de4:	4602      	mov	r2, r0
 8005de6:	61e8      	str	r0, [r5, #28]
 8005de8:	b920      	cbnz	r0, 8005df4 <_Bfree+0x20>
 8005dea:	218f      	movs	r1, #143	@ 0x8f
 8005dec:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <_Bfree+0x3c>)
 8005dee:	4809      	ldr	r0, [pc, #36]	@ (8005e14 <_Bfree+0x40>)
 8005df0:	f001 fd24 	bl	800783c <__assert_func>
 8005df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df8:	6006      	str	r6, [r0, #0]
 8005dfa:	60c6      	str	r6, [r0, #12]
 8005dfc:	b13c      	cbz	r4, 8005e0e <_Bfree+0x3a>
 8005dfe:	69eb      	ldr	r3, [r5, #28]
 8005e00:	6862      	ldr	r2, [r4, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e08:	6021      	str	r1, [r4, #0]
 8005e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	080085e8 	.word	0x080085e8
 8005e14:	08008668 	.word	0x08008668

08005e18 <__multadd>:
 8005e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	461e      	mov	r6, r3
 8005e22:	2000      	movs	r0, #0
 8005e24:	690d      	ldr	r5, [r1, #16]
 8005e26:	f101 0c14 	add.w	ip, r1, #20
 8005e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e2e:	3001      	adds	r0, #1
 8005e30:	b299      	uxth	r1, r3
 8005e32:	fb02 6101 	mla	r1, r2, r1, r6
 8005e36:	0c1e      	lsrs	r6, r3, #16
 8005e38:	0c0b      	lsrs	r3, r1, #16
 8005e3a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e3e:	b289      	uxth	r1, r1
 8005e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e44:	4285      	cmp	r5, r0
 8005e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e4e:	dcec      	bgt.n	8005e2a <__multadd+0x12>
 8005e50:	b30e      	cbz	r6, 8005e96 <__multadd+0x7e>
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc19      	bgt.n	8005e8c <__multadd+0x74>
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	3101      	adds	r1, #1
 8005e5e:	f7ff ff79 	bl	8005d54 <_Balloc>
 8005e62:	4680      	mov	r8, r0
 8005e64:	b928      	cbnz	r0, 8005e72 <__multadd+0x5a>
 8005e66:	4602      	mov	r2, r0
 8005e68:	21ba      	movs	r1, #186	@ 0xba
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <__multadd+0x84>)
 8005e6c:	480c      	ldr	r0, [pc, #48]	@ (8005ea0 <__multadd+0x88>)
 8005e6e:	f001 fce5 	bl	800783c <__assert_func>
 8005e72:	6922      	ldr	r2, [r4, #16]
 8005e74:	f104 010c 	add.w	r1, r4, #12
 8005e78:	3202      	adds	r2, #2
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	300c      	adds	r0, #12
 8005e7e:	f001 fcc9 	bl	8007814 <memcpy>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff ffa5 	bl	8005dd4 <_Bfree>
 8005e8a:	4644      	mov	r4, r8
 8005e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e90:	3501      	adds	r5, #1
 8005e92:	615e      	str	r6, [r3, #20]
 8005e94:	6125      	str	r5, [r4, #16]
 8005e96:	4620      	mov	r0, r4
 8005e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e9c:	08008657 	.word	0x08008657
 8005ea0:	08008668 	.word	0x08008668

08005ea4 <__s2b>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	2209      	movs	r2, #9
 8005eac:	461f      	mov	r7, r3
 8005eae:	3308      	adds	r3, #8
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	2201      	movs	r2, #1
 8005eba:	2100      	movs	r1, #0
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	db09      	blt.n	8005ed4 <__s2b+0x30>
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff ff47 	bl	8005d54 <_Balloc>
 8005ec6:	b940      	cbnz	r0, 8005eda <__s2b+0x36>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	21d3      	movs	r1, #211	@ 0xd3
 8005ecc:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <__s2b+0x8c>)
 8005ece:	4819      	ldr	r0, [pc, #100]	@ (8005f34 <__s2b+0x90>)
 8005ed0:	f001 fcb4 	bl	800783c <__assert_func>
 8005ed4:	0052      	lsls	r2, r2, #1
 8005ed6:	3101      	adds	r1, #1
 8005ed8:	e7f0      	b.n	8005ebc <__s2b+0x18>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	2d09      	cmp	r5, #9
 8005ede:	6143      	str	r3, [r0, #20]
 8005ee0:	f04f 0301 	mov.w	r3, #1
 8005ee4:	6103      	str	r3, [r0, #16]
 8005ee6:	dd16      	ble.n	8005f16 <__s2b+0x72>
 8005ee8:	f104 0909 	add.w	r9, r4, #9
 8005eec:	46c8      	mov	r8, r9
 8005eee:	442c      	add	r4, r5
 8005ef0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4630      	mov	r0, r6
 8005efa:	3b30      	subs	r3, #48	@ 0x30
 8005efc:	f7ff ff8c 	bl	8005e18 <__multadd>
 8005f00:	45a0      	cmp	r8, r4
 8005f02:	d1f5      	bne.n	8005ef0 <__s2b+0x4c>
 8005f04:	f1a5 0408 	sub.w	r4, r5, #8
 8005f08:	444c      	add	r4, r9
 8005f0a:	1b2d      	subs	r5, r5, r4
 8005f0c:	1963      	adds	r3, r4, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	db04      	blt.n	8005f1c <__s2b+0x78>
 8005f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f16:	2509      	movs	r5, #9
 8005f18:	340a      	adds	r4, #10
 8005f1a:	e7f6      	b.n	8005f0a <__s2b+0x66>
 8005f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f20:	4601      	mov	r1, r0
 8005f22:	220a      	movs	r2, #10
 8005f24:	4630      	mov	r0, r6
 8005f26:	3b30      	subs	r3, #48	@ 0x30
 8005f28:	f7ff ff76 	bl	8005e18 <__multadd>
 8005f2c:	e7ee      	b.n	8005f0c <__s2b+0x68>
 8005f2e:	bf00      	nop
 8005f30:	08008657 	.word	0x08008657
 8005f34:	08008668 	.word	0x08008668

08005f38 <__hi0bits>:
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f3e:	bf3a      	itte	cc
 8005f40:	0403      	lslcc	r3, r0, #16
 8005f42:	2010      	movcc	r0, #16
 8005f44:	2000      	movcs	r0, #0
 8005f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f4a:	bf3c      	itt	cc
 8005f4c:	021b      	lslcc	r3, r3, #8
 8005f4e:	3008      	addcc	r0, #8
 8005f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f54:	bf3c      	itt	cc
 8005f56:	011b      	lslcc	r3, r3, #4
 8005f58:	3004      	addcc	r0, #4
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5e:	bf3c      	itt	cc
 8005f60:	009b      	lslcc	r3, r3, #2
 8005f62:	3002      	addcc	r0, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db05      	blt.n	8005f74 <__hi0bits+0x3c>
 8005f68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f6c:	f100 0001 	add.w	r0, r0, #1
 8005f70:	bf08      	it	eq
 8005f72:	2020      	moveq	r0, #32
 8005f74:	4770      	bx	lr

08005f76 <__lo0bits>:
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f013 0007 	ands.w	r0, r3, #7
 8005f7e:	d00b      	beq.n	8005f98 <__lo0bits+0x22>
 8005f80:	07d9      	lsls	r1, r3, #31
 8005f82:	d421      	bmi.n	8005fc8 <__lo0bits+0x52>
 8005f84:	0798      	lsls	r0, r3, #30
 8005f86:	bf49      	itett	mi
 8005f88:	085b      	lsrmi	r3, r3, #1
 8005f8a:	089b      	lsrpl	r3, r3, #2
 8005f8c:	2001      	movmi	r0, #1
 8005f8e:	6013      	strmi	r3, [r2, #0]
 8005f90:	bf5c      	itt	pl
 8005f92:	2002      	movpl	r0, #2
 8005f94:	6013      	strpl	r3, [r2, #0]
 8005f96:	4770      	bx	lr
 8005f98:	b299      	uxth	r1, r3
 8005f9a:	b909      	cbnz	r1, 8005fa0 <__lo0bits+0x2a>
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	b2d9      	uxtb	r1, r3
 8005fa2:	b909      	cbnz	r1, 8005fa8 <__lo0bits+0x32>
 8005fa4:	3008      	adds	r0, #8
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	0719      	lsls	r1, r3, #28
 8005faa:	bf04      	itt	eq
 8005fac:	091b      	lsreq	r3, r3, #4
 8005fae:	3004      	addeq	r0, #4
 8005fb0:	0799      	lsls	r1, r3, #30
 8005fb2:	bf04      	itt	eq
 8005fb4:	089b      	lsreq	r3, r3, #2
 8005fb6:	3002      	addeq	r0, #2
 8005fb8:	07d9      	lsls	r1, r3, #31
 8005fba:	d403      	bmi.n	8005fc4 <__lo0bits+0x4e>
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	f100 0001 	add.w	r0, r0, #1
 8005fc2:	d003      	beq.n	8005fcc <__lo0bits+0x56>
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4770      	bx	lr
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4770      	bx	lr
 8005fcc:	2020      	movs	r0, #32
 8005fce:	4770      	bx	lr

08005fd0 <__i2b>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	f7ff febd 	bl	8005d54 <_Balloc>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <__i2b+0x1a>
 8005fde:	f240 1145 	movw	r1, #325	@ 0x145
 8005fe2:	4b04      	ldr	r3, [pc, #16]	@ (8005ff4 <__i2b+0x24>)
 8005fe4:	4804      	ldr	r0, [pc, #16]	@ (8005ff8 <__i2b+0x28>)
 8005fe6:	f001 fc29 	bl	800783c <__assert_func>
 8005fea:	2301      	movs	r3, #1
 8005fec:	6144      	str	r4, [r0, #20]
 8005fee:	6103      	str	r3, [r0, #16]
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08008657 	.word	0x08008657
 8005ff8:	08008668 	.word	0x08008668

08005ffc <__multiply>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	4614      	mov	r4, r2
 8006002:	690a      	ldr	r2, [r1, #16]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	460f      	mov	r7, r1
 8006008:	429a      	cmp	r2, r3
 800600a:	bfa2      	ittt	ge
 800600c:	4623      	movge	r3, r4
 800600e:	460c      	movge	r4, r1
 8006010:	461f      	movge	r7, r3
 8006012:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006016:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	eb0a 0609 	add.w	r6, sl, r9
 8006022:	42b3      	cmp	r3, r6
 8006024:	b085      	sub	sp, #20
 8006026:	bfb8      	it	lt
 8006028:	3101      	addlt	r1, #1
 800602a:	f7ff fe93 	bl	8005d54 <_Balloc>
 800602e:	b930      	cbnz	r0, 800603e <__multiply+0x42>
 8006030:	4602      	mov	r2, r0
 8006032:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006036:	4b43      	ldr	r3, [pc, #268]	@ (8006144 <__multiply+0x148>)
 8006038:	4843      	ldr	r0, [pc, #268]	@ (8006148 <__multiply+0x14c>)
 800603a:	f001 fbff 	bl	800783c <__assert_func>
 800603e:	f100 0514 	add.w	r5, r0, #20
 8006042:	462b      	mov	r3, r5
 8006044:	2200      	movs	r2, #0
 8006046:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800604a:	4543      	cmp	r3, r8
 800604c:	d321      	bcc.n	8006092 <__multiply+0x96>
 800604e:	f107 0114 	add.w	r1, r7, #20
 8006052:	f104 0214 	add.w	r2, r4, #20
 8006056:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800605a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	1b13      	subs	r3, r2, r4
 8006062:	3b15      	subs	r3, #21
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	3304      	adds	r3, #4
 800606a:	f104 0715 	add.w	r7, r4, #21
 800606e:	42ba      	cmp	r2, r7
 8006070:	bf38      	it	cc
 8006072:	2304      	movcc	r3, #4
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	9103      	str	r1, [sp, #12]
 800607a:	428b      	cmp	r3, r1
 800607c:	d80c      	bhi.n	8006098 <__multiply+0x9c>
 800607e:	2e00      	cmp	r6, #0
 8006080:	dd03      	ble.n	800608a <__multiply+0x8e>
 8006082:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006086:	2b00      	cmp	r3, #0
 8006088:	d05a      	beq.n	8006140 <__multiply+0x144>
 800608a:	6106      	str	r6, [r0, #16]
 800608c:	b005      	add	sp, #20
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	f843 2b04 	str.w	r2, [r3], #4
 8006096:	e7d8      	b.n	800604a <__multiply+0x4e>
 8006098:	f8b1 a000 	ldrh.w	sl, [r1]
 800609c:	f1ba 0f00 	cmp.w	sl, #0
 80060a0:	d023      	beq.n	80060ea <__multiply+0xee>
 80060a2:	46a9      	mov	r9, r5
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	f104 0e14 	add.w	lr, r4, #20
 80060ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80060b0:	f8d9 3000 	ldr.w	r3, [r9]
 80060b4:	fa1f fb87 	uxth.w	fp, r7
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80060be:	4463      	add	r3, ip
 80060c0:	f8d9 c000 	ldr.w	ip, [r9]
 80060c4:	0c3f      	lsrs	r7, r7, #16
 80060c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060ca:	fb0a c707 	mla	r7, sl, r7, ip
 80060ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060d8:	4572      	cmp	r2, lr
 80060da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80060de:	f849 3b04 	str.w	r3, [r9], #4
 80060e2:	d8e3      	bhi.n	80060ac <__multiply+0xb0>
 80060e4:	9b01      	ldr	r3, [sp, #4]
 80060e6:	f845 c003 	str.w	ip, [r5, r3]
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	3104      	adds	r1, #4
 80060ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060f2:	f1b9 0f00 	cmp.w	r9, #0
 80060f6:	d021      	beq.n	800613c <__multiply+0x140>
 80060f8:	46ae      	mov	lr, r5
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	f104 0c14 	add.w	ip, r4, #20
 8006104:	f8bc b000 	ldrh.w	fp, [ip]
 8006108:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800610c:	b29b      	uxth	r3, r3
 800610e:	fb09 770b 	mla	r7, r9, fp, r7
 8006112:	4457      	add	r7, sl
 8006114:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006118:	f84e 3b04 	str.w	r3, [lr], #4
 800611c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006124:	f8be 3000 	ldrh.w	r3, [lr]
 8006128:	4562      	cmp	r2, ip
 800612a:	fb09 330a 	mla	r3, r9, sl, r3
 800612e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006136:	d8e5      	bhi.n	8006104 <__multiply+0x108>
 8006138:	9f01      	ldr	r7, [sp, #4]
 800613a:	51eb      	str	r3, [r5, r7]
 800613c:	3504      	adds	r5, #4
 800613e:	e79a      	b.n	8006076 <__multiply+0x7a>
 8006140:	3e01      	subs	r6, #1
 8006142:	e79c      	b.n	800607e <__multiply+0x82>
 8006144:	08008657 	.word	0x08008657
 8006148:	08008668 	.word	0x08008668

0800614c <__pow5mult>:
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	4615      	mov	r5, r2
 8006152:	f012 0203 	ands.w	r2, r2, #3
 8006156:	4607      	mov	r7, r0
 8006158:	460e      	mov	r6, r1
 800615a:	d007      	beq.n	800616c <__pow5mult+0x20>
 800615c:	4c25      	ldr	r4, [pc, #148]	@ (80061f4 <__pow5mult+0xa8>)
 800615e:	3a01      	subs	r2, #1
 8006160:	2300      	movs	r3, #0
 8006162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006166:	f7ff fe57 	bl	8005e18 <__multadd>
 800616a:	4606      	mov	r6, r0
 800616c:	10ad      	asrs	r5, r5, #2
 800616e:	d03d      	beq.n	80061ec <__pow5mult+0xa0>
 8006170:	69fc      	ldr	r4, [r7, #28]
 8006172:	b97c      	cbnz	r4, 8006194 <__pow5mult+0x48>
 8006174:	2010      	movs	r0, #16
 8006176:	f7ff fd37 	bl	8005be8 <malloc>
 800617a:	4602      	mov	r2, r0
 800617c:	61f8      	str	r0, [r7, #28]
 800617e:	b928      	cbnz	r0, 800618c <__pow5mult+0x40>
 8006180:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006184:	4b1c      	ldr	r3, [pc, #112]	@ (80061f8 <__pow5mult+0xac>)
 8006186:	481d      	ldr	r0, [pc, #116]	@ (80061fc <__pow5mult+0xb0>)
 8006188:	f001 fb58 	bl	800783c <__assert_func>
 800618c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006190:	6004      	str	r4, [r0, #0]
 8006192:	60c4      	str	r4, [r0, #12]
 8006194:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800619c:	b94c      	cbnz	r4, 80061b2 <__pow5mult+0x66>
 800619e:	f240 2171 	movw	r1, #625	@ 0x271
 80061a2:	4638      	mov	r0, r7
 80061a4:	f7ff ff14 	bl	8005fd0 <__i2b>
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b0:	6003      	str	r3, [r0, #0]
 80061b2:	f04f 0900 	mov.w	r9, #0
 80061b6:	07eb      	lsls	r3, r5, #31
 80061b8:	d50a      	bpl.n	80061d0 <__pow5mult+0x84>
 80061ba:	4631      	mov	r1, r6
 80061bc:	4622      	mov	r2, r4
 80061be:	4638      	mov	r0, r7
 80061c0:	f7ff ff1c 	bl	8005ffc <__multiply>
 80061c4:	4680      	mov	r8, r0
 80061c6:	4631      	mov	r1, r6
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff fe03 	bl	8005dd4 <_Bfree>
 80061ce:	4646      	mov	r6, r8
 80061d0:	106d      	asrs	r5, r5, #1
 80061d2:	d00b      	beq.n	80061ec <__pow5mult+0xa0>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	b938      	cbnz	r0, 80061e8 <__pow5mult+0x9c>
 80061d8:	4622      	mov	r2, r4
 80061da:	4621      	mov	r1, r4
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff0d 	bl	8005ffc <__multiply>
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	f8c0 9000 	str.w	r9, [r0]
 80061e8:	4604      	mov	r4, r0
 80061ea:	e7e4      	b.n	80061b6 <__pow5mult+0x6a>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	bf00      	nop
 80061f4:	080086c4 	.word	0x080086c4
 80061f8:	080085e8 	.word	0x080085e8
 80061fc:	08008668 	.word	0x08008668

08006200 <__lshift>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	4607      	mov	r7, r0
 8006208:	4691      	mov	r9, r2
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	6849      	ldr	r1, [r1, #4]
 800620e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006218:	f108 0601 	add.w	r6, r8, #1
 800621c:	42b3      	cmp	r3, r6
 800621e:	db0b      	blt.n	8006238 <__lshift+0x38>
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff fd97 	bl	8005d54 <_Balloc>
 8006226:	4605      	mov	r5, r0
 8006228:	b948      	cbnz	r0, 800623e <__lshift+0x3e>
 800622a:	4602      	mov	r2, r0
 800622c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006230:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <__lshift+0xd0>)
 8006232:	4828      	ldr	r0, [pc, #160]	@ (80062d4 <__lshift+0xd4>)
 8006234:	f001 fb02 	bl	800783c <__assert_func>
 8006238:	3101      	adds	r1, #1
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	e7ee      	b.n	800621c <__lshift+0x1c>
 800623e:	2300      	movs	r3, #0
 8006240:	f100 0114 	add.w	r1, r0, #20
 8006244:	f100 0210 	add.w	r2, r0, #16
 8006248:	4618      	mov	r0, r3
 800624a:	4553      	cmp	r3, sl
 800624c:	db33      	blt.n	80062b6 <__lshift+0xb6>
 800624e:	6920      	ldr	r0, [r4, #16]
 8006250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006254:	f104 0314 	add.w	r3, r4, #20
 8006258:	f019 091f 	ands.w	r9, r9, #31
 800625c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006264:	d02b      	beq.n	80062be <__lshift+0xbe>
 8006266:	468a      	mov	sl, r1
 8006268:	2200      	movs	r2, #0
 800626a:	f1c9 0e20 	rsb	lr, r9, #32
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	fa00 f009 	lsl.w	r0, r0, r9
 8006274:	4310      	orrs	r0, r2
 8006276:	f84a 0b04 	str.w	r0, [sl], #4
 800627a:	f853 2b04 	ldr.w	r2, [r3], #4
 800627e:	459c      	cmp	ip, r3
 8006280:	fa22 f20e 	lsr.w	r2, r2, lr
 8006284:	d8f3      	bhi.n	800626e <__lshift+0x6e>
 8006286:	ebac 0304 	sub.w	r3, ip, r4
 800628a:	3b15      	subs	r3, #21
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	3304      	adds	r3, #4
 8006292:	f104 0015 	add.w	r0, r4, #21
 8006296:	4584      	cmp	ip, r0
 8006298:	bf38      	it	cc
 800629a:	2304      	movcc	r3, #4
 800629c:	50ca      	str	r2, [r1, r3]
 800629e:	b10a      	cbz	r2, 80062a4 <__lshift+0xa4>
 80062a0:	f108 0602 	add.w	r6, r8, #2
 80062a4:	3e01      	subs	r6, #1
 80062a6:	4638      	mov	r0, r7
 80062a8:	4621      	mov	r1, r4
 80062aa:	612e      	str	r6, [r5, #16]
 80062ac:	f7ff fd92 	bl	8005dd4 <_Bfree>
 80062b0:	4628      	mov	r0, r5
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80062ba:	3301      	adds	r3, #1
 80062bc:	e7c5      	b.n	800624a <__lshift+0x4a>
 80062be:	3904      	subs	r1, #4
 80062c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c4:	459c      	cmp	ip, r3
 80062c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80062ca:	d8f9      	bhi.n	80062c0 <__lshift+0xc0>
 80062cc:	e7ea      	b.n	80062a4 <__lshift+0xa4>
 80062ce:	bf00      	nop
 80062d0:	08008657 	.word	0x08008657
 80062d4:	08008668 	.word	0x08008668

080062d8 <__mcmp>:
 80062d8:	4603      	mov	r3, r0
 80062da:	690a      	ldr	r2, [r1, #16]
 80062dc:	6900      	ldr	r0, [r0, #16]
 80062de:	b530      	push	{r4, r5, lr}
 80062e0:	1a80      	subs	r0, r0, r2
 80062e2:	d10e      	bne.n	8006302 <__mcmp+0x2a>
 80062e4:	3314      	adds	r3, #20
 80062e6:	3114      	adds	r1, #20
 80062e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062f8:	4295      	cmp	r5, r2
 80062fa:	d003      	beq.n	8006304 <__mcmp+0x2c>
 80062fc:	d205      	bcs.n	800630a <__mcmp+0x32>
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	bd30      	pop	{r4, r5, pc}
 8006304:	42a3      	cmp	r3, r4
 8006306:	d3f3      	bcc.n	80062f0 <__mcmp+0x18>
 8006308:	e7fb      	b.n	8006302 <__mcmp+0x2a>
 800630a:	2001      	movs	r0, #1
 800630c:	e7f9      	b.n	8006302 <__mcmp+0x2a>
	...

08006310 <__mdiff>:
 8006310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4689      	mov	r9, r1
 8006316:	4606      	mov	r6, r0
 8006318:	4611      	mov	r1, r2
 800631a:	4648      	mov	r0, r9
 800631c:	4614      	mov	r4, r2
 800631e:	f7ff ffdb 	bl	80062d8 <__mcmp>
 8006322:	1e05      	subs	r5, r0, #0
 8006324:	d112      	bne.n	800634c <__mdiff+0x3c>
 8006326:	4629      	mov	r1, r5
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fd13 	bl	8005d54 <_Balloc>
 800632e:	4602      	mov	r2, r0
 8006330:	b928      	cbnz	r0, 800633e <__mdiff+0x2e>
 8006332:	f240 2137 	movw	r1, #567	@ 0x237
 8006336:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <__mdiff+0x120>)
 8006338:	483e      	ldr	r0, [pc, #248]	@ (8006434 <__mdiff+0x124>)
 800633a:	f001 fa7f 	bl	800783c <__assert_func>
 800633e:	2301      	movs	r3, #1
 8006340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006344:	4610      	mov	r0, r2
 8006346:	b003      	add	sp, #12
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	bfbc      	itt	lt
 800634e:	464b      	movlt	r3, r9
 8006350:	46a1      	movlt	r9, r4
 8006352:	4630      	mov	r0, r6
 8006354:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006358:	bfba      	itte	lt
 800635a:	461c      	movlt	r4, r3
 800635c:	2501      	movlt	r5, #1
 800635e:	2500      	movge	r5, #0
 8006360:	f7ff fcf8 	bl	8005d54 <_Balloc>
 8006364:	4602      	mov	r2, r0
 8006366:	b918      	cbnz	r0, 8006370 <__mdiff+0x60>
 8006368:	f240 2145 	movw	r1, #581	@ 0x245
 800636c:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <__mdiff+0x120>)
 800636e:	e7e3      	b.n	8006338 <__mdiff+0x28>
 8006370:	f100 0b14 	add.w	fp, r0, #20
 8006374:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006378:	f109 0310 	add.w	r3, r9, #16
 800637c:	60c5      	str	r5, [r0, #12]
 800637e:	f04f 0c00 	mov.w	ip, #0
 8006382:	f109 0514 	add.w	r5, r9, #20
 8006386:	46d9      	mov	r9, fp
 8006388:	6926      	ldr	r6, [r4, #16]
 800638a:	f104 0e14 	add.w	lr, r4, #20
 800638e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006392:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800639e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063a2:	b281      	uxth	r1, r0
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	fa1f f38a 	uxth.w	r3, sl
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	0c00      	lsrs	r0, r0, #16
 80063ae:	4463      	add	r3, ip
 80063b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063be:	4576      	cmp	r6, lr
 80063c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063c4:	f849 3b04 	str.w	r3, [r9], #4
 80063c8:	d8e6      	bhi.n	8006398 <__mdiff+0x88>
 80063ca:	1b33      	subs	r3, r6, r4
 80063cc:	3b15      	subs	r3, #21
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	3415      	adds	r4, #21
 80063d4:	3304      	adds	r3, #4
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	bf38      	it	cc
 80063da:	2304      	movcc	r3, #4
 80063dc:	441d      	add	r5, r3
 80063de:	445b      	add	r3, fp
 80063e0:	461e      	mov	r6, r3
 80063e2:	462c      	mov	r4, r5
 80063e4:	4544      	cmp	r4, r8
 80063e6:	d30e      	bcc.n	8006406 <__mdiff+0xf6>
 80063e8:	f108 0103 	add.w	r1, r8, #3
 80063ec:	1b49      	subs	r1, r1, r5
 80063ee:	f021 0103 	bic.w	r1, r1, #3
 80063f2:	3d03      	subs	r5, #3
 80063f4:	45a8      	cmp	r8, r5
 80063f6:	bf38      	it	cc
 80063f8:	2100      	movcc	r1, #0
 80063fa:	440b      	add	r3, r1
 80063fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006400:	b199      	cbz	r1, 800642a <__mdiff+0x11a>
 8006402:	6117      	str	r7, [r2, #16]
 8006404:	e79e      	b.n	8006344 <__mdiff+0x34>
 8006406:	46e6      	mov	lr, ip
 8006408:	f854 1b04 	ldr.w	r1, [r4], #4
 800640c:	fa1f fc81 	uxth.w	ip, r1
 8006410:	44f4      	add	ip, lr
 8006412:	0c08      	lsrs	r0, r1, #16
 8006414:	4471      	add	r1, lr
 8006416:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800641a:	b289      	uxth	r1, r1
 800641c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006420:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006424:	f846 1b04 	str.w	r1, [r6], #4
 8006428:	e7dc      	b.n	80063e4 <__mdiff+0xd4>
 800642a:	3f01      	subs	r7, #1
 800642c:	e7e6      	b.n	80063fc <__mdiff+0xec>
 800642e:	bf00      	nop
 8006430:	08008657 	.word	0x08008657
 8006434:	08008668 	.word	0x08008668

08006438 <__ulp>:
 8006438:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <__ulp+0x3c>)
 800643a:	400b      	ands	r3, r1
 800643c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc08      	bgt.n	8006456 <__ulp+0x1e>
 8006444:	425b      	negs	r3, r3
 8006446:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800644a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800644e:	da04      	bge.n	800645a <__ulp+0x22>
 8006450:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006454:	4113      	asrs	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	e008      	b.n	800646c <__ulp+0x34>
 800645a:	f1a2 0314 	sub.w	r3, r2, #20
 800645e:	2b1e      	cmp	r3, #30
 8006460:	bfd6      	itet	le
 8006462:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006466:	2201      	movgt	r2, #1
 8006468:	40da      	lsrle	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	7ff00000 	.word	0x7ff00000

08006478 <__b2d>:
 8006478:	6902      	ldr	r2, [r0, #16]
 800647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647c:	f100 0614 	add.w	r6, r0, #20
 8006480:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006484:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006488:	4f1e      	ldr	r7, [pc, #120]	@ (8006504 <__b2d+0x8c>)
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff fd54 	bl	8005f38 <__hi0bits>
 8006490:	4603      	mov	r3, r0
 8006492:	f1c0 0020 	rsb	r0, r0, #32
 8006496:	2b0a      	cmp	r3, #10
 8006498:	f1a2 0504 	sub.w	r5, r2, #4
 800649c:	6008      	str	r0, [r1, #0]
 800649e:	dc12      	bgt.n	80064c6 <__b2d+0x4e>
 80064a0:	42ae      	cmp	r6, r5
 80064a2:	bf2c      	ite	cs
 80064a4:	2200      	movcs	r2, #0
 80064a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064aa:	f1c3 0c0b 	rsb	ip, r3, #11
 80064ae:	3315      	adds	r3, #21
 80064b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80064b4:	fa04 f303 	lsl.w	r3, r4, r3
 80064b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80064bc:	ea4e 0107 	orr.w	r1, lr, r7
 80064c0:	431a      	orrs	r2, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c6:	42ae      	cmp	r6, r5
 80064c8:	bf36      	itet	cc
 80064ca:	f1a2 0508 	subcc.w	r5, r2, #8
 80064ce:	2200      	movcs	r2, #0
 80064d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064d4:	3b0b      	subs	r3, #11
 80064d6:	d012      	beq.n	80064fe <__b2d+0x86>
 80064d8:	f1c3 0720 	rsb	r7, r3, #32
 80064dc:	fa22 f107 	lsr.w	r1, r2, r7
 80064e0:	409c      	lsls	r4, r3
 80064e2:	430c      	orrs	r4, r1
 80064e4:	42b5      	cmp	r5, r6
 80064e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80064ea:	bf94      	ite	ls
 80064ec:	2400      	movls	r4, #0
 80064ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80064f2:	409a      	lsls	r2, r3
 80064f4:	40fc      	lsrs	r4, r7
 80064f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064fa:	4322      	orrs	r2, r4
 80064fc:	e7e1      	b.n	80064c2 <__b2d+0x4a>
 80064fe:	ea44 0107 	orr.w	r1, r4, r7
 8006502:	e7de      	b.n	80064c2 <__b2d+0x4a>
 8006504:	3ff00000 	.word	0x3ff00000

08006508 <__d2b>:
 8006508:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800650c:	2101      	movs	r1, #1
 800650e:	4690      	mov	r8, r2
 8006510:	4699      	mov	r9, r3
 8006512:	9e08      	ldr	r6, [sp, #32]
 8006514:	f7ff fc1e 	bl	8005d54 <_Balloc>
 8006518:	4604      	mov	r4, r0
 800651a:	b930      	cbnz	r0, 800652a <__d2b+0x22>
 800651c:	4602      	mov	r2, r0
 800651e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006522:	4b23      	ldr	r3, [pc, #140]	@ (80065b0 <__d2b+0xa8>)
 8006524:	4823      	ldr	r0, [pc, #140]	@ (80065b4 <__d2b+0xac>)
 8006526:	f001 f989 	bl	800783c <__assert_func>
 800652a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800652e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006532:	b10d      	cbz	r5, 8006538 <__d2b+0x30>
 8006534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	f1b8 0300 	subs.w	r3, r8, #0
 800653e:	d024      	beq.n	800658a <__d2b+0x82>
 8006540:	4668      	mov	r0, sp
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f7ff fd17 	bl	8005f76 <__lo0bits>
 8006548:	e9dd 1200 	ldrd	r1, r2, [sp]
 800654c:	b1d8      	cbz	r0, 8006586 <__d2b+0x7e>
 800654e:	f1c0 0320 	rsb	r3, r0, #32
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	430b      	orrs	r3, r1
 8006558:	40c2      	lsrs	r2, r0
 800655a:	6163      	str	r3, [r4, #20]
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf0c      	ite	eq
 8006564:	2201      	moveq	r2, #1
 8006566:	2202      	movne	r2, #2
 8006568:	61a3      	str	r3, [r4, #24]
 800656a:	6122      	str	r2, [r4, #16]
 800656c:	b1ad      	cbz	r5, 800659a <__d2b+0x92>
 800656e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006572:	4405      	add	r5, r0
 8006574:	6035      	str	r5, [r6, #0]
 8006576:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	6018      	str	r0, [r3, #0]
 800657e:	4620      	mov	r0, r4
 8006580:	b002      	add	sp, #8
 8006582:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006586:	6161      	str	r1, [r4, #20]
 8006588:	e7e9      	b.n	800655e <__d2b+0x56>
 800658a:	a801      	add	r0, sp, #4
 800658c:	f7ff fcf3 	bl	8005f76 <__lo0bits>
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	3020      	adds	r0, #32
 8006598:	e7e7      	b.n	800656a <__d2b+0x62>
 800659a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800659e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065a2:	6030      	str	r0, [r6, #0]
 80065a4:	6918      	ldr	r0, [r3, #16]
 80065a6:	f7ff fcc7 	bl	8005f38 <__hi0bits>
 80065aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065ae:	e7e4      	b.n	800657a <__d2b+0x72>
 80065b0:	08008657 	.word	0x08008657
 80065b4:	08008668 	.word	0x08008668

080065b8 <__ratio>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	b085      	sub	sp, #20
 80065be:	e9cd 1000 	strd	r1, r0, [sp]
 80065c2:	a902      	add	r1, sp, #8
 80065c4:	f7ff ff58 	bl	8006478 <__b2d>
 80065c8:	468b      	mov	fp, r1
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	9800      	ldr	r0, [sp, #0]
 80065d0:	a903      	add	r1, sp, #12
 80065d2:	f7ff ff51 	bl	8006478 <__b2d>
 80065d6:	460d      	mov	r5, r1
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	4689      	mov	r9, r1
 80065dc:	6919      	ldr	r1, [r3, #16]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	4604      	mov	r4, r0
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	4630      	mov	r0, r6
 80065e6:	1ac9      	subs	r1, r1, r3
 80065e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfcd      	iteet	gt
 80065f6:	463a      	movgt	r2, r7
 80065f8:	462a      	movle	r2, r5
 80065fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006602:	bfd8      	it	le
 8006604:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006608:	464b      	mov	r3, r9
 800660a:	4622      	mov	r2, r4
 800660c:	4659      	mov	r1, fp
 800660e:	f7fa f88d 	bl	800072c <__aeabi_ddiv>
 8006612:	b005      	add	sp, #20
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006618 <__copybits>:
 8006618:	3901      	subs	r1, #1
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	1149      	asrs	r1, r1, #5
 800661e:	6914      	ldr	r4, [r2, #16]
 8006620:	3101      	adds	r1, #1
 8006622:	f102 0314 	add.w	r3, r2, #20
 8006626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800662a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800662e:	1f05      	subs	r5, r0, #4
 8006630:	42a3      	cmp	r3, r4
 8006632:	d30c      	bcc.n	800664e <__copybits+0x36>
 8006634:	1aa3      	subs	r3, r4, r2
 8006636:	3b11      	subs	r3, #17
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3211      	adds	r2, #17
 800663e:	42a2      	cmp	r2, r4
 8006640:	bf88      	it	hi
 8006642:	2300      	movhi	r3, #0
 8006644:	4418      	add	r0, r3
 8006646:	2300      	movs	r3, #0
 8006648:	4288      	cmp	r0, r1
 800664a:	d305      	bcc.n	8006658 <__copybits+0x40>
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006652:	f845 6f04 	str.w	r6, [r5, #4]!
 8006656:	e7eb      	b.n	8006630 <__copybits+0x18>
 8006658:	f840 3b04 	str.w	r3, [r0], #4
 800665c:	e7f4      	b.n	8006648 <__copybits+0x30>

0800665e <__any_on>:
 800665e:	f100 0214 	add.w	r2, r0, #20
 8006662:	6900      	ldr	r0, [r0, #16]
 8006664:	114b      	asrs	r3, r1, #5
 8006666:	4298      	cmp	r0, r3
 8006668:	b510      	push	{r4, lr}
 800666a:	db11      	blt.n	8006690 <__any_on+0x32>
 800666c:	dd0a      	ble.n	8006684 <__any_on+0x26>
 800666e:	f011 011f 	ands.w	r1, r1, #31
 8006672:	d007      	beq.n	8006684 <__any_on+0x26>
 8006674:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006678:	fa24 f001 	lsr.w	r0, r4, r1
 800667c:	fa00 f101 	lsl.w	r1, r0, r1
 8006680:	428c      	cmp	r4, r1
 8006682:	d10b      	bne.n	800669c <__any_on+0x3e>
 8006684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006688:	4293      	cmp	r3, r2
 800668a:	d803      	bhi.n	8006694 <__any_on+0x36>
 800668c:	2000      	movs	r0, #0
 800668e:	bd10      	pop	{r4, pc}
 8006690:	4603      	mov	r3, r0
 8006692:	e7f7      	b.n	8006684 <__any_on+0x26>
 8006694:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006698:	2900      	cmp	r1, #0
 800669a:	d0f5      	beq.n	8006688 <__any_on+0x2a>
 800669c:	2001      	movs	r0, #1
 800669e:	e7f6      	b.n	800668e <__any_on+0x30>

080066a0 <sulp>:
 80066a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	460f      	mov	r7, r1
 80066a6:	4690      	mov	r8, r2
 80066a8:	f7ff fec6 	bl	8006438 <__ulp>
 80066ac:	4604      	mov	r4, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	f1b8 0f00 	cmp.w	r8, #0
 80066b4:	d011      	beq.n	80066da <sulp+0x3a>
 80066b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80066ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dd0b      	ble.n	80066da <sulp+0x3a>
 80066c2:	2400      	movs	r4, #0
 80066c4:	051b      	lsls	r3, r3, #20
 80066c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80066ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	f7f9 ff01 	bl	80004d8 <__aeabi_dmul>
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e2:	0000      	movs	r0, r0
 80066e4:	0000      	movs	r0, r0
	...

080066e8 <_strtod_l>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b09f      	sub	sp, #124	@ 0x7c
 80066ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066f0:	2200      	movs	r2, #0
 80066f2:	460c      	mov	r4, r1
 80066f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80066f6:	f04f 0a00 	mov.w	sl, #0
 80066fa:	f04f 0b00 	mov.w	fp, #0
 80066fe:	460a      	mov	r2, r1
 8006700:	9005      	str	r0, [sp, #20]
 8006702:	9219      	str	r2, [sp, #100]	@ 0x64
 8006704:	7811      	ldrb	r1, [r2, #0]
 8006706:	292b      	cmp	r1, #43	@ 0x2b
 8006708:	d048      	beq.n	800679c <_strtod_l+0xb4>
 800670a:	d836      	bhi.n	800677a <_strtod_l+0x92>
 800670c:	290d      	cmp	r1, #13
 800670e:	d830      	bhi.n	8006772 <_strtod_l+0x8a>
 8006710:	2908      	cmp	r1, #8
 8006712:	d830      	bhi.n	8006776 <_strtod_l+0x8e>
 8006714:	2900      	cmp	r1, #0
 8006716:	d039      	beq.n	800678c <_strtod_l+0xa4>
 8006718:	2200      	movs	r2, #0
 800671a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800671c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800671e:	782a      	ldrb	r2, [r5, #0]
 8006720:	2a30      	cmp	r2, #48	@ 0x30
 8006722:	f040 80b1 	bne.w	8006888 <_strtod_l+0x1a0>
 8006726:	786a      	ldrb	r2, [r5, #1]
 8006728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800672c:	2a58      	cmp	r2, #88	@ 0x58
 800672e:	d16c      	bne.n	800680a <_strtod_l+0x122>
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006734:	4a8e      	ldr	r2, [pc, #568]	@ (8006970 <_strtod_l+0x288>)
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	ab1a      	add	r3, sp, #104	@ 0x68
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	9805      	ldr	r0, [sp, #20]
 800673e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006740:	a919      	add	r1, sp, #100	@ 0x64
 8006742:	f001 f915 	bl	8007970 <__gethex>
 8006746:	f010 060f 	ands.w	r6, r0, #15
 800674a:	4604      	mov	r4, r0
 800674c:	d005      	beq.n	800675a <_strtod_l+0x72>
 800674e:	2e06      	cmp	r6, #6
 8006750:	d126      	bne.n	80067a0 <_strtod_l+0xb8>
 8006752:	2300      	movs	r3, #0
 8006754:	3501      	adds	r5, #1
 8006756:	9519      	str	r5, [sp, #100]	@ 0x64
 8006758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8584 	bne.w	800726a <_strtod_l+0xb82>
 8006762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006764:	b1bb      	cbz	r3, 8006796 <_strtod_l+0xae>
 8006766:	4650      	mov	r0, sl
 8006768:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800676c:	b01f      	add	sp, #124	@ 0x7c
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	2920      	cmp	r1, #32
 8006774:	d1d0      	bne.n	8006718 <_strtod_l+0x30>
 8006776:	3201      	adds	r2, #1
 8006778:	e7c3      	b.n	8006702 <_strtod_l+0x1a>
 800677a:	292d      	cmp	r1, #45	@ 0x2d
 800677c:	d1cc      	bne.n	8006718 <_strtod_l+0x30>
 800677e:	2101      	movs	r1, #1
 8006780:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	9119      	str	r1, [sp, #100]	@ 0x64
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1c7      	bne.n	800671c <_strtod_l+0x34>
 800678c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800678e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 8568 	bne.w	8007266 <_strtod_l+0xb7e>
 8006796:	4650      	mov	r0, sl
 8006798:	4659      	mov	r1, fp
 800679a:	e7e7      	b.n	800676c <_strtod_l+0x84>
 800679c:	2100      	movs	r1, #0
 800679e:	e7ef      	b.n	8006780 <_strtod_l+0x98>
 80067a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067a2:	b13a      	cbz	r2, 80067b4 <_strtod_l+0xcc>
 80067a4:	2135      	movs	r1, #53	@ 0x35
 80067a6:	a81c      	add	r0, sp, #112	@ 0x70
 80067a8:	f7ff ff36 	bl	8006618 <__copybits>
 80067ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f7ff fb10 	bl	8005dd4 <_Bfree>
 80067b4:	3e01      	subs	r6, #1
 80067b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80067b8:	2e04      	cmp	r6, #4
 80067ba:	d806      	bhi.n	80067ca <_strtod_l+0xe2>
 80067bc:	e8df f006 	tbb	[pc, r6]
 80067c0:	201d0314 	.word	0x201d0314
 80067c4:	14          	.byte	0x14
 80067c5:	00          	.byte	0x00
 80067c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80067ca:	05e1      	lsls	r1, r4, #23
 80067cc:	bf48      	it	mi
 80067ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067d6:	0d1b      	lsrs	r3, r3, #20
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1bd      	bne.n	800675a <_strtod_l+0x72>
 80067de:	f7fe fb2b 	bl	8004e38 <__errno>
 80067e2:	2322      	movs	r3, #34	@ 0x22
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	e7b8      	b.n	800675a <_strtod_l+0x72>
 80067e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067f8:	e7e7      	b.n	80067ca <_strtod_l+0xe2>
 80067fa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006974 <_strtod_l+0x28c>
 80067fe:	e7e4      	b.n	80067ca <_strtod_l+0xe2>
 8006800:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006804:	f04f 3aff 	mov.w	sl, #4294967295
 8006808:	e7df      	b.n	80067ca <_strtod_l+0xe2>
 800680a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b30      	cmp	r3, #48	@ 0x30
 8006814:	d0f9      	beq.n	800680a <_strtod_l+0x122>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d09f      	beq.n	800675a <_strtod_l+0x72>
 800681a:	2301      	movs	r3, #1
 800681c:	9309      	str	r3, [sp, #36]	@ 0x24
 800681e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006820:	220a      	movs	r2, #10
 8006822:	930c      	str	r3, [sp, #48]	@ 0x30
 8006824:	2300      	movs	r3, #0
 8006826:	461f      	mov	r7, r3
 8006828:	9308      	str	r3, [sp, #32]
 800682a:	930a      	str	r3, [sp, #40]	@ 0x28
 800682c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800682e:	7805      	ldrb	r5, [r0, #0]
 8006830:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	2909      	cmp	r1, #9
 8006838:	d928      	bls.n	800688c <_strtod_l+0x1a4>
 800683a:	2201      	movs	r2, #1
 800683c:	494e      	ldr	r1, [pc, #312]	@ (8006978 <_strtod_l+0x290>)
 800683e:	f000 ffc7 	bl	80077d0 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d032      	beq.n	80068ac <_strtod_l+0x1c4>
 8006846:	2000      	movs	r0, #0
 8006848:	462a      	mov	r2, r5
 800684a:	4681      	mov	r9, r0
 800684c:	463d      	mov	r5, r7
 800684e:	4603      	mov	r3, r0
 8006850:	2a65      	cmp	r2, #101	@ 0x65
 8006852:	d001      	beq.n	8006858 <_strtod_l+0x170>
 8006854:	2a45      	cmp	r2, #69	@ 0x45
 8006856:	d114      	bne.n	8006882 <_strtod_l+0x19a>
 8006858:	b91d      	cbnz	r5, 8006862 <_strtod_l+0x17a>
 800685a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800685c:	4302      	orrs	r2, r0
 800685e:	d095      	beq.n	800678c <_strtod_l+0xa4>
 8006860:	2500      	movs	r5, #0
 8006862:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006864:	1c62      	adds	r2, r4, #1
 8006866:	9219      	str	r2, [sp, #100]	@ 0x64
 8006868:	7862      	ldrb	r2, [r4, #1]
 800686a:	2a2b      	cmp	r2, #43	@ 0x2b
 800686c:	d077      	beq.n	800695e <_strtod_l+0x276>
 800686e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006870:	d07b      	beq.n	800696a <_strtod_l+0x282>
 8006872:	f04f 0c00 	mov.w	ip, #0
 8006876:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800687a:	2909      	cmp	r1, #9
 800687c:	f240 8082 	bls.w	8006984 <_strtod_l+0x29c>
 8006880:	9419      	str	r4, [sp, #100]	@ 0x64
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	e0a2      	b.n	80069ce <_strtod_l+0x2e6>
 8006888:	2300      	movs	r3, #0
 800688a:	e7c7      	b.n	800681c <_strtod_l+0x134>
 800688c:	2f08      	cmp	r7, #8
 800688e:	bfd5      	itete	le
 8006890:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006892:	9908      	ldrgt	r1, [sp, #32]
 8006894:	fb02 3301 	mlale	r3, r2, r1, r3
 8006898:	fb02 3301 	mlagt	r3, r2, r1, r3
 800689c:	f100 0001 	add.w	r0, r0, #1
 80068a0:	bfd4      	ite	le
 80068a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80068a4:	9308      	strgt	r3, [sp, #32]
 80068a6:	3701      	adds	r7, #1
 80068a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80068aa:	e7bf      	b.n	800682c <_strtod_l+0x144>
 80068ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80068b2:	785a      	ldrb	r2, [r3, #1]
 80068b4:	b37f      	cbz	r7, 8006916 <_strtod_l+0x22e>
 80068b6:	4681      	mov	r9, r0
 80068b8:	463d      	mov	r5, r7
 80068ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80068be:	2b09      	cmp	r3, #9
 80068c0:	d912      	bls.n	80068e8 <_strtod_l+0x200>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e7c4      	b.n	8006850 <_strtod_l+0x168>
 80068c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068c8:	3001      	adds	r0, #1
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ce:	785a      	ldrb	r2, [r3, #1]
 80068d0:	2a30      	cmp	r2, #48	@ 0x30
 80068d2:	d0f8      	beq.n	80068c6 <_strtod_l+0x1de>
 80068d4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068d8:	2b08      	cmp	r3, #8
 80068da:	f200 84cb 	bhi.w	8007274 <_strtod_l+0xb8c>
 80068de:	4681      	mov	r9, r0
 80068e0:	2000      	movs	r0, #0
 80068e2:	4605      	mov	r5, r0
 80068e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068e8:	3a30      	subs	r2, #48	@ 0x30
 80068ea:	f100 0301 	add.w	r3, r0, #1
 80068ee:	d02a      	beq.n	8006946 <_strtod_l+0x25e>
 80068f0:	4499      	add	r9, r3
 80068f2:	210a      	movs	r1, #10
 80068f4:	462b      	mov	r3, r5
 80068f6:	eb00 0c05 	add.w	ip, r0, r5
 80068fa:	4563      	cmp	r3, ip
 80068fc:	d10d      	bne.n	800691a <_strtod_l+0x232>
 80068fe:	1c69      	adds	r1, r5, #1
 8006900:	4401      	add	r1, r0
 8006902:	4428      	add	r0, r5
 8006904:	2808      	cmp	r0, #8
 8006906:	dc16      	bgt.n	8006936 <_strtod_l+0x24e>
 8006908:	230a      	movs	r3, #10
 800690a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800690c:	fb03 2300 	mla	r3, r3, r0, r2
 8006910:	930a      	str	r3, [sp, #40]	@ 0x28
 8006912:	2300      	movs	r3, #0
 8006914:	e018      	b.n	8006948 <_strtod_l+0x260>
 8006916:	4638      	mov	r0, r7
 8006918:	e7da      	b.n	80068d0 <_strtod_l+0x1e8>
 800691a:	2b08      	cmp	r3, #8
 800691c:	f103 0301 	add.w	r3, r3, #1
 8006920:	dc03      	bgt.n	800692a <_strtod_l+0x242>
 8006922:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006924:	434e      	muls	r6, r1
 8006926:	960a      	str	r6, [sp, #40]	@ 0x28
 8006928:	e7e7      	b.n	80068fa <_strtod_l+0x212>
 800692a:	2b10      	cmp	r3, #16
 800692c:	bfde      	ittt	le
 800692e:	9e08      	ldrle	r6, [sp, #32]
 8006930:	434e      	mulle	r6, r1
 8006932:	9608      	strle	r6, [sp, #32]
 8006934:	e7e1      	b.n	80068fa <_strtod_l+0x212>
 8006936:	280f      	cmp	r0, #15
 8006938:	dceb      	bgt.n	8006912 <_strtod_l+0x22a>
 800693a:	230a      	movs	r3, #10
 800693c:	9808      	ldr	r0, [sp, #32]
 800693e:	fb03 2300 	mla	r3, r3, r0, r2
 8006942:	9308      	str	r3, [sp, #32]
 8006944:	e7e5      	b.n	8006912 <_strtod_l+0x22a>
 8006946:	4629      	mov	r1, r5
 8006948:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800694a:	460d      	mov	r5, r1
 800694c:	1c50      	adds	r0, r2, #1
 800694e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006950:	7852      	ldrb	r2, [r2, #1]
 8006952:	4618      	mov	r0, r3
 8006954:	e7b1      	b.n	80068ba <_strtod_l+0x1d2>
 8006956:	f04f 0900 	mov.w	r9, #0
 800695a:	2301      	movs	r3, #1
 800695c:	e77d      	b.n	800685a <_strtod_l+0x172>
 800695e:	f04f 0c00 	mov.w	ip, #0
 8006962:	1ca2      	adds	r2, r4, #2
 8006964:	9219      	str	r2, [sp, #100]	@ 0x64
 8006966:	78a2      	ldrb	r2, [r4, #2]
 8006968:	e785      	b.n	8006876 <_strtod_l+0x18e>
 800696a:	f04f 0c01 	mov.w	ip, #1
 800696e:	e7f8      	b.n	8006962 <_strtod_l+0x27a>
 8006970:	080087d8 	.word	0x080087d8
 8006974:	7ff00000 	.word	0x7ff00000
 8006978:	080087c0 	.word	0x080087c0
 800697c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800697e:	1c51      	adds	r1, r2, #1
 8006980:	9119      	str	r1, [sp, #100]	@ 0x64
 8006982:	7852      	ldrb	r2, [r2, #1]
 8006984:	2a30      	cmp	r2, #48	@ 0x30
 8006986:	d0f9      	beq.n	800697c <_strtod_l+0x294>
 8006988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800698c:	2908      	cmp	r1, #8
 800698e:	f63f af78 	bhi.w	8006882 <_strtod_l+0x19a>
 8006992:	f04f 080a 	mov.w	r8, #10
 8006996:	3a30      	subs	r2, #48	@ 0x30
 8006998:	920e      	str	r2, [sp, #56]	@ 0x38
 800699a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800699c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800699e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069a0:	1c56      	adds	r6, r2, #1
 80069a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80069a4:	7852      	ldrb	r2, [r2, #1]
 80069a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069aa:	f1be 0f09 	cmp.w	lr, #9
 80069ae:	d939      	bls.n	8006a24 <_strtod_l+0x33c>
 80069b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80069b6:	1a76      	subs	r6, r6, r1
 80069b8:	2e08      	cmp	r6, #8
 80069ba:	dc03      	bgt.n	80069c4 <_strtod_l+0x2dc>
 80069bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069be:	4588      	cmp	r8, r1
 80069c0:	bfa8      	it	ge
 80069c2:	4688      	movge	r8, r1
 80069c4:	f1bc 0f00 	cmp.w	ip, #0
 80069c8:	d001      	beq.n	80069ce <_strtod_l+0x2e6>
 80069ca:	f1c8 0800 	rsb	r8, r8, #0
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	d14e      	bne.n	8006a70 <_strtod_l+0x388>
 80069d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069d4:	4308      	orrs	r0, r1
 80069d6:	f47f aec0 	bne.w	800675a <_strtod_l+0x72>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f47f aed6 	bne.w	800678c <_strtod_l+0xa4>
 80069e0:	2a69      	cmp	r2, #105	@ 0x69
 80069e2:	d028      	beq.n	8006a36 <_strtod_l+0x34e>
 80069e4:	dc25      	bgt.n	8006a32 <_strtod_l+0x34a>
 80069e6:	2a49      	cmp	r2, #73	@ 0x49
 80069e8:	d025      	beq.n	8006a36 <_strtod_l+0x34e>
 80069ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80069ec:	f47f aece 	bne.w	800678c <_strtod_l+0xa4>
 80069f0:	499a      	ldr	r1, [pc, #616]	@ (8006c5c <_strtod_l+0x574>)
 80069f2:	a819      	add	r0, sp, #100	@ 0x64
 80069f4:	f001 f9de 	bl	8007db4 <__match>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f43f aec7 	beq.w	800678c <_strtod_l+0xa4>
 80069fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b28      	cmp	r3, #40	@ 0x28
 8006a04:	d12e      	bne.n	8006a64 <_strtod_l+0x37c>
 8006a06:	4996      	ldr	r1, [pc, #600]	@ (8006c60 <_strtod_l+0x578>)
 8006a08:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a0a:	a819      	add	r0, sp, #100	@ 0x64
 8006a0c:	f001 f9e6 	bl	8007ddc <__hexnan>
 8006a10:	2805      	cmp	r0, #5
 8006a12:	d127      	bne.n	8006a64 <_strtod_l+0x37c>
 8006a14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a22:	e69a      	b.n	800675a <_strtod_l+0x72>
 8006a24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a26:	fb08 2101 	mla	r1, r8, r1, r2
 8006a2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a30:	e7b5      	b.n	800699e <_strtod_l+0x2b6>
 8006a32:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a34:	e7da      	b.n	80069ec <_strtod_l+0x304>
 8006a36:	498b      	ldr	r1, [pc, #556]	@ (8006c64 <_strtod_l+0x57c>)
 8006a38:	a819      	add	r0, sp, #100	@ 0x64
 8006a3a:	f001 f9bb 	bl	8007db4 <__match>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f aea4 	beq.w	800678c <_strtod_l+0xa4>
 8006a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a46:	4988      	ldr	r1, [pc, #544]	@ (8006c68 <_strtod_l+0x580>)
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	a819      	add	r0, sp, #100	@ 0x64
 8006a4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a4e:	f001 f9b1 	bl	8007db4 <__match>
 8006a52:	b910      	cbnz	r0, 8006a5a <_strtod_l+0x372>
 8006a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a56:	3301      	adds	r3, #1
 8006a58:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a5a:	f04f 0a00 	mov.w	sl, #0
 8006a5e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006c6c <_strtod_l+0x584>
 8006a62:	e67a      	b.n	800675a <_strtod_l+0x72>
 8006a64:	4882      	ldr	r0, [pc, #520]	@ (8006c70 <_strtod_l+0x588>)
 8006a66:	f000 fee3 	bl	8007830 <nan>
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	468b      	mov	fp, r1
 8006a6e:	e674      	b.n	800675a <_strtod_l+0x72>
 8006a70:	eba8 0309 	sub.w	r3, r8, r9
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	bf08      	it	eq
 8006a78:	462f      	moveq	r7, r5
 8006a7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a7c:	2d10      	cmp	r5, #16
 8006a7e:	462c      	mov	r4, r5
 8006a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a82:	bfa8      	it	ge
 8006a84:	2410      	movge	r4, #16
 8006a86:	f7f9 fcad 	bl	80003e4 <__aeabi_ui2d>
 8006a8a:	2d09      	cmp	r5, #9
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	468b      	mov	fp, r1
 8006a90:	dc11      	bgt.n	8006ab6 <_strtod_l+0x3ce>
 8006a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f43f ae60 	beq.w	800675a <_strtod_l+0x72>
 8006a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a9c:	dd76      	ble.n	8006b8c <_strtod_l+0x4a4>
 8006a9e:	2b16      	cmp	r3, #22
 8006aa0:	dc5d      	bgt.n	8006b5e <_strtod_l+0x476>
 8006aa2:	4974      	ldr	r1, [pc, #464]	@ (8006c74 <_strtod_l+0x58c>)
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aaa:	465b      	mov	r3, fp
 8006aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab0:	f7f9 fd12 	bl	80004d8 <__aeabi_dmul>
 8006ab4:	e7d9      	b.n	8006a6a <_strtod_l+0x382>
 8006ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8006c74 <_strtod_l+0x58c>)
 8006ab8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006abc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ac0:	f7f9 fd0a 	bl	80004d8 <__aeabi_dmul>
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	9808      	ldr	r0, [sp, #32]
 8006ac8:	468b      	mov	fp, r1
 8006aca:	f7f9 fc8b 	bl	80003e4 <__aeabi_ui2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	f7f9 fb49 	bl	800016c <__adddf3>
 8006ada:	2d0f      	cmp	r5, #15
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	ddd7      	ble.n	8006a92 <_strtod_l+0x3aa>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae4:	1b2c      	subs	r4, r5, r4
 8006ae6:	441c      	add	r4, r3
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	f340 8096 	ble.w	8006c1a <_strtod_l+0x532>
 8006aee:	f014 030f 	ands.w	r3, r4, #15
 8006af2:	d00a      	beq.n	8006b0a <_strtod_l+0x422>
 8006af4:	495f      	ldr	r1, [pc, #380]	@ (8006c74 <_strtod_l+0x58c>)
 8006af6:	4652      	mov	r2, sl
 8006af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b00:	465b      	mov	r3, fp
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4682      	mov	sl, r0
 8006b08:	468b      	mov	fp, r1
 8006b0a:	f034 040f 	bics.w	r4, r4, #15
 8006b0e:	d073      	beq.n	8006bf8 <_strtod_l+0x510>
 8006b10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b14:	dd48      	ble.n	8006ba8 <_strtod_l+0x4c0>
 8006b16:	2400      	movs	r4, #0
 8006b18:	46a0      	mov	r8, r4
 8006b1a:	46a1      	mov	r9, r4
 8006b1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b1e:	2322      	movs	r3, #34	@ 0x22
 8006b20:	f04f 0a00 	mov.w	sl, #0
 8006b24:	9a05      	ldr	r2, [sp, #20]
 8006b26:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006c6c <_strtod_l+0x584>
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f43f ae13 	beq.w	800675a <_strtod_l+0x72>
 8006b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b36:	9805      	ldr	r0, [sp, #20]
 8006b38:	f7ff f94c 	bl	8005dd4 <_Bfree>
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	f7ff f948 	bl	8005dd4 <_Bfree>
 8006b44:	4641      	mov	r1, r8
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	f7ff f944 	bl	8005dd4 <_Bfree>
 8006b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b4e:	9805      	ldr	r0, [sp, #20]
 8006b50:	f7ff f940 	bl	8005dd4 <_Bfree>
 8006b54:	4621      	mov	r1, r4
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f7ff f93c 	bl	8005dd4 <_Bfree>
 8006b5c:	e5fd      	b.n	800675a <_strtod_l+0x72>
 8006b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b64:	4293      	cmp	r3, r2
 8006b66:	dbbc      	blt.n	8006ae2 <_strtod_l+0x3fa>
 8006b68:	4c42      	ldr	r4, [pc, #264]	@ (8006c74 <_strtod_l+0x58c>)
 8006b6a:	f1c5 050f 	rsb	r5, r5, #15
 8006b6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b72:	4652      	mov	r2, sl
 8006b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b78:	465b      	mov	r3, fp
 8006b7a:	f7f9 fcad 	bl	80004d8 <__aeabi_dmul>
 8006b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b80:	1b5d      	subs	r5, r3, r5
 8006b82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b8a:	e791      	b.n	8006ab0 <_strtod_l+0x3c8>
 8006b8c:	3316      	adds	r3, #22
 8006b8e:	dba8      	blt.n	8006ae2 <_strtod_l+0x3fa>
 8006b90:	4b38      	ldr	r3, [pc, #224]	@ (8006c74 <_strtod_l+0x58c>)
 8006b92:	eba9 0808 	sub.w	r8, r9, r8
 8006b96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	f7f9 fdc3 	bl	800072c <__aeabi_ddiv>
 8006ba6:	e760      	b.n	8006a6a <_strtod_l+0x382>
 8006ba8:	4b33      	ldr	r3, [pc, #204]	@ (8006c78 <_strtod_l+0x590>)
 8006baa:	4650      	mov	r0, sl
 8006bac:	9308      	str	r3, [sp, #32]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	1124      	asrs	r4, r4, #4
 8006bb6:	2c01      	cmp	r4, #1
 8006bb8:	dc21      	bgt.n	8006bfe <_strtod_l+0x516>
 8006bba:	b10b      	cbz	r3, 8006bc0 <_strtod_l+0x4d8>
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	468b      	mov	fp, r1
 8006bc0:	492d      	ldr	r1, [pc, #180]	@ (8006c78 <_strtod_l+0x590>)
 8006bc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006bc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006bca:	4652      	mov	r2, sl
 8006bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd0:	465b      	mov	r3, fp
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	4b25      	ldr	r3, [pc, #148]	@ (8006c6c <_strtod_l+0x584>)
 8006bd8:	460a      	mov	r2, r1
 8006bda:	400b      	ands	r3, r1
 8006bdc:	4927      	ldr	r1, [pc, #156]	@ (8006c7c <_strtod_l+0x594>)
 8006bde:	4682      	mov	sl, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	d898      	bhi.n	8006b16 <_strtod_l+0x42e>
 8006be4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf86      	itte	hi
 8006bec:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bf0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006c80 <_strtod_l+0x598>
 8006bf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	e07a      	b.n	8006cf4 <_strtod_l+0x60c>
 8006bfe:	07e2      	lsls	r2, r4, #31
 8006c00:	d505      	bpl.n	8006c0e <_strtod_l+0x526>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9a08      	ldr	r2, [sp, #32]
 8006c10:	3601      	adds	r6, #1
 8006c12:	3208      	adds	r2, #8
 8006c14:	1064      	asrs	r4, r4, #1
 8006c16:	9208      	str	r2, [sp, #32]
 8006c18:	e7cd      	b.n	8006bb6 <_strtod_l+0x4ce>
 8006c1a:	d0ed      	beq.n	8006bf8 <_strtod_l+0x510>
 8006c1c:	4264      	negs	r4, r4
 8006c1e:	f014 020f 	ands.w	r2, r4, #15
 8006c22:	d00a      	beq.n	8006c3a <_strtod_l+0x552>
 8006c24:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <_strtod_l+0x58c>)
 8006c26:	4650      	mov	r0, sl
 8006c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fd7b 	bl	800072c <__aeabi_ddiv>
 8006c36:	4682      	mov	sl, r0
 8006c38:	468b      	mov	fp, r1
 8006c3a:	1124      	asrs	r4, r4, #4
 8006c3c:	d0dc      	beq.n	8006bf8 <_strtod_l+0x510>
 8006c3e:	2c1f      	cmp	r4, #31
 8006c40:	dd20      	ble.n	8006c84 <_strtod_l+0x59c>
 8006c42:	2400      	movs	r4, #0
 8006c44:	46a0      	mov	r8, r4
 8006c46:	46a1      	mov	r9, r4
 8006c48:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c4a:	2322      	movs	r3, #34	@ 0x22
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	f04f 0a00 	mov.w	sl, #0
 8006c52:	f04f 0b00 	mov.w	fp, #0
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e768      	b.n	8006b2c <_strtod_l+0x444>
 8006c5a:	bf00      	nop
 8006c5c:	080085af 	.word	0x080085af
 8006c60:	080087c4 	.word	0x080087c4
 8006c64:	080085a7 	.word	0x080085a7
 8006c68:	080085de 	.word	0x080085de
 8006c6c:	7ff00000 	.word	0x7ff00000
 8006c70:	0800896d 	.word	0x0800896d
 8006c74:	080086f8 	.word	0x080086f8
 8006c78:	080086d0 	.word	0x080086d0
 8006c7c:	7ca00000 	.word	0x7ca00000
 8006c80:	7fefffff 	.word	0x7fefffff
 8006c84:	f014 0310 	ands.w	r3, r4, #16
 8006c88:	bf18      	it	ne
 8006c8a:	236a      	movne	r3, #106	@ 0x6a
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	4659      	mov	r1, fp
 8006c92:	2300      	movs	r3, #0
 8006c94:	4ea9      	ldr	r6, [pc, #676]	@ (8006f3c <_strtod_l+0x854>)
 8006c96:	07e2      	lsls	r2, r4, #31
 8006c98:	d504      	bpl.n	8006ca4 <_strtod_l+0x5bc>
 8006c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c9e:	f7f9 fc1b 	bl	80004d8 <__aeabi_dmul>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	1064      	asrs	r4, r4, #1
 8006ca6:	f106 0608 	add.w	r6, r6, #8
 8006caa:	d1f4      	bne.n	8006c96 <_strtod_l+0x5ae>
 8006cac:	b10b      	cbz	r3, 8006cb2 <_strtod_l+0x5ca>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	b1b3      	cbz	r3, 8006ce4 <_strtod_l+0x5fc>
 8006cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	dd0f      	ble.n	8006ce4 <_strtod_l+0x5fc>
 8006cc4:	2b1f      	cmp	r3, #31
 8006cc6:	dd57      	ble.n	8006d78 <_strtod_l+0x690>
 8006cc8:	2b34      	cmp	r3, #52	@ 0x34
 8006cca:	bfd8      	it	le
 8006ccc:	f04f 33ff 	movle.w	r3, #4294967295
 8006cd0:	f04f 0a00 	mov.w	sl, #0
 8006cd4:	bfcf      	iteee	gt
 8006cd6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006cda:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cde:	4093      	lslle	r3, r2
 8006ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d1a6      	bne.n	8006c42 <_strtod_l+0x55a>
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f7ff f8d0 	bl	8005ea4 <__s2b>
 8006d04:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f af05 	beq.w	8006b16 <_strtod_l+0x42e>
 8006d0c:	2400      	movs	r4, #0
 8006d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d10:	eba9 0308 	sub.w	r3, r9, r8
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	bfa8      	it	ge
 8006d18:	2300      	movge	r3, #0
 8006d1a:	46a0      	mov	r8, r4
 8006d1c:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d22:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	6859      	ldr	r1, [r3, #4]
 8006d2a:	f7ff f813 	bl	8005d54 <_Balloc>
 8006d2e:	4681      	mov	r9, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f aef4 	beq.w	8006b1e <_strtod_l+0x436>
 8006d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d38:	300c      	adds	r0, #12
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	f103 010c 	add.w	r1, r3, #12
 8006d40:	3202      	adds	r2, #2
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	f000 fd66 	bl	8007814 <memcpy>
 8006d48:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4652      	mov	r2, sl
 8006d52:	465b      	mov	r3, fp
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d5a:	f7ff fbd5 	bl	8006508 <__d2b>
 8006d5e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d60:	2800      	cmp	r0, #0
 8006d62:	f43f aedc 	beq.w	8006b1e <_strtod_l+0x436>
 8006d66:	2101      	movs	r1, #1
 8006d68:	9805      	ldr	r0, [sp, #20]
 8006d6a:	f7ff f931 	bl	8005fd0 <__i2b>
 8006d6e:	4680      	mov	r8, r0
 8006d70:	b948      	cbnz	r0, 8006d86 <_strtod_l+0x69e>
 8006d72:	f04f 0800 	mov.w	r8, #0
 8006d76:	e6d2      	b.n	8006b1e <_strtod_l+0x436>
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	ea03 0a0a 	and.w	sl, r3, sl
 8006d84:	e7ae      	b.n	8006ce4 <_strtod_l+0x5fc>
 8006d86:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d88:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	bfab      	itete	ge
 8006d8e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d90:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d92:	18ef      	addge	r7, r5, r3
 8006d94:	1b5e      	sublt	r6, r3, r5
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	bfa8      	it	ge
 8006d9a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d9c:	eba5 0503 	sub.w	r5, r5, r3
 8006da0:	4415      	add	r5, r2
 8006da2:	4b67      	ldr	r3, [pc, #412]	@ (8006f40 <_strtod_l+0x858>)
 8006da4:	f105 35ff 	add.w	r5, r5, #4294967295
 8006da8:	bfb8      	it	lt
 8006daa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006dac:	429d      	cmp	r5, r3
 8006dae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006db2:	da50      	bge.n	8006e56 <_strtod_l+0x76e>
 8006db4:	1b5b      	subs	r3, r3, r5
 8006db6:	2b1f      	cmp	r3, #31
 8006db8:	f04f 0101 	mov.w	r1, #1
 8006dbc:	eba2 0203 	sub.w	r2, r2, r3
 8006dc0:	dc3d      	bgt.n	8006e3e <_strtod_l+0x756>
 8006dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dcc:	18bd      	adds	r5, r7, r2
 8006dce:	9b08      	ldr	r3, [sp, #32]
 8006dd0:	42af      	cmp	r7, r5
 8006dd2:	4416      	add	r6, r2
 8006dd4:	441e      	add	r6, r3
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	bfa8      	it	ge
 8006dda:	462b      	movge	r3, r5
 8006ddc:	42b3      	cmp	r3, r6
 8006dde:	bfa8      	it	ge
 8006de0:	4633      	movge	r3, r6
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfc2      	ittt	gt
 8006de6:	1aed      	subgt	r5, r5, r3
 8006de8:	1af6      	subgt	r6, r6, r3
 8006dea:	1aff      	subgt	r7, r7, r3
 8006dec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd16      	ble.n	8006e20 <_strtod_l+0x738>
 8006df2:	4641      	mov	r1, r8
 8006df4:	461a      	mov	r2, r3
 8006df6:	9805      	ldr	r0, [sp, #20]
 8006df8:	f7ff f9a8 	bl	800614c <__pow5mult>
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0b7      	beq.n	8006d72 <_strtod_l+0x68a>
 8006e02:	4601      	mov	r1, r0
 8006e04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	f7ff f8f8 	bl	8005ffc <__multiply>
 8006e0c:	900e      	str	r0, [sp, #56]	@ 0x38
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f ae85 	beq.w	8006b1e <_strtod_l+0x436>
 8006e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	f7fe ffdc 	bl	8005dd4 <_Bfree>
 8006e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	dc1d      	bgt.n	8006e60 <_strtod_l+0x778>
 8006e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd23      	ble.n	8006e72 <_strtod_l+0x78a>
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e2e:	9805      	ldr	r0, [sp, #20]
 8006e30:	f7ff f98c 	bl	800614c <__pow5mult>
 8006e34:	4681      	mov	r9, r0
 8006e36:	b9e0      	cbnz	r0, 8006e72 <_strtod_l+0x78a>
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	e66f      	b.n	8006b1e <_strtod_l+0x436>
 8006e3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e4a:	35e2      	adds	r5, #226	@ 0xe2
 8006e4c:	fa01 f305 	lsl.w	r3, r1, r5
 8006e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e52:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e54:	e7ba      	b.n	8006dcc <_strtod_l+0x6e4>
 8006e56:	2300      	movs	r3, #0
 8006e58:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e5e:	e7b5      	b.n	8006dcc <_strtod_l+0x6e4>
 8006e60:	462a      	mov	r2, r5
 8006e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e64:	9805      	ldr	r0, [sp, #20]
 8006e66:	f7ff f9cb 	bl	8006200 <__lshift>
 8006e6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1d9      	bne.n	8006e24 <_strtod_l+0x73c>
 8006e70:	e655      	b.n	8006b1e <_strtod_l+0x436>
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	dd07      	ble.n	8006e86 <_strtod_l+0x79e>
 8006e76:	4649      	mov	r1, r9
 8006e78:	4632      	mov	r2, r6
 8006e7a:	9805      	ldr	r0, [sp, #20]
 8006e7c:	f7ff f9c0 	bl	8006200 <__lshift>
 8006e80:	4681      	mov	r9, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0d8      	beq.n	8006e38 <_strtod_l+0x750>
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	dd08      	ble.n	8006e9c <_strtod_l+0x7b4>
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	9805      	ldr	r0, [sp, #20]
 8006e90:	f7ff f9b6 	bl	8006200 <__lshift>
 8006e94:	4680      	mov	r8, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f ae41 	beq.w	8006b1e <_strtod_l+0x436>
 8006e9c:	464a      	mov	r2, r9
 8006e9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ea0:	9805      	ldr	r0, [sp, #20]
 8006ea2:	f7ff fa35 	bl	8006310 <__mdiff>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f ae38 	beq.w	8006b1e <_strtod_l+0x436>
 8006eae:	68c3      	ldr	r3, [r0, #12]
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60c3      	str	r3, [r0, #12]
 8006eb8:	f7ff fa0e 	bl	80062d8 <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	da45      	bge.n	8006f4c <_strtod_l+0x864>
 8006ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ec6:	d16b      	bne.n	8006fa0 <_strtod_l+0x8b8>
 8006ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d167      	bne.n	8006fa0 <_strtod_l+0x8b8>
 8006ed0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	051b      	lsls	r3, r3, #20
 8006ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006edc:	d960      	bls.n	8006fa0 <_strtod_l+0x8b8>
 8006ede:	6963      	ldr	r3, [r4, #20]
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_strtod_l+0x800>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	dd5b      	ble.n	8006fa0 <_strtod_l+0x8b8>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	2201      	movs	r2, #1
 8006eec:	9805      	ldr	r0, [sp, #20]
 8006eee:	f7ff f987 	bl	8006200 <__lshift>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	f7ff f9ef 	bl	80062d8 <__mcmp>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	dd50      	ble.n	8006fa0 <_strtod_l+0x8b8>
 8006efe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f02:	9a08      	ldr	r2, [sp, #32]
 8006f04:	0d1b      	lsrs	r3, r3, #20
 8006f06:	051b      	lsls	r3, r3, #20
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d06a      	beq.n	8006fe2 <_strtod_l+0x8fa>
 8006f0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f10:	d867      	bhi.n	8006fe2 <_strtod_l+0x8fa>
 8006f12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f16:	f67f ae98 	bls.w	8006c4a <_strtod_l+0x562>
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <_strtod_l+0x85c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <_strtod_l+0x860>)
 8006f28:	4682      	mov	sl, r0
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	468b      	mov	fp, r1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f47f ae00 	bne.w	8006b34 <_strtod_l+0x44c>
 8006f34:	2322      	movs	r3, #34	@ 0x22
 8006f36:	9a05      	ldr	r2, [sp, #20]
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e5fb      	b.n	8006b34 <_strtod_l+0x44c>
 8006f3c:	080087f0 	.word	0x080087f0
 8006f40:	fffffc02 	.word	0xfffffc02
 8006f44:	39500000 	.word	0x39500000
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f50:	d165      	bne.n	800701e <_strtod_l+0x936>
 8006f52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f58:	b35a      	cbz	r2, 8006fb2 <_strtod_l+0x8ca>
 8006f5a:	4a99      	ldr	r2, [pc, #612]	@ (80071c0 <_strtod_l+0xad8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d12b      	bne.n	8006fb8 <_strtod_l+0x8d0>
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	4651      	mov	r1, sl
 8006f64:	b303      	cbz	r3, 8006fa8 <_strtod_l+0x8c0>
 8006f66:	465a      	mov	r2, fp
 8006f68:	4b96      	ldr	r3, [pc, #600]	@ (80071c4 <_strtod_l+0xadc>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	d81b      	bhi.n	8006fae <_strtod_l+0x8c6>
 8006f76:	0d1b      	lsrs	r3, r3, #20
 8006f78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	4299      	cmp	r1, r3
 8006f82:	d119      	bne.n	8006fb8 <_strtod_l+0x8d0>
 8006f84:	4b90      	ldr	r3, [pc, #576]	@ (80071c8 <_strtod_l+0xae0>)
 8006f86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <_strtod_l+0x8aa>
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	f43f adc6 	beq.w	8006b1e <_strtod_l+0x436>
 8006f92:	f04f 0a00 	mov.w	sl, #0
 8006f96:	4b8b      	ldr	r3, [pc, #556]	@ (80071c4 <_strtod_l+0xadc>)
 8006f98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1b9      	bne.n	8006f1a <_strtod_l+0x832>
 8006fa6:	e5c5      	b.n	8006b34 <_strtod_l+0x44c>
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fac:	e7e8      	b.n	8006f80 <_strtod_l+0x898>
 8006fae:	4613      	mov	r3, r2
 8006fb0:	e7e6      	b.n	8006f80 <_strtod_l+0x898>
 8006fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8006fb6:	d0a2      	beq.n	8006efe <_strtod_l+0x816>
 8006fb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fba:	b1db      	cbz	r3, 8006ff4 <_strtod_l+0x90c>
 8006fbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fbe:	4213      	tst	r3, r2
 8006fc0:	d0ee      	beq.n	8006fa0 <_strtod_l+0x8b8>
 8006fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	9a08      	ldr	r2, [sp, #32]
 8006fca:	b1bb      	cbz	r3, 8006ffc <_strtod_l+0x914>
 8006fcc:	f7ff fb68 	bl	80066a0 <sulp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd8:	f7f9 f8c8 	bl	800016c <__adddf3>
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	e7de      	b.n	8006fa0 <_strtod_l+0x8b8>
 8006fe2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fe6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fea:	f04f 3aff 	mov.w	sl, #4294967295
 8006fee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ff2:	e7d5      	b.n	8006fa0 <_strtod_l+0x8b8>
 8006ff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ff6:	ea13 0f0a 	tst.w	r3, sl
 8006ffa:	e7e1      	b.n	8006fc0 <_strtod_l+0x8d8>
 8006ffc:	f7ff fb50 	bl	80066a0 <sulp>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007008:	f7f9 f8ae 	bl	8000168 <__aeabi_dsub>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4682      	mov	sl, r0
 8007012:	468b      	mov	fp, r1
 8007014:	f7f9 fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0c1      	beq.n	8006fa0 <_strtod_l+0x8b8>
 800701c:	e615      	b.n	8006c4a <_strtod_l+0x562>
 800701e:	4641      	mov	r1, r8
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fac9 	bl	80065b8 <__ratio>
 8007026:	2200      	movs	r2, #0
 8007028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	f7f9 fcce 	bl	80009d0 <__aeabi_dcmple>
 8007034:	2800      	cmp	r0, #0
 8007036:	d06d      	beq.n	8007114 <_strtod_l+0xa2c>
 8007038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d178      	bne.n	8007130 <_strtod_l+0xa48>
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	d156      	bne.n	80070f2 <_strtod_l+0xa0a>
 8007044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704a:	2b00      	cmp	r3, #0
 800704c:	d158      	bne.n	8007100 <_strtod_l+0xa18>
 800704e:	2200      	movs	r2, #0
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	4b5d      	ldr	r3, [pc, #372]	@ (80071cc <_strtod_l+0xae4>)
 8007056:	f7f9 fcb1 	bl	80009bc <__aeabi_dcmplt>
 800705a:	2800      	cmp	r0, #0
 800705c:	d157      	bne.n	800710e <_strtod_l+0xa26>
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	2200      	movs	r2, #0
 8007064:	4b5a      	ldr	r3, [pc, #360]	@ (80071d0 <_strtod_l+0xae8>)
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007072:	9606      	str	r6, [sp, #24]
 8007074:	9307      	str	r3, [sp, #28]
 8007076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800707a:	4d52      	ldr	r5, [pc, #328]	@ (80071c4 <_strtod_l+0xadc>)
 800707c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007082:	401d      	ands	r5, r3
 8007084:	4b53      	ldr	r3, [pc, #332]	@ (80071d4 <_strtod_l+0xaec>)
 8007086:	429d      	cmp	r5, r3
 8007088:	f040 80aa 	bne.w	80071e0 <_strtod_l+0xaf8>
 800708c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708e:	4650      	mov	r0, sl
 8007090:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007094:	4659      	mov	r1, fp
 8007096:	f7ff f9cf 	bl	8006438 <__ulp>
 800709a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800709e:	f7f9 fa1b 	bl	80004d8 <__aeabi_dmul>
 80070a2:	4652      	mov	r2, sl
 80070a4:	465b      	mov	r3, fp
 80070a6:	f7f9 f861 	bl	800016c <__adddf3>
 80070aa:	460b      	mov	r3, r1
 80070ac:	4945      	ldr	r1, [pc, #276]	@ (80071c4 <_strtod_l+0xadc>)
 80070ae:	4a4a      	ldr	r2, [pc, #296]	@ (80071d8 <_strtod_l+0xaf0>)
 80070b0:	4019      	ands	r1, r3
 80070b2:	4291      	cmp	r1, r2
 80070b4:	4682      	mov	sl, r0
 80070b6:	d942      	bls.n	800713e <_strtod_l+0xa56>
 80070b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070ba:	4b43      	ldr	r3, [pc, #268]	@ (80071c8 <_strtod_l+0xae0>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d103      	bne.n	80070c8 <_strtod_l+0x9e0>
 80070c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c2:	3301      	adds	r3, #1
 80070c4:	f43f ad2b 	beq.w	8006b1e <_strtod_l+0x436>
 80070c8:	f04f 3aff 	mov.w	sl, #4294967295
 80070cc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80071c8 <_strtod_l+0xae0>
 80070d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070d2:	9805      	ldr	r0, [sp, #20]
 80070d4:	f7fe fe7e 	bl	8005dd4 <_Bfree>
 80070d8:	4649      	mov	r1, r9
 80070da:	9805      	ldr	r0, [sp, #20]
 80070dc:	f7fe fe7a 	bl	8005dd4 <_Bfree>
 80070e0:	4641      	mov	r1, r8
 80070e2:	9805      	ldr	r0, [sp, #20]
 80070e4:	f7fe fe76 	bl	8005dd4 <_Bfree>
 80070e8:	4621      	mov	r1, r4
 80070ea:	9805      	ldr	r0, [sp, #20]
 80070ec:	f7fe fe72 	bl	8005dd4 <_Bfree>
 80070f0:	e618      	b.n	8006d24 <_strtod_l+0x63c>
 80070f2:	f1ba 0f01 	cmp.w	sl, #1
 80070f6:	d103      	bne.n	8007100 <_strtod_l+0xa18>
 80070f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f43f ada5 	beq.w	8006c4a <_strtod_l+0x562>
 8007100:	2200      	movs	r2, #0
 8007102:	4b36      	ldr	r3, [pc, #216]	@ (80071dc <_strtod_l+0xaf4>)
 8007104:	2600      	movs	r6, #0
 8007106:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800710a:	4f30      	ldr	r7, [pc, #192]	@ (80071cc <_strtod_l+0xae4>)
 800710c:	e7b3      	b.n	8007076 <_strtod_l+0x98e>
 800710e:	2600      	movs	r6, #0
 8007110:	4f2f      	ldr	r7, [pc, #188]	@ (80071d0 <_strtod_l+0xae8>)
 8007112:	e7ac      	b.n	800706e <_strtod_l+0x986>
 8007114:	4630      	mov	r0, r6
 8007116:	4639      	mov	r1, r7
 8007118:	4b2d      	ldr	r3, [pc, #180]	@ (80071d0 <_strtod_l+0xae8>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 f9dc 	bl	80004d8 <__aeabi_dmul>
 8007120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0a1      	beq.n	800706e <_strtod_l+0x986>
 800712a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800712e:	e7a2      	b.n	8007076 <_strtod_l+0x98e>
 8007130:	2200      	movs	r2, #0
 8007132:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <_strtod_l+0xae4>)
 8007134:	4616      	mov	r6, r2
 8007136:	461f      	mov	r7, r3
 8007138:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800713c:	e79b      	b.n	8007076 <_strtod_l+0x98e>
 800713e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1c1      	bne.n	80070d0 <_strtod_l+0x9e8>
 800714c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	429d      	cmp	r5, r3
 8007156:	d1bb      	bne.n	80070d0 <_strtod_l+0x9e8>
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fe12 	bl	8000d84 <__aeabi_d2lz>
 8007160:	f7f9 f98c 	bl	800047c <__aeabi_l2d>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f7f8 fffc 	bl	8000168 <__aeabi_dsub>
 8007170:	460b      	mov	r3, r1
 8007172:	4602      	mov	r2, r0
 8007174:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007178:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800717c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800717e:	ea46 060a 	orr.w	r6, r6, sl
 8007182:	431e      	orrs	r6, r3
 8007184:	d069      	beq.n	800725a <_strtod_l+0xb72>
 8007186:	a30a      	add	r3, pc, #40	@ (adr r3, 80071b0 <_strtod_l+0xac8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 fc16 	bl	80009bc <__aeabi_dcmplt>
 8007190:	2800      	cmp	r0, #0
 8007192:	f47f accf 	bne.w	8006b34 <_strtod_l+0x44c>
 8007196:	a308      	add	r3, pc, #32	@ (adr r3, 80071b8 <_strtod_l+0xad0>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a0:	f7f9 fc2a 	bl	80009f8 <__aeabi_dcmpgt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d093      	beq.n	80070d0 <_strtod_l+0x9e8>
 80071a8:	e4c4      	b.n	8006b34 <_strtod_l+0x44c>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	94a03595 	.word	0x94a03595
 80071b4:	3fdfffff 	.word	0x3fdfffff
 80071b8:	35afe535 	.word	0x35afe535
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	7fefffff 	.word	0x7fefffff
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	3fe00000 	.word	0x3fe00000
 80071d4:	7fe00000 	.word	0x7fe00000
 80071d8:	7c9fffff 	.word	0x7c9fffff
 80071dc:	bff00000 	.word	0xbff00000
 80071e0:	9b08      	ldr	r3, [sp, #32]
 80071e2:	b323      	cbz	r3, 800722e <_strtod_l+0xb46>
 80071e4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071e8:	d821      	bhi.n	800722e <_strtod_l+0xb46>
 80071ea:	a327      	add	r3, pc, #156	@ (adr r3, 8007288 <_strtod_l+0xba0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 fbec 	bl	80009d0 <__aeabi_dcmple>
 80071f8:	b1a0      	cbz	r0, 8007224 <_strtod_l+0xb3c>
 80071fa:	4639      	mov	r1, r7
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7f9 fc43 	bl	8000a88 <__aeabi_d2uiz>
 8007202:	2801      	cmp	r0, #1
 8007204:	bf38      	it	cc
 8007206:	2001      	movcc	r0, #1
 8007208:	f7f9 f8ec 	bl	80003e4 <__aeabi_ui2d>
 800720c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	b9fb      	cbnz	r3, 8007254 <_strtod_l+0xb6c>
 8007214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007218:	9014      	str	r0, [sp, #80]	@ 0x50
 800721a:	9315      	str	r3, [sp, #84]	@ 0x54
 800721c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007220:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007224:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007226:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800722a:	1b5b      	subs	r3, r3, r5
 800722c:	9311      	str	r3, [sp, #68]	@ 0x44
 800722e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007232:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007236:	f7ff f8ff 	bl	8006438 <__ulp>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4650      	mov	r0, sl
 8007240:	4659      	mov	r1, fp
 8007242:	f7f9 f949 	bl	80004d8 <__aeabi_dmul>
 8007246:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800724a:	f7f8 ff8f 	bl	800016c <__adddf3>
 800724e:	4682      	mov	sl, r0
 8007250:	468b      	mov	fp, r1
 8007252:	e776      	b.n	8007142 <_strtod_l+0xa5a>
 8007254:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007258:	e7e0      	b.n	800721c <_strtod_l+0xb34>
 800725a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007290 <_strtod_l+0xba8>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	e79e      	b.n	80071a4 <_strtod_l+0xabc>
 8007266:	2300      	movs	r3, #0
 8007268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800726a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800726c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f7ff ba77 	b.w	8006762 <_strtod_l+0x7a>
 8007274:	2a65      	cmp	r2, #101	@ 0x65
 8007276:	f43f ab6e 	beq.w	8006956 <_strtod_l+0x26e>
 800727a:	2a45      	cmp	r2, #69	@ 0x45
 800727c:	f43f ab6b 	beq.w	8006956 <_strtod_l+0x26e>
 8007280:	2301      	movs	r3, #1
 8007282:	f7ff bba6 	b.w	80069d2 <_strtod_l+0x2ea>
 8007286:	bf00      	nop
 8007288:	ffc00000 	.word	0xffc00000
 800728c:	41dfffff 	.word	0x41dfffff
 8007290:	94a03595 	.word	0x94a03595
 8007294:	3fcfffff 	.word	0x3fcfffff

08007298 <_strtod_r>:
 8007298:	4b01      	ldr	r3, [pc, #4]	@ (80072a0 <_strtod_r+0x8>)
 800729a:	f7ff ba25 	b.w	80066e8 <_strtod_l>
 800729e:	bf00      	nop
 80072a0:	20000068 	.word	0x20000068

080072a4 <_strtol_l.constprop.0>:
 80072a4:	2b24      	cmp	r3, #36	@ 0x24
 80072a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072aa:	4686      	mov	lr, r0
 80072ac:	4690      	mov	r8, r2
 80072ae:	d801      	bhi.n	80072b4 <_strtol_l.constprop.0+0x10>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <_strtol_l.constprop.0+0x1e>
 80072b4:	f7fd fdc0 	bl	8004e38 <__errno>
 80072b8:	2316      	movs	r3, #22
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	2000      	movs	r0, #0
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	460d      	mov	r5, r1
 80072c4:	4833      	ldr	r0, [pc, #204]	@ (8007394 <_strtol_l.constprop.0+0xf0>)
 80072c6:	462a      	mov	r2, r5
 80072c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072cc:	5d06      	ldrb	r6, [r0, r4]
 80072ce:	f016 0608 	ands.w	r6, r6, #8
 80072d2:	d1f8      	bne.n	80072c6 <_strtol_l.constprop.0+0x22>
 80072d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80072d6:	d12d      	bne.n	8007334 <_strtol_l.constprop.0+0x90>
 80072d8:	2601      	movs	r6, #1
 80072da:	782c      	ldrb	r4, [r5, #0]
 80072dc:	1c95      	adds	r5, r2, #2
 80072de:	f033 0210 	bics.w	r2, r3, #16
 80072e2:	d109      	bne.n	80072f8 <_strtol_l.constprop.0+0x54>
 80072e4:	2c30      	cmp	r4, #48	@ 0x30
 80072e6:	d12a      	bne.n	800733e <_strtol_l.constprop.0+0x9a>
 80072e8:	782a      	ldrb	r2, [r5, #0]
 80072ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ee:	2a58      	cmp	r2, #88	@ 0x58
 80072f0:	d125      	bne.n	800733e <_strtol_l.constprop.0+0x9a>
 80072f2:	2310      	movs	r3, #16
 80072f4:	786c      	ldrb	r4, [r5, #1]
 80072f6:	3502      	adds	r5, #2
 80072f8:	2200      	movs	r2, #0
 80072fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007302:	fbbc f9f3 	udiv	r9, ip, r3
 8007306:	4610      	mov	r0, r2
 8007308:	fb03 ca19 	mls	sl, r3, r9, ip
 800730c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007310:	2f09      	cmp	r7, #9
 8007312:	d81b      	bhi.n	800734c <_strtol_l.constprop.0+0xa8>
 8007314:	463c      	mov	r4, r7
 8007316:	42a3      	cmp	r3, r4
 8007318:	dd27      	ble.n	800736a <_strtol_l.constprop.0+0xc6>
 800731a:	1c57      	adds	r7, r2, #1
 800731c:	d007      	beq.n	800732e <_strtol_l.constprop.0+0x8a>
 800731e:	4581      	cmp	r9, r0
 8007320:	d320      	bcc.n	8007364 <_strtol_l.constprop.0+0xc0>
 8007322:	d101      	bne.n	8007328 <_strtol_l.constprop.0+0x84>
 8007324:	45a2      	cmp	sl, r4
 8007326:	db1d      	blt.n	8007364 <_strtol_l.constprop.0+0xc0>
 8007328:	2201      	movs	r2, #1
 800732a:	fb00 4003 	mla	r0, r0, r3, r4
 800732e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007332:	e7eb      	b.n	800730c <_strtol_l.constprop.0+0x68>
 8007334:	2c2b      	cmp	r4, #43	@ 0x2b
 8007336:	bf04      	itt	eq
 8007338:	782c      	ldrbeq	r4, [r5, #0]
 800733a:	1c95      	addeq	r5, r2, #2
 800733c:	e7cf      	b.n	80072de <_strtol_l.constprop.0+0x3a>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1da      	bne.n	80072f8 <_strtol_l.constprop.0+0x54>
 8007342:	2c30      	cmp	r4, #48	@ 0x30
 8007344:	bf0c      	ite	eq
 8007346:	2308      	moveq	r3, #8
 8007348:	230a      	movne	r3, #10
 800734a:	e7d5      	b.n	80072f8 <_strtol_l.constprop.0+0x54>
 800734c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007350:	2f19      	cmp	r7, #25
 8007352:	d801      	bhi.n	8007358 <_strtol_l.constprop.0+0xb4>
 8007354:	3c37      	subs	r4, #55	@ 0x37
 8007356:	e7de      	b.n	8007316 <_strtol_l.constprop.0+0x72>
 8007358:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800735c:	2f19      	cmp	r7, #25
 800735e:	d804      	bhi.n	800736a <_strtol_l.constprop.0+0xc6>
 8007360:	3c57      	subs	r4, #87	@ 0x57
 8007362:	e7d8      	b.n	8007316 <_strtol_l.constprop.0+0x72>
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	e7e1      	b.n	800732e <_strtol_l.constprop.0+0x8a>
 800736a:	1c53      	adds	r3, r2, #1
 800736c:	d108      	bne.n	8007380 <_strtol_l.constprop.0+0xdc>
 800736e:	2322      	movs	r3, #34	@ 0x22
 8007370:	4660      	mov	r0, ip
 8007372:	f8ce 3000 	str.w	r3, [lr]
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	d0a0      	beq.n	80072be <_strtol_l.constprop.0+0x1a>
 800737c:	1e69      	subs	r1, r5, #1
 800737e:	e006      	b.n	800738e <_strtol_l.constprop.0+0xea>
 8007380:	b106      	cbz	r6, 8007384 <_strtol_l.constprop.0+0xe0>
 8007382:	4240      	negs	r0, r0
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d099      	beq.n	80072be <_strtol_l.constprop.0+0x1a>
 800738a:	2a00      	cmp	r2, #0
 800738c:	d1f6      	bne.n	800737c <_strtol_l.constprop.0+0xd8>
 800738e:	f8c8 1000 	str.w	r1, [r8]
 8007392:	e794      	b.n	80072be <_strtol_l.constprop.0+0x1a>
 8007394:	08008819 	.word	0x08008819

08007398 <_strtol_r>:
 8007398:	f7ff bf84 	b.w	80072a4 <_strtol_l.constprop.0>

0800739c <__ssputs_r>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	461f      	mov	r7, r3
 80073a2:	688e      	ldr	r6, [r1, #8]
 80073a4:	4682      	mov	sl, r0
 80073a6:	42be      	cmp	r6, r7
 80073a8:	460c      	mov	r4, r1
 80073aa:	4690      	mov	r8, r2
 80073ac:	680b      	ldr	r3, [r1, #0]
 80073ae:	d82d      	bhi.n	800740c <__ssputs_r+0x70>
 80073b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073b8:	d026      	beq.n	8007408 <__ssputs_r+0x6c>
 80073ba:	6965      	ldr	r5, [r4, #20]
 80073bc:	6909      	ldr	r1, [r1, #16]
 80073be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c2:	eba3 0901 	sub.w	r9, r3, r1
 80073c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ca:	1c7b      	adds	r3, r7, #1
 80073cc:	444b      	add	r3, r9
 80073ce:	106d      	asrs	r5, r5, #1
 80073d0:	429d      	cmp	r5, r3
 80073d2:	bf38      	it	cc
 80073d4:	461d      	movcc	r5, r3
 80073d6:	0553      	lsls	r3, r2, #21
 80073d8:	d527      	bpl.n	800742a <__ssputs_r+0x8e>
 80073da:	4629      	mov	r1, r5
 80073dc:	f7fe fc2e 	bl	8005c3c <_malloc_r>
 80073e0:	4606      	mov	r6, r0
 80073e2:	b360      	cbz	r0, 800743e <__ssputs_r+0xa2>
 80073e4:	464a      	mov	r2, r9
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	f000 fa14 	bl	8007814 <memcpy>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	6126      	str	r6, [r4, #16]
 80073fa:	444e      	add	r6, r9
 80073fc:	6026      	str	r6, [r4, #0]
 80073fe:	463e      	mov	r6, r7
 8007400:	6165      	str	r5, [r4, #20]
 8007402:	eba5 0509 	sub.w	r5, r5, r9
 8007406:	60a5      	str	r5, [r4, #8]
 8007408:	42be      	cmp	r6, r7
 800740a:	d900      	bls.n	800740e <__ssputs_r+0x72>
 800740c:	463e      	mov	r6, r7
 800740e:	4632      	mov	r2, r6
 8007410:	4641      	mov	r1, r8
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	f000 f9c2 	bl	800779c <memmove>
 8007418:	2000      	movs	r0, #0
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	1b9b      	subs	r3, r3, r6
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	4433      	add	r3, r6
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	462a      	mov	r2, r5
 800742c:	f000 fd83 	bl	8007f36 <_realloc_r>
 8007430:	4606      	mov	r6, r0
 8007432:	2800      	cmp	r0, #0
 8007434:	d1e0      	bne.n	80073f8 <__ssputs_r+0x5c>
 8007436:	4650      	mov	r0, sl
 8007438:	6921      	ldr	r1, [r4, #16]
 800743a:	f7fe fb8d 	bl	8005b58 <_free_r>
 800743e:	230c      	movs	r3, #12
 8007440:	f8ca 3000 	str.w	r3, [sl]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295
 800744a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	e7e9      	b.n	8007426 <__ssputs_r+0x8a>
	...

08007454 <_svfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4698      	mov	r8, r3
 800745a:	898b      	ldrh	r3, [r1, #12]
 800745c:	4607      	mov	r7, r0
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	460d      	mov	r5, r1
 8007462:	4614      	mov	r4, r2
 8007464:	b09d      	sub	sp, #116	@ 0x74
 8007466:	d510      	bpl.n	800748a <_svfiprintf_r+0x36>
 8007468:	690b      	ldr	r3, [r1, #16]
 800746a:	b973      	cbnz	r3, 800748a <_svfiprintf_r+0x36>
 800746c:	2140      	movs	r1, #64	@ 0x40
 800746e:	f7fe fbe5 	bl	8005c3c <_malloc_r>
 8007472:	6028      	str	r0, [r5, #0]
 8007474:	6128      	str	r0, [r5, #16]
 8007476:	b930      	cbnz	r0, 8007486 <_svfiprintf_r+0x32>
 8007478:	230c      	movs	r3, #12
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	b01d      	add	sp, #116	@ 0x74
 8007482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007486:	2340      	movs	r3, #64	@ 0x40
 8007488:	616b      	str	r3, [r5, #20]
 800748a:	2300      	movs	r3, #0
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	2320      	movs	r3, #32
 8007490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007494:	2330      	movs	r3, #48	@ 0x30
 8007496:	f04f 0901 	mov.w	r9, #1
 800749a:	f8cd 800c 	str.w	r8, [sp, #12]
 800749e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007638 <_svfiprintf_r+0x1e4>
 80074a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a6:	4623      	mov	r3, r4
 80074a8:	469a      	mov	sl, r3
 80074aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ae:	b10a      	cbz	r2, 80074b4 <_svfiprintf_r+0x60>
 80074b0:	2a25      	cmp	r2, #37	@ 0x25
 80074b2:	d1f9      	bne.n	80074a8 <_svfiprintf_r+0x54>
 80074b4:	ebba 0b04 	subs.w	fp, sl, r4
 80074b8:	d00b      	beq.n	80074d2 <_svfiprintf_r+0x7e>
 80074ba:	465b      	mov	r3, fp
 80074bc:	4622      	mov	r2, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7ff ff6b 	bl	800739c <__ssputs_r>
 80074c6:	3001      	adds	r0, #1
 80074c8:	f000 80a7 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ce:	445a      	add	r2, fp
 80074d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d2:	f89a 3000 	ldrb.w	r3, [sl]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809f 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074dc:	2300      	movs	r3, #0
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e6:	f10a 0a01 	add.w	sl, sl, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f4:	4654      	mov	r4, sl
 80074f6:	2205      	movs	r2, #5
 80074f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fc:	484e      	ldr	r0, [pc, #312]	@ (8007638 <_svfiprintf_r+0x1e4>)
 80074fe:	f7fd fcc8 	bl	8004e92 <memchr>
 8007502:	9a04      	ldr	r2, [sp, #16]
 8007504:	b9d8      	cbnz	r0, 800753e <_svfiprintf_r+0xea>
 8007506:	06d0      	lsls	r0, r2, #27
 8007508:	bf44      	itt	mi
 800750a:	2320      	movmi	r3, #32
 800750c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007510:	0711      	lsls	r1, r2, #28
 8007512:	bf44      	itt	mi
 8007514:	232b      	movmi	r3, #43	@ 0x2b
 8007516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751a:	f89a 3000 	ldrb.w	r3, [sl]
 800751e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007520:	d015      	beq.n	800754e <_svfiprintf_r+0xfa>
 8007522:	4654      	mov	r4, sl
 8007524:	2000      	movs	r0, #0
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4621      	mov	r1, r4
 800752e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007532:	3b30      	subs	r3, #48	@ 0x30
 8007534:	2b09      	cmp	r3, #9
 8007536:	d94b      	bls.n	80075d0 <_svfiprintf_r+0x17c>
 8007538:	b1b0      	cbz	r0, 8007568 <_svfiprintf_r+0x114>
 800753a:	9207      	str	r2, [sp, #28]
 800753c:	e014      	b.n	8007568 <_svfiprintf_r+0x114>
 800753e:	eba0 0308 	sub.w	r3, r0, r8
 8007542:	fa09 f303 	lsl.w	r3, r9, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	46a2      	mov	sl, r4
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	e7d2      	b.n	80074f4 <_svfiprintf_r+0xa0>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	1d19      	adds	r1, r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	9103      	str	r1, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	bfbb      	ittet	lt
 800755a:	425b      	neglt	r3, r3
 800755c:	f042 0202 	orrlt.w	r2, r2, #2
 8007560:	9307      	strge	r3, [sp, #28]
 8007562:	9307      	strlt	r3, [sp, #28]
 8007564:	bfb8      	it	lt
 8007566:	9204      	strlt	r2, [sp, #16]
 8007568:	7823      	ldrb	r3, [r4, #0]
 800756a:	2b2e      	cmp	r3, #46	@ 0x2e
 800756c:	d10a      	bne.n	8007584 <_svfiprintf_r+0x130>
 800756e:	7863      	ldrb	r3, [r4, #1]
 8007570:	2b2a      	cmp	r3, #42	@ 0x2a
 8007572:	d132      	bne.n	80075da <_svfiprintf_r+0x186>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	3402      	adds	r4, #2
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800763c <_svfiprintf_r+0x1e8>
 8007588:	2203      	movs	r2, #3
 800758a:	4650      	mov	r0, sl
 800758c:	7821      	ldrb	r1, [r4, #0]
 800758e:	f7fd fc80 	bl	8004e92 <memchr>
 8007592:	b138      	cbz	r0, 80075a4 <_svfiprintf_r+0x150>
 8007594:	2240      	movs	r2, #64	@ 0x40
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	eba0 000a 	sub.w	r0, r0, sl
 800759c:	4082      	lsls	r2, r0
 800759e:	4313      	orrs	r3, r2
 80075a0:	3401      	adds	r4, #1
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a8:	2206      	movs	r2, #6
 80075aa:	4825      	ldr	r0, [pc, #148]	@ (8007640 <_svfiprintf_r+0x1ec>)
 80075ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075b0:	f7fd fc6f 	bl	8004e92 <memchr>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d036      	beq.n	8007626 <_svfiprintf_r+0x1d2>
 80075b8:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <_svfiprintf_r+0x1f0>)
 80075ba:	bb1b      	cbnz	r3, 8007604 <_svfiprintf_r+0x1b0>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	4433      	add	r3, r6
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	e76a      	b.n	80074a6 <_svfiprintf_r+0x52>
 80075d0:	460c      	mov	r4, r1
 80075d2:	2001      	movs	r0, #1
 80075d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d8:	e7a8      	b.n	800752c <_svfiprintf_r+0xd8>
 80075da:	2300      	movs	r3, #0
 80075dc:	f04f 0c0a 	mov.w	ip, #10
 80075e0:	4619      	mov	r1, r3
 80075e2:	3401      	adds	r4, #1
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ec:	3a30      	subs	r2, #48	@ 0x30
 80075ee:	2a09      	cmp	r2, #9
 80075f0:	d903      	bls.n	80075fa <_svfiprintf_r+0x1a6>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0c6      	beq.n	8007584 <_svfiprintf_r+0x130>
 80075f6:	9105      	str	r1, [sp, #20]
 80075f8:	e7c4      	b.n	8007584 <_svfiprintf_r+0x130>
 80075fa:	4604      	mov	r4, r0
 80075fc:	2301      	movs	r3, #1
 80075fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007602:	e7f0      	b.n	80075e6 <_svfiprintf_r+0x192>
 8007604:	ab03      	add	r3, sp, #12
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	462a      	mov	r2, r5
 800760a:	4638      	mov	r0, r7
 800760c:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <_svfiprintf_r+0x1f4>)
 800760e:	a904      	add	r1, sp, #16
 8007610:	f7fc fc98 	bl	8003f44 <_printf_float>
 8007614:	1c42      	adds	r2, r0, #1
 8007616:	4606      	mov	r6, r0
 8007618:	d1d6      	bne.n	80075c8 <_svfiprintf_r+0x174>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	065b      	lsls	r3, r3, #25
 800761e:	f53f af2d 	bmi.w	800747c <_svfiprintf_r+0x28>
 8007622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007624:	e72c      	b.n	8007480 <_svfiprintf_r+0x2c>
 8007626:	ab03      	add	r3, sp, #12
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	462a      	mov	r2, r5
 800762c:	4638      	mov	r0, r7
 800762e:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <_svfiprintf_r+0x1f4>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	f7fc ff25 	bl	8004480 <_printf_i>
 8007636:	e7ed      	b.n	8007614 <_svfiprintf_r+0x1c0>
 8007638:	08008919 	.word	0x08008919
 800763c:	0800891f 	.word	0x0800891f
 8007640:	08008923 	.word	0x08008923
 8007644:	08003f45 	.word	0x08003f45
 8007648:	0800739d 	.word	0x0800739d

0800764c <__sflush_r>:
 800764c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	0716      	lsls	r6, r2, #28
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	d454      	bmi.n	8007704 <__sflush_r+0xb8>
 800765a:	684b      	ldr	r3, [r1, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dc02      	bgt.n	8007666 <__sflush_r+0x1a>
 8007660:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd48      	ble.n	80076f8 <__sflush_r+0xac>
 8007666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007668:	2e00      	cmp	r6, #0
 800766a:	d045      	beq.n	80076f8 <__sflush_r+0xac>
 800766c:	2300      	movs	r3, #0
 800766e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007672:	682f      	ldr	r7, [r5, #0]
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	d030      	beq.n	80076dc <__sflush_r+0x90>
 800767a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	0759      	lsls	r1, r3, #29
 8007680:	d505      	bpl.n	800768e <__sflush_r+0x42>
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007688:	b10b      	cbz	r3, 800768e <__sflush_r+0x42>
 800768a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	2300      	movs	r3, #0
 8007690:	4628      	mov	r0, r5
 8007692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	47b0      	blx	r6
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	d106      	bne.n	80076ac <__sflush_r+0x60>
 800769e:	6829      	ldr	r1, [r5, #0]
 80076a0:	291d      	cmp	r1, #29
 80076a2:	d82b      	bhi.n	80076fc <__sflush_r+0xb0>
 80076a4:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <__sflush_r+0xfc>)
 80076a6:	410a      	asrs	r2, r1
 80076a8:	07d6      	lsls	r6, r2, #31
 80076aa:	d427      	bmi.n	80076fc <__sflush_r+0xb0>
 80076ac:	2200      	movs	r2, #0
 80076ae:	6062      	str	r2, [r4, #4]
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	04d9      	lsls	r1, r3, #19
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	d504      	bpl.n	80076c2 <__sflush_r+0x76>
 80076b8:	1c42      	adds	r2, r0, #1
 80076ba:	d101      	bne.n	80076c0 <__sflush_r+0x74>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b903      	cbnz	r3, 80076c2 <__sflush_r+0x76>
 80076c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80076c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c4:	602f      	str	r7, [r5, #0]
 80076c6:	b1b9      	cbz	r1, 80076f8 <__sflush_r+0xac>
 80076c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <__sflush_r+0x8a>
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7fe fa41 	bl	8005b58 <_free_r>
 80076d6:	2300      	movs	r3, #0
 80076d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076da:	e00d      	b.n	80076f8 <__sflush_r+0xac>
 80076dc:	2301      	movs	r3, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	4602      	mov	r2, r0
 80076e4:	1c50      	adds	r0, r2, #1
 80076e6:	d1c9      	bne.n	800767c <__sflush_r+0x30>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0c6      	beq.n	800767c <__sflush_r+0x30>
 80076ee:	2b1d      	cmp	r3, #29
 80076f0:	d001      	beq.n	80076f6 <__sflush_r+0xaa>
 80076f2:	2b16      	cmp	r3, #22
 80076f4:	d11d      	bne.n	8007732 <__sflush_r+0xe6>
 80076f6:	602f      	str	r7, [r5, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e021      	b.n	8007740 <__sflush_r+0xf4>
 80076fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007700:	b21b      	sxth	r3, r3
 8007702:	e01a      	b.n	800773a <__sflush_r+0xee>
 8007704:	690f      	ldr	r7, [r1, #16]
 8007706:	2f00      	cmp	r7, #0
 8007708:	d0f6      	beq.n	80076f8 <__sflush_r+0xac>
 800770a:	0793      	lsls	r3, r2, #30
 800770c:	bf18      	it	ne
 800770e:	2300      	movne	r3, #0
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	bf08      	it	eq
 8007714:	694b      	ldreq	r3, [r1, #20]
 8007716:	1bf6      	subs	r6, r6, r7
 8007718:	600f      	str	r7, [r1, #0]
 800771a:	608b      	str	r3, [r1, #8]
 800771c:	2e00      	cmp	r6, #0
 800771e:	ddeb      	ble.n	80076f8 <__sflush_r+0xac>
 8007720:	4633      	mov	r3, r6
 8007722:	463a      	mov	r2, r7
 8007724:	4628      	mov	r0, r5
 8007726:	6a21      	ldr	r1, [r4, #32]
 8007728:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800772c:	47e0      	blx	ip
 800772e:	2800      	cmp	r0, #0
 8007730:	dc07      	bgt.n	8007742 <__sflush_r+0xf6>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007742:	4407      	add	r7, r0
 8007744:	1a36      	subs	r6, r6, r0
 8007746:	e7e9      	b.n	800771c <__sflush_r+0xd0>
 8007748:	dfbffffe 	.word	0xdfbffffe

0800774c <_fflush_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b913      	cbnz	r3, 800775c <_fflush_r+0x10>
 8007756:	2500      	movs	r5, #0
 8007758:	4628      	mov	r0, r5
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	b118      	cbz	r0, 8007766 <_fflush_r+0x1a>
 800775e:	6a03      	ldr	r3, [r0, #32]
 8007760:	b90b      	cbnz	r3, 8007766 <_fflush_r+0x1a>
 8007762:	f7fd fa49 	bl	8004bf8 <__sinit>
 8007766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0f3      	beq.n	8007756 <_fflush_r+0xa>
 800776e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007770:	07d0      	lsls	r0, r2, #31
 8007772:	d404      	bmi.n	800777e <_fflush_r+0x32>
 8007774:	0599      	lsls	r1, r3, #22
 8007776:	d402      	bmi.n	800777e <_fflush_r+0x32>
 8007778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800777a:	f7fd fb88 	bl	8004e8e <__retarget_lock_acquire_recursive>
 800777e:	4628      	mov	r0, r5
 8007780:	4621      	mov	r1, r4
 8007782:	f7ff ff63 	bl	800764c <__sflush_r>
 8007786:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007788:	4605      	mov	r5, r0
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d4e4      	bmi.n	8007758 <_fflush_r+0xc>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	059b      	lsls	r3, r3, #22
 8007792:	d4e1      	bmi.n	8007758 <_fflush_r+0xc>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f7fd fb7b 	bl	8004e90 <__retarget_lock_release_recursive>
 800779a:	e7dd      	b.n	8007758 <_fflush_r+0xc>

0800779c <memmove>:
 800779c:	4288      	cmp	r0, r1
 800779e:	b510      	push	{r4, lr}
 80077a0:	eb01 0402 	add.w	r4, r1, r2
 80077a4:	d902      	bls.n	80077ac <memmove+0x10>
 80077a6:	4284      	cmp	r4, r0
 80077a8:	4623      	mov	r3, r4
 80077aa:	d807      	bhi.n	80077bc <memmove+0x20>
 80077ac:	1e43      	subs	r3, r0, #1
 80077ae:	42a1      	cmp	r1, r4
 80077b0:	d008      	beq.n	80077c4 <memmove+0x28>
 80077b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ba:	e7f8      	b.n	80077ae <memmove+0x12>
 80077bc:	4601      	mov	r1, r0
 80077be:	4402      	add	r2, r0
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d100      	bne.n	80077c6 <memmove+0x2a>
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ce:	e7f7      	b.n	80077c0 <memmove+0x24>

080077d0 <strncmp>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	b16a      	cbz	r2, 80077f0 <strncmp+0x20>
 80077d4:	3901      	subs	r1, #1
 80077d6:	1884      	adds	r4, r0, r2
 80077d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d103      	bne.n	80077ec <strncmp+0x1c>
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d001      	beq.n	80077ec <strncmp+0x1c>
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	d1f5      	bne.n	80077d8 <strncmp+0x8>
 80077ec:	1ad0      	subs	r0, r2, r3
 80077ee:	bd10      	pop	{r4, pc}
 80077f0:	4610      	mov	r0, r2
 80077f2:	e7fc      	b.n	80077ee <strncmp+0x1e>

080077f4 <_sbrk_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	2300      	movs	r3, #0
 80077f8:	4d05      	ldr	r5, [pc, #20]	@ (8007810 <_sbrk_r+0x1c>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7fa f896 	bl	8001930 <_sbrk>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_sbrk_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_sbrk_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	200005bc 	.word	0x200005bc

08007814 <memcpy>:
 8007814:	440a      	add	r2, r1
 8007816:	4291      	cmp	r1, r2
 8007818:	f100 33ff 	add.w	r3, r0, #4294967295
 800781c:	d100      	bne.n	8007820 <memcpy+0xc>
 800781e:	4770      	bx	lr
 8007820:	b510      	push	{r4, lr}
 8007822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007826:	4291      	cmp	r1, r2
 8007828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800782c:	d1f9      	bne.n	8007822 <memcpy+0xe>
 800782e:	bd10      	pop	{r4, pc}

08007830 <nan>:
 8007830:	2000      	movs	r0, #0
 8007832:	4901      	ldr	r1, [pc, #4]	@ (8007838 <nan+0x8>)
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	7ff80000 	.word	0x7ff80000

0800783c <__assert_func>:
 800783c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783e:	4614      	mov	r4, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <__assert_func+0x2c>)
 8007844:	4605      	mov	r5, r0
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68d8      	ldr	r0, [r3, #12]
 800784a:	b954      	cbnz	r4, 8007862 <__assert_func+0x26>
 800784c:	4b07      	ldr	r3, [pc, #28]	@ (800786c <__assert_func+0x30>)
 800784e:	461c      	mov	r4, r3
 8007850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007854:	9100      	str	r1, [sp, #0]
 8007856:	462b      	mov	r3, r5
 8007858:	4905      	ldr	r1, [pc, #20]	@ (8007870 <__assert_func+0x34>)
 800785a:	f000 fba7 	bl	8007fac <fiprintf>
 800785e:	f000 fbb7 	bl	8007fd0 <abort>
 8007862:	4b04      	ldr	r3, [pc, #16]	@ (8007874 <__assert_func+0x38>)
 8007864:	e7f4      	b.n	8007850 <__assert_func+0x14>
 8007866:	bf00      	nop
 8007868:	20000018 	.word	0x20000018
 800786c:	0800896d 	.word	0x0800896d
 8007870:	0800893f 	.word	0x0800893f
 8007874:	08008932 	.word	0x08008932

08007878 <_calloc_r>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	fba1 5402 	umull	r5, r4, r1, r2
 800787e:	b93c      	cbnz	r4, 8007890 <_calloc_r+0x18>
 8007880:	4629      	mov	r1, r5
 8007882:	f7fe f9db 	bl	8005c3c <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b928      	cbnz	r0, 8007896 <_calloc_r+0x1e>
 800788a:	2600      	movs	r6, #0
 800788c:	4630      	mov	r0, r6
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	220c      	movs	r2, #12
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	e7f9      	b.n	800788a <_calloc_r+0x12>
 8007896:	462a      	mov	r2, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7fd fa7a 	bl	8004d92 <memset>
 800789e:	e7f5      	b.n	800788c <_calloc_r+0x14>

080078a0 <rshift>:
 80078a0:	6903      	ldr	r3, [r0, #16]
 80078a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078aa:	f100 0414 	add.w	r4, r0, #20
 80078ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078b2:	dd46      	ble.n	8007942 <rshift+0xa2>
 80078b4:	f011 011f 	ands.w	r1, r1, #31
 80078b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078c0:	d10c      	bne.n	80078dc <rshift+0x3c>
 80078c2:	4629      	mov	r1, r5
 80078c4:	f100 0710 	add.w	r7, r0, #16
 80078c8:	42b1      	cmp	r1, r6
 80078ca:	d335      	bcc.n	8007938 <rshift+0x98>
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	1eea      	subs	r2, r5, #3
 80078d2:	4296      	cmp	r6, r2
 80078d4:	bf38      	it	cc
 80078d6:	2300      	movcc	r3, #0
 80078d8:	4423      	add	r3, r4
 80078da:	e015      	b.n	8007908 <rshift+0x68>
 80078dc:	46a1      	mov	r9, r4
 80078de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078e2:	f1c1 0820 	rsb	r8, r1, #32
 80078e6:	40cf      	lsrs	r7, r1
 80078e8:	f105 0e04 	add.w	lr, r5, #4
 80078ec:	4576      	cmp	r6, lr
 80078ee:	46f4      	mov	ip, lr
 80078f0:	d816      	bhi.n	8007920 <rshift+0x80>
 80078f2:	1a9a      	subs	r2, r3, r2
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	3a04      	subs	r2, #4
 80078f8:	3501      	adds	r5, #1
 80078fa:	42ae      	cmp	r6, r5
 80078fc:	bf38      	it	cc
 80078fe:	2200      	movcc	r2, #0
 8007900:	18a3      	adds	r3, r4, r2
 8007902:	50a7      	str	r7, [r4, r2]
 8007904:	b107      	cbz	r7, 8007908 <rshift+0x68>
 8007906:	3304      	adds	r3, #4
 8007908:	42a3      	cmp	r3, r4
 800790a:	eba3 0204 	sub.w	r2, r3, r4
 800790e:	bf08      	it	eq
 8007910:	2300      	moveq	r3, #0
 8007912:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007916:	6102      	str	r2, [r0, #16]
 8007918:	bf08      	it	eq
 800791a:	6143      	streq	r3, [r0, #20]
 800791c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007920:	f8dc c000 	ldr.w	ip, [ip]
 8007924:	fa0c fc08 	lsl.w	ip, ip, r8
 8007928:	ea4c 0707 	orr.w	r7, ip, r7
 800792c:	f849 7b04 	str.w	r7, [r9], #4
 8007930:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007934:	40cf      	lsrs	r7, r1
 8007936:	e7d9      	b.n	80078ec <rshift+0x4c>
 8007938:	f851 cb04 	ldr.w	ip, [r1], #4
 800793c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007940:	e7c2      	b.n	80078c8 <rshift+0x28>
 8007942:	4623      	mov	r3, r4
 8007944:	e7e0      	b.n	8007908 <rshift+0x68>

08007946 <__hexdig_fun>:
 8007946:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800794a:	2b09      	cmp	r3, #9
 800794c:	d802      	bhi.n	8007954 <__hexdig_fun+0xe>
 800794e:	3820      	subs	r0, #32
 8007950:	b2c0      	uxtb	r0, r0
 8007952:	4770      	bx	lr
 8007954:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007958:	2b05      	cmp	r3, #5
 800795a:	d801      	bhi.n	8007960 <__hexdig_fun+0x1a>
 800795c:	3847      	subs	r0, #71	@ 0x47
 800795e:	e7f7      	b.n	8007950 <__hexdig_fun+0xa>
 8007960:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007964:	2b05      	cmp	r3, #5
 8007966:	d801      	bhi.n	800796c <__hexdig_fun+0x26>
 8007968:	3827      	subs	r0, #39	@ 0x27
 800796a:	e7f1      	b.n	8007950 <__hexdig_fun+0xa>
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr

08007970 <__gethex>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	468a      	mov	sl, r1
 8007976:	4690      	mov	r8, r2
 8007978:	b085      	sub	sp, #20
 800797a:	9302      	str	r3, [sp, #8]
 800797c:	680b      	ldr	r3, [r1, #0]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	1c9c      	adds	r4, r3, #2
 8007982:	46a1      	mov	r9, r4
 8007984:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007988:	2830      	cmp	r0, #48	@ 0x30
 800798a:	d0fa      	beq.n	8007982 <__gethex+0x12>
 800798c:	eba9 0303 	sub.w	r3, r9, r3
 8007990:	f1a3 0b02 	sub.w	fp, r3, #2
 8007994:	f7ff ffd7 	bl	8007946 <__hexdig_fun>
 8007998:	4605      	mov	r5, r0
 800799a:	2800      	cmp	r0, #0
 800799c:	d168      	bne.n	8007a70 <__gethex+0x100>
 800799e:	2201      	movs	r2, #1
 80079a0:	4648      	mov	r0, r9
 80079a2:	499f      	ldr	r1, [pc, #636]	@ (8007c20 <__gethex+0x2b0>)
 80079a4:	f7ff ff14 	bl	80077d0 <strncmp>
 80079a8:	4607      	mov	r7, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d167      	bne.n	8007a7e <__gethex+0x10e>
 80079ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80079b2:	4626      	mov	r6, r4
 80079b4:	f7ff ffc7 	bl	8007946 <__hexdig_fun>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d062      	beq.n	8007a82 <__gethex+0x112>
 80079bc:	4623      	mov	r3, r4
 80079be:	7818      	ldrb	r0, [r3, #0]
 80079c0:	4699      	mov	r9, r3
 80079c2:	2830      	cmp	r0, #48	@ 0x30
 80079c4:	f103 0301 	add.w	r3, r3, #1
 80079c8:	d0f9      	beq.n	80079be <__gethex+0x4e>
 80079ca:	f7ff ffbc 	bl	8007946 <__hexdig_fun>
 80079ce:	fab0 f580 	clz	r5, r0
 80079d2:	f04f 0b01 	mov.w	fp, #1
 80079d6:	096d      	lsrs	r5, r5, #5
 80079d8:	464a      	mov	r2, r9
 80079da:	4616      	mov	r6, r2
 80079dc:	7830      	ldrb	r0, [r6, #0]
 80079de:	3201      	adds	r2, #1
 80079e0:	f7ff ffb1 	bl	8007946 <__hexdig_fun>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1f8      	bne.n	80079da <__gethex+0x6a>
 80079e8:	2201      	movs	r2, #1
 80079ea:	4630      	mov	r0, r6
 80079ec:	498c      	ldr	r1, [pc, #560]	@ (8007c20 <__gethex+0x2b0>)
 80079ee:	f7ff feef 	bl	80077d0 <strncmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d13f      	bne.n	8007a76 <__gethex+0x106>
 80079f6:	b944      	cbnz	r4, 8007a0a <__gethex+0x9a>
 80079f8:	1c74      	adds	r4, r6, #1
 80079fa:	4622      	mov	r2, r4
 80079fc:	4616      	mov	r6, r2
 80079fe:	7830      	ldrb	r0, [r6, #0]
 8007a00:	3201      	adds	r2, #1
 8007a02:	f7ff ffa0 	bl	8007946 <__hexdig_fun>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d1f8      	bne.n	80079fc <__gethex+0x8c>
 8007a0a:	1ba4      	subs	r4, r4, r6
 8007a0c:	00a7      	lsls	r7, r4, #2
 8007a0e:	7833      	ldrb	r3, [r6, #0]
 8007a10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007a14:	2b50      	cmp	r3, #80	@ 0x50
 8007a16:	d13e      	bne.n	8007a96 <__gethex+0x126>
 8007a18:	7873      	ldrb	r3, [r6, #1]
 8007a1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a1c:	d033      	beq.n	8007a86 <__gethex+0x116>
 8007a1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a20:	d034      	beq.n	8007a8c <__gethex+0x11c>
 8007a22:	2400      	movs	r4, #0
 8007a24:	1c71      	adds	r1, r6, #1
 8007a26:	7808      	ldrb	r0, [r1, #0]
 8007a28:	f7ff ff8d 	bl	8007946 <__hexdig_fun>
 8007a2c:	1e43      	subs	r3, r0, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b18      	cmp	r3, #24
 8007a32:	d830      	bhi.n	8007a96 <__gethex+0x126>
 8007a34:	f1a0 0210 	sub.w	r2, r0, #16
 8007a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a3c:	f7ff ff83 	bl	8007946 <__hexdig_fun>
 8007a40:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a44:	fa5f fc8c 	uxtb.w	ip, ip
 8007a48:	f1bc 0f18 	cmp.w	ip, #24
 8007a4c:	f04f 030a 	mov.w	r3, #10
 8007a50:	d91e      	bls.n	8007a90 <__gethex+0x120>
 8007a52:	b104      	cbz	r4, 8007a56 <__gethex+0xe6>
 8007a54:	4252      	negs	r2, r2
 8007a56:	4417      	add	r7, r2
 8007a58:	f8ca 1000 	str.w	r1, [sl]
 8007a5c:	b1ed      	cbz	r5, 8007a9a <__gethex+0x12a>
 8007a5e:	f1bb 0f00 	cmp.w	fp, #0
 8007a62:	bf0c      	ite	eq
 8007a64:	2506      	moveq	r5, #6
 8007a66:	2500      	movne	r5, #0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	b005      	add	sp, #20
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	2500      	movs	r5, #0
 8007a72:	462c      	mov	r4, r5
 8007a74:	e7b0      	b.n	80079d8 <__gethex+0x68>
 8007a76:	2c00      	cmp	r4, #0
 8007a78:	d1c7      	bne.n	8007a0a <__gethex+0x9a>
 8007a7a:	4627      	mov	r7, r4
 8007a7c:	e7c7      	b.n	8007a0e <__gethex+0x9e>
 8007a7e:	464e      	mov	r6, r9
 8007a80:	462f      	mov	r7, r5
 8007a82:	2501      	movs	r5, #1
 8007a84:	e7c3      	b.n	8007a0e <__gethex+0x9e>
 8007a86:	2400      	movs	r4, #0
 8007a88:	1cb1      	adds	r1, r6, #2
 8007a8a:	e7cc      	b.n	8007a26 <__gethex+0xb6>
 8007a8c:	2401      	movs	r4, #1
 8007a8e:	e7fb      	b.n	8007a88 <__gethex+0x118>
 8007a90:	fb03 0002 	mla	r0, r3, r2, r0
 8007a94:	e7ce      	b.n	8007a34 <__gethex+0xc4>
 8007a96:	4631      	mov	r1, r6
 8007a98:	e7de      	b.n	8007a58 <__gethex+0xe8>
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	eba6 0309 	sub.w	r3, r6, r9
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b07      	cmp	r3, #7
 8007aa4:	dc0a      	bgt.n	8007abc <__gethex+0x14c>
 8007aa6:	9801      	ldr	r0, [sp, #4]
 8007aa8:	f7fe f954 	bl	8005d54 <_Balloc>
 8007aac:	4604      	mov	r4, r0
 8007aae:	b940      	cbnz	r0, 8007ac2 <__gethex+0x152>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	21e4      	movs	r1, #228	@ 0xe4
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c24 <__gethex+0x2b4>)
 8007ab6:	485c      	ldr	r0, [pc, #368]	@ (8007c28 <__gethex+0x2b8>)
 8007ab8:	f7ff fec0 	bl	800783c <__assert_func>
 8007abc:	3101      	adds	r1, #1
 8007abe:	105b      	asrs	r3, r3, #1
 8007ac0:	e7ef      	b.n	8007aa2 <__gethex+0x132>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f100 0a14 	add.w	sl, r0, #20
 8007ac8:	4655      	mov	r5, sl
 8007aca:	469b      	mov	fp, r3
 8007acc:	45b1      	cmp	r9, r6
 8007ace:	d337      	bcc.n	8007b40 <__gethex+0x1d0>
 8007ad0:	f845 bb04 	str.w	fp, [r5], #4
 8007ad4:	eba5 050a 	sub.w	r5, r5, sl
 8007ad8:	10ad      	asrs	r5, r5, #2
 8007ada:	6125      	str	r5, [r4, #16]
 8007adc:	4658      	mov	r0, fp
 8007ade:	f7fe fa2b 	bl	8005f38 <__hi0bits>
 8007ae2:	016d      	lsls	r5, r5, #5
 8007ae4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ae8:	1a2d      	subs	r5, r5, r0
 8007aea:	42b5      	cmp	r5, r6
 8007aec:	dd54      	ble.n	8007b98 <__gethex+0x228>
 8007aee:	1bad      	subs	r5, r5, r6
 8007af0:	4629      	mov	r1, r5
 8007af2:	4620      	mov	r0, r4
 8007af4:	f7fe fdb3 	bl	800665e <__any_on>
 8007af8:	4681      	mov	r9, r0
 8007afa:	b178      	cbz	r0, 8007b1c <__gethex+0x1ac>
 8007afc:	f04f 0901 	mov.w	r9, #1
 8007b00:	1e6b      	subs	r3, r5, #1
 8007b02:	1159      	asrs	r1, r3, #5
 8007b04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b08:	f003 021f 	and.w	r2, r3, #31
 8007b0c:	fa09 f202 	lsl.w	r2, r9, r2
 8007b10:	420a      	tst	r2, r1
 8007b12:	d003      	beq.n	8007b1c <__gethex+0x1ac>
 8007b14:	454b      	cmp	r3, r9
 8007b16:	dc36      	bgt.n	8007b86 <__gethex+0x216>
 8007b18:	f04f 0902 	mov.w	r9, #2
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff febe 	bl	80078a0 <rshift>
 8007b24:	442f      	add	r7, r5
 8007b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b2a:	42bb      	cmp	r3, r7
 8007b2c:	da42      	bge.n	8007bb4 <__gethex+0x244>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	f7fe f94f 	bl	8005dd4 <_Bfree>
 8007b36:	2300      	movs	r3, #0
 8007b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b3a:	25a3      	movs	r5, #163	@ 0xa3
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e793      	b.n	8007a68 <__gethex+0xf8>
 8007b40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b44:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b46:	d012      	beq.n	8007b6e <__gethex+0x1fe>
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d104      	bne.n	8007b56 <__gethex+0x1e6>
 8007b4c:	f845 bb04 	str.w	fp, [r5], #4
 8007b50:	f04f 0b00 	mov.w	fp, #0
 8007b54:	465b      	mov	r3, fp
 8007b56:	7830      	ldrb	r0, [r6, #0]
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	f7ff fef4 	bl	8007946 <__hexdig_fun>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	f000 000f 	and.w	r0, r0, #15
 8007b64:	4098      	lsls	r0, r3
 8007b66:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	e7ae      	b.n	8007acc <__gethex+0x15c>
 8007b6e:	45b1      	cmp	r9, r6
 8007b70:	d8ea      	bhi.n	8007b48 <__gethex+0x1d8>
 8007b72:	2201      	movs	r2, #1
 8007b74:	4630      	mov	r0, r6
 8007b76:	492a      	ldr	r1, [pc, #168]	@ (8007c20 <__gethex+0x2b0>)
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	f7ff fe29 	bl	80077d0 <strncmp>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1e1      	bne.n	8007b48 <__gethex+0x1d8>
 8007b84:	e7a2      	b.n	8007acc <__gethex+0x15c>
 8007b86:	4620      	mov	r0, r4
 8007b88:	1ea9      	subs	r1, r5, #2
 8007b8a:	f7fe fd68 	bl	800665e <__any_on>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0c2      	beq.n	8007b18 <__gethex+0x1a8>
 8007b92:	f04f 0903 	mov.w	r9, #3
 8007b96:	e7c1      	b.n	8007b1c <__gethex+0x1ac>
 8007b98:	da09      	bge.n	8007bae <__gethex+0x23e>
 8007b9a:	1b75      	subs	r5, r6, r5
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	f7fe fb2d 	bl	8006200 <__lshift>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	1b7f      	subs	r7, r7, r5
 8007baa:	f100 0a14 	add.w	sl, r0, #20
 8007bae:	f04f 0900 	mov.w	r9, #0
 8007bb2:	e7b8      	b.n	8007b26 <__gethex+0x1b6>
 8007bb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bb8:	42bd      	cmp	r5, r7
 8007bba:	dd6f      	ble.n	8007c9c <__gethex+0x32c>
 8007bbc:	1bed      	subs	r5, r5, r7
 8007bbe:	42ae      	cmp	r6, r5
 8007bc0:	dc34      	bgt.n	8007c2c <__gethex+0x2bc>
 8007bc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d022      	beq.n	8007c10 <__gethex+0x2a0>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d024      	beq.n	8007c18 <__gethex+0x2a8>
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d115      	bne.n	8007bfe <__gethex+0x28e>
 8007bd2:	42ae      	cmp	r6, r5
 8007bd4:	d113      	bne.n	8007bfe <__gethex+0x28e>
 8007bd6:	2e01      	cmp	r6, #1
 8007bd8:	d10b      	bne.n	8007bf2 <__gethex+0x282>
 8007bda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bde:	9a02      	ldr	r2, [sp, #8]
 8007be0:	2562      	movs	r5, #98	@ 0x62
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	2301      	movs	r3, #1
 8007be6:	6123      	str	r3, [r4, #16]
 8007be8:	f8ca 3000 	str.w	r3, [sl]
 8007bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bee:	601c      	str	r4, [r3, #0]
 8007bf0:	e73a      	b.n	8007a68 <__gethex+0xf8>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	1e71      	subs	r1, r6, #1
 8007bf6:	f7fe fd32 	bl	800665e <__any_on>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d1ed      	bne.n	8007bda <__gethex+0x26a>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	9801      	ldr	r0, [sp, #4]
 8007c02:	f7fe f8e7 	bl	8005dd4 <_Bfree>
 8007c06:	2300      	movs	r3, #0
 8007c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c0a:	2550      	movs	r5, #80	@ 0x50
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e72b      	b.n	8007a68 <__gethex+0xf8>
 8007c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f3      	bne.n	8007bfe <__gethex+0x28e>
 8007c16:	e7e0      	b.n	8007bda <__gethex+0x26a>
 8007c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1dd      	bne.n	8007bda <__gethex+0x26a>
 8007c1e:	e7ee      	b.n	8007bfe <__gethex+0x28e>
 8007c20:	080087c0 	.word	0x080087c0
 8007c24:	08008657 	.word	0x08008657
 8007c28:	0800896e 	.word	0x0800896e
 8007c2c:	1e6f      	subs	r7, r5, #1
 8007c2e:	f1b9 0f00 	cmp.w	r9, #0
 8007c32:	d130      	bne.n	8007c96 <__gethex+0x326>
 8007c34:	b127      	cbz	r7, 8007c40 <__gethex+0x2d0>
 8007c36:	4639      	mov	r1, r7
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7fe fd10 	bl	800665e <__any_on>
 8007c3e:	4681      	mov	r9, r0
 8007c40:	2301      	movs	r3, #1
 8007c42:	4629      	mov	r1, r5
 8007c44:	1b76      	subs	r6, r6, r5
 8007c46:	2502      	movs	r5, #2
 8007c48:	117a      	asrs	r2, r7, #5
 8007c4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c4e:	f007 071f 	and.w	r7, r7, #31
 8007c52:	40bb      	lsls	r3, r7
 8007c54:	4213      	tst	r3, r2
 8007c56:	4620      	mov	r0, r4
 8007c58:	bf18      	it	ne
 8007c5a:	f049 0902 	orrne.w	r9, r9, #2
 8007c5e:	f7ff fe1f 	bl	80078a0 <rshift>
 8007c62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	d047      	beq.n	8007cfc <__gethex+0x38c>
 8007c6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d015      	beq.n	8007ca0 <__gethex+0x330>
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d017      	beq.n	8007ca8 <__gethex+0x338>
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d109      	bne.n	8007c90 <__gethex+0x320>
 8007c7c:	f019 0f02 	tst.w	r9, #2
 8007c80:	d006      	beq.n	8007c90 <__gethex+0x320>
 8007c82:	f8da 3000 	ldr.w	r3, [sl]
 8007c86:	ea49 0903 	orr.w	r9, r9, r3
 8007c8a:	f019 0f01 	tst.w	r9, #1
 8007c8e:	d10e      	bne.n	8007cae <__gethex+0x33e>
 8007c90:	f045 0510 	orr.w	r5, r5, #16
 8007c94:	e032      	b.n	8007cfc <__gethex+0x38c>
 8007c96:	f04f 0901 	mov.w	r9, #1
 8007c9a:	e7d1      	b.n	8007c40 <__gethex+0x2d0>
 8007c9c:	2501      	movs	r5, #1
 8007c9e:	e7e2      	b.n	8007c66 <__gethex+0x2f6>
 8007ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca2:	f1c3 0301 	rsb	r3, r3, #1
 8007ca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <__gethex+0x320>
 8007cae:	f04f 0c00 	mov.w	ip, #0
 8007cb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cb6:	f104 0314 	add.w	r3, r4, #20
 8007cba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ccc:	d01b      	beq.n	8007d06 <__gethex+0x396>
 8007cce:	3201      	adds	r2, #1
 8007cd0:	6002      	str	r2, [r0, #0]
 8007cd2:	2d02      	cmp	r5, #2
 8007cd4:	f104 0314 	add.w	r3, r4, #20
 8007cd8:	d13c      	bne.n	8007d54 <__gethex+0x3e4>
 8007cda:	f8d8 2000 	ldr.w	r2, [r8]
 8007cde:	3a01      	subs	r2, #1
 8007ce0:	42b2      	cmp	r2, r6
 8007ce2:	d109      	bne.n	8007cf8 <__gethex+0x388>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	1171      	asrs	r1, r6, #5
 8007ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cec:	f006 061f 	and.w	r6, r6, #31
 8007cf0:	fa02 f606 	lsl.w	r6, r2, r6
 8007cf4:	421e      	tst	r6, r3
 8007cf6:	d13a      	bne.n	8007d6e <__gethex+0x3fe>
 8007cf8:	f045 0520 	orr.w	r5, r5, #32
 8007cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cfe:	601c      	str	r4, [r3, #0]
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	601f      	str	r7, [r3, #0]
 8007d04:	e6b0      	b.n	8007a68 <__gethex+0xf8>
 8007d06:	4299      	cmp	r1, r3
 8007d08:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d0c:	d8d9      	bhi.n	8007cc2 <__gethex+0x352>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	459b      	cmp	fp, r3
 8007d12:	db17      	blt.n	8007d44 <__gethex+0x3d4>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	9801      	ldr	r0, [sp, #4]
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7fe f81b 	bl	8005d54 <_Balloc>
 8007d1e:	4681      	mov	r9, r0
 8007d20:	b918      	cbnz	r0, 8007d2a <__gethex+0x3ba>
 8007d22:	4602      	mov	r2, r0
 8007d24:	2184      	movs	r1, #132	@ 0x84
 8007d26:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <__gethex+0x41c>)
 8007d28:	e6c5      	b.n	8007ab6 <__gethex+0x146>
 8007d2a:	6922      	ldr	r2, [r4, #16]
 8007d2c:	f104 010c 	add.w	r1, r4, #12
 8007d30:	3202      	adds	r2, #2
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	300c      	adds	r0, #12
 8007d36:	f7ff fd6d 	bl	8007814 <memcpy>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	9801      	ldr	r0, [sp, #4]
 8007d3e:	f7fe f849 	bl	8005dd4 <_Bfree>
 8007d42:	464c      	mov	r4, r9
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	6122      	str	r2, [r4, #16]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d50:	615a      	str	r2, [r3, #20]
 8007d52:	e7be      	b.n	8007cd2 <__gethex+0x362>
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	455a      	cmp	r2, fp
 8007d58:	dd0b      	ble.n	8007d72 <__gethex+0x402>
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f7ff fd9f 	bl	80078a0 <rshift>
 8007d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d66:	3701      	adds	r7, #1
 8007d68:	42bb      	cmp	r3, r7
 8007d6a:	f6ff aee0 	blt.w	8007b2e <__gethex+0x1be>
 8007d6e:	2501      	movs	r5, #1
 8007d70:	e7c2      	b.n	8007cf8 <__gethex+0x388>
 8007d72:	f016 061f 	ands.w	r6, r6, #31
 8007d76:	d0fa      	beq.n	8007d6e <__gethex+0x3fe>
 8007d78:	4453      	add	r3, sl
 8007d7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d7e:	f7fe f8db 	bl	8005f38 <__hi0bits>
 8007d82:	f1c6 0620 	rsb	r6, r6, #32
 8007d86:	42b0      	cmp	r0, r6
 8007d88:	dbe7      	blt.n	8007d5a <__gethex+0x3ea>
 8007d8a:	e7f0      	b.n	8007d6e <__gethex+0x3fe>
 8007d8c:	08008657 	.word	0x08008657

08007d90 <L_shift>:
 8007d90:	f1c2 0208 	rsb	r2, r2, #8
 8007d94:	0092      	lsls	r2, r2, #2
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	f1c2 0620 	rsb	r6, r2, #32
 8007d9c:	6843      	ldr	r3, [r0, #4]
 8007d9e:	6804      	ldr	r4, [r0, #0]
 8007da0:	fa03 f506 	lsl.w	r5, r3, r6
 8007da4:	432c      	orrs	r4, r5
 8007da6:	40d3      	lsrs	r3, r2
 8007da8:	6004      	str	r4, [r0, #0]
 8007daa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007dae:	4288      	cmp	r0, r1
 8007db0:	d3f4      	bcc.n	8007d9c <L_shift+0xc>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__match>:
 8007db4:	b530      	push	{r4, r5, lr}
 8007db6:	6803      	ldr	r3, [r0, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dbe:	b914      	cbnz	r4, 8007dc6 <__match+0x12>
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	bd30      	pop	{r4, r5, pc}
 8007dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007dce:	2d19      	cmp	r5, #25
 8007dd0:	bf98      	it	ls
 8007dd2:	3220      	addls	r2, #32
 8007dd4:	42a2      	cmp	r2, r4
 8007dd6:	d0f0      	beq.n	8007dba <__match+0x6>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e7f3      	b.n	8007dc4 <__match+0x10>

08007ddc <__hexnan>:
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	2500      	movs	r5, #0
 8007de2:	680b      	ldr	r3, [r1, #0]
 8007de4:	4682      	mov	sl, r0
 8007de6:	115e      	asrs	r6, r3, #5
 8007de8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dec:	f013 031f 	ands.w	r3, r3, #31
 8007df0:	bf18      	it	ne
 8007df2:	3604      	addne	r6, #4
 8007df4:	1f37      	subs	r7, r6, #4
 8007df6:	4690      	mov	r8, r2
 8007df8:	46b9      	mov	r9, r7
 8007dfa:	463c      	mov	r4, r7
 8007dfc:	46ab      	mov	fp, r5
 8007dfe:	b087      	sub	sp, #28
 8007e00:	6801      	ldr	r1, [r0, #0]
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e08:	9502      	str	r5, [sp, #8]
 8007e0a:	784a      	ldrb	r2, [r1, #1]
 8007e0c:	1c4b      	adds	r3, r1, #1
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	b342      	cbz	r2, 8007e64 <__hexnan+0x88>
 8007e12:	4610      	mov	r0, r2
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	9204      	str	r2, [sp, #16]
 8007e18:	f7ff fd95 	bl	8007946 <__hexdig_fun>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d151      	bne.n	8007ec4 <__hexnan+0xe8>
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	9905      	ldr	r1, [sp, #20]
 8007e24:	2a20      	cmp	r2, #32
 8007e26:	d818      	bhi.n	8007e5a <__hexnan+0x7e>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	459b      	cmp	fp, r3
 8007e2c:	dd13      	ble.n	8007e56 <__hexnan+0x7a>
 8007e2e:	454c      	cmp	r4, r9
 8007e30:	d206      	bcs.n	8007e40 <__hexnan+0x64>
 8007e32:	2d07      	cmp	r5, #7
 8007e34:	dc04      	bgt.n	8007e40 <__hexnan+0x64>
 8007e36:	462a      	mov	r2, r5
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ffa8 	bl	8007d90 <L_shift>
 8007e40:	4544      	cmp	r4, r8
 8007e42:	d952      	bls.n	8007eea <__hexnan+0x10e>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f1a4 0904 	sub.w	r9, r4, #4
 8007e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e4e:	461d      	mov	r5, r3
 8007e50:	464c      	mov	r4, r9
 8007e52:	f8cd b008 	str.w	fp, [sp, #8]
 8007e56:	9903      	ldr	r1, [sp, #12]
 8007e58:	e7d7      	b.n	8007e0a <__hexnan+0x2e>
 8007e5a:	2a29      	cmp	r2, #41	@ 0x29
 8007e5c:	d157      	bne.n	8007f0e <__hexnan+0x132>
 8007e5e:	3102      	adds	r1, #2
 8007e60:	f8ca 1000 	str.w	r1, [sl]
 8007e64:	f1bb 0f00 	cmp.w	fp, #0
 8007e68:	d051      	beq.n	8007f0e <__hexnan+0x132>
 8007e6a:	454c      	cmp	r4, r9
 8007e6c:	d206      	bcs.n	8007e7c <__hexnan+0xa0>
 8007e6e:	2d07      	cmp	r5, #7
 8007e70:	dc04      	bgt.n	8007e7c <__hexnan+0xa0>
 8007e72:	462a      	mov	r2, r5
 8007e74:	4649      	mov	r1, r9
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7ff ff8a 	bl	8007d90 <L_shift>
 8007e7c:	4544      	cmp	r4, r8
 8007e7e:	d936      	bls.n	8007eee <__hexnan+0x112>
 8007e80:	4623      	mov	r3, r4
 8007e82:	f1a8 0204 	sub.w	r2, r8, #4
 8007e86:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e8a:	429f      	cmp	r7, r3
 8007e8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e90:	d2f9      	bcs.n	8007e86 <__hexnan+0xaa>
 8007e92:	1b3b      	subs	r3, r7, r4
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	3304      	adds	r3, #4
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	3e03      	subs	r6, #3
 8007e9e:	42b4      	cmp	r4, r6
 8007ea0:	bf88      	it	hi
 8007ea2:	2304      	movhi	r3, #4
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4443      	add	r3, r8
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	429f      	cmp	r7, r3
 8007eae:	d2fb      	bcs.n	8007ea8 <__hexnan+0xcc>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	b91b      	cbnz	r3, 8007ebc <__hexnan+0xe0>
 8007eb4:	4547      	cmp	r7, r8
 8007eb6:	d128      	bne.n	8007f0a <__hexnan+0x12e>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	2005      	movs	r0, #5
 8007ebe:	b007      	add	sp, #28
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	2d08      	cmp	r5, #8
 8007ec8:	f10b 0b01 	add.w	fp, fp, #1
 8007ecc:	dd06      	ble.n	8007edc <__hexnan+0x100>
 8007ece:	4544      	cmp	r4, r8
 8007ed0:	d9c1      	bls.n	8007e56 <__hexnan+0x7a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2501      	movs	r5, #1
 8007ed6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eda:	3c04      	subs	r4, #4
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	f000 000f 	and.w	r0, r0, #15
 8007ee2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ee6:	6020      	str	r0, [r4, #0]
 8007ee8:	e7b5      	b.n	8007e56 <__hexnan+0x7a>
 8007eea:	2508      	movs	r5, #8
 8007eec:	e7b3      	b.n	8007e56 <__hexnan+0x7a>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0dd      	beq.n	8007eb0 <__hexnan+0xd4>
 8007ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef8:	f1c3 0320 	rsb	r3, r3, #32
 8007efc:	40da      	lsrs	r2, r3
 8007efe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f02:	4013      	ands	r3, r2
 8007f04:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f08:	e7d2      	b.n	8007eb0 <__hexnan+0xd4>
 8007f0a:	3f04      	subs	r7, #4
 8007f0c:	e7d0      	b.n	8007eb0 <__hexnan+0xd4>
 8007f0e:	2004      	movs	r0, #4
 8007f10:	e7d5      	b.n	8007ebe <__hexnan+0xe2>

08007f12 <__ascii_mbtowc>:
 8007f12:	b082      	sub	sp, #8
 8007f14:	b901      	cbnz	r1, 8007f18 <__ascii_mbtowc+0x6>
 8007f16:	a901      	add	r1, sp, #4
 8007f18:	b142      	cbz	r2, 8007f2c <__ascii_mbtowc+0x1a>
 8007f1a:	b14b      	cbz	r3, 8007f30 <__ascii_mbtowc+0x1e>
 8007f1c:	7813      	ldrb	r3, [r2, #0]
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	1e10      	subs	r0, r2, #0
 8007f24:	bf18      	it	ne
 8007f26:	2001      	movne	r0, #1
 8007f28:	b002      	add	sp, #8
 8007f2a:	4770      	bx	lr
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	e7fb      	b.n	8007f28 <__ascii_mbtowc+0x16>
 8007f30:	f06f 0001 	mvn.w	r0, #1
 8007f34:	e7f8      	b.n	8007f28 <__ascii_mbtowc+0x16>

08007f36 <_realloc_r>:
 8007f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	460c      	mov	r4, r1
 8007f40:	b921      	cbnz	r1, 8007f4c <_realloc_r+0x16>
 8007f42:	4611      	mov	r1, r2
 8007f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	f7fd be78 	b.w	8005c3c <_malloc_r>
 8007f4c:	b92a      	cbnz	r2, 8007f5a <_realloc_r+0x24>
 8007f4e:	f7fd fe03 	bl	8005b58 <_free_r>
 8007f52:	2400      	movs	r4, #0
 8007f54:	4620      	mov	r0, r4
 8007f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5a:	f000 f840 	bl	8007fde <_malloc_usable_size_r>
 8007f5e:	4285      	cmp	r5, r0
 8007f60:	4606      	mov	r6, r0
 8007f62:	d802      	bhi.n	8007f6a <_realloc_r+0x34>
 8007f64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f68:	d8f4      	bhi.n	8007f54 <_realloc_r+0x1e>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f7fd fe65 	bl	8005c3c <_malloc_r>
 8007f72:	4607      	mov	r7, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0ec      	beq.n	8007f52 <_realloc_r+0x1c>
 8007f78:	42b5      	cmp	r5, r6
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	bf28      	it	cs
 8007f80:	4632      	movcs	r2, r6
 8007f82:	f7ff fc47 	bl	8007814 <memcpy>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4640      	mov	r0, r8
 8007f8a:	f7fd fde5 	bl	8005b58 <_free_r>
 8007f8e:	463c      	mov	r4, r7
 8007f90:	e7e0      	b.n	8007f54 <_realloc_r+0x1e>

08007f92 <__ascii_wctomb>:
 8007f92:	4603      	mov	r3, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	b141      	cbz	r1, 8007faa <__ascii_wctomb+0x18>
 8007f98:	2aff      	cmp	r2, #255	@ 0xff
 8007f9a:	d904      	bls.n	8007fa6 <__ascii_wctomb+0x14>
 8007f9c:	228a      	movs	r2, #138	@ 0x8a
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	4770      	bx	lr
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	700a      	strb	r2, [r1, #0]
 8007faa:	4770      	bx	lr

08007fac <fiprintf>:
 8007fac:	b40e      	push	{r1, r2, r3}
 8007fae:	b503      	push	{r0, r1, lr}
 8007fb0:	4601      	mov	r1, r0
 8007fb2:	ab03      	add	r3, sp, #12
 8007fb4:	4805      	ldr	r0, [pc, #20]	@ (8007fcc <fiprintf+0x20>)
 8007fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	f000 f83d 	bl	800803c <_vfiprintf_r>
 8007fc2:	b002      	add	sp, #8
 8007fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc8:	b003      	add	sp, #12
 8007fca:	4770      	bx	lr
 8007fcc:	20000018 	.word	0x20000018

08007fd0 <abort>:
 8007fd0:	2006      	movs	r0, #6
 8007fd2:	b508      	push	{r3, lr}
 8007fd4:	f000 fa06 	bl	80083e4 <raise>
 8007fd8:	2001      	movs	r0, #1
 8007fda:	f7f9 fc34 	bl	8001846 <_exit>

08007fde <_malloc_usable_size_r>:
 8007fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe2:	1f18      	subs	r0, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	580b      	ldrlt	r3, [r1, r0]
 8007fea:	18c0      	addlt	r0, r0, r3
 8007fec:	4770      	bx	lr

08007fee <__sfputc_r>:
 8007fee:	6893      	ldr	r3, [r2, #8]
 8007ff0:	b410      	push	{r4}
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	6093      	str	r3, [r2, #8]
 8007ff8:	da07      	bge.n	800800a <__sfputc_r+0x1c>
 8007ffa:	6994      	ldr	r4, [r2, #24]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	db01      	blt.n	8008004 <__sfputc_r+0x16>
 8008000:	290a      	cmp	r1, #10
 8008002:	d102      	bne.n	800800a <__sfputc_r+0x1c>
 8008004:	bc10      	pop	{r4}
 8008006:	f000 b931 	b.w	800826c <__swbuf_r>
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	1c58      	adds	r0, r3, #1
 800800e:	6010      	str	r0, [r2, #0]
 8008010:	7019      	strb	r1, [r3, #0]
 8008012:	4608      	mov	r0, r1
 8008014:	bc10      	pop	{r4}
 8008016:	4770      	bx	lr

08008018 <__sfputs_r>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	4614      	mov	r4, r2
 8008020:	18d5      	adds	r5, r2, r3
 8008022:	42ac      	cmp	r4, r5
 8008024:	d101      	bne.n	800802a <__sfputs_r+0x12>
 8008026:	2000      	movs	r0, #0
 8008028:	e007      	b.n	800803a <__sfputs_r+0x22>
 800802a:	463a      	mov	r2, r7
 800802c:	4630      	mov	r0, r6
 800802e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008032:	f7ff ffdc 	bl	8007fee <__sfputc_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d1f3      	bne.n	8008022 <__sfputs_r+0xa>
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800803c <_vfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	460d      	mov	r5, r1
 8008042:	4614      	mov	r4, r2
 8008044:	4698      	mov	r8, r3
 8008046:	4606      	mov	r6, r0
 8008048:	b09d      	sub	sp, #116	@ 0x74
 800804a:	b118      	cbz	r0, 8008054 <_vfiprintf_r+0x18>
 800804c:	6a03      	ldr	r3, [r0, #32]
 800804e:	b90b      	cbnz	r3, 8008054 <_vfiprintf_r+0x18>
 8008050:	f7fc fdd2 	bl	8004bf8 <__sinit>
 8008054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008056:	07d9      	lsls	r1, r3, #31
 8008058:	d405      	bmi.n	8008066 <_vfiprintf_r+0x2a>
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	059a      	lsls	r2, r3, #22
 800805e:	d402      	bmi.n	8008066 <_vfiprintf_r+0x2a>
 8008060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008062:	f7fc ff14 	bl	8004e8e <__retarget_lock_acquire_recursive>
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	071b      	lsls	r3, r3, #28
 800806a:	d501      	bpl.n	8008070 <_vfiprintf_r+0x34>
 800806c:	692b      	ldr	r3, [r5, #16]
 800806e:	b99b      	cbnz	r3, 8008098 <_vfiprintf_r+0x5c>
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f000 f938 	bl	80082e8 <__swsetup_r>
 8008078:	b170      	cbz	r0, 8008098 <_vfiprintf_r+0x5c>
 800807a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800807c:	07dc      	lsls	r4, r3, #31
 800807e:	d504      	bpl.n	800808a <_vfiprintf_r+0x4e>
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	b01d      	add	sp, #116	@ 0x74
 8008086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	0598      	lsls	r0, r3, #22
 800808e:	d4f7      	bmi.n	8008080 <_vfiprintf_r+0x44>
 8008090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008092:	f7fc fefd 	bl	8004e90 <__retarget_lock_release_recursive>
 8008096:	e7f3      	b.n	8008080 <_vfiprintf_r+0x44>
 8008098:	2300      	movs	r3, #0
 800809a:	9309      	str	r3, [sp, #36]	@ 0x24
 800809c:	2320      	movs	r3, #32
 800809e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080a2:	2330      	movs	r3, #48	@ 0x30
 80080a4:	f04f 0901 	mov.w	r9, #1
 80080a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008258 <_vfiprintf_r+0x21c>
 80080b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080b4:	4623      	mov	r3, r4
 80080b6:	469a      	mov	sl, r3
 80080b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080bc:	b10a      	cbz	r2, 80080c2 <_vfiprintf_r+0x86>
 80080be:	2a25      	cmp	r2, #37	@ 0x25
 80080c0:	d1f9      	bne.n	80080b6 <_vfiprintf_r+0x7a>
 80080c2:	ebba 0b04 	subs.w	fp, sl, r4
 80080c6:	d00b      	beq.n	80080e0 <_vfiprintf_r+0xa4>
 80080c8:	465b      	mov	r3, fp
 80080ca:	4622      	mov	r2, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	4630      	mov	r0, r6
 80080d0:	f7ff ffa2 	bl	8008018 <__sfputs_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	f000 80a7 	beq.w	8008228 <_vfiprintf_r+0x1ec>
 80080da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080dc:	445a      	add	r2, fp
 80080de:	9209      	str	r2, [sp, #36]	@ 0x24
 80080e0:	f89a 3000 	ldrb.w	r3, [sl]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 809f 	beq.w	8008228 <_vfiprintf_r+0x1ec>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f4:	f10a 0a01 	add.w	sl, sl, #1
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008100:	931a      	str	r3, [sp, #104]	@ 0x68
 8008102:	4654      	mov	r4, sl
 8008104:	2205      	movs	r2, #5
 8008106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810a:	4853      	ldr	r0, [pc, #332]	@ (8008258 <_vfiprintf_r+0x21c>)
 800810c:	f7fc fec1 	bl	8004e92 <memchr>
 8008110:	9a04      	ldr	r2, [sp, #16]
 8008112:	b9d8      	cbnz	r0, 800814c <_vfiprintf_r+0x110>
 8008114:	06d1      	lsls	r1, r2, #27
 8008116:	bf44      	itt	mi
 8008118:	2320      	movmi	r3, #32
 800811a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811e:	0713      	lsls	r3, r2, #28
 8008120:	bf44      	itt	mi
 8008122:	232b      	movmi	r3, #43	@ 0x2b
 8008124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008128:	f89a 3000 	ldrb.w	r3, [sl]
 800812c:	2b2a      	cmp	r3, #42	@ 0x2a
 800812e:	d015      	beq.n	800815c <_vfiprintf_r+0x120>
 8008130:	4654      	mov	r4, sl
 8008132:	2000      	movs	r0, #0
 8008134:	f04f 0c0a 	mov.w	ip, #10
 8008138:	9a07      	ldr	r2, [sp, #28]
 800813a:	4621      	mov	r1, r4
 800813c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008140:	3b30      	subs	r3, #48	@ 0x30
 8008142:	2b09      	cmp	r3, #9
 8008144:	d94b      	bls.n	80081de <_vfiprintf_r+0x1a2>
 8008146:	b1b0      	cbz	r0, 8008176 <_vfiprintf_r+0x13a>
 8008148:	9207      	str	r2, [sp, #28]
 800814a:	e014      	b.n	8008176 <_vfiprintf_r+0x13a>
 800814c:	eba0 0308 	sub.w	r3, r0, r8
 8008150:	fa09 f303 	lsl.w	r3, r9, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	46a2      	mov	sl, r4
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	e7d2      	b.n	8008102 <_vfiprintf_r+0xc6>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	1d19      	adds	r1, r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	9103      	str	r1, [sp, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfbb      	ittet	lt
 8008168:	425b      	neglt	r3, r3
 800816a:	f042 0202 	orrlt.w	r2, r2, #2
 800816e:	9307      	strge	r3, [sp, #28]
 8008170:	9307      	strlt	r3, [sp, #28]
 8008172:	bfb8      	it	lt
 8008174:	9204      	strlt	r2, [sp, #16]
 8008176:	7823      	ldrb	r3, [r4, #0]
 8008178:	2b2e      	cmp	r3, #46	@ 0x2e
 800817a:	d10a      	bne.n	8008192 <_vfiprintf_r+0x156>
 800817c:	7863      	ldrb	r3, [r4, #1]
 800817e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008180:	d132      	bne.n	80081e8 <_vfiprintf_r+0x1ac>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	3402      	adds	r4, #2
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	9203      	str	r2, [sp, #12]
 800818c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800825c <_vfiprintf_r+0x220>
 8008196:	2203      	movs	r2, #3
 8008198:	4650      	mov	r0, sl
 800819a:	7821      	ldrb	r1, [r4, #0]
 800819c:	f7fc fe79 	bl	8004e92 <memchr>
 80081a0:	b138      	cbz	r0, 80081b2 <_vfiprintf_r+0x176>
 80081a2:	2240      	movs	r2, #64	@ 0x40
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	eba0 000a 	sub.w	r0, r0, sl
 80081aa:	4082      	lsls	r2, r0
 80081ac:	4313      	orrs	r3, r2
 80081ae:	3401      	adds	r4, #1
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b6:	2206      	movs	r2, #6
 80081b8:	4829      	ldr	r0, [pc, #164]	@ (8008260 <_vfiprintf_r+0x224>)
 80081ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081be:	f7fc fe68 	bl	8004e92 <memchr>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d03f      	beq.n	8008246 <_vfiprintf_r+0x20a>
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <_vfiprintf_r+0x228>)
 80081c8:	bb1b      	cbnz	r3, 8008212 <_vfiprintf_r+0x1d6>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	3307      	adds	r3, #7
 80081ce:	f023 0307 	bic.w	r3, r3, #7
 80081d2:	3308      	adds	r3, #8
 80081d4:	9303      	str	r3, [sp, #12]
 80081d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d8:	443b      	add	r3, r7
 80081da:	9309      	str	r3, [sp, #36]	@ 0x24
 80081dc:	e76a      	b.n	80080b4 <_vfiprintf_r+0x78>
 80081de:	460c      	mov	r4, r1
 80081e0:	2001      	movs	r0, #1
 80081e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e6:	e7a8      	b.n	800813a <_vfiprintf_r+0xfe>
 80081e8:	2300      	movs	r3, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4619      	mov	r1, r3
 80081f0:	3401      	adds	r4, #1
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	4620      	mov	r0, r4
 80081f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fa:	3a30      	subs	r2, #48	@ 0x30
 80081fc:	2a09      	cmp	r2, #9
 80081fe:	d903      	bls.n	8008208 <_vfiprintf_r+0x1cc>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0c6      	beq.n	8008192 <_vfiprintf_r+0x156>
 8008204:	9105      	str	r1, [sp, #20]
 8008206:	e7c4      	b.n	8008192 <_vfiprintf_r+0x156>
 8008208:	4604      	mov	r4, r0
 800820a:	2301      	movs	r3, #1
 800820c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008210:	e7f0      	b.n	80081f4 <_vfiprintf_r+0x1b8>
 8008212:	ab03      	add	r3, sp, #12
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	462a      	mov	r2, r5
 8008218:	4630      	mov	r0, r6
 800821a:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <_vfiprintf_r+0x22c>)
 800821c:	a904      	add	r1, sp, #16
 800821e:	f7fb fe91 	bl	8003f44 <_printf_float>
 8008222:	4607      	mov	r7, r0
 8008224:	1c78      	adds	r0, r7, #1
 8008226:	d1d6      	bne.n	80081d6 <_vfiprintf_r+0x19a>
 8008228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822a:	07d9      	lsls	r1, r3, #31
 800822c:	d405      	bmi.n	800823a <_vfiprintf_r+0x1fe>
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	059a      	lsls	r2, r3, #22
 8008232:	d402      	bmi.n	800823a <_vfiprintf_r+0x1fe>
 8008234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008236:	f7fc fe2b 	bl	8004e90 <__retarget_lock_release_recursive>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	065b      	lsls	r3, r3, #25
 800823e:	f53f af1f 	bmi.w	8008080 <_vfiprintf_r+0x44>
 8008242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008244:	e71e      	b.n	8008084 <_vfiprintf_r+0x48>
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	462a      	mov	r2, r5
 800824c:	4630      	mov	r0, r6
 800824e:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <_vfiprintf_r+0x22c>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	f7fc f915 	bl	8004480 <_printf_i>
 8008256:	e7e4      	b.n	8008222 <_vfiprintf_r+0x1e6>
 8008258:	08008919 	.word	0x08008919
 800825c:	0800891f 	.word	0x0800891f
 8008260:	08008923 	.word	0x08008923
 8008264:	08003f45 	.word	0x08003f45
 8008268:	08008019 	.word	0x08008019

0800826c <__swbuf_r>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	460e      	mov	r6, r1
 8008270:	4614      	mov	r4, r2
 8008272:	4605      	mov	r5, r0
 8008274:	b118      	cbz	r0, 800827e <__swbuf_r+0x12>
 8008276:	6a03      	ldr	r3, [r0, #32]
 8008278:	b90b      	cbnz	r3, 800827e <__swbuf_r+0x12>
 800827a:	f7fc fcbd 	bl	8004bf8 <__sinit>
 800827e:	69a3      	ldr	r3, [r4, #24]
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	071a      	lsls	r2, r3, #28
 8008286:	d501      	bpl.n	800828c <__swbuf_r+0x20>
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b943      	cbnz	r3, 800829e <__swbuf_r+0x32>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f82a 	bl	80082e8 <__swsetup_r>
 8008294:	b118      	cbz	r0, 800829e <__swbuf_r+0x32>
 8008296:	f04f 37ff 	mov.w	r7, #4294967295
 800829a:	4638      	mov	r0, r7
 800829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	b2f6      	uxtb	r6, r6
 80082a4:	1a98      	subs	r0, r3, r2
 80082a6:	6963      	ldr	r3, [r4, #20]
 80082a8:	4637      	mov	r7, r6
 80082aa:	4283      	cmp	r3, r0
 80082ac:	dc05      	bgt.n	80082ba <__swbuf_r+0x4e>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fa4b 	bl	800774c <_fflush_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d1ed      	bne.n	8008296 <__swbuf_r+0x2a>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	3b01      	subs	r3, #1
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	701e      	strb	r6, [r3, #0]
 80082c8:	6962      	ldr	r2, [r4, #20]
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d004      	beq.n	80082da <__swbuf_r+0x6e>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	07db      	lsls	r3, r3, #31
 80082d4:	d5e1      	bpl.n	800829a <__swbuf_r+0x2e>
 80082d6:	2e0a      	cmp	r6, #10
 80082d8:	d1df      	bne.n	800829a <__swbuf_r+0x2e>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff fa35 	bl	800774c <_fflush_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d0d9      	beq.n	800829a <__swbuf_r+0x2e>
 80082e6:	e7d6      	b.n	8008296 <__swbuf_r+0x2a>

080082e8 <__swsetup_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4b29      	ldr	r3, [pc, #164]	@ (8008390 <__swsetup_r+0xa8>)
 80082ec:	4605      	mov	r5, r0
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	460c      	mov	r4, r1
 80082f2:	b118      	cbz	r0, 80082fc <__swsetup_r+0x14>
 80082f4:	6a03      	ldr	r3, [r0, #32]
 80082f6:	b90b      	cbnz	r3, 80082fc <__swsetup_r+0x14>
 80082f8:	f7fc fc7e 	bl	8004bf8 <__sinit>
 80082fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008300:	0719      	lsls	r1, r3, #28
 8008302:	d422      	bmi.n	800834a <__swsetup_r+0x62>
 8008304:	06da      	lsls	r2, r3, #27
 8008306:	d407      	bmi.n	8008318 <__swsetup_r+0x30>
 8008308:	2209      	movs	r2, #9
 800830a:	602a      	str	r2, [r5, #0]
 800830c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	e033      	b.n	8008380 <__swsetup_r+0x98>
 8008318:	0758      	lsls	r0, r3, #29
 800831a:	d512      	bpl.n	8008342 <__swsetup_r+0x5a>
 800831c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831e:	b141      	cbz	r1, 8008332 <__swsetup_r+0x4a>
 8008320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008324:	4299      	cmp	r1, r3
 8008326:	d002      	beq.n	800832e <__swsetup_r+0x46>
 8008328:	4628      	mov	r0, r5
 800832a:	f7fd fc15 	bl	8005b58 <_free_r>
 800832e:	2300      	movs	r3, #0
 8008330:	6363      	str	r3, [r4, #52]	@ 0x34
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	2300      	movs	r3, #0
 800833c:	6063      	str	r3, [r4, #4]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f043 0308 	orr.w	r3, r3, #8
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	b94b      	cbnz	r3, 8008362 <__swsetup_r+0x7a>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008358:	d003      	beq.n	8008362 <__swsetup_r+0x7a>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f882 	bl	8008466 <__smakebuf_r>
 8008362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008366:	f013 0201 	ands.w	r2, r3, #1
 800836a:	d00a      	beq.n	8008382 <__swsetup_r+0x9a>
 800836c:	2200      	movs	r2, #0
 800836e:	60a2      	str	r2, [r4, #8]
 8008370:	6962      	ldr	r2, [r4, #20]
 8008372:	4252      	negs	r2, r2
 8008374:	61a2      	str	r2, [r4, #24]
 8008376:	6922      	ldr	r2, [r4, #16]
 8008378:	b942      	cbnz	r2, 800838c <__swsetup_r+0xa4>
 800837a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800837e:	d1c5      	bne.n	800830c <__swsetup_r+0x24>
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	0799      	lsls	r1, r3, #30
 8008384:	bf58      	it	pl
 8008386:	6962      	ldrpl	r2, [r4, #20]
 8008388:	60a2      	str	r2, [r4, #8]
 800838a:	e7f4      	b.n	8008376 <__swsetup_r+0x8e>
 800838c:	2000      	movs	r0, #0
 800838e:	e7f7      	b.n	8008380 <__swsetup_r+0x98>
 8008390:	20000018 	.word	0x20000018

08008394 <_raise_r>:
 8008394:	291f      	cmp	r1, #31
 8008396:	b538      	push	{r3, r4, r5, lr}
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	d904      	bls.n	80083a8 <_raise_r+0x14>
 800839e:	2316      	movs	r3, #22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	f04f 30ff 	mov.w	r0, #4294967295
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083aa:	b112      	cbz	r2, 80083b2 <_raise_r+0x1e>
 80083ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083b0:	b94b      	cbnz	r3, 80083c6 <_raise_r+0x32>
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f830 	bl	8008418 <_getpid_r>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4601      	mov	r1, r0
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c2:	f000 b817 	b.w	80083f4 <_kill_r>
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d00a      	beq.n	80083e0 <_raise_r+0x4c>
 80083ca:	1c59      	adds	r1, r3, #1
 80083cc:	d103      	bne.n	80083d6 <_raise_r+0x42>
 80083ce:	2316      	movs	r3, #22
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	2001      	movs	r0, #1
 80083d4:	e7e7      	b.n	80083a6 <_raise_r+0x12>
 80083d6:	2100      	movs	r1, #0
 80083d8:	4620      	mov	r0, r4
 80083da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083de:	4798      	blx	r3
 80083e0:	2000      	movs	r0, #0
 80083e2:	e7e0      	b.n	80083a6 <_raise_r+0x12>

080083e4 <raise>:
 80083e4:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <raise+0xc>)
 80083e6:	4601      	mov	r1, r0
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f7ff bfd3 	b.w	8008394 <_raise_r>
 80083ee:	bf00      	nop
 80083f0:	20000018 	.word	0x20000018

080083f4 <_kill_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d06      	ldr	r5, [pc, #24]	@ (8008414 <_kill_r+0x20>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	f7f9 fa10 	bl	8001826 <_kill>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d102      	bne.n	8008410 <_kill_r+0x1c>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	b103      	cbz	r3, 8008410 <_kill_r+0x1c>
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	200005bc 	.word	0x200005bc

08008418 <_getpid_r>:
 8008418:	f7f9 b9fe 	b.w	8001818 <_getpid>

0800841c <__swhatbuf_r>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	460c      	mov	r4, r1
 8008420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008424:	4615      	mov	r5, r2
 8008426:	2900      	cmp	r1, #0
 8008428:	461e      	mov	r6, r3
 800842a:	b096      	sub	sp, #88	@ 0x58
 800842c:	da0c      	bge.n	8008448 <__swhatbuf_r+0x2c>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	2100      	movs	r1, #0
 8008432:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008436:	bf14      	ite	ne
 8008438:	2340      	movne	r3, #64	@ 0x40
 800843a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800843e:	2000      	movs	r0, #0
 8008440:	6031      	str	r1, [r6, #0]
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	b016      	add	sp, #88	@ 0x58
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	466a      	mov	r2, sp
 800844a:	f000 f849 	bl	80084e0 <_fstat_r>
 800844e:	2800      	cmp	r0, #0
 8008450:	dbed      	blt.n	800842e <__swhatbuf_r+0x12>
 8008452:	9901      	ldr	r1, [sp, #4]
 8008454:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008458:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800845c:	4259      	negs	r1, r3
 800845e:	4159      	adcs	r1, r3
 8008460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008464:	e7eb      	b.n	800843e <__swhatbuf_r+0x22>

08008466 <__smakebuf_r>:
 8008466:	898b      	ldrh	r3, [r1, #12]
 8008468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846a:	079d      	lsls	r5, r3, #30
 800846c:	4606      	mov	r6, r0
 800846e:	460c      	mov	r4, r1
 8008470:	d507      	bpl.n	8008482 <__smakebuf_r+0x1c>
 8008472:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2301      	movs	r3, #1
 800847c:	6163      	str	r3, [r4, #20]
 800847e:	b003      	add	sp, #12
 8008480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008482:	466a      	mov	r2, sp
 8008484:	ab01      	add	r3, sp, #4
 8008486:	f7ff ffc9 	bl	800841c <__swhatbuf_r>
 800848a:	9f00      	ldr	r7, [sp, #0]
 800848c:	4605      	mov	r5, r0
 800848e:	4639      	mov	r1, r7
 8008490:	4630      	mov	r0, r6
 8008492:	f7fd fbd3 	bl	8005c3c <_malloc_r>
 8008496:	b948      	cbnz	r0, 80084ac <__smakebuf_r+0x46>
 8008498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849c:	059a      	lsls	r2, r3, #22
 800849e:	d4ee      	bmi.n	800847e <__smakebuf_r+0x18>
 80084a0:	f023 0303 	bic.w	r3, r3, #3
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	e7e2      	b.n	8008472 <__smakebuf_r+0xc>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	b15b      	cbz	r3, 80084d6 <__smakebuf_r+0x70>
 80084be:	4630      	mov	r0, r6
 80084c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c4:	f000 f81e 	bl	8008504 <_isatty_r>
 80084c8:	b128      	cbz	r0, 80084d6 <__smakebuf_r+0x70>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	431d      	orrs	r5, r3
 80084da:	81a5      	strh	r5, [r4, #12]
 80084dc:	e7cf      	b.n	800847e <__smakebuf_r+0x18>
	...

080084e0 <_fstat_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	2300      	movs	r3, #0
 80084e4:	4d06      	ldr	r5, [pc, #24]	@ (8008500 <_fstat_r+0x20>)
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	602b      	str	r3, [r5, #0]
 80084ee:	f7f9 f9f9 	bl	80018e4 <_fstat>
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	d102      	bne.n	80084fc <_fstat_r+0x1c>
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	b103      	cbz	r3, 80084fc <_fstat_r+0x1c>
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	bd38      	pop	{r3, r4, r5, pc}
 80084fe:	bf00      	nop
 8008500:	200005bc 	.word	0x200005bc

08008504 <_isatty_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	2300      	movs	r3, #0
 8008508:	4d05      	ldr	r5, [pc, #20]	@ (8008520 <_isatty_r+0x1c>)
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f9 f9f7 	bl	8001902 <_isatty>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_isatty_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_isatty_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	200005bc 	.word	0x200005bc

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
