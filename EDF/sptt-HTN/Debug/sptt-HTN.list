
sptt-HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a958  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800aa68  0800aa68  0001aa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af18  0800af18  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af18  0800af18  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af18  0800af18  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800af20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e84  200001e4  0800b104  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003068  0800b104  00023068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001443c  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003278  00000000  00000000  0003468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  00037908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001068  00000000  00000000  00038e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9e2  00000000  00000000  00039e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000181fc  00000000  00000000  0005484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972f7  00000000  00000000  0006ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e40  00000000  00000000  00103d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa50 	.word	0x0800aa50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800aa50 	.word	0x0800aa50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4605      	mov	r5, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd9d 	bl	80009bc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x20>
 8000e84:	4628      	mov	r0, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4628      	mov	r0, r5
 8000e92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fa94 	bl	80003e4 <__aeabi_ui2d>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f94c 	bl	8000168 <__aeabi_dsub>
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <DWT_Delay_Init+0x58>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <DWT_Delay_Init+0x58>)
 8000eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eee:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <DWT_Delay_Init+0x58>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <DWT_Delay_Init+0x58>)
 8000ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f1a:	bf00      	nop
     __ASM volatile ("NOP");
 8000f1c:	bf00      	nop
  __ASM volatile ("NOP");
 8000f1e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <DWT_Delay_Init+0x5c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e000      	b.n	8000f2e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f2c:	2301      	movs	r3, #1
  }
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000edf0 	.word	0xe000edf0
 8000f3c:	e0001000 	.word	0xe0001000

08000f40 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <delay+0x40>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f4e:	f002 feb1 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <delay+0x44>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f64:	bf00      	nop
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <delay+0x40>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1ad2      	subs	r2, r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f8      	bcc.n	8000f66 <delay+0x26>
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e0001000 	.word	0xe0001000
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f001 fc6d 	bl	8002894 <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 fc50 	bl	8002894 <HAL_GPIO_Init>
}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <DHT_Start>:


void DHT_Start (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001000:	f7ff ff6e 	bl	8000ee0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001004:	2120      	movs	r1, #32
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <DHT_Start+0x40>)
 8001008:	f7ff ffbe 	bl	8000f88 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 800100c:	2200      	movs	r2, #0
 800100e:	2120      	movs	r1, #32
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <DHT_Start+0x40>)
 8001012:	f001 fdda 	bl	8002bca <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001016:	f244 6050 	movw	r0, #18000	; 0x4650
 800101a:	f7ff ff91 	bl	8000f40 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800101e:	2201      	movs	r2, #1
 8001020:	2120      	movs	r1, #32
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <DHT_Start+0x40>)
 8001024:	f001 fdd1 	bl	8002bca <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001028:	2014      	movs	r0, #20
 800102a:	f7ff ff89 	bl	8000f40 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800102e:	2120      	movs	r1, #32
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DHT_Start+0x40>)
 8001032:	f7ff ffc6 	bl	8000fc2 <Set_Pin_Input>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010800 	.word	0x40010800

08001040 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800104a:	2028      	movs	r0, #40	; 0x28
 800104c:	f7ff ff78 	bl	8000f40 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001050:	2120      	movs	r1, #32
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <DHT_Check_Response+0x58>)
 8001054:	f001 fda2 	bl	8002b9c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10e      	bne.n	800107c <DHT_Check_Response+0x3c>
	{
		delay (80);
 800105e:	2050      	movs	r0, #80	; 0x50
 8001060:	f7ff ff6e 	bl	8000f40 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001064:	2120      	movs	r1, #32
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <DHT_Check_Response+0x58>)
 8001068:	f001 fd98 	bl	8002b9c <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <DHT_Check_Response+0x38>
 8001072:	2301      	movs	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e001      	b.n	800107c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001078:	23ff      	movs	r3, #255	; 0xff
 800107a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800107c:	bf00      	nop
 800107e:	2120      	movs	r1, #32
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <DHT_Check_Response+0x58>)
 8001082:	f001 fd8b 	bl	8002b9c <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f8      	bne.n	800107e <DHT_Check_Response+0x3e>

	return Response;
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40010800 	.word	0x40010800

0800109c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	71bb      	strb	r3, [r7, #6]
 80010a6:	e037      	b.n	8001118 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80010a8:	bf00      	nop
 80010aa:	2120      	movs	r1, #32
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <DHT_Read+0x8c>)
 80010ae:	f001 fd75 	bl	8002b9c <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f8      	beq.n	80010aa <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f7ff ff41 	bl	8000f40 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80010be:	2120      	movs	r1, #32
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <DHT_Read+0x8c>)
 80010c2:	f001 fd6b 	bl	8002b9c <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10e      	bne.n	80010ea <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2201      	movs	r2, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4013      	ands	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	e00b      	b.n	8001102 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	f1c3 0307 	rsb	r3, r3, #7
 80010f0:	2201      	movs	r2, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001102:	bf00      	nop
 8001104:	2120      	movs	r1, #32
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <DHT_Read+0x8c>)
 8001108:	f001 fd48 	bl	8002b9c <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f8      	bne.n	8001104 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	3301      	adds	r3, #1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9c4      	bls.n	80010a8 <DHT_Read+0xc>
	}
	return i;
 800111e:	79fb      	ldrb	r3, [r7, #7]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010800 	.word	0x40010800

0800112c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001134:	f7ff ff62 	bl	8000ffc <DHT_Start>
	Presence = DHT_Check_Response ();
 8001138:	f7ff ff82 	bl	8001040 <DHT_Check_Response>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <DHT_GetData+0xa0>)
 8001142:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001144:	f7ff ffaa 	bl	800109c <DHT_Read>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <DHT_GetData+0xa4>)
 800114e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001150:	f7ff ffa4 	bl	800109c <DHT_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <DHT_GetData+0xa8>)
 800115a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800115c:	f7ff ff9e 	bl	800109c <DHT_Read>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <DHT_GetData+0xac>)
 8001166:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001168:	f7ff ff98 	bl	800109c <DHT_Read>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <DHT_GetData+0xb0>)
 8001172:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001174:	f7ff ff92 	bl	800109c <DHT_Read>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <DHT_GetData+0xb4>)
 800117e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <DHT_GetData+0xb4>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <DHT_GetData+0xa4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <DHT_GetData+0xa8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <DHT_GetData+0xac>)
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a10      	ldr	r2, [pc, #64]	; (80011dc <DHT_GetData+0xb0>)
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	4413      	add	r3, r2
 800119e:	4299      	cmp	r1, r3
 80011a0:	d10f      	bne.n	80011c2 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <DHT_GetData+0xac>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fd94 	bl	8000cd4 <__aeabi_ui2f>
 80011ac:	4602      	mov	r2, r0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <DHT_GetData+0xa4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fd8c 	bl	8000cd4 <__aeabi_ui2f>
 80011bc:	4602      	mov	r2, r0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000206 	.word	0x20000206
 80011d0:	20000200 	.word	0x20000200
 80011d4:	20000201 	.word	0x20000201
 80011d8:	20000202 	.word	0x20000202
 80011dc:	20000203 	.word	0x20000203
 80011e0:	20000204 	.word	0x20000204

080011e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <vApplicationGetIdleTaskMemory+0x28>)
 80011f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <vApplicationGetIdleTaskMemory+0x2c>)
 80011fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000208 	.word	0x20000208
 8001210:	2000025c 	.word	0x2000025c

08001214 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD 0x4E

// Các bit  RS(0 - gửi lênh, 1 - gửi data) 	RW (0 - viết)	E(1 - enable) D4 D5 D6 D7

void lcd_send_cmd (char cmd) // Gửi lệnh RS = 0
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f023 030f 	bic.w	r3, r3, #15
 8001224:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 030c 	orr.w	r3, r3, #12
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	f043 030c 	orr.w	r3, r3, #12
 8001246:	b2db      	uxtb	r3, r3
 8001248:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2304      	movs	r3, #4
 800125e:	214e      	movs	r1, #78	; 0x4e
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <lcd_send_cmd+0x5c>)
 8001262:	f001 fe0f 	bl	8002e84 <HAL_I2C_Master_Transmit>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000045c 	.word	0x2000045c

08001274 <lcd_send_data>:

void lcd_send_data (char data)	// Gửi data RS = 1
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f023 030f 	bic.w	r3, r3, #15
 8001284:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	f043 030d 	orr.w	r3, r3, #13
 8001292:	b2db      	uxtb	r3, r3
 8001294:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f043 0309 	orr.w	r3, r3, #9
 800129c:	b2db      	uxtb	r3, r3
 800129e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	f043 030d 	orr.w	r3, r3, #13
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	f043 0309 	orr.w	r3, r3, #9
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2304      	movs	r3, #4
 80012be:	214e      	movs	r1, #78	; 0x4e
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <lcd_send_data+0x5c>)
 80012c2:	f001 fddf 	bl	8002e84 <HAL_I2C_Master_Transmit>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000045c 	.word	0x2000045c

080012d4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
    switch (row)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <lcd_put_cur+0x18>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <lcd_put_cur+0x22>
 80012ea:	e009      	b.n	8001300 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	603b      	str	r3, [r7, #0]
            break;
 80012f4:	e004      	b.n	8001300 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012fc:	603b      	str	r3, [r7, #0]
            break;
 80012fe:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff85 	bl	8001214 <lcd_send_cmd>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <lcd_init>:


void lcd_init (void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001316:	2032      	movs	r0, #50	; 0x32
 8001318:	f001 f8d8 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x30);
 800131c:	2030      	movs	r0, #48	; 0x30
 800131e:	f7ff ff79 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001322:	2005      	movs	r0, #5
 8001324:	f001 f8d2 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001328:	2030      	movs	r0, #48	; 0x30
 800132a:	f7ff ff73 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800132e:	2001      	movs	r0, #1
 8001330:	f001 f8cc 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001334:	2030      	movs	r0, #48	; 0x30
 8001336:	f7ff ff6d 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 f8c6 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001340:	2020      	movs	r0, #32
 8001342:	f7ff ff67 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 f8c0 	bl	80024cc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800134c:	2028      	movs	r0, #40	; 0x28
 800134e:	f7ff ff61 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f001 f8ba 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001358:	2008      	movs	r0, #8
 800135a:	f7ff ff5b 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f001 f8b4 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ff55 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 f8ae 	bl	80024cc <HAL_Delay>
	HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f001 f8ab 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001376:	2006      	movs	r0, #6
 8001378:	f7ff ff4c 	bl	8001214 <lcd_send_cmd>
	HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f001 f8a5 	bl	80024cc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001382:	200c      	movs	r0, #12
 8001384:	f7ff ff46 	bl	8001214 <lcd_send_cmd>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001394:	e006      	b.n	80013a4 <lcd_send_string+0x18>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff68 	bl	8001274 <lcd_send_data>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f4      	bne.n	8001396 <lcd_send_string+0xa>
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <task1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void task1()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	DHT_GetData (&dht);
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <task1+0x20>)
 80013be:	f7ff feb5 	bl	800112c <DHT_GetData>
	temp = dht.Temperature;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <task1+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <task1+0x24>)
 80013c8:	6013      	str	r3, [r2, #0]
	humid = dht.Humidity;
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <task1+0x20>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <task1+0x28>)
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200005b0 	.word	0x200005b0
 80013dc:	200005b8 	.word	0x200005b8
 80013e0:	200005bc 	.word	0x200005bc

080013e4 <task2>:
void task2()
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b0d0      	sub	sp, #320	; 0x140
 80013e8:	af04      	add	r7, sp, #16
	char message[300];
	uint8_t length = snprintf(message, sizeof(message), " Nhiet do: %.2f, Do am: %.2f \r\n", temp, humid);
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <task2+0x58>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f81a 	bl	8000428 <__aeabi_f2d>
 80013f4:	4604      	mov	r4, r0
 80013f6:	460d      	mov	r5, r1
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <task2+0x5c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f813 	bl	8000428 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4638      	mov	r0, r7
 8001408:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800140c:	e9cd 4500 	strd	r4, r5, [sp]
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <task2+0x60>)
 8001412:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001416:	f005 fe61 	bl	80070dc <sniprintf>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (length < sizeof(message)) HAL_UART_Transmit(&huart1, (uint8_t*) message, length, 100);
 8001420:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001424:	b29a      	uxth	r2, r3
 8001426:	4639      	mov	r1, r7
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <task2+0x64>)
 800142c:	f002 ff5a 	bl	80042e4 <HAL_UART_Transmit>
}
 8001430:	bf00      	nop
 8001432:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	bf00      	nop
 800143c:	200005b8 	.word	0x200005b8
 8001440:	200005bc 	.word	0x200005bc
 8001444:	0800aa68 	.word	0x0800aa68
 8001448:	200004f8 	.word	0x200004f8

0800144c <task3>:

void task3()
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b092      	sub	sp, #72	; 0x48
 8001450:	af04      	add	r7, sp, #16
	lcd_put_cur(0, 0);
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff3d 	bl	80012d4 <lcd_put_cur>
	char message[50];
	snprintf(message, sizeof(message), "T:%.2f H:%.2f", temp, humid);
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <task3+0x4c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffe2 	bl	8000428 <__aeabi_f2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <task3+0x50>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffdb 	bl	8000428 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	1d38      	adds	r0, r7, #4
 8001478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800147c:	e9cd 4500 	strd	r4, r5, [sp]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <task3+0x54>)
 8001482:	2132      	movs	r1, #50	; 0x32
 8001484:	f005 fe2a 	bl	80070dc <sniprintf>
	lcd_send_string (message);  	// send string to the lcd
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff7e 	bl	800138c <lcd_send_string>
}
 8001490:	bf00      	nop
 8001492:	3738      	adds	r7, #56	; 0x38
 8001494:	46bd      	mov	sp, r7
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	200005b8 	.word	0x200005b8
 800149c:	200005bc 	.word	0x200005bc
 80014a0:	0800aa88 	.word	0x0800aa88

080014a4 <minValue>:
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
	HAL_Delay(52);
}


float minValue() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
    float min = D_DHT; // Giả định ban đầu D_DHT là nh�? nhất
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <minValue+0x48>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	607b      	str	r3, [r7, #4]

    if (D_UART < min) {
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <minValue+0x4c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fcd0 	bl	8000e5c <__aeabi_fcmpgt>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <minValue+0x24>
        min = D_UART; // Nếu D_UART nh�? hơn min, cập nhật min
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <minValue+0x4c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	607b      	str	r3, [r7, #4]
    }

    if (D_LCD < min) {
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <minValue+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fcc4 	bl	8000e5c <__aeabi_fcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <minValue+0x3c>
        min = D_LCD; // Nếu D_LCD nh�? hơn min, cập nhật min
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <minValue+0x50>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	607b      	str	r3, [r7, #4]
    }

    return min; // Trả v�? giá trị nh�? nhất
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000594 	.word	0x20000594
 80014f0:	20000598 	.word	0x20000598
 80014f4:	2000059c 	.word	0x2000059c

080014f8 <maxValue>:

#include <stdio.h>

// Hàm trả v�? giá trị lớn nhất
float maxValue() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
    float max = D_DHT; // Giả định ban đầu D_DHT là lớn nhất
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <maxValue+0x48>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	607b      	str	r3, [r7, #4]

    if (D_UART > max) {
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <maxValue+0x4c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc88 	bl	8000e20 <__aeabi_fcmplt>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <maxValue+0x24>
        max = D_UART; // Nếu D_UART lớn hơn max, cập nhật max
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <maxValue+0x4c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	607b      	str	r3, [r7, #4]
    }

    if (D_LCD > max) {
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <maxValue+0x50>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fc7c 	bl	8000e20 <__aeabi_fcmplt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <maxValue+0x3c>
        max = D_LCD; // Nếu D_LCD lớn hơn max, cập nhật max
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <maxValue+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	607b      	str	r3, [r7, #4]
    }

    return max; // Trả v�? giá trị lớn nhất
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000594 	.word	0x20000594
 8001544:	20000598 	.word	0x20000598
 8001548:	2000059c 	.word	0x2000059c

0800154c <medianValue>:

// Hàm trả v�? giá trị ở giữa
float medianValue() {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    // Kiểm tra từng trư�?ng hợp để tìm giá trị ở giữa
    if ((D_DHT > D_UART && D_DHT < D_LCD) || (D_DHT > D_LCD && D_DHT < D_UART)) {
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <medianValue+0xc8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a30      	ldr	r2, [pc, #192]	; (8001618 <medianValue+0xcc>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fc7e 	bl	8000e5c <__aeabi_fcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <medianValue+0x30>
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <medianValue+0xc8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a2c      	ldr	r2, [pc, #176]	; (800161c <medianValue+0xd0>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc55 	bl	8000e20 <__aeabi_fcmplt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d115      	bne.n	80015a8 <medianValue+0x5c>
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <medianValue+0xc8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <medianValue+0xd0>)
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc68 	bl	8000e5c <__aeabi_fcmpgt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00d      	beq.n	80015ae <medianValue+0x62>
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <medianValue+0xc8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a20      	ldr	r2, [pc, #128]	; (8001618 <medianValue+0xcc>)
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc3f 	bl	8000e20 <__aeabi_fcmplt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <medianValue+0x62>
        return D_DHT; // D_DHT nằm giữa
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <medianValue+0xc8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e030      	b.n	8001610 <medianValue+0xc4>
    }
    if ((D_UART > D_DHT && D_UART < D_LCD) || (D_UART > D_LCD && D_UART < D_DHT)) {
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <medianValue+0xcc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <medianValue+0xc8>)
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fc4f 	bl	8000e5c <__aeabi_fcmpgt>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00a      	beq.n	80015da <medianValue+0x8e>
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <medianValue+0xcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <medianValue+0xd0>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fc26 	bl	8000e20 <__aeabi_fcmplt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <medianValue+0xba>
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <medianValue+0xcc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0f      	ldr	r2, [pc, #60]	; (800161c <medianValue+0xd0>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fc39 	bl	8000e5c <__aeabi_fcmpgt>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00d      	beq.n	800160c <medianValue+0xc0>
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <medianValue+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <medianValue+0xc8>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc10 	bl	8000e20 <__aeabi_fcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <medianValue+0xc0>
        return D_UART; // D_UART nằm giữa
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <medianValue+0xcc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	e001      	b.n	8001610 <medianValue+0xc4>
    }
    return D_LCD; // Nếu không phải D_DHT hay D_UART, thì D_LCD nằm giữa
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <medianValue+0xd0>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000594 	.word	0x20000594
 8001618:	20000598 	.word	0x20000598
 800161c:	2000059c 	.word	0x2000059c

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001626:	f000 feef 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162a:	f000 f875 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f000 f987 	bl	8001940 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001632:	f000 f8b7 	bl	80017a4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001636:	f000 f8e3 	bl	8001800 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800163a:	f000 f92d 	bl	8001898 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800163e:	f000 f955 	bl	80018ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2); // Bắt đầu timer với ngắt
  lcd_init();
 8001642:	f7ff fe66 	bl	8001312 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, Pri_DHT, 0, 256);
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <main+0xc8>)
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <main+0xcc>)
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <main+0xd0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b21b      	sxth	r3, r3
 8001654:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001658:	2300      	movs	r3, #0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
 800165c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001662:	2300      	movs	r3, #0
 8001664:	653b      	str	r3, [r7, #80]	; 0x50
 8001666:	2300      	movs	r3, #0
 8001668:	657b      	str	r3, [r7, #84]	; 0x54
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800166a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fc1b 	bl	8004eac <osThreadCreate>
 8001676:	4603      	mov	r3, r0
 8001678:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <main+0xd4>)
 800167a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, Pri_UART, 0, 256);
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <main+0xd8>)
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <main+0xdc>)
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <main+0xe0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b21b      	sxth	r3, r3
 800168a:	853b      	strh	r3, [r7, #40]	; 0x28
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	2300      	movs	r3, #0
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fc01 	bl	8004eac <osThreadCreate>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a15      	ldr	r2, [pc, #84]	; (8001704 <main+0xe4>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, Pri_LCD, 0, 256);
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <main+0xe8>)
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <main+0xec>)
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <main+0xf0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	81bb      	strh	r3, [r7, #12]
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fbe8 	bl	8004eac <osThreadCreate>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <main+0xf4>)
 80016e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016e2:	f003 fbdc 	bl	8004e9e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <main+0xc6>
 80016e8:	0800aa98 	.word	0x0800aa98
 80016ec:	080019d9 	.word	0x080019d9
 80016f0:	200005a0 	.word	0x200005a0
 80016f4:	20000588 	.word	0x20000588
 80016f8:	0800aaa4 	.word	0x0800aaa4
 80016fc:	08001bc1 	.word	0x08001bc1
 8001700:	200005a4 	.word	0x200005a4
 8001704:	2000058c 	.word	0x2000058c
 8001708:	0800aab0 	.word	0x0800aab0
 800170c:	08001da9 	.word	0x08001da9
 8001710:	200005a8 	.word	0x200005a8
 8001714:	20000590 	.word	0x20000590

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b090      	sub	sp, #64	; 0x40
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	2228      	movs	r2, #40	; 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fd6f 	bl	800720a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174c:	2302      	movs	r3, #2
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001756:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fee7 	bl	8003534 <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800176c:	f000 fc10 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	230f      	movs	r3, #15
 8001772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001774:	2302      	movs	r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f002 f954 	bl	8003a38 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001796:	f000 fbfb 	bl	8001f90 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	; 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f001 fa0b 	bl	8002bfc <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 fbd0 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000045c 	.word	0x2000045c
 80017f8:	40005400 	.word	0x40005400
 80017fc:	000186a0 	.word	0x000186a0

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_TIM2_Init+0x94>)
 800181e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM2_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_TIM2_Init+0x94>)
 8001832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_TIM2_Init+0x94>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_TIM2_Init+0x94>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_TIM2_Init+0x94>)
 8001846:	f002 fa85 	bl	8003d54 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001850:	f000 fb9e 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_TIM2_Init+0x94>)
 8001862:	f002 fac6 	bl	8003df2 <HAL_TIM_ConfigClockSource>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800186c:	f000 fb90 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_TIM2_Init+0x94>)
 800187e:	f002 fc83 	bl	8004188 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001888:	f000 fb82 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200004b0 	.word	0x200004b0

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f002 fcb8 	bl	8004244 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 fb59 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200004f8 	.word	0x200004f8
 80018e8:	40013800 	.word	0x40013800

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f002 fc8e 	bl	8004244 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 fb2f 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000540 	.word	0x20000540
 800193c:	40004400 	.word	0x40004400

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_GPIO_Init+0x90>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <MX_GPIO_Init+0x90>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_GPIO_Init+0x90>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_GPIO_Init+0x90>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <MX_GPIO_Init+0x90>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_GPIO_Init+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_GPIO_Init+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <MX_GPIO_Init+0x90>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_GPIO_Init+0x90>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_GPIO_Init+0x94>)
 80019a4:	f001 f911 	bl	8002bca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80019a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_GPIO_Init+0x94>)
 80019c2:	f000 ff67 	bl	8002894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010c00 	.word	0x40010c00

080019d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	task1();
 80019e0:	f7ff fcea 	bl	80013b8 <task1>
	start = HAL_GetTick();
 80019e4:	f000 fd68 	bl	80024b8 <HAL_GetTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f972 	bl	8000cd4 <__aeabi_ui2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <StartDefaultTask+0x1c0>)
 80019f4:	6013      	str	r3, [r2, #0]
	D_DHT = a*T_DHT - C_DHT - start;
 80019f6:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <StartDefaultTask+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	3b16      	subs	r3, #22
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f969 	bl	8000cdc <__aeabi_i2f>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <StartDefaultTask+0x1c0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff f8ac 	bl	8000b70 <__aeabi_fsub>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <StartDefaultTask+0x1c8>)
 8001a1e:	601a      	str	r2, [r3, #0]
	D_UART = b*T_UART - C_UART - start;
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <StartDefaultTask+0x1cc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f954 	bl	8000cdc <__aeabi_i2f>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <StartDefaultTask+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f7ff f897 	bl	8000b70 <__aeabi_fsub>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <StartDefaultTask+0x1d0>)
 8001a48:	601a      	str	r2, [r3, #0]
	D_LCD = c*T_LCD - C_LCD - start;
 8001a4a:	4b58      	ldr	r3, [pc, #352]	; (8001bac <StartDefaultTask+0x1d4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	3b0b      	subs	r3, #11
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f93f 	bl	8000cdc <__aeabi_i2f>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <StartDefaultTask+0x1c0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff f882 	bl	8000b70 <__aeabi_fsub>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <StartDefaultTask+0x1d8>)
 8001a72:	601a      	str	r2, [r3, #0]

	// DHT
	if(D_DHT == minValue())		Pri_DHT = 0;
 8001a74:	f7ff fd16 	bl	80014a4 <minValue>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <StartDefaultTask+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff f9c3 	bl	8000e0c <__aeabi_fcmpeq>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <StartDefaultTask+0xba>
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <StartDefaultTask+0x1dc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
	if(D_DHT == medianValue())	Pri_DHT = -1;
 8001a92:	f7ff fd5b 	bl	800154c <medianValue>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <StartDefaultTask+0x1c8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff f9b4 	bl	8000e0c <__aeabi_fcmpeq>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <StartDefaultTask+0xda>
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <StartDefaultTask+0x1dc>)
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	601a      	str	r2, [r3, #0]
	if(D_DHT == maxValue())	Pri_DHT = -2;
 8001ab2:	f7ff fd21 	bl	80014f8 <maxValue>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <StartDefaultTask+0x1c8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff f9a4 	bl	8000e0c <__aeabi_fcmpeq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <StartDefaultTask+0xfa>
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <StartDefaultTask+0x1dc>)
 8001acc:	f06f 0201 	mvn.w	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

	// UART
	if(D_UART == minValue())	Pri_UART = 0;
 8001ad2:	f7ff fce7 	bl	80014a4 <minValue>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <StartDefaultTask+0x1d0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f7ff f994 	bl	8000e0c <__aeabi_fcmpeq>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <StartDefaultTask+0x118>
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <StartDefaultTask+0x1e0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
	if(D_UART == medianValue())	Pri_UART = -1;
 8001af0:	f7ff fd2c 	bl	800154c <medianValue>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <StartDefaultTask+0x1d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7ff f985 	bl	8000e0c <__aeabi_fcmpeq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <StartDefaultTask+0x138>
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <StartDefaultTask+0x1e0>)
 8001b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0e:	601a      	str	r2, [r3, #0]
	if(D_UART == maxValue())	Pri_UART = -2;
 8001b10:	f7ff fcf2 	bl	80014f8 <maxValue>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <StartDefaultTask+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f7ff f975 	bl	8000e0c <__aeabi_fcmpeq>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <StartDefaultTask+0x158>
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <StartDefaultTask+0x1e0>)
 8001b2a:	f06f 0201 	mvn.w	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

	//LCD
	if(D_LCD == minValue())		Pri_LCD = 0;
 8001b30:	f7ff fcb8 	bl	80014a4 <minValue>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <StartDefaultTask+0x1d8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff f965 	bl	8000e0c <__aeabi_fcmpeq>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <StartDefaultTask+0x176>
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <StartDefaultTask+0x1e4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
	if(D_LCD == medianValue())	Pri_LCD = -1;
 8001b4e:	f7ff fcfd 	bl	800154c <medianValue>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <StartDefaultTask+0x1d8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7ff f956 	bl	8000e0c <__aeabi_fcmpeq>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <StartDefaultTask+0x196>
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <StartDefaultTask+0x1e4>)
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	601a      	str	r2, [r3, #0]
	if(D_LCD == maxValue())		Pri_LCD = -2;
 8001b6e:	f7ff fcc3 	bl	80014f8 <maxValue>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <StartDefaultTask+0x1d8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f7ff f946 	bl	8000e0c <__aeabi_fcmpeq>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <StartDefaultTask+0x1b6>
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <StartDefaultTask+0x1e4>)
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    osDelay(T_DHT);
 8001b8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b92:	f003 f9d7 	bl	8004f44 <osDelay>
	task1();
 8001b96:	e723      	b.n	80019e0 <StartDefaultTask+0x8>
 8001b98:	200005ac 	.word	0x200005ac
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000594 	.word	0x20000594
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	20000598 	.word	0x20000598
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	2000059c 	.word	0x2000059c
 8001bb4:	200005a0 	.word	0x200005a0
 8001bb8:	200005a4 	.word	0x200005a4
 8001bbc:	200005a8 	.word	0x200005a8

08001bc0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	task2();
 8001bc8:	f7ff fc0c 	bl	80013e4 <task2>
	start = HAL_GetTick();
 8001bcc:	f000 fc74 	bl	80024b8 <HAL_GetTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f87e 	bl	8000cd4 <__aeabi_ui2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a69      	ldr	r2, [pc, #420]	; (8001d80 <StartTask02+0x1c0>)
 8001bdc:	6013      	str	r3, [r2, #0]
	D_DHT = a*T_DHT - C_DHT - start;
 8001bde:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <StartTask02+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	3b16      	subs	r3, #22
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f875 	bl	8000cdc <__aeabi_i2f>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <StartTask02+0x1c0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7fe ffb8 	bl	8000b70 <__aeabi_fsub>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <StartTask02+0x1c8>)
 8001c06:	601a      	str	r2, [r3, #0]
	D_UART = b*T_UART - C_UART - start;
 8001c08:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <StartTask02+0x1cc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f860 	bl	8000cdc <__aeabi_i2f>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <StartTask02+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f7fe ffa3 	bl	8000b70 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <StartTask02+0x1d0>)
 8001c30:	601a      	str	r2, [r3, #0]
	D_LCD = c*T_LCD - C_LCD - start;
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <StartTask02+0x1d4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	3b0b      	subs	r3, #11
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f84b 	bl	8000cdc <__aeabi_i2f>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <StartTask02+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7fe ff8e 	bl	8000b70 <__aeabi_fsub>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <StartTask02+0x1d8>)
 8001c5a:	601a      	str	r2, [r3, #0]

	// DHT
	if(D_DHT == minValue())		Pri_DHT = 0;
 8001c5c:	f7ff fc22 	bl	80014a4 <minValue>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <StartTask02+0x1c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f7ff f8cf 	bl	8000e0c <__aeabi_fcmpeq>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <StartTask02+0xba>
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <StartTask02+0x1dc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	if(D_DHT == medianValue())	Pri_DHT = -1;
 8001c7a:	f7ff fc67 	bl	800154c <medianValue>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <StartTask02+0x1c8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7ff f8c0 	bl	8000e0c <__aeabi_fcmpeq>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <StartTask02+0xda>
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <StartTask02+0x1dc>)
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	601a      	str	r2, [r3, #0]
	if(D_DHT == maxValue())	Pri_DHT = -2;
 8001c9a:	f7ff fc2d 	bl	80014f8 <maxValue>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <StartTask02+0x1c8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7ff f8b0 	bl	8000e0c <__aeabi_fcmpeq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <StartTask02+0xfa>
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <StartTask02+0x1dc>)
 8001cb4:	f06f 0201 	mvn.w	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

	// UART
	if(D_UART == minValue())	Pri_UART = 0;
 8001cba:	f7ff fbf3 	bl	80014a4 <minValue>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <StartTask02+0x1d0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7ff f8a0 	bl	8000e0c <__aeabi_fcmpeq>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <StartTask02+0x118>
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <StartTask02+0x1e0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
	if(D_UART == medianValue())	Pri_UART = -1;
 8001cd8:	f7ff fc38 	bl	800154c <medianValue>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <StartTask02+0x1d0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f7ff f891 	bl	8000e0c <__aeabi_fcmpeq>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <StartTask02+0x138>
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <StartTask02+0x1e0>)
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	601a      	str	r2, [r3, #0]
	if(D_UART == maxValue())	Pri_UART = -2;
 8001cf8:	f7ff fbfe 	bl	80014f8 <maxValue>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <StartTask02+0x1d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7ff f881 	bl	8000e0c <__aeabi_fcmpeq>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <StartTask02+0x158>
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <StartTask02+0x1e0>)
 8001d12:	f06f 0201 	mvn.w	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

	//LCD
	if(D_LCD == minValue())		Pri_LCD = 0;
 8001d18:	f7ff fbc4 	bl	80014a4 <minValue>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <StartTask02+0x1d8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4610      	mov	r0, r2
 8001d26:	f7ff f871 	bl	8000e0c <__aeabi_fcmpeq>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <StartTask02+0x176>
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <StartTask02+0x1e4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
	if(D_LCD == medianValue())	Pri_LCD = -1;
 8001d36:	f7ff fc09 	bl	800154c <medianValue>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <StartTask02+0x1d8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff f862 	bl	8000e0c <__aeabi_fcmpeq>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <StartTask02+0x196>
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <StartTask02+0x1e4>)
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	601a      	str	r2, [r3, #0]
	if(D_LCD == maxValue())		Pri_LCD = -2;
 8001d56:	f7ff fbcf 	bl	80014f8 <maxValue>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <StartTask02+0x1d8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f7ff f852 	bl	8000e0c <__aeabi_fcmpeq>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <StartTask02+0x1b6>
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <StartTask02+0x1e4>)
 8001d70:	f06f 0201 	mvn.w	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    osDelay(T_UART);
 8001d76:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001d7a:	f003 f8e3 	bl	8004f44 <osDelay>
	task2();
 8001d7e:	e723      	b.n	8001bc8 <StartTask02+0x8>
 8001d80:	200005ac 	.word	0x200005ac
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000594 	.word	0x20000594
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	20000598 	.word	0x20000598
 8001d94:	20000008 	.word	0x20000008
 8001d98:	2000059c 	.word	0x2000059c
 8001d9c:	200005a0 	.word	0x200005a0
 8001da0:	200005a4 	.word	0x200005a4
 8001da4:	200005a8 	.word	0x200005a8

08001da8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	task3();
 8001db0:	f7ff fb4c 	bl	800144c <task3>
	start = HAL_GetTick();
 8001db4:	f000 fb80 	bl	80024b8 <HAL_GetTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ff8a 	bl	8000cd4 <__aeabi_ui2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <StartTask03+0x1c0>)
 8001dc4:	6013      	str	r3, [r2, #0]
	D_DHT = a*T_DHT - C_DHT - start;
 8001dc6:	4b69      	ldr	r3, [pc, #420]	; (8001f6c <StartTask03+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	3b16      	subs	r3, #22
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff81 	bl	8000cdc <__aeabi_i2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <StartTask03+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7fe fec4 	bl	8000b70 <__aeabi_fsub>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <StartTask03+0x1c8>)
 8001dee:	601a      	str	r2, [r3, #0]
	D_UART = b*T_UART - C_UART - start;
 8001df0:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <StartTask03+0x1cc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ff6c 	bl	8000cdc <__aeabi_i2f>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <StartTask03+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe feaf 	bl	8000b70 <__aeabi_fsub>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <StartTask03+0x1d0>)
 8001e18:	601a      	str	r2, [r3, #0]
	D_LCD = c*T_LCD - C_LCD - start;
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <StartTask03+0x1d4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	3b0b      	subs	r3, #11
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ff57 	bl	8000cdc <__aeabi_i2f>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <StartTask03+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f7fe fe9a 	bl	8000b70 <__aeabi_fsub>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <StartTask03+0x1d8>)
 8001e42:	601a      	str	r2, [r3, #0]

	// DHT
	if(D_DHT == minValue())		Pri_DHT = 0;
 8001e44:	f7ff fb2e 	bl	80014a4 <minValue>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <StartTask03+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe ffdb 	bl	8000e0c <__aeabi_fcmpeq>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <StartTask03+0xba>
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <StartTask03+0x1dc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	if(D_DHT == medianValue())	Pri_DHT = -1;
 8001e62:	f7ff fb73 	bl	800154c <medianValue>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <StartTask03+0x1c8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f7fe ffcc 	bl	8000e0c <__aeabi_fcmpeq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <StartTask03+0xda>
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <StartTask03+0x1dc>)
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	601a      	str	r2, [r3, #0]
	if(D_DHT == maxValue())	Pri_DHT = -2;
 8001e82:	f7ff fb39 	bl	80014f8 <maxValue>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <StartTask03+0x1c8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f7fe ffbc 	bl	8000e0c <__aeabi_fcmpeq>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <StartTask03+0xfa>
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <StartTask03+0x1dc>)
 8001e9c:	f06f 0201 	mvn.w	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

	// UART
	if(D_UART == minValue())	Pri_UART = 0;
 8001ea2:	f7ff faff 	bl	80014a4 <minValue>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <StartTask03+0x1d0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f7fe ffac 	bl	8000e0c <__aeabi_fcmpeq>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <StartTask03+0x118>
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <StartTask03+0x1e0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
	if(D_UART == medianValue())	Pri_UART = -1;
 8001ec0:	f7ff fb44 	bl	800154c <medianValue>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <StartTask03+0x1d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7fe ff9d 	bl	8000e0c <__aeabi_fcmpeq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <StartTask03+0x138>
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <StartTask03+0x1e0>)
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295
 8001ede:	601a      	str	r2, [r3, #0]
	if(D_UART == maxValue())	Pri_UART = -2;
 8001ee0:	f7ff fb0a 	bl	80014f8 <maxValue>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <StartTask03+0x1d0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7fe ff8d 	bl	8000e0c <__aeabi_fcmpeq>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <StartTask03+0x158>
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <StartTask03+0x1e0>)
 8001efa:	f06f 0201 	mvn.w	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

	//LCD
	if(D_LCD == minValue())		Pri_LCD = 0;
 8001f00:	f7ff fad0 	bl	80014a4 <minValue>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <StartTask03+0x1d8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f7fe ff7d 	bl	8000e0c <__aeabi_fcmpeq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <StartTask03+0x176>
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <StartTask03+0x1e4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
	if(D_LCD == medianValue())	Pri_LCD = -1;
 8001f1e:	f7ff fb15 	bl	800154c <medianValue>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <StartTask03+0x1d8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe ff6e 	bl	8000e0c <__aeabi_fcmpeq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <StartTask03+0x196>
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <StartTask03+0x1e4>)
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	601a      	str	r2, [r3, #0]
	if(D_LCD == maxValue())		Pri_LCD = -2;
 8001f3e:	f7ff fadb 	bl	80014f8 <maxValue>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <StartTask03+0x1d8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe ff5e 	bl	8000e0c <__aeabi_fcmpeq>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <StartTask03+0x1b6>
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <StartTask03+0x1e4>)
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

	osDelay(T_LCD);
 8001f5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f62:	f002 ffef 	bl	8004f44 <osDelay>
	task3();
 8001f66:	e723      	b.n	8001db0 <StartTask03+0x8>
 8001f68:	200005ac 	.word	0x200005ac
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000594 	.word	0x20000594
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000598 	.word	0x20000598
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	2000059c 	.word	0x2000059c
 8001f84:	200005a0 	.word	0x200005a0
 8001f88:	200005a4 	.word	0x200005a4
 8001f8c:	200005a8 	.word	0x200005a8

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x8>
	...

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_MspInit+0x68>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_MspInit+0x68>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6193      	str	r3, [r2, #24]
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_MspInit+0x68>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_MspInit+0x68>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_MspInit+0x68>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_MspInit+0x68>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f000 fb72 	bl	80026c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_MspInit+0x6c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_MspInit+0x6c>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000

0800200c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_I2C_MspInit+0x70>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d123      	bne.n	8002074 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_I2C_MspInit+0x74>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_I2C_MspInit+0x74>)
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_I2C_MspInit+0x74>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002044:	23c0      	movs	r3, #192	; 0xc0
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	480b      	ldr	r0, [pc, #44]	; (8002084 <HAL_I2C_MspInit+0x78>)
 8002058:	f000 fc1c 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_I2C_MspInit+0x74>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_I2C_MspInit+0x74>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	61d3      	str	r3, [r2, #28]
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_I2C_MspInit+0x74>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40005400 	.word	0x40005400
 8002080:	40021000 	.word	0x40021000
 8002084:	40010c00 	.word	0x40010c00

08002088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d10b      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_TIM_Base_MspInit+0x34>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_TIM_Base_MspInit+0x34>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_TIM_Base_MspInit+0x34>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_UART_MspInit+0x108>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d13a      	bne.n	8002156 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_UART_MspInit+0x10c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a39      	ldr	r2, [pc, #228]	; (80021cc <HAL_UART_MspInit+0x10c>)
 80020e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_UART_MspInit+0x10c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <HAL_UART_MspInit+0x10c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a33      	ldr	r2, [pc, #204]	; (80021cc <HAL_UART_MspInit+0x10c>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_UART_MspInit+0x10c>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0318 	add.w	r3, r7, #24
 8002122:	4619      	mov	r1, r3
 8002124:	482a      	ldr	r0, [pc, #168]	; (80021d0 <HAL_UART_MspInit+0x110>)
 8002126:	f000 fbb5 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0318 	add.w	r3, r7, #24
 800213c:	4619      	mov	r1, r3
 800213e:	4824      	ldr	r0, [pc, #144]	; (80021d0 <HAL_UART_MspInit+0x110>)
 8002140:	f000 fba8 	bl	8002894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2105      	movs	r1, #5
 8002148:	2025      	movs	r0, #37	; 0x25
 800214a:	f000 faba 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800214e:	2025      	movs	r0, #37	; 0x25
 8002150:	f000 fad3 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002154:	e034      	b.n	80021c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_UART_MspInit+0x114>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d12f      	bne.n	80021c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_UART_MspInit+0x10c>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_UART_MspInit+0x10c>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216a:	61d3      	str	r3, [r2, #28]
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_UART_MspInit+0x10c>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_UART_MspInit+0x10c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a13      	ldr	r2, [pc, #76]	; (80021cc <HAL_UART_MspInit+0x10c>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_UART_MspInit+0x10c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002190:	2304      	movs	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4619      	mov	r1, r3
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <HAL_UART_MspInit+0x110>)
 80021a4:	f000 fb76 	bl	8002894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a8:	2308      	movs	r3, #8
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4619      	mov	r1, r3
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_UART_MspInit+0x110>)
 80021bc:	f000 fb6a 	bl	8002894 <HAL_GPIO_Init>
}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010800 	.word	0x40010800
 80021d4:	40004400 	.word	0x40004400

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002206:	f000 f945 	bl	8002494 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800220a:	f003 fc17 	bl	8005a3c <xTaskGetSchedulerState>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d001      	beq.n	8002218 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002214:	f003 fe08 	bl	8005e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <USART1_IRQHandler+0x10>)
 8002222:	f002 f8eb 	bl	80043fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200004f8 	.word	0x200004f8

08002230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <_kill>:

int _kill(int pid, int sig)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002248:	f005 f832 	bl	80072b0 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	2216      	movs	r2, #22
 8002250:	601a      	str	r2, [r3, #0]
  return -1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_exit>:

void _exit (int status)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002266:	f04f 31ff 	mov.w	r1, #4294967295
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffe7 	bl	800223e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002270:	e7fe      	b.n	8002270 <_exit+0x12>

08002272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e00a      	b.n	800229a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002284:	f3af 8000 	nop.w
 8002288:	4601      	mov	r1, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	60ba      	str	r2, [r7, #8]
 8002290:	b2ca      	uxtb	r2, r1
 8002292:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3301      	adds	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbf0      	blt.n	8002284 <_read+0x12>
  }

  return len;
 80022a2:	687b      	ldr	r3, [r7, #4]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e009      	b.n	80022d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	60ba      	str	r2, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	dbf1      	blt.n	80022be <_write+0x12>
  }
  return len;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_close>:

int _close(int file)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230a:	605a      	str	r2, [r3, #4]
  return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <_isatty>:

int _isatty(int file)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002374:	f004 ff9c 	bl	80072b0 <__errno>
 8002378:	4603      	mov	r3, r0
 800237a:	220c      	movs	r2, #12
 800237c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20005000 	.word	0x20005000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	200005c0 	.word	0x200005c0
 80023ac:	20003068 	.word	0x20003068

080023b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023bc:	f7ff fff8 	bl	80023b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023c2:	490c      	ldr	r1, [pc, #48]	; (80023f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023d8:	4c09      	ldr	r4, [pc, #36]	; (8002400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e6:	f004 ff69 	bl	80072bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7ff f919 	bl	8001620 <main>
  bx lr
 80023ee:	4770      	bx	lr
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80023f8:	0800af20 	.word	0x0800af20
  ldr r2, =_sbss
 80023fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002400:	20003068 	.word	0x20003068

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_Init+0x28>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_Init+0x28>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 f947 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fdba 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f95f 	bl	8002716 <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 f927 	bl	80026c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000000c 	.word	0x2000000c
 800248c:	20000014 	.word	0x20000014
 8002490:	20000010 	.word	0x20000010

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_IncTick+0x1c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_IncTick+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <HAL_IncTick+0x20>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000014 	.word	0x20000014
 80024b4:	200005c4 	.word	0x200005c4

080024b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <HAL_GetTick+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	200005c4 	.word	0x200005c4

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d005      	beq.n	80024f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_Delay+0x44>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f2:	bf00      	nop
 80024f4:	f7ff ffe0 	bl	80024b8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d8f7      	bhi.n	80024f4 <HAL_Delay+0x28>
  {
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000014 	.word	0x20000014

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4906      	ldr	r1, [pc, #24]	; (80025ac <__NVIC_EnableIRQ+0x34>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f7ff ff90 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff2d 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff42 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff90 	bl	8002604 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5f 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff35 	bl	8002578 <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffa2 	bl	8002668 <SysTick_Config>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d008      	beq.n	8002758 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e020      	b.n	800279a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d005      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2204      	movs	r2, #4
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e051      	b.n	800286c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020e 	bic.w	r2, r2, #14
 80027d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_DMA_Abort_IT+0xd4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d029      	beq.n	8002846 <HAL_DMA_Abort_IT+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_DMA_Abort_IT+0xd8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Abort_IT+0x9e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_DMA_Abort_IT+0xdc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01a      	beq.n	800283c <HAL_DMA_Abort_IT+0x98>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_DMA_Abort_IT+0xe0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_DMA_Abort_IT+0x92>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_DMA_Abort_IT+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x8c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_DMA_Abort_IT+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_DMA_Abort_IT+0x86>
 8002824:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002828:	e00e      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800282a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800282e:	e00b      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002834:	e008      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	e005      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800283c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002840:	e002      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002842:	2310      	movs	r3, #16
 8002844:	e000      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002846:	2301      	movs	r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_DMA_Abort_IT+0xec>)
 800284a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
    } 
  }
  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020008 	.word	0x40020008
 800287c:	4002001c 	.word	0x4002001c
 8002880:	40020030 	.word	0x40020030
 8002884:	40020044 	.word	0x40020044
 8002888:	40020058 	.word	0x40020058
 800288c:	4002006c 	.word	0x4002006c
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e169      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a8:	2201      	movs	r2, #1
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8158 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a9a      	ldr	r2, [pc, #616]	; (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028d0:	4a98      	ldr	r2, [pc, #608]	; (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d875      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028d6:	4a98      	ldr	r2, [pc, #608]	; (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d058      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028dc:	4a96      	ldr	r2, [pc, #600]	; (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d86f      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028e2:	4a96      	ldr	r2, [pc, #600]	; (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d052      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028e8:	4a94      	ldr	r2, [pc, #592]	; (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d869      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028ee:	4a94      	ldr	r2, [pc, #592]	; (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04c      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028f4:	4a92      	ldr	r2, [pc, #584]	; (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d863      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028fa:	4a92      	ldr	r2, [pc, #584]	; (8002b44 <HAL_GPIO_Init+0x2b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d046      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002900:	4a90      	ldr	r2, [pc, #576]	; (8002b44 <HAL_GPIO_Init+0x2b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d85d      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002906:	2b12      	cmp	r3, #18
 8002908:	d82a      	bhi.n	8002960 <HAL_GPIO_Init+0xcc>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d859      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 800290e:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <HAL_GPIO_Init+0x80>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	0800298f 	.word	0x0800298f
 8002918:	08002969 	.word	0x08002969
 800291c:	0800297b 	.word	0x0800297b
 8002920:	080029bd 	.word	0x080029bd
 8002924:	080029c3 	.word	0x080029c3
 8002928:	080029c3 	.word	0x080029c3
 800292c:	080029c3 	.word	0x080029c3
 8002930:	080029c3 	.word	0x080029c3
 8002934:	080029c3 	.word	0x080029c3
 8002938:	080029c3 	.word	0x080029c3
 800293c:	080029c3 	.word	0x080029c3
 8002940:	080029c3 	.word	0x080029c3
 8002944:	080029c3 	.word	0x080029c3
 8002948:	080029c3 	.word	0x080029c3
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029c3 	.word	0x080029c3
 8002958:	08002971 	.word	0x08002971
 800295c:	08002985 	.word	0x08002985
 8002960:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_GPIO_Init+0x2b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002966:	e02c      	b.n	80029c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e029      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e024      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	330c      	adds	r3, #12
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e01a      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002996:	2304      	movs	r3, #4
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e013      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a4:	2308      	movs	r3, #8
 80029a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	611a      	str	r2, [r3, #16]
          break;
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b0:	2308      	movs	r3, #8
 80029b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	615a      	str	r2, [r3, #20]
          break;
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          break;
 80029c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d801      	bhi.n	80029ce <HAL_GPIO_Init+0x13a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_Init+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d802      	bhi.n	80029e0 <HAL_GPIO_Init+0x14c>
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x152>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3b08      	subs	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	210f      	movs	r1, #15
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80b1 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a2c:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	; (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e0>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a92:	492f      	ldr	r1, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	492c      	ldr	r1, [pc, #176]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4928      	ldr	r1, [pc, #160]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4922      	ldr	r1, [pc, #136]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	491e      	ldr	r1, [pc, #120]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4918      	ldr	r1, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4914      	ldr	r1, [pc, #80]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x2e2>
 8002b32:	bf00      	nop
 8002b34:	10320000 	.word	0x10320000
 8002b38:	10310000 	.word	0x10310000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10210000 	.word	0x10210000
 8002b44:	10120000 	.word	0x10120000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f ae8e 	bne.w	80028a8 <HAL_GPIO_Init+0x14>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	372c      	adds	r7, #44	; 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bda:	787b      	ldrb	r3, [r7, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002be6:	e003      	b.n	8002bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e12b      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff f9f2 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c60:	f001 f832 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a81      	ldr	r2, [pc, #516]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d807      	bhi.n	8002c80 <HAL_I2C_Init+0x84>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a80      	ldr	r2, [pc, #512]	; (8002e74 <HAL_I2C_Init+0x278>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	bf94      	ite	ls
 8002c78:	2301      	movls	r3, #1
 8002c7a:	2300      	movhi	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e006      	b.n	8002c8e <HAL_I2C_Init+0x92>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a7d      	ldr	r2, [pc, #500]	; (8002e78 <HAL_I2C_Init+0x27c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0e7      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a78      	ldr	r2, [pc, #480]	; (8002e7c <HAL_I2C_Init+0x280>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_I2C_Init+0xd4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e009      	b.n	8002ce4 <HAL_I2C_Init+0xe8>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_I2C_Init+0x284>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	495c      	ldr	r1, [pc, #368]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d819      	bhi.n	8002d38 <HAL_I2C_Init+0x13c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e59      	subs	r1, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d18:	400b      	ands	r3, r1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_I2C_Init+0x138>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e59      	subs	r1, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	e051      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d34:	2304      	movs	r3, #4
 8002d36:	e04f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_I2C_Init+0x168>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e012      	b.n	8002d8a <HAL_I2C_Init+0x18e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x196>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e022      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_I2C_Init+0x1bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e58      	subs	r0, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6911      	ldr	r1, [r2, #16]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	000186a0 	.word	0x000186a0
 8002e74:	001e847f 	.word	0x001e847f
 8002e78:	003d08ff 	.word	0x003d08ff
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fb0e 	bl	80024b8 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80e0 	bne.w	800306c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4970      	ldr	r1, [pc, #448]	; (8003078 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f964 	bl	8003184 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0d3      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x50>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0cc      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d007      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	; 0x21
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f89c 	bl	8003080 <I2C_MasterRequestWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e08d      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f68:	e066      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa22 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06b      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_I2C_Master_Transmit+0x188>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa19 	bl	8003448 <I2C_WaitOnBTFFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01a      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d194      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000

08003080 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	460b      	mov	r3, r1
 800308e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d006      	beq.n	80030aa <I2C_MasterRequestWrite+0x2a>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d003      	beq.n	80030aa <I2C_MasterRequestWrite+0x2a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a8:	d108      	bne.n	80030bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00b      	b.n	80030d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	2b12      	cmp	r3, #18
 80030c2:	d107      	bne.n	80030d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f84f 	bl	8003184 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d103      	bne.n	8003104 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e035      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003110:	d108      	bne.n	8003124 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e01b      	b.n	800315c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	11db      	asrs	r3, r3, #7
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0306 	and.w	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f063 030f 	orn	r3, r3, #15
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	490e      	ldr	r1, [pc, #56]	; (800317c <I2C_MasterRequestWrite+0xfc>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f898 	bl	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e010      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <I2C_MasterRequestWrite+0x100>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f888 	bl	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	00010008 	.word	0x00010008
 8003180:	00010002 	.word	0x00010002

08003184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003194:	e048      	b.n	8003228 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d044      	beq.n	8003228 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7ff f98b 	bl	80024b8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d139      	bne.n	8003228 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d10d      	bne.n	80031da <I2C_WaitOnFlagUntilTimeout+0x56>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	e00c      	b.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d116      	bne.n	8003228 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e023      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10d      	bne.n	800324e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	e00c      	b.n	8003268 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d093      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003286:	e071      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d123      	bne.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e067      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d041      	beq.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7ff f8e6 	bl	80024b8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d136      	bne.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10c      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e00b      	b.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	43da      	mvns	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e021      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10c      	bne.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e00b      	b.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f47f af6d 	bne.w	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f886 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d028      	beq.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7ff f86b 	bl	80024b8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11d      	bne.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b80      	cmp	r3, #128	; 0x80
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b80      	cmp	r3, #128	; 0x80
 800343c:	d1c3      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003454:	e034      	b.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f83e 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e034      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d028      	beq.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7ff f823 	bl	80024b8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11d      	bne.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d016      	beq.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d1c3      	bne.n	8003456 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d11b      	bne.n	8003528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e272      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b04      	cmp	r3, #4
 800355e:	d00c      	beq.n	800357a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d112      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d10b      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357a:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d06c      	beq.n	8003660 <HAL_RCC_OscConfig+0x12c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d168      	bne.n	8003660 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e24c      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x76>
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e02e      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a77      	ldr	r2, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e01d      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0xbc>
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a71      	ldr	r2, [pc, #452]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035f0:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003606:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe ff52 	bl	80024b8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe ff4e 	bl	80024b8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e200      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0xe4>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe ff3e 	bl	80024b8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe ff3a 	bl	80024b8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1ec      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003652:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x10c>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d11c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x18c>
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x176>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1c0      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4939      	ldr	r1, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	e03a      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fe fef3 	bl	80024b8 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fe feef 	bl	80024b8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1a1      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4927      	ldr	r1, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe fed2 	bl	80024b8 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003718:	f7fe fece 	bl	80024b8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e180      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03a      	beq.n	80037b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d019      	beq.n	800377e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe feb2 	bl	80024b8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe feae 	bl	80024b8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e160      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003776:	2001      	movs	r0, #1
 8003778:	f000 face 	bl	8003d18 <RCC_Delay>
 800377c:	e01c      	b.n	80037b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003784:	f7fe fe98 	bl	80024b8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378a:	e00f      	b.n	80037ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe fe94 	bl	80024b8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d908      	bls.n	80037ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e146      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	42420000 	.word	0x42420000
 80037a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e9      	bne.n	800378c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a6 	beq.w	8003912 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4a87      	ldr	r2, [pc, #540]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	61d3      	str	r3, [r2, #28]
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe fe55 	bl	80024b8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe fe51 	bl	80024b8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	; 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e103      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x312>
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x334>
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6213      	str	r3, [r2, #32]
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x356>
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a60      	ldr	r2, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6213      	str	r3, [r2, #32]
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fe fe05 	bl	80024b8 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fe01 	bl	80024b8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0b1      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x37e>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fdef 	bl	80024b8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fdeb 	bl	80024b8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e09b      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003910:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8087 	beq.w	8003a2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d061      	beq.n	80039ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d146      	bne.n	80039be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fe fdbf 	bl	80024b8 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fdbb 	bl	80024b8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e06d      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4921      	ldr	r1, [pc, #132]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a19      	ldr	r1, [r3, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	430b      	orrs	r3, r1
 800398a:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fd8f 	bl	80024b8 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fd8b 	bl	80024b8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e03d      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x46a>
 80039bc:	e035      	b.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fd78 	bl	80024b8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fd74 	bl	80024b8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e026      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x498>
 80039ea:	e01e      	b.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e019      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0d0      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d910      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 0207 	bic.w	r2, r3, #7
 8003a62:	4965      	ldr	r1, [pc, #404]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ab6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d040      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e073      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4936      	ldr	r1, [pc, #216]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fe fcc6 	bl	80024b8 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fe fcc2 	bl	80024b8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e053      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d210      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4922      	ldr	r1, [pc, #136]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f821 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1cc>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fc24 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800aac4 	.word	0x0800aac4
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	20000010 	.word	0x20000010

08003c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x30>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x36>
 8003c3a:	e027      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c3e:	613b      	str	r3, [r7, #16]
      break;
 8003c40:	e027      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	0c9b      	lsrs	r3, r3, #18
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c4c:	5cd3      	ldrb	r3, [r2, r3]
 8003c4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d010      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0c5b      	lsrs	r3, r3, #17
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6e:	fb03 f202 	mul.w	r2, r3, r2
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	e004      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	613b      	str	r3, [r7, #16]
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8e:	613b      	str	r3, [r7, #16]
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	693b      	ldr	r3, [r7, #16]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	007a1200 	.word	0x007a1200
 8003ca8:	0800aadc 	.word	0x0800aadc
 8003cac:	0800aaec 	.word	0x0800aaec
 8003cb0:	003d0900 	.word	0x003d0900

08003cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff2 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	0800aad4 	.word	0x0800aad4

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffde 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	0800aad4 	.word	0x0800aad4

08003d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <RCC_Delay+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <RCC_Delay+0x38>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a5b      	lsrs	r3, r3, #9
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d34:	bf00      	nop
  }
  while (Delay --);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f9      	bne.n	8003d34 <RCC_Delay+0x1c>
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e041      	b.n	8003dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fe f984 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f000 f8f4 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_ConfigClockSource+0x1c>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0b4      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x186>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	d03e      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xd4>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	f200 8087 	bhi.w	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	f000 8086 	beq.w	8003f64 <HAL_TIM_ConfigClockSource+0x172>
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d87f      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	2b70      	cmp	r3, #112	; 0x70
 8003e60:	d01a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xa6>
 8003e62:	2b70      	cmp	r3, #112	; 0x70
 8003e64:	d87b      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e66:	2b60      	cmp	r3, #96	; 0x60
 8003e68:	d050      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x11a>
 8003e6a:	2b60      	cmp	r3, #96	; 0x60
 8003e6c:	d877      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	2b50      	cmp	r3, #80	; 0x50
 8003e70:	d03c      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0xfa>
 8003e72:	2b50      	cmp	r3, #80	; 0x50
 8003e74:	d873      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d058      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x13a>
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d86f      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e7e:	2b30      	cmp	r3, #48	; 0x30
 8003e80:	d064      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d86b      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d060      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d867      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d05c      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d05a      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e96:	e062      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ea8:	f000 f94f 	bl	800414a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
      break;
 8003ec4:	e04f      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	f000 f938 	bl	800414a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	609a      	str	r2, [r3, #8]
      break;
 8003eea:	e03c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 f8af 	bl	800405c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2150      	movs	r1, #80	; 0x50
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f906 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e02c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f8cd 	bl	80040b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2160      	movs	r1, #96	; 0x60
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f8f6 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e01c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f88f 	bl	800405c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f8e6 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e00c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 f8dd 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e003      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      break;
 8003f62:	e000      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <TIM_Base_SetConfig+0xd0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d007      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	; (8004054 <TIM_Base_SetConfig+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a2b      	ldr	r2, [pc, #172]	; (8004058 <TIM_Base_SetConfig+0xd8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d108      	bne.n	8003fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_Base_SetConfig+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <TIM_Base_SetConfig+0xd4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <TIM_Base_SetConfig+0xd8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <TIM_Base_SetConfig+0xd0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]
  }
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800

0800405c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0201 	bic.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 030a 	bic.w	r3, r3, #10
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f023 0210 	bic.w	r2, r3, #16
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	031b      	lsls	r3, r3, #12
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004164:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	021a      	lsls	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	431a      	orrs	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4313      	orrs	r3, r2
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e046      	b.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d009      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a10      	ldr	r2, [pc, #64]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10c      	bne.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4313      	orrs	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800

08004244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e042      	b.n	80042dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd ff28 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fd63 	bl	8004d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d175      	bne.n	80043f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Transmit+0x2c>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e06e      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2221      	movs	r2, #33	; 0x21
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004322:	f7fe f8c9 	bl	80024b8 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d108      	bne.n	8004350 <HAL_UART_Transmit+0x6c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e003      	b.n	8004358 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004358:	e02e      	b.n	80043b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fb01 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e03a      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3302      	adds	r3, #2
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e007      	b.n	80043aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1cb      	bne.n	800435a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2140      	movs	r1, #64	; 0x40
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 facd 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b0ba      	sub	sp, #232	; 0xe8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800443a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_UART_IRQHandler+0x66>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fbbc 	bl	8004bd8 <UART_Receive_IT>
      return;
 8004460:	e25b      	b.n	800491a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80de 	beq.w	8004628 <HAL_UART_IRQHandler+0x22c>
 800446c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80d1 	beq.w	8004628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_UART_IRQHandler+0xae>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_UART_IRQHandler+0xd2>
 80044b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f043 0202 	orr.w	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_UART_IRQHandler+0xf6>
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <HAL_UART_IRQHandler+0x126>
 80044fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 81f2 	beq.w	8004910 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x14e>
 8004538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fb47 	bl	8004bd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_UART_IRQHandler+0x17a>
 800456e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04f      	beq.n	8004616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa51 	bl	8004a1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d041      	beq.n	800460e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1d9      	bne.n	800458a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d013      	beq.n	8004606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	4a7e      	ldr	r2, [pc, #504]	; (80047dc <HAL_UART_IRQHandler+0x3e0>)
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe f8da 	bl	80027a4 <HAL_DMA_Abort_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004600:	4610      	mov	r0, r2
 8004602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	e00e      	b.n	8004624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f99c 	bl	8004944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e00a      	b.n	8004624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f998 	bl	8004944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e006      	b.n	8004624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f994 	bl	8004944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004622:	e175      	b.n	8004910 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	bf00      	nop
    return;
 8004626:	e173      	b.n	8004910 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	f040 814f 	bne.w	80048d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8148 	beq.w	80048d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8141 	beq.w	80048d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80b6 	beq.w	80047e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8145 	beq.w	8004914 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800468e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004692:	429a      	cmp	r2, r3
 8004694:	f080 813e 	bcs.w	8004914 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800469e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f000 8088 	beq.w	80047bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1d9      	bne.n	80046ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800471c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004720:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800472e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e1      	bne.n	80046f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004758:	66fa      	str	r2, [r7, #108]	; 0x6c
 800475a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800475e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e3      	bne.n	8004734 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	f023 0310 	bic.w	r3, r3, #16
 8004790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800479e:	65ba      	str	r2, [r7, #88]	; 0x58
 80047a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e3      	bne.n	800477a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd ffb9 	bl	800272e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8bf 	bl	8004956 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047d8:	e09c      	b.n	8004914 <HAL_UART_IRQHandler+0x518>
 80047da:	bf00      	nop
 80047dc:	08004ae3 	.word	0x08004ae3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 808e 	beq.w	8004918 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8089 	beq.w	8004918 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800482a:	647a      	str	r2, [r7, #68]	; 0x44
 800482c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e3      	bne.n	8004806 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3314      	adds	r3, #20
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	623b      	str	r3, [r7, #32]
   return(result);
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004862:	633a      	str	r2, [r7, #48]	; 0x30
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e3      	bne.n	800483e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60fb      	str	r3, [r7, #12]
   return(result);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0310 	bic.w	r3, r3, #16
 800489a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048a8:	61fa      	str	r2, [r7, #28]
 80048aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	617b      	str	r3, [r7, #20]
   return(result);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e3      	bne.n	8004884 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f844 	bl	8004956 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048ce:	e023      	b.n	8004918 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_UART_IRQHandler+0x4f4>
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f90e 	bl	8004b0a <UART_Transmit_IT>
    return;
 80048ee:	e014      	b.n	800491a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00e      	beq.n	800491a <HAL_UART_IRQHandler+0x51e>
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f94d 	bl	8004ba8 <UART_EndTransmit_IT>
    return;
 800490e:	e004      	b.n	800491a <HAL_UART_IRQHandler+0x51e>
    return;
 8004910:	bf00      	nop
 8004912:	e002      	b.n	800491a <HAL_UART_IRQHandler+0x51e>
      return;
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <HAL_UART_IRQHandler+0x51e>
      return;
 8004918:	bf00      	nop
  }
}
 800491a:	37e8      	adds	r7, #232	; 0xe8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497c:	e03b      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d037      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fd fd97 	bl	80024b8 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <UART_WaitOnFlagUntilTimeout+0x30>
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e03a      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d023      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d020      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d01d      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d116      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f81d 	bl	8004a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2208      	movs	r2, #8
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e00f      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d0b4      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b095      	sub	sp, #84	; 0x54
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a46:	643a      	str	r2, [r7, #64]	; 0x40
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e5      	bne.n	8004a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d119      	bne.n	8004aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0310 	bic.w	r3, r3, #16
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab6:	61ba      	str	r2, [r7, #24]
 8004ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ad8:	bf00      	nop
 8004ada:	3754      	adds	r7, #84	; 0x54
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff21 	bl	8004944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b21      	cmp	r3, #33	; 0x21
 8004b1c:	d13e      	bne.n	8004b9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d114      	bne.n	8004b52 <UART_Transmit_IT+0x48>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]
 8004b50:	e008      	b.n	8004b64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6211      	str	r1, [r2, #32]
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4619      	mov	r1, r3
 8004b72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fea9 	bl	8004920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	; 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b22      	cmp	r3, #34	; 0x22
 8004bea:	f040 80ae 	bne.w	8004d4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d117      	bne.n	8004c28 <UART_Receive_IT+0x50>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d113      	bne.n	8004c28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	1c9a      	adds	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
 8004c26:	e026      	b.n	8004c76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d007      	beq.n	8004c4c <UART_Receive_IT+0x74>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <UART_Receive_IT+0x82>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e008      	b.n	8004c6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4619      	mov	r1, r3
 8004c84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d15d      	bne.n	8004d46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0220 	bic.w	r2, r2, #32
 8004c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d135      	bne.n	8004d3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f023 0310 	bic.w	r3, r3, #16
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	623a      	str	r2, [r7, #32]
 8004cf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	69f9      	ldr	r1, [r7, #28]
 8004cfc:	6a3a      	ldr	r2, [r7, #32]
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d10a      	bne.n	8004d2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fe0e 	bl	8004956 <HAL_UARTEx_RxEventCallback>
 8004d3a:	e002      	b.n	8004d42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fdf8 	bl	8004932 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e002      	b.n	8004d4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3730      	adds	r7, #48	; 0x30
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d8e:	f023 030c 	bic.w	r3, r3, #12
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <UART_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fe ff98 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	e002      	b.n	8004dca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7fe ff80 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009a      	lsls	r2, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <UART_SetConfig+0x118>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	0119      	lsls	r1, r3, #4
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009a      	lsls	r2, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <UART_SetConfig+0x118>)
 8004e02:	fba3 0302 	umull	r0, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2064      	movs	r0, #100	; 0x64
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	3332      	adds	r3, #50	; 0x32
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <UART_SetConfig+0x118>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e20:	4419      	add	r1, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009a      	lsls	r2, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <UART_SetConfig+0x118>)
 8004e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2064      	movs	r0, #100	; 0x64
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <UART_SetConfig+0x118>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	51eb851f 	.word	0x51eb851f

08004e70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e82:	2b84      	cmp	r3, #132	; 0x84
 8004e84:	d005      	beq.n	8004e92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3303      	adds	r3, #3
 8004e90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ea2:	f000 fad9 	bl	8005458 <vTaskStartScheduler>
  
  return osOK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af04      	add	r7, sp, #16
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <osThreadCreate+0x54>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01c      	beq.n	8004f00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685c      	ldr	r4, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691e      	ldr	r6, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ffc9 	bl	8004e70 <makeFreeRtosPriority>
 8004ede:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee8:	9202      	str	r2, [sp, #8]
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	9100      	str	r1, [sp, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 f8e8 	bl	80050ca <xTaskCreateStatic>
 8004efa:	4603      	mov	r3, r0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e01c      	b.n	8004f3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685c      	ldr	r4, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ffab 	bl	8004e70 <makeFreeRtosPriority>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f107 030c 	add.w	r3, r7, #12
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	9200      	str	r2, [sp, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4632      	mov	r2, r6
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 f92a 	bl	8005184 <xTaskCreate>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <osDelay+0x16>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	e000      	b.n	8004f5c <osDelay+0x18>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fa47 	bl	80053f0 <vTaskDelay>
  
  return osOK;
 8004f62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 0208 	add.w	r2, r3, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f103 0208 	add.w	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d103      	bne.n	8005028 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e00c      	b.n	8005042 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3308      	adds	r3, #8
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e002      	b.n	8005036 <vListInsert+0x2e>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d2f6      	bcs.n	8005030 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6892      	ldr	r2, [r2, #8]
 800508e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d103      	bne.n	80050ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08e      	sub	sp, #56	; 0x38
 80050ce:	af04      	add	r7, sp, #16
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xTaskCreateStatic+0x46>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61fb      	str	r3, [r7, #28]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005110:	2354      	movs	r3, #84	; 0x54
 8005112:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b54      	cmp	r3, #84	; 0x54
 8005118:	d00a      	beq.n	8005130 <xTaskCreateStatic+0x66>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61bb      	str	r3, [r7, #24]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01e      	beq.n	8005176 <xTaskCreateStatic+0xac>
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01b      	beq.n	8005176 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005146:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005150:	2300      	movs	r3, #0
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	9302      	str	r3, [sp, #8]
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f850 	bl	800520e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005170:	f000 f8d4 	bl	800531c <prvAddNewTaskToReadyList>
 8005174:	e001      	b.n	800517a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
	}
 800517c:	4618      	mov	r0, r3
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af04      	add	r7, sp, #16
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fe89 	bl	8005eb0 <pvPortMalloc>
 800519e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051a6:	2054      	movs	r0, #84	; 0x54
 80051a8:	f000 fe82 	bl	8005eb0 <pvPortMalloc>
 80051ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ba:	e005      	b.n	80051c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	f000 ff43 	bl	8006048 <vPortFree>
 80051c2:	e001      	b.n	80051c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	2300      	movs	r3, #0
 80051da:	9303      	str	r3, [sp, #12]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	9302      	str	r3, [sp, #8]
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f80e 	bl	800520e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f2:	69f8      	ldr	r0, [r7, #28]
 80051f4:	f000 f892 	bl	800531c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f8:	2301      	movs	r3, #1
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e002      	b.n	8005204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005204:	69bb      	ldr	r3, [r7, #24]
	}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005226:	3b01      	subs	r3, #1
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f023 0307 	bic.w	r3, r3, #7
 8005234:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	617b      	str	r3, [r7, #20]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01f      	beq.n	800529c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e012      	b.n	8005288 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	7819      	ldrb	r1, [r3, #0]
 800526a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	3334      	adds	r3, #52	; 0x34
 8005272:	460a      	mov	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	d9e9      	bls.n	8005262 <prvInitialiseNewTask+0x54>
 800528e:	e000      	b.n	8005292 <prvInitialiseNewTask+0x84>
			{
				break;
 8005290:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800529a:	e003      	b.n	80052a4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d901      	bls.n	80052ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052aa:	2306      	movs	r3, #6
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2200      	movs	r2, #0
 80052be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fe70 	bl	8004faa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	3318      	adds	r3, #24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fe6b 	bl	8004faa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	f1c3 0207 	rsb	r2, r3, #7
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	69b8      	ldr	r0, [r7, #24]
 80052fe:	f000 fc21 	bl	8005b44 <pxPortInitialiseStack>
 8005302:	4602      	mov	r2, r0
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005314:	bf00      	nop
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005324:	f000 fd02 	bl	8005d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005328:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 8005330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005332:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800533a:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d110      	bne.n	800536a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005348:	f000 faba 	bl	80058c0 <prvInitialiseTaskLists>
 800534c:	e00d      	b.n	800536a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <prvAddNewTaskToReadyList+0xc0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005356:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	429a      	cmp	r2, r3
 8005362:	d802      	bhi.n	800536a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <prvAddNewTaskToReadyList+0xc4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <prvAddNewTaskToReadyList+0xc4>)
 8005372:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <prvAddNewTaskToReadyList+0xc8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <prvAddNewTaskToReadyList+0xc8>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <prvAddNewTaskToReadyList+0xcc>)
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7ff fe10 	bl	8004fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a2:	f000 fcf3 	bl	8005d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <prvAddNewTaskToReadyList+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d207      	bcs.n	80053cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <prvAddNewTaskToReadyList+0xd0>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200006c8 	.word	0x200006c8
 80053d8:	200005c8 	.word	0x200005c8
 80053dc:	200006d4 	.word	0x200006d4
 80053e0:	200006e4 	.word	0x200006e4
 80053e4:	200006d0 	.word	0x200006d0
 80053e8:	200005cc 	.word	0x200005cc
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d017      	beq.n	8005432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005402:	4b13      	ldr	r3, [pc, #76]	; (8005450 <vTaskDelay+0x60>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <vTaskDelay+0x30>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005420:	f000 f87a 	bl	8005518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005424:	2100      	movs	r1, #0
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb26 	bl	8005a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800542c:	f000 f882 	bl	8005534 <xTaskResumeAll>
 8005430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <vTaskDelay+0x64>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200006f0 	.word	0x200006f0
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005466:	463a      	mov	r2, r7
 8005468:	1d39      	adds	r1, r7, #4
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4618      	mov	r0, r3
 8005470:	f7fb feb8 	bl	80011e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	9202      	str	r2, [sp, #8]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	2300      	movs	r3, #0
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	460a      	mov	r2, r1
 8005486:	491e      	ldr	r1, [pc, #120]	; (8005500 <vTaskStartScheduler+0xa8>)
 8005488:	481e      	ldr	r0, [pc, #120]	; (8005504 <vTaskStartScheduler+0xac>)
 800548a:	f7ff fe1e 	bl	80050ca <xTaskCreateStatic>
 800548e:	4603      	mov	r3, r0
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <vTaskStartScheduler+0xb0>)
 8005492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <vTaskStartScheduler+0xb0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e001      	b.n	80054a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d116      	bne.n	80054da <vTaskStartScheduler+0x82>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	613b      	str	r3, [r7, #16]
}
 80054be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054c0:	4b12      	ldr	r3, [pc, #72]	; (800550c <vTaskStartScheduler+0xb4>)
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <vTaskStartScheduler+0xb8>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054ce:	4b11      	ldr	r3, [pc, #68]	; (8005514 <vTaskStartScheduler+0xbc>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054d4:	f000 fbb8 	bl	8005c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054d8:	e00e      	b.n	80054f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d10a      	bne.n	80054f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <vTaskStartScheduler+0x9e>
}
 80054f8:	bf00      	nop
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	0800aabc 	.word	0x0800aabc
 8005504:	08005891 	.word	0x08005891
 8005508:	200006ec 	.word	0x200006ec
 800550c:	200006e8 	.word	0x200006e8
 8005510:	200006d4 	.word	0x200006d4
 8005514:	200006cc 	.word	0x200006cc

08005518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <vTaskSuspendAll+0x18>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	4a03      	ldr	r2, [pc, #12]	; (8005530 <vTaskSuspendAll+0x18>)
 8005524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	200006f0 	.word	0x200006f0

08005534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <xTaskResumeAll+0x114>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <xTaskResumeAll+0x2c>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	603b      	str	r3, [r7, #0]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005560:	f000 fbe4 	bl	8005d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005564:	4b38      	ldr	r3, [pc, #224]	; (8005648 <xTaskResumeAll+0x114>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a37      	ldr	r2, [pc, #220]	; (8005648 <xTaskResumeAll+0x114>)
 800556c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556e:	4b36      	ldr	r3, [pc, #216]	; (8005648 <xTaskResumeAll+0x114>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d161      	bne.n	800563a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <xTaskResumeAll+0x118>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d05d      	beq.n	800563a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800557e:	e02e      	b.n	80055de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005580:	4b33      	ldr	r3, [pc, #204]	; (8005650 <xTaskResumeAll+0x11c>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3318      	adds	r3, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff fd73 	bl	8005078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3304      	adds	r3, #4
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fd6e 	bl	8005078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	2201      	movs	r2, #1
 80055a2:	409a      	lsls	r2, r3
 80055a4:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <xTaskResumeAll+0x120>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <xTaskResumeAll+0x120>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4a27      	ldr	r2, [pc, #156]	; (8005658 <xTaskResumeAll+0x124>)
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f7ff fcfc 	bl	8004fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	4b23      	ldr	r3, [pc, #140]	; (800565c <xTaskResumeAll+0x128>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <xTaskResumeAll+0x12c>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055de:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <xTaskResumeAll+0x11c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1cc      	bne.n	8005580 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ec:	f000 fa06 	bl	80059fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055f0:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <xTaskResumeAll+0x130>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055fc:	f000 f836 	bl	800566c <xTaskIncrementTick>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <xTaskResumeAll+0x12c>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3b01      	subs	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f1      	bne.n	80055fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005618:	4b12      	ldr	r3, [pc, #72]	; (8005664 <xTaskResumeAll+0x130>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xTaskResumeAll+0x12c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <xTaskResumeAll+0x134>)
 800562c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800563a:	f000 fba7 	bl	8005d8c <vPortExitCritical>

	return xAlreadyYielded;
 800563e:	68bb      	ldr	r3, [r7, #8]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200006f0 	.word	0x200006f0
 800564c:	200006c8 	.word	0x200006c8
 8005650:	20000688 	.word	0x20000688
 8005654:	200006d0 	.word	0x200006d0
 8005658:	200005cc 	.word	0x200005cc
 800565c:	200005c8 	.word	0x200005c8
 8005660:	200006dc 	.word	0x200006dc
 8005664:	200006d8 	.word	0x200006d8
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b4e      	ldr	r3, [pc, #312]	; (80057b0 <xTaskIncrementTick+0x144>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 808e 	bne.w	800579c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005680:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <xTaskIncrementTick+0x148>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005688:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <xTaskIncrementTick+0x148>)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d120      	bne.n	80056d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005694:	4b48      	ldr	r3, [pc, #288]	; (80057b8 <xTaskIncrementTick+0x14c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	603b      	str	r3, [r7, #0]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xTaskIncrementTick+0x46>
 80056b4:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a3e      	ldr	r2, [pc, #248]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4a3e      	ldr	r2, [pc, #248]	; (80057bc <xTaskIncrementTick+0x150>)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a3c      	ldr	r2, [pc, #240]	; (80057c0 <xTaskIncrementTick+0x154>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	f000 f993 	bl	80059fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d6:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <xTaskIncrementTick+0x158>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d348      	bcc.n	8005772 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <xTaskIncrementTick+0x158>)
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	601a      	str	r2, [r3, #0]
					break;
 80056f2:	e03e      	b.n	8005772 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f4:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d203      	bcs.n	8005714 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <xTaskIncrementTick+0x158>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005712:	e02e      	b.n	8005772 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fcad 	bl	8005078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fca4 	bl	8005078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <xTaskIncrementTick+0x15c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <xTaskIncrementTick+0x15c>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <xTaskIncrementTick+0x160>)
 8005750:	441a      	add	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7ff fc32 	bl	8004fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <xTaskIncrementTick+0x164>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d3b9      	bcc.n	80056e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	e7b6      	b.n	80056e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <xTaskIncrementTick+0x164>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4914      	ldr	r1, [pc, #80]	; (80057cc <xTaskIncrementTick+0x160>)
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d901      	bls.n	800578e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <xTaskIncrementTick+0x168>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e004      	b.n	80057a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <xTaskIncrementTick+0x16c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <xTaskIncrementTick+0x16c>)
 80057a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200006f0 	.word	0x200006f0
 80057b4:	200006cc 	.word	0x200006cc
 80057b8:	20000680 	.word	0x20000680
 80057bc:	20000684 	.word	0x20000684
 80057c0:	200006e0 	.word	0x200006e0
 80057c4:	200006e8 	.word	0x200006e8
 80057c8:	200006d0 	.word	0x200006d0
 80057cc:	200005cc 	.word	0x200005cc
 80057d0:	200005c8 	.word	0x200005c8
 80057d4:	200006dc 	.word	0x200006dc
 80057d8:	200006d8 	.word	0x200006d8

080057dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <vTaskSwitchContext+0xa0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ea:	4b25      	ldr	r3, [pc, #148]	; (8005880 <vTaskSwitchContext+0xa4>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f0:	e03f      	b.n	8005872 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <vTaskSwitchContext+0xa4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <vTaskSwitchContext+0xa8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	f1c3 031f 	rsb	r3, r3, #31
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	491e      	ldr	r1, [pc, #120]	; (8005888 <vTaskSwitchContext+0xac>)
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vTaskSwitchContext+0x5a>
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a11      	ldr	r2, [pc, #68]	; (8005888 <vTaskSwitchContext+0xac>)
 8005844:	4413      	add	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3308      	adds	r3, #8
 800585a:	429a      	cmp	r2, r3
 800585c:	d104      	bne.n	8005868 <vTaskSwitchContext+0x8c>
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <vTaskSwitchContext+0xb0>)
 8005870:	6013      	str	r3, [r2, #0]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	200006f0 	.word	0x200006f0
 8005880:	200006dc 	.word	0x200006dc
 8005884:	200006d0 	.word	0x200006d0
 8005888:	200005cc 	.word	0x200005cc
 800588c:	200005c8 	.word	0x200005c8

08005890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005898:	f000 f852 	bl	8005940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <prvIdleTask+0x28>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d9f9      	bls.n	8005898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <prvIdleTask+0x2c>)
 80058a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058b4:	e7f0      	b.n	8005898 <prvIdleTask+0x8>
 80058b6:	bf00      	nop
 80058b8:	200005cc 	.word	0x200005cc
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	e00c      	b.n	80058e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <prvInitialiseTaskLists+0x60>)
 80058d8:	4413      	add	r3, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fb46 	bl	8004f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3301      	adds	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d9ef      	bls.n	80058cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058ec:	480d      	ldr	r0, [pc, #52]	; (8005924 <prvInitialiseTaskLists+0x64>)
 80058ee:	f7ff fb3d 	bl	8004f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058f2:	480d      	ldr	r0, [pc, #52]	; (8005928 <prvInitialiseTaskLists+0x68>)
 80058f4:	f7ff fb3a 	bl	8004f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058f8:	480c      	ldr	r0, [pc, #48]	; (800592c <prvInitialiseTaskLists+0x6c>)
 80058fa:	f7ff fb37 	bl	8004f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058fe:	480c      	ldr	r0, [pc, #48]	; (8005930 <prvInitialiseTaskLists+0x70>)
 8005900:	f7ff fb34 	bl	8004f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005904:	480b      	ldr	r0, [pc, #44]	; (8005934 <prvInitialiseTaskLists+0x74>)
 8005906:	f7ff fb31 	bl	8004f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800590a:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <prvInitialiseTaskLists+0x78>)
 800590c:	4a05      	ldr	r2, [pc, #20]	; (8005924 <prvInitialiseTaskLists+0x64>)
 800590e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <prvInitialiseTaskLists+0x7c>)
 8005912:	4a05      	ldr	r2, [pc, #20]	; (8005928 <prvInitialiseTaskLists+0x68>)
 8005914:	601a      	str	r2, [r3, #0]
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200005cc 	.word	0x200005cc
 8005924:	20000658 	.word	0x20000658
 8005928:	2000066c 	.word	0x2000066c
 800592c:	20000688 	.word	0x20000688
 8005930:	2000069c 	.word	0x2000069c
 8005934:	200006b4 	.word	0x200006b4
 8005938:	20000680 	.word	0x20000680
 800593c:	20000684 	.word	0x20000684

08005940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005946:	e019      	b.n	800597c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005948:	f000 f9f0 	bl	8005d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594c:	4b10      	ldr	r3, [pc, #64]	; (8005990 <prvCheckTasksWaitingTermination+0x50>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fb8d 	bl	8005078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <prvCheckTasksWaitingTermination+0x54>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3b01      	subs	r3, #1
 8005964:	4a0b      	ldr	r2, [pc, #44]	; (8005994 <prvCheckTasksWaitingTermination+0x54>)
 8005966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <prvCheckTasksWaitingTermination+0x58>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <prvCheckTasksWaitingTermination+0x58>)
 8005970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005972:	f000 fa0b 	bl	8005d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f810 	bl	800599c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <prvCheckTasksWaitingTermination+0x58>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e1      	bne.n	8005948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	2000069c 	.word	0x2000069c
 8005994:	200006c8 	.word	0x200006c8
 8005998:	200006b0 	.word	0x200006b0

0800599c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fb48 	bl	8006048 <vPortFree>
				vPortFree( pxTCB );
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb45 	bl	8006048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059be:	e018      	b.n	80059f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d103      	bne.n	80059d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fb3c 	bl	8006048 <vPortFree>
	}
 80059d0:	e00f      	b.n	80059f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d00a      	beq.n	80059f2 <prvDeleteTCB+0x56>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <prvDeleteTCB+0x54>
	}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <prvResetNextTaskUnblockTime+0x38>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvResetNextTaskUnblockTime+0x3c>)
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a14:	e008      	b.n	8005a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a16:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <prvResetNextTaskUnblockTime+0x38>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <prvResetNextTaskUnblockTime+0x3c>)
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000680 	.word	0x20000680
 8005a38:	200006e8 	.word	0x200006e8

08005a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <xTaskGetSchedulerState+0x34>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	e008      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <xTaskGetSchedulerState+0x38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e001      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a62:	687b      	ldr	r3, [r7, #4]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	200006d4 	.word	0x200006d4
 8005a74:	200006f0 	.word	0x200006f0

08005a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff faf2 	bl	8005078 <uxListRemove>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43da      	mvns	r2, r3
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4013      	ands	r3, r2
 8005aae:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ab0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d10a      	bne.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x58>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	481a      	ldr	r0, [pc, #104]	; (8005b34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005aca:	f7ff fa7a 	bl	8004fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ace:	e026      	b.n	8005b1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d209      	bcs.n	8005afc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae8:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7ff fa87 	bl	8005008 <vListInsert>
}
 8005afa:	e010      	b.n	8005b1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7ff fa7d 	bl	8005008 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d202      	bcs.n	8005b1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6013      	str	r3, [r2, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200006cc 	.word	0x200006cc
 8005b2c:	200005c8 	.word	0x200005c8
 8005b30:	200006d0 	.word	0x200006d0
 8005b34:	200006b4 	.word	0x200006b4
 8005b38:	20000684 	.word	0x20000684
 8005b3c:	20000680 	.word	0x20000680
 8005b40:	200006e8 	.word	0x200006e8

08005b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b04      	subs	r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <pxPortInitialiseStack+0x54>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3b14      	subs	r3, #20
 8005b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b20      	subs	r3, #32
 8005b8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	08005b9d 	.word	0x08005b9d

08005b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <prvTaskExitError+0x54>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d00a      	beq.n	8005bc6 <prvTaskExitError+0x2a>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60fb      	str	r3, [r7, #12]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <prvTaskExitError+0x28>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60bb      	str	r3, [r7, #8]
}
 8005bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bda:	bf00      	nop
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0fc      	beq.n	8005bdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000018 	.word	0x20000018
	...

08005c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <pxCurrentTCBConst2>)
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	6808      	ldr	r0, [r1, #0]
 8005c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c0a:	f380 8809 	msr	PSP, r0
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8811 	msr	BASEPRI, r0
 8005c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c1e:	4770      	bx	lr

08005c20 <pxCurrentTCBConst2>:
 8005c20:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop

08005c28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005c28:	4806      	ldr	r0, [pc, #24]	; (8005c44 <prvPortStartFirstTask+0x1c>)
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f380 8808 	msr	MSP, r0
 8005c32:	b662      	cpsie	i
 8005c34:	b661      	cpsie	f
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	df00      	svc	0
 8005c40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c42:	bf00      	nop
 8005c44:	e000ed08 	.word	0xe000ed08

08005c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c4e:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <xPortStartScheduler+0xd0>)
 8005c50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	22ff      	movs	r2, #255	; 0xff
 8005c5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <xPortStartScheduler+0xd4>)
 8005c74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c76:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005c78:	2207      	movs	r2, #7
 8005c7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c7c:	e009      	b.n	8005c92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c7e:	4b28      	ldr	r3, [pc, #160]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005c86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d0ef      	beq.n	8005c7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1c3 0307 	rsb	r3, r3, #7
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d00a      	beq.n	8005cc0 <xPortStartScheduler+0x78>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60bb      	str	r3, [r7, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005cc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <xPortStartScheduler+0xd8>)
 8005cd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <xPortStartScheduler+0xdc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <xPortStartScheduler+0xdc>)
 8005ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <xPortStartScheduler+0xdc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <xPortStartScheduler+0xdc>)
 8005cf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cf6:	f000 f8b9 	bl	8005e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <xPortStartScheduler+0xe0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d00:	f7ff ff92 	bl	8005c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d04:	f7ff fd6a 	bl	80057dc <vTaskSwitchContext>
	prvTaskExitError();
 8005d08:	f7ff ff48 	bl	8005b9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	e000e400 	.word	0xe000e400
 8005d1c:	200006f4 	.word	0x200006f4
 8005d20:	200006f8 	.word	0x200006f8
 8005d24:	e000ed20 	.word	0xe000ed20
 8005d28:	20000018 	.word	0x20000018

08005d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	607b      	str	r3, [r7, #4]
}
 8005d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <vPortEnterCritical+0x58>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <vPortEnterCritical+0x58>)
 8005d4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d50:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <vPortEnterCritical+0x58>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10f      	bne.n	8005d78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <vPortEnterCritical+0x5c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	603b      	str	r3, [r7, #0]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <vPortEnterCritical+0x4a>
	}
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000018 	.word	0x20000018
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <vPortExitCritical+0x4c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <vPortExitCritical+0x24>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	607b      	str	r3, [r7, #4]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <vPortExitCritical+0x4c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4a08      	ldr	r2, [pc, #32]	; (8005dd8 <vPortExitCritical+0x4c>)
 8005db8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <vPortExitCritical+0x4c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <vPortExitCritical+0x42>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr
 8005dd8:	20000018 	.word	0x20000018
 8005ddc:	00000000 	.word	0x00000000

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005df0:	6010      	str	r0, [r2, #0]
 8005df2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005df6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005dfa:	f380 8811 	msr	BASEPRI, r0
 8005dfe:	f7ff fced 	bl	80057dc <vTaskSwitchContext>
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	6808      	ldr	r0, [r1, #0]
 8005e12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e16:	f380 8809 	msr	PSP, r0
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	4770      	bx	lr

08005e20 <pxCurrentTCBConst>:
 8005e20:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
}
 8005e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e42:	f7ff fc13 	bl	800566c <xTaskIncrementTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <xPortSysTickHandler+0x40>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f383 8811 	msr	BASEPRI, r3
}
 8005e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <vPortSetupTimerInterrupt+0x30>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <vPortSetupTimerInterrupt+0x34>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <vPortSetupTimerInterrupt+0x38>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <vPortSetupTimerInterrupt+0x3c>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	4a08      	ldr	r2, [pc, #32]	; (8005eac <vPortSetupTimerInterrupt+0x40>)
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e8e:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <vPortSetupTimerInterrupt+0x30>)
 8005e90:	2207      	movs	r2, #7
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	e000e010 	.word	0xe000e010
 8005ea0:	e000e018 	.word	0xe000e018
 8005ea4:	2000000c 	.word	0x2000000c
 8005ea8:	10624dd3 	.word	0x10624dd3
 8005eac:	e000e014 	.word	0xe000e014

08005eb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ebc:	f7ff fb2c 	bl	8005518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ec0:	4b5b      	ldr	r3, [pc, #364]	; (8006030 <pvPortMalloc+0x180>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec8:	f000 f920 	bl	800610c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ecc:	4b59      	ldr	r3, [pc, #356]	; (8006034 <pvPortMalloc+0x184>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 8093 	bne.w	8006000 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01d      	beq.n	8005f1c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	3308      	adds	r3, #8
 8005efa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <pvPortMalloc+0x6c>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	617b      	str	r3, [r7, #20]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d06e      	beq.n	8006000 <pvPortMalloc+0x150>
 8005f22:	4b45      	ldr	r3, [pc, #276]	; (8006038 <pvPortMalloc+0x188>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d869      	bhi.n	8006000 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f2c:	4b43      	ldr	r3, [pc, #268]	; (800603c <pvPortMalloc+0x18c>)
 8005f2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <pvPortMalloc+0x18c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f36:	e004      	b.n	8005f42 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d903      	bls.n	8005f54 <pvPortMalloc+0xa4>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f1      	bne.n	8005f38 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f54:	4b36      	ldr	r3, [pc, #216]	; (8006030 <pvPortMalloc+0x180>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d050      	beq.n	8006000 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2208      	movs	r2, #8
 8005f64:	4413      	add	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	2308      	movs	r3, #8
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d91f      	bls.n	8005fc0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <pvPortMalloc+0xf8>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	613b      	str	r3, [r7, #16]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f000 f908 	bl	80061d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <pvPortMalloc+0x188>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <pvPortMalloc+0x188>)
 8005fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fce:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <pvPortMalloc+0x188>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <pvPortMalloc+0x190>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d203      	bcs.n	8005fe2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <pvPortMalloc+0x188>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <pvPortMalloc+0x190>)
 8005fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <pvPortMalloc+0x184>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <pvPortMalloc+0x194>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a11      	ldr	r2, [pc, #68]	; (8006044 <pvPortMalloc+0x194>)
 8005ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006000:	f7ff fa98 	bl	8005534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <pvPortMalloc+0x174>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <pvPortMalloc+0x172>
	return pvReturn;
 8006024:	69fb      	ldr	r3, [r7, #28]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3728      	adds	r7, #40	; 0x28
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20002f04 	.word	0x20002f04
 8006034:	20002f18 	.word	0x20002f18
 8006038:	20002f08 	.word	0x20002f08
 800603c:	20002efc 	.word	0x20002efc
 8006040:	20002f0c 	.word	0x20002f0c
 8006044:	20002f10 	.word	0x20002f10

08006048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04d      	beq.n	80060f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800605a:	2308      	movs	r3, #8
 800605c:	425b      	negs	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b24      	ldr	r3, [pc, #144]	; (8006100 <vPortFree+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <vPortFree+0x44>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <vPortFree+0x62>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60bb      	str	r3, [r7, #8]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <vPortFree+0xb8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01e      	beq.n	80060f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11a      	bne.n	80060f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <vPortFree+0xb8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d0:	f7ff fa22 	bl	8005518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <vPortFree+0xbc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <vPortFree+0xbc>)
 80060e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060e2:	6938      	ldr	r0, [r7, #16]
 80060e4:	f000 f874 	bl	80061d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <vPortFree+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	4a06      	ldr	r2, [pc, #24]	; (8006108 <vPortFree+0xc0>)
 80060f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060f2:	f7ff fa1f 	bl	8005534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20002f18 	.word	0x20002f18
 8006104:	20002f08 	.word	0x20002f08
 8006108:	20002f14 	.word	0x20002f14

0800610c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006112:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006118:	4b27      	ldr	r3, [pc, #156]	; (80061b8 <prvHeapInit+0xac>)
 800611a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3307      	adds	r3, #7
 800612a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	4a1f      	ldr	r2, [pc, #124]	; (80061b8 <prvHeapInit+0xac>)
 800613c:	4413      	add	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <prvHeapInit+0xb0>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800614a:	4b1c      	ldr	r3, [pc, #112]	; (80061bc <prvHeapInit+0xb0>)
 800614c:	2200      	movs	r2, #0
 800614e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4413      	add	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006158:	2208      	movs	r2, #8
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <prvHeapInit+0xb4>)
 800616c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <prvHeapInit+0xb4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <prvHeapInit+0xb4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <prvHeapInit+0xb4>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <prvHeapInit+0xb8>)
 800619a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <prvHeapInit+0xbc>)
 80061a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <prvHeapInit+0xc0>)
 80061a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	200006fc 	.word	0x200006fc
 80061bc:	20002efc 	.word	0x20002efc
 80061c0:	20002f04 	.word	0x20002f04
 80061c4:	20002f0c 	.word	0x20002f0c
 80061c8:	20002f08 	.word	0x20002f08
 80061cc:	20002f18 	.word	0x20002f18

080061d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061d8:	4b27      	ldr	r3, [pc, #156]	; (8006278 <prvInsertBlockIntoFreeList+0xa8>)
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e002      	b.n	80061e4 <prvInsertBlockIntoFreeList+0x14>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d8f7      	bhi.n	80061de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4413      	add	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d108      	bne.n	8006212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	441a      	add	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d118      	bne.n	8006258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <prvInsertBlockIntoFreeList+0xac>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d00d      	beq.n	800624e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e008      	b.n	8006260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvInsertBlockIntoFreeList+0xac>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e003      	b.n	8006260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d002      	beq.n	800626e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr
 8006278:	20002efc 	.word	0x20002efc
 800627c:	20002f04 	.word	0x20002f04

08006280 <__cvt>:
 8006280:	2b00      	cmp	r3, #0
 8006282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006286:	461f      	mov	r7, r3
 8006288:	bfbb      	ittet	lt
 800628a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800628e:	461f      	movlt	r7, r3
 8006290:	2300      	movge	r3, #0
 8006292:	232d      	movlt	r3, #45	; 0x2d
 8006294:	b088      	sub	sp, #32
 8006296:	4614      	mov	r4, r2
 8006298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800629a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800629c:	7013      	strb	r3, [r2, #0]
 800629e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80062a4:	f023 0820 	bic.w	r8, r3, #32
 80062a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ac:	d005      	beq.n	80062ba <__cvt+0x3a>
 80062ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062b2:	d100      	bne.n	80062b6 <__cvt+0x36>
 80062b4:	3501      	adds	r5, #1
 80062b6:	2302      	movs	r3, #2
 80062b8:	e000      	b.n	80062bc <__cvt+0x3c>
 80062ba:	2303      	movs	r3, #3
 80062bc:	aa07      	add	r2, sp, #28
 80062be:	9204      	str	r2, [sp, #16]
 80062c0:	aa06      	add	r2, sp, #24
 80062c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062c6:	e9cd 3500 	strd	r3, r5, [sp]
 80062ca:	4622      	mov	r2, r4
 80062cc:	463b      	mov	r3, r7
 80062ce:	f001 f8c7 	bl	8007460 <_dtoa_r>
 80062d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062d6:	4606      	mov	r6, r0
 80062d8:	d102      	bne.n	80062e0 <__cvt+0x60>
 80062da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062dc:	07db      	lsls	r3, r3, #31
 80062de:	d522      	bpl.n	8006326 <__cvt+0xa6>
 80062e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e4:	eb06 0905 	add.w	r9, r6, r5
 80062e8:	d110      	bne.n	800630c <__cvt+0x8c>
 80062ea:	7833      	ldrb	r3, [r6, #0]
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	d10a      	bne.n	8006306 <__cvt+0x86>
 80062f0:	2200      	movs	r2, #0
 80062f2:	2300      	movs	r3, #0
 80062f4:	4620      	mov	r0, r4
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7fa fb56 	bl	80009a8 <__aeabi_dcmpeq>
 80062fc:	b918      	cbnz	r0, 8006306 <__cvt+0x86>
 80062fe:	f1c5 0501 	rsb	r5, r5, #1
 8006302:	f8ca 5000 	str.w	r5, [sl]
 8006306:	f8da 3000 	ldr.w	r3, [sl]
 800630a:	4499      	add	r9, r3
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	4620      	mov	r0, r4
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8006318:	b108      	cbz	r0, 800631e <__cvt+0x9e>
 800631a:	f8cd 901c 	str.w	r9, [sp, #28]
 800631e:	2230      	movs	r2, #48	; 0x30
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	454b      	cmp	r3, r9
 8006324:	d307      	bcc.n	8006336 <__cvt+0xb6>
 8006326:	4630      	mov	r0, r6
 8006328:	9b07      	ldr	r3, [sp, #28]
 800632a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800632c:	1b9b      	subs	r3, r3, r6
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	b008      	add	sp, #32
 8006332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006336:	1c59      	adds	r1, r3, #1
 8006338:	9107      	str	r1, [sp, #28]
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e7f0      	b.n	8006320 <__cvt+0xa0>

0800633e <__exponent>:
 800633e:	4603      	mov	r3, r0
 8006340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006342:	2900      	cmp	r1, #0
 8006344:	f803 2b02 	strb.w	r2, [r3], #2
 8006348:	bfb6      	itet	lt
 800634a:	222d      	movlt	r2, #45	; 0x2d
 800634c:	222b      	movge	r2, #43	; 0x2b
 800634e:	4249      	neglt	r1, r1
 8006350:	2909      	cmp	r1, #9
 8006352:	7042      	strb	r2, [r0, #1]
 8006354:	dd2a      	ble.n	80063ac <__exponent+0x6e>
 8006356:	f10d 0207 	add.w	r2, sp, #7
 800635a:	4617      	mov	r7, r2
 800635c:	260a      	movs	r6, #10
 800635e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006362:	4694      	mov	ip, r2
 8006364:	fb06 1415 	mls	r4, r6, r5, r1
 8006368:	3430      	adds	r4, #48	; 0x30
 800636a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800636e:	460c      	mov	r4, r1
 8006370:	2c63      	cmp	r4, #99	; 0x63
 8006372:	4629      	mov	r1, r5
 8006374:	f102 32ff 	add.w	r2, r2, #4294967295
 8006378:	dcf1      	bgt.n	800635e <__exponent+0x20>
 800637a:	3130      	adds	r1, #48	; 0x30
 800637c:	f1ac 0402 	sub.w	r4, ip, #2
 8006380:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006384:	4622      	mov	r2, r4
 8006386:	1c41      	adds	r1, r0, #1
 8006388:	42ba      	cmp	r2, r7
 800638a:	d30a      	bcc.n	80063a2 <__exponent+0x64>
 800638c:	f10d 0209 	add.w	r2, sp, #9
 8006390:	eba2 020c 	sub.w	r2, r2, ip
 8006394:	42bc      	cmp	r4, r7
 8006396:	bf88      	it	hi
 8006398:	2200      	movhi	r2, #0
 800639a:	4413      	add	r3, r2
 800639c:	1a18      	subs	r0, r3, r0
 800639e:	b003      	add	sp, #12
 80063a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063aa:	e7ed      	b.n	8006388 <__exponent+0x4a>
 80063ac:	2330      	movs	r3, #48	; 0x30
 80063ae:	3130      	adds	r1, #48	; 0x30
 80063b0:	7083      	strb	r3, [r0, #2]
 80063b2:	70c1      	strb	r1, [r0, #3]
 80063b4:	1d03      	adds	r3, r0, #4
 80063b6:	e7f1      	b.n	800639c <__exponent+0x5e>

080063b8 <_printf_float>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	b091      	sub	sp, #68	; 0x44
 80063be:	460c      	mov	r4, r1
 80063c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063c4:	4616      	mov	r6, r2
 80063c6:	461f      	mov	r7, r3
 80063c8:	4605      	mov	r5, r0
 80063ca:	f000 ff27 	bl	800721c <_localeconv_r>
 80063ce:	6803      	ldr	r3, [r0, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	9309      	str	r3, [sp, #36]	; 0x24
 80063d4:	f7f9 febc 	bl	8000150 <strlen>
 80063d8:	2300      	movs	r3, #0
 80063da:	930e      	str	r3, [sp, #56]	; 0x38
 80063dc:	f8d8 3000 	ldr.w	r3, [r8]
 80063e0:	900a      	str	r0, [sp, #40]	; 0x28
 80063e2:	3307      	adds	r3, #7
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	f103 0208 	add.w	r2, r3, #8
 80063ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063f0:	f8d4 b000 	ldr.w	fp, [r4]
 80063f4:	f8c8 2000 	str.w	r2, [r8]
 80063f8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80063fc:	4652      	mov	r2, sl
 80063fe:	4643      	mov	r3, r8
 8006400:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006404:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006408:	930b      	str	r3, [sp, #44]	; 0x2c
 800640a:	f04f 32ff 	mov.w	r2, #4294967295
 800640e:	4650      	mov	r0, sl
 8006410:	4b9c      	ldr	r3, [pc, #624]	; (8006684 <_printf_float+0x2cc>)
 8006412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006414:	f7fa fafa 	bl	8000a0c <__aeabi_dcmpun>
 8006418:	bb70      	cbnz	r0, 8006478 <_printf_float+0xc0>
 800641a:	f04f 32ff 	mov.w	r2, #4294967295
 800641e:	4650      	mov	r0, sl
 8006420:	4b98      	ldr	r3, [pc, #608]	; (8006684 <_printf_float+0x2cc>)
 8006422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006424:	f7fa fad4 	bl	80009d0 <__aeabi_dcmple>
 8006428:	bb30      	cbnz	r0, 8006478 <_printf_float+0xc0>
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	4650      	mov	r0, sl
 8006430:	4641      	mov	r1, r8
 8006432:	f7fa fac3 	bl	80009bc <__aeabi_dcmplt>
 8006436:	b110      	cbz	r0, 800643e <_printf_float+0x86>
 8006438:	232d      	movs	r3, #45	; 0x2d
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643e:	4a92      	ldr	r2, [pc, #584]	; (8006688 <_printf_float+0x2d0>)
 8006440:	4b92      	ldr	r3, [pc, #584]	; (800668c <_printf_float+0x2d4>)
 8006442:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006446:	bf94      	ite	ls
 8006448:	4690      	movls	r8, r2
 800644a:	4698      	movhi	r8, r3
 800644c:	2303      	movs	r3, #3
 800644e:	f04f 0a00 	mov.w	sl, #0
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	f02b 0304 	bic.w	r3, fp, #4
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	4633      	mov	r3, r6
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	9700      	str	r7, [sp, #0]
 8006462:	aa0f      	add	r2, sp, #60	; 0x3c
 8006464:	f000 f9d6 	bl	8006814 <_printf_common>
 8006468:	3001      	adds	r0, #1
 800646a:	f040 8090 	bne.w	800658e <_printf_float+0x1d6>
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
 8006472:	b011      	add	sp, #68	; 0x44
 8006474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006478:	4652      	mov	r2, sl
 800647a:	4643      	mov	r3, r8
 800647c:	4650      	mov	r0, sl
 800647e:	4641      	mov	r1, r8
 8006480:	f7fa fac4 	bl	8000a0c <__aeabi_dcmpun>
 8006484:	b148      	cbz	r0, 800649a <_printf_float+0xe2>
 8006486:	f1b8 0f00 	cmp.w	r8, #0
 800648a:	bfb8      	it	lt
 800648c:	232d      	movlt	r3, #45	; 0x2d
 800648e:	4a80      	ldr	r2, [pc, #512]	; (8006690 <_printf_float+0x2d8>)
 8006490:	bfb8      	it	lt
 8006492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006496:	4b7f      	ldr	r3, [pc, #508]	; (8006694 <_printf_float+0x2dc>)
 8006498:	e7d3      	b.n	8006442 <_printf_float+0x8a>
 800649a:	6863      	ldr	r3, [r4, #4]
 800649c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	d142      	bne.n	800652a <_printf_float+0x172>
 80064a4:	2306      	movs	r3, #6
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	9206      	str	r2, [sp, #24]
 80064ac:	aa0e      	add	r2, sp, #56	; 0x38
 80064ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80064b2:	aa0d      	add	r2, sp, #52	; 0x34
 80064b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064b8:	9203      	str	r2, [sp, #12]
 80064ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	4652      	mov	r2, sl
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	4628      	mov	r0, r5
 80064cc:	4643      	mov	r3, r8
 80064ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80064d0:	f7ff fed6 	bl	8006280 <__cvt>
 80064d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064d6:	4680      	mov	r8, r0
 80064d8:	2947      	cmp	r1, #71	; 0x47
 80064da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064dc:	d108      	bne.n	80064f0 <_printf_float+0x138>
 80064de:	1cc8      	adds	r0, r1, #3
 80064e0:	db02      	blt.n	80064e8 <_printf_float+0x130>
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	4299      	cmp	r1, r3
 80064e6:	dd40      	ble.n	800656a <_printf_float+0x1b2>
 80064e8:	f1a9 0902 	sub.w	r9, r9, #2
 80064ec:	fa5f f989 	uxtb.w	r9, r9
 80064f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064f4:	d81f      	bhi.n	8006536 <_printf_float+0x17e>
 80064f6:	464a      	mov	r2, r9
 80064f8:	3901      	subs	r1, #1
 80064fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064fe:	910d      	str	r1, [sp, #52]	; 0x34
 8006500:	f7ff ff1d 	bl	800633e <__exponent>
 8006504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006506:	4682      	mov	sl, r0
 8006508:	1813      	adds	r3, r2, r0
 800650a:	2a01      	cmp	r2, #1
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	dc02      	bgt.n	8006516 <_printf_float+0x15e>
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	07d2      	lsls	r2, r2, #31
 8006514:	d501      	bpl.n	800651a <_printf_float+0x162>
 8006516:	3301      	adds	r3, #1
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800651e:	2b00      	cmp	r3, #0
 8006520:	d09b      	beq.n	800645a <_printf_float+0xa2>
 8006522:	232d      	movs	r3, #45	; 0x2d
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006528:	e797      	b.n	800645a <_printf_float+0xa2>
 800652a:	2947      	cmp	r1, #71	; 0x47
 800652c:	d1bc      	bne.n	80064a8 <_printf_float+0xf0>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ba      	bne.n	80064a8 <_printf_float+0xf0>
 8006532:	2301      	movs	r3, #1
 8006534:	e7b7      	b.n	80064a6 <_printf_float+0xee>
 8006536:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800653a:	d118      	bne.n	800656e <_printf_float+0x1b6>
 800653c:	2900      	cmp	r1, #0
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	dd0b      	ble.n	800655a <_printf_float+0x1a2>
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	b913      	cbnz	r3, 800654c <_printf_float+0x194>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d502      	bpl.n	8006552 <_printf_float+0x19a>
 800654c:	3301      	adds	r3, #1
 800654e:	440b      	add	r3, r1
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	f04f 0a00 	mov.w	sl, #0
 8006556:	65a1      	str	r1, [r4, #88]	; 0x58
 8006558:	e7df      	b.n	800651a <_printf_float+0x162>
 800655a:	b913      	cbnz	r3, 8006562 <_printf_float+0x1aa>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	07d2      	lsls	r2, r2, #31
 8006560:	d501      	bpl.n	8006566 <_printf_float+0x1ae>
 8006562:	3302      	adds	r3, #2
 8006564:	e7f4      	b.n	8006550 <_printf_float+0x198>
 8006566:	2301      	movs	r3, #1
 8006568:	e7f2      	b.n	8006550 <_printf_float+0x198>
 800656a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006570:	4299      	cmp	r1, r3
 8006572:	db05      	blt.n	8006580 <_printf_float+0x1c8>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	6121      	str	r1, [r4, #16]
 8006578:	07d8      	lsls	r0, r3, #31
 800657a:	d5ea      	bpl.n	8006552 <_printf_float+0x19a>
 800657c:	1c4b      	adds	r3, r1, #1
 800657e:	e7e7      	b.n	8006550 <_printf_float+0x198>
 8006580:	2900      	cmp	r1, #0
 8006582:	bfcc      	ite	gt
 8006584:	2201      	movgt	r2, #1
 8006586:	f1c1 0202 	rsble	r2, r1, #2
 800658a:	4413      	add	r3, r2
 800658c:	e7e0      	b.n	8006550 <_printf_float+0x198>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	055a      	lsls	r2, r3, #21
 8006592:	d407      	bmi.n	80065a4 <_printf_float+0x1ec>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	4642      	mov	r2, r8
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	d12b      	bne.n	80065fa <_printf_float+0x242>
 80065a2:	e764      	b.n	800646e <_printf_float+0xb6>
 80065a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065a8:	f240 80dd 	bls.w	8006766 <_printf_float+0x3ae>
 80065ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f7fa f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d033      	beq.n	8006624 <_printf_float+0x26c>
 80065bc:	2301      	movs	r3, #1
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	4a35      	ldr	r2, [pc, #212]	; (8006698 <_printf_float+0x2e0>)
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af51 	beq.w	800646e <_printf_float+0xb6>
 80065cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065d0:	429a      	cmp	r2, r3
 80065d2:	db02      	blt.n	80065da <_printf_float+0x222>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	07d8      	lsls	r0, r3, #31
 80065d8:	d50f      	bpl.n	80065fa <_printf_float+0x242>
 80065da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f af42 	beq.w	800646e <_printf_float+0xb6>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	f104 091a 	add.w	r9, r4, #26
 80065f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f4:	3b01      	subs	r3, #1
 80065f6:	4543      	cmp	r3, r8
 80065f8:	dc09      	bgt.n	800660e <_printf_float+0x256>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	079b      	lsls	r3, r3, #30
 80065fe:	f100 8104 	bmi.w	800680a <_printf_float+0x452>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006606:	4298      	cmp	r0, r3
 8006608:	bfb8      	it	lt
 800660a:	4618      	movlt	r0, r3
 800660c:	e731      	b.n	8006472 <_printf_float+0xba>
 800660e:	2301      	movs	r3, #1
 8006610:	464a      	mov	r2, r9
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	f43f af28 	beq.w	800646e <_printf_float+0xb6>
 800661e:	f108 0801 	add.w	r8, r8, #1
 8006622:	e7e6      	b.n	80065f2 <_printf_float+0x23a>
 8006624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006626:	2b00      	cmp	r3, #0
 8006628:	dc38      	bgt.n	800669c <_printf_float+0x2e4>
 800662a:	2301      	movs	r3, #1
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	4a19      	ldr	r2, [pc, #100]	; (8006698 <_printf_float+0x2e0>)
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f af1a 	beq.w	800646e <_printf_float+0xb6>
 800663a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800663e:	4313      	orrs	r3, r2
 8006640:	d102      	bne.n	8006648 <_printf_float+0x290>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	07d9      	lsls	r1, r3, #31
 8006646:	d5d8      	bpl.n	80065fa <_printf_float+0x242>
 8006648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f af0b 	beq.w	800646e <_printf_float+0xb6>
 8006658:	f04f 0900 	mov.w	r9, #0
 800665c:	f104 0a1a 	add.w	sl, r4, #26
 8006660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006662:	425b      	negs	r3, r3
 8006664:	454b      	cmp	r3, r9
 8006666:	dc01      	bgt.n	800666c <_printf_float+0x2b4>
 8006668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800666a:	e794      	b.n	8006596 <_printf_float+0x1de>
 800666c:	2301      	movs	r3, #1
 800666e:	4652      	mov	r2, sl
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f aef9 	beq.w	800646e <_printf_float+0xb6>
 800667c:	f109 0901 	add.w	r9, r9, #1
 8006680:	e7ee      	b.n	8006660 <_printf_float+0x2a8>
 8006682:	bf00      	nop
 8006684:	7fefffff 	.word	0x7fefffff
 8006688:	0800aaee 	.word	0x0800aaee
 800668c:	0800aaf2 	.word	0x0800aaf2
 8006690:	0800aaf6 	.word	0x0800aaf6
 8006694:	0800aafa 	.word	0x0800aafa
 8006698:	0800aafe 	.word	0x0800aafe
 800669c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800669e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a0:	429a      	cmp	r2, r3
 80066a2:	bfa8      	it	ge
 80066a4:	461a      	movge	r2, r3
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	4691      	mov	r9, r2
 80066aa:	dc37      	bgt.n	800671c <_printf_float+0x364>
 80066ac:	f04f 0b00 	mov.w	fp, #0
 80066b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066b4:	f104 021a 	add.w	r2, r4, #26
 80066b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066bc:	ebaa 0309 	sub.w	r3, sl, r9
 80066c0:	455b      	cmp	r3, fp
 80066c2:	dc33      	bgt.n	800672c <_printf_float+0x374>
 80066c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066c8:	429a      	cmp	r2, r3
 80066ca:	db3b      	blt.n	8006744 <_printf_float+0x38c>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	07da      	lsls	r2, r3, #31
 80066d0:	d438      	bmi.n	8006744 <_printf_float+0x38c>
 80066d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80066d6:	eba2 0903 	sub.w	r9, r2, r3
 80066da:	eba2 020a 	sub.w	r2, r2, sl
 80066de:	4591      	cmp	r9, r2
 80066e0:	bfa8      	it	ge
 80066e2:	4691      	movge	r9, r2
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	dc34      	bgt.n	8006754 <_printf_float+0x39c>
 80066ea:	f04f 0800 	mov.w	r8, #0
 80066ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066f2:	f104 0a1a 	add.w	sl, r4, #26
 80066f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	eba3 0309 	sub.w	r3, r3, r9
 8006700:	4543      	cmp	r3, r8
 8006702:	f77f af7a 	ble.w	80065fa <_printf_float+0x242>
 8006706:	2301      	movs	r3, #1
 8006708:	4652      	mov	r2, sl
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	f43f aeac 	beq.w	800646e <_printf_float+0xb6>
 8006716:	f108 0801 	add.w	r8, r8, #1
 800671a:	e7ec      	b.n	80066f6 <_printf_float+0x33e>
 800671c:	4613      	mov	r3, r2
 800671e:	4631      	mov	r1, r6
 8006720:	4642      	mov	r2, r8
 8006722:	4628      	mov	r0, r5
 8006724:	47b8      	blx	r7
 8006726:	3001      	adds	r0, #1
 8006728:	d1c0      	bne.n	80066ac <_printf_float+0x2f4>
 800672a:	e6a0      	b.n	800646e <_printf_float+0xb6>
 800672c:	2301      	movs	r3, #1
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	920b      	str	r2, [sp, #44]	; 0x2c
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f ae99 	beq.w	800646e <_printf_float+0xb6>
 800673c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800673e:	f10b 0b01 	add.w	fp, fp, #1
 8006742:	e7b9      	b.n	80066b8 <_printf_float+0x300>
 8006744:	4631      	mov	r1, r6
 8006746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	d1bf      	bne.n	80066d2 <_printf_float+0x31a>
 8006752:	e68c      	b.n	800646e <_printf_float+0xb6>
 8006754:	464b      	mov	r3, r9
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	eb08 020a 	add.w	r2, r8, sl
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d1c2      	bne.n	80066ea <_printf_float+0x332>
 8006764:	e683      	b.n	800646e <_printf_float+0xb6>
 8006766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006768:	2a01      	cmp	r2, #1
 800676a:	dc01      	bgt.n	8006770 <_printf_float+0x3b8>
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d539      	bpl.n	80067e4 <_printf_float+0x42c>
 8006770:	2301      	movs	r3, #1
 8006772:	4642      	mov	r2, r8
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f ae77 	beq.w	800646e <_printf_float+0xb6>
 8006780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f ae6f 	beq.w	800646e <_printf_float+0xb6>
 8006790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006794:	2200      	movs	r2, #0
 8006796:	2300      	movs	r3, #0
 8006798:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800679c:	f7fa f904 	bl	80009a8 <__aeabi_dcmpeq>
 80067a0:	b9d8      	cbnz	r0, 80067da <_printf_float+0x422>
 80067a2:	f109 33ff 	add.w	r3, r9, #4294967295
 80067a6:	f108 0201 	add.w	r2, r8, #1
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	d10e      	bne.n	80067d2 <_printf_float+0x41a>
 80067b4:	e65b      	b.n	800646e <_printf_float+0xb6>
 80067b6:	2301      	movs	r3, #1
 80067b8:	464a      	mov	r2, r9
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae54 	beq.w	800646e <_printf_float+0xb6>
 80067c6:	f108 0801 	add.w	r8, r8, #1
 80067ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067cc:	3b01      	subs	r3, #1
 80067ce:	4543      	cmp	r3, r8
 80067d0:	dcf1      	bgt.n	80067b6 <_printf_float+0x3fe>
 80067d2:	4653      	mov	r3, sl
 80067d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067d8:	e6de      	b.n	8006598 <_printf_float+0x1e0>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	f104 091a 	add.w	r9, r4, #26
 80067e2:	e7f2      	b.n	80067ca <_printf_float+0x412>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4642      	mov	r2, r8
 80067e8:	e7df      	b.n	80067aa <_printf_float+0x3f2>
 80067ea:	2301      	movs	r3, #1
 80067ec:	464a      	mov	r2, r9
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f ae3a 	beq.w	800646e <_printf_float+0xb6>
 80067fa:	f108 0801 	add.w	r8, r8, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	4543      	cmp	r3, r8
 8006806:	dcf0      	bgt.n	80067ea <_printf_float+0x432>
 8006808:	e6fb      	b.n	8006602 <_printf_float+0x24a>
 800680a:	f04f 0800 	mov.w	r8, #0
 800680e:	f104 0919 	add.w	r9, r4, #25
 8006812:	e7f4      	b.n	80067fe <_printf_float+0x446>

08006814 <_printf_common>:
 8006814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	4616      	mov	r6, r2
 800681a:	4699      	mov	r9, r3
 800681c:	688a      	ldr	r2, [r1, #8]
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	4607      	mov	r7, r0
 8006822:	4293      	cmp	r3, r2
 8006824:	bfb8      	it	lt
 8006826:	4613      	movlt	r3, r2
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800682e:	460c      	mov	r4, r1
 8006830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006834:	b10a      	cbz	r2, 800683a <_printf_common+0x26>
 8006836:	3301      	adds	r3, #1
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	0699      	lsls	r1, r3, #26
 800683e:	bf42      	ittt	mi
 8006840:	6833      	ldrmi	r3, [r6, #0]
 8006842:	3302      	addmi	r3, #2
 8006844:	6033      	strmi	r3, [r6, #0]
 8006846:	6825      	ldr	r5, [r4, #0]
 8006848:	f015 0506 	ands.w	r5, r5, #6
 800684c:	d106      	bne.n	800685c <_printf_common+0x48>
 800684e:	f104 0a19 	add.w	sl, r4, #25
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	6832      	ldr	r2, [r6, #0]
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	42ab      	cmp	r3, r5
 800685a:	dc2b      	bgt.n	80068b4 <_printf_common+0xa0>
 800685c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006860:	1e13      	subs	r3, r2, #0
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	bf18      	it	ne
 8006866:	2301      	movne	r3, #1
 8006868:	0692      	lsls	r2, r2, #26
 800686a:	d430      	bmi.n	80068ce <_printf_common+0xba>
 800686c:	4649      	mov	r1, r9
 800686e:	4638      	mov	r0, r7
 8006870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d023      	beq.n	80068c2 <_printf_common+0xae>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	6922      	ldr	r2, [r4, #16]
 800687e:	f003 0306 	and.w	r3, r3, #6
 8006882:	2b04      	cmp	r3, #4
 8006884:	bf14      	ite	ne
 8006886:	2500      	movne	r5, #0
 8006888:	6833      	ldreq	r3, [r6, #0]
 800688a:	f04f 0600 	mov.w	r6, #0
 800688e:	bf08      	it	eq
 8006890:	68e5      	ldreq	r5, [r4, #12]
 8006892:	f104 041a 	add.w	r4, r4, #26
 8006896:	bf08      	it	eq
 8006898:	1aed      	subeq	r5, r5, r3
 800689a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800689e:	bf08      	it	eq
 80068a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a4:	4293      	cmp	r3, r2
 80068a6:	bfc4      	itt	gt
 80068a8:	1a9b      	subgt	r3, r3, r2
 80068aa:	18ed      	addgt	r5, r5, r3
 80068ac:	42b5      	cmp	r5, r6
 80068ae:	d11a      	bne.n	80068e6 <_printf_common+0xd2>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e008      	b.n	80068c6 <_printf_common+0xb2>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4652      	mov	r2, sl
 80068b8:	4649      	mov	r1, r9
 80068ba:	4638      	mov	r0, r7
 80068bc:	47c0      	blx	r8
 80068be:	3001      	adds	r0, #1
 80068c0:	d103      	bne.n	80068ca <_printf_common+0xb6>
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	3501      	adds	r5, #1
 80068cc:	e7c1      	b.n	8006852 <_printf_common+0x3e>
 80068ce:	2030      	movs	r0, #48	; 0x30
 80068d0:	18e1      	adds	r1, r4, r3
 80068d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068dc:	4422      	add	r2, r4
 80068de:	3302      	adds	r3, #2
 80068e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e4:	e7c2      	b.n	800686c <_printf_common+0x58>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4622      	mov	r2, r4
 80068ea:	4649      	mov	r1, r9
 80068ec:	4638      	mov	r0, r7
 80068ee:	47c0      	blx	r8
 80068f0:	3001      	adds	r0, #1
 80068f2:	d0e6      	beq.n	80068c2 <_printf_common+0xae>
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7d9      	b.n	80068ac <_printf_common+0x98>

080068f8 <_printf_i>:
 80068f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	7e0f      	ldrb	r7, [r1, #24]
 80068fe:	4691      	mov	r9, r2
 8006900:	2f78      	cmp	r7, #120	; 0x78
 8006902:	4680      	mov	r8, r0
 8006904:	460c      	mov	r4, r1
 8006906:	469a      	mov	sl, r3
 8006908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800690a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800690e:	d807      	bhi.n	8006920 <_printf_i+0x28>
 8006910:	2f62      	cmp	r7, #98	; 0x62
 8006912:	d80a      	bhi.n	800692a <_printf_i+0x32>
 8006914:	2f00      	cmp	r7, #0
 8006916:	f000 80d5 	beq.w	8006ac4 <_printf_i+0x1cc>
 800691a:	2f58      	cmp	r7, #88	; 0x58
 800691c:	f000 80c1 	beq.w	8006aa2 <_printf_i+0x1aa>
 8006920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006928:	e03a      	b.n	80069a0 <_printf_i+0xa8>
 800692a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800692e:	2b15      	cmp	r3, #21
 8006930:	d8f6      	bhi.n	8006920 <_printf_i+0x28>
 8006932:	a101      	add	r1, pc, #4	; (adr r1, 8006938 <_printf_i+0x40>)
 8006934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006938:	08006991 	.word	0x08006991
 800693c:	080069a5 	.word	0x080069a5
 8006940:	08006921 	.word	0x08006921
 8006944:	08006921 	.word	0x08006921
 8006948:	08006921 	.word	0x08006921
 800694c:	08006921 	.word	0x08006921
 8006950:	080069a5 	.word	0x080069a5
 8006954:	08006921 	.word	0x08006921
 8006958:	08006921 	.word	0x08006921
 800695c:	08006921 	.word	0x08006921
 8006960:	08006921 	.word	0x08006921
 8006964:	08006aab 	.word	0x08006aab
 8006968:	080069d1 	.word	0x080069d1
 800696c:	08006a65 	.word	0x08006a65
 8006970:	08006921 	.word	0x08006921
 8006974:	08006921 	.word	0x08006921
 8006978:	08006acd 	.word	0x08006acd
 800697c:	08006921 	.word	0x08006921
 8006980:	080069d1 	.word	0x080069d1
 8006984:	08006921 	.word	0x08006921
 8006988:	08006921 	.word	0x08006921
 800698c:	08006a6d 	.word	0x08006a6d
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	602a      	str	r2, [r5, #0]
 8006998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800699c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0a0      	b.n	8006ae6 <_printf_i+0x1ee>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	0607      	lsls	r7, r0, #24
 80069aa:	f103 0104 	add.w	r1, r3, #4
 80069ae:	6029      	str	r1, [r5, #0]
 80069b0:	d501      	bpl.n	80069b6 <_printf_i+0xbe>
 80069b2:	681e      	ldr	r6, [r3, #0]
 80069b4:	e003      	b.n	80069be <_printf_i+0xc6>
 80069b6:	0646      	lsls	r6, r0, #25
 80069b8:	d5fb      	bpl.n	80069b2 <_printf_i+0xba>
 80069ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069be:	2e00      	cmp	r6, #0
 80069c0:	da03      	bge.n	80069ca <_printf_i+0xd2>
 80069c2:	232d      	movs	r3, #45	; 0x2d
 80069c4:	4276      	negs	r6, r6
 80069c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ca:	230a      	movs	r3, #10
 80069cc:	4859      	ldr	r0, [pc, #356]	; (8006b34 <_printf_i+0x23c>)
 80069ce:	e012      	b.n	80069f6 <_printf_i+0xfe>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1d19      	adds	r1, r3, #4
 80069d6:	6029      	str	r1, [r5, #0]
 80069d8:	0605      	lsls	r5, r0, #24
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0xe8>
 80069dc:	681e      	ldr	r6, [r3, #0]
 80069de:	e002      	b.n	80069e6 <_printf_i+0xee>
 80069e0:	0641      	lsls	r1, r0, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0xe4>
 80069e4:	881e      	ldrh	r6, [r3, #0]
 80069e6:	2f6f      	cmp	r7, #111	; 0x6f
 80069e8:	bf0c      	ite	eq
 80069ea:	2308      	moveq	r3, #8
 80069ec:	230a      	movne	r3, #10
 80069ee:	4851      	ldr	r0, [pc, #324]	; (8006b34 <_printf_i+0x23c>)
 80069f0:	2100      	movs	r1, #0
 80069f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f6:	6865      	ldr	r5, [r4, #4]
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	bfa8      	it	ge
 80069fc:	6821      	ldrge	r1, [r4, #0]
 80069fe:	60a5      	str	r5, [r4, #8]
 8006a00:	bfa4      	itt	ge
 8006a02:	f021 0104 	bicge.w	r1, r1, #4
 8006a06:	6021      	strge	r1, [r4, #0]
 8006a08:	b90e      	cbnz	r6, 8006a0e <_printf_i+0x116>
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	d04b      	beq.n	8006aa6 <_printf_i+0x1ae>
 8006a0e:	4615      	mov	r5, r2
 8006a10:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a14:	fb03 6711 	mls	r7, r3, r1, r6
 8006a18:	5dc7      	ldrb	r7, [r0, r7]
 8006a1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a1e:	4637      	mov	r7, r6
 8006a20:	42bb      	cmp	r3, r7
 8006a22:	460e      	mov	r6, r1
 8006a24:	d9f4      	bls.n	8006a10 <_printf_i+0x118>
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d10b      	bne.n	8006a42 <_printf_i+0x14a>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	07de      	lsls	r6, r3, #31
 8006a2e:	d508      	bpl.n	8006a42 <_printf_i+0x14a>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	6861      	ldr	r1, [r4, #4]
 8006a34:	4299      	cmp	r1, r3
 8006a36:	bfde      	ittt	le
 8006a38:	2330      	movle	r3, #48	; 0x30
 8006a3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a42:	1b52      	subs	r2, r2, r5
 8006a44:	6122      	str	r2, [r4, #16]
 8006a46:	464b      	mov	r3, r9
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f8cd a000 	str.w	sl, [sp]
 8006a50:	aa03      	add	r2, sp, #12
 8006a52:	f7ff fedf 	bl	8006814 <_printf_common>
 8006a56:	3001      	adds	r0, #1
 8006a58:	d14a      	bne.n	8006af0 <_printf_i+0x1f8>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	b004      	add	sp, #16
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	f043 0320 	orr.w	r3, r3, #32
 8006a6a:	6023      	str	r3, [r4, #0]
 8006a6c:	2778      	movs	r7, #120	; 0x78
 8006a6e:	4832      	ldr	r0, [pc, #200]	; (8006b38 <_printf_i+0x240>)
 8006a70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	6829      	ldr	r1, [r5, #0]
 8006a78:	061f      	lsls	r7, r3, #24
 8006a7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a7e:	d402      	bmi.n	8006a86 <_printf_i+0x18e>
 8006a80:	065f      	lsls	r7, r3, #25
 8006a82:	bf48      	it	mi
 8006a84:	b2b6      	uxthmi	r6, r6
 8006a86:	07df      	lsls	r7, r3, #31
 8006a88:	bf48      	it	mi
 8006a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8e:	6029      	str	r1, [r5, #0]
 8006a90:	bf48      	it	mi
 8006a92:	6023      	strmi	r3, [r4, #0]
 8006a94:	b91e      	cbnz	r6, 8006a9e <_printf_i+0x1a6>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	f023 0320 	bic.w	r3, r3, #32
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	e7a6      	b.n	80069f0 <_printf_i+0xf8>
 8006aa2:	4824      	ldr	r0, [pc, #144]	; (8006b34 <_printf_i+0x23c>)
 8006aa4:	e7e4      	b.n	8006a70 <_printf_i+0x178>
 8006aa6:	4615      	mov	r5, r2
 8006aa8:	e7bd      	b.n	8006a26 <_printf_i+0x12e>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	6826      	ldr	r6, [r4, #0]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6961      	ldr	r1, [r4, #20]
 8006ab2:	6028      	str	r0, [r5, #0]
 8006ab4:	0635      	lsls	r5, r6, #24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	d501      	bpl.n	8006abe <_printf_i+0x1c6>
 8006aba:	6019      	str	r1, [r3, #0]
 8006abc:	e002      	b.n	8006ac4 <_printf_i+0x1cc>
 8006abe:	0670      	lsls	r0, r6, #25
 8006ac0:	d5fb      	bpl.n	8006aba <_printf_i+0x1c2>
 8006ac2:	8019      	strh	r1, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4615      	mov	r5, r2
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	e7bc      	b.n	8006a46 <_printf_i+0x14e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	1d1a      	adds	r2, r3, #4
 8006ad2:	602a      	str	r2, [r5, #0]
 8006ad4:	681d      	ldr	r5, [r3, #0]
 8006ad6:	6862      	ldr	r2, [r4, #4]
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 fc16 	bl	800730a <memchr>
 8006ade:	b108      	cbz	r0, 8006ae4 <_printf_i+0x1ec>
 8006ae0:	1b40      	subs	r0, r0, r5
 8006ae2:	6060      	str	r0, [r4, #4]
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aee:	e7aa      	b.n	8006a46 <_printf_i+0x14e>
 8006af0:	462a      	mov	r2, r5
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	47d0      	blx	sl
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0ad      	beq.n	8006a5a <_printf_i+0x162>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	079b      	lsls	r3, r3, #30
 8006b02:	d413      	bmi.n	8006b2c <_printf_i+0x234>
 8006b04:	68e0      	ldr	r0, [r4, #12]
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	4298      	cmp	r0, r3
 8006b0a:	bfb8      	it	lt
 8006b0c:	4618      	movlt	r0, r3
 8006b0e:	e7a6      	b.n	8006a5e <_printf_i+0x166>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4632      	mov	r2, r6
 8006b14:	4649      	mov	r1, r9
 8006b16:	4640      	mov	r0, r8
 8006b18:	47d0      	blx	sl
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d09d      	beq.n	8006a5a <_printf_i+0x162>
 8006b1e:	3501      	adds	r5, #1
 8006b20:	68e3      	ldr	r3, [r4, #12]
 8006b22:	9903      	ldr	r1, [sp, #12]
 8006b24:	1a5b      	subs	r3, r3, r1
 8006b26:	42ab      	cmp	r3, r5
 8006b28:	dcf2      	bgt.n	8006b10 <_printf_i+0x218>
 8006b2a:	e7eb      	b.n	8006b04 <_printf_i+0x20c>
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	f104 0619 	add.w	r6, r4, #25
 8006b32:	e7f5      	b.n	8006b20 <_printf_i+0x228>
 8006b34:	0800ab00 	.word	0x0800ab00
 8006b38:	0800ab11 	.word	0x0800ab11

08006b3c <_scanf_float>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	b087      	sub	sp, #28
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	688b      	ldr	r3, [r1, #8]
 8006b46:	4617      	mov	r7, r2
 8006b48:	1e5a      	subs	r2, r3, #1
 8006b4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b4e:	bf85      	ittet	hi
 8006b50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b54:	195b      	addhi	r3, r3, r5
 8006b56:	2300      	movls	r3, #0
 8006b58:	9302      	strhi	r3, [sp, #8]
 8006b5a:	bf88      	it	hi
 8006b5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b60:	468b      	mov	fp, r1
 8006b62:	f04f 0500 	mov.w	r5, #0
 8006b66:	bf8c      	ite	hi
 8006b68:	608b      	strhi	r3, [r1, #8]
 8006b6a:	9302      	strls	r3, [sp, #8]
 8006b6c:	680b      	ldr	r3, [r1, #0]
 8006b6e:	4680      	mov	r8, r0
 8006b70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b74:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b78:	460c      	mov	r4, r1
 8006b7a:	465e      	mov	r6, fp
 8006b7c:	46aa      	mov	sl, r5
 8006b7e:	46a9      	mov	r9, r5
 8006b80:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b84:	9501      	str	r5, [sp, #4]
 8006b86:	68a2      	ldr	r2, [r4, #8]
 8006b88:	b152      	cbz	r2, 8006ba0 <_scanf_float+0x64>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b4e      	cmp	r3, #78	; 0x4e
 8006b90:	d864      	bhi.n	8006c5c <_scanf_float+0x120>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d83c      	bhi.n	8006c10 <_scanf_float+0xd4>
 8006b96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006b9a:	b2c8      	uxtb	r0, r1
 8006b9c:	280e      	cmp	r0, #14
 8006b9e:	d93a      	bls.n	8006c16 <_scanf_float+0xda>
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	d003      	beq.n	8006bae <_scanf_float+0x72>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bb2:	f1ba 0f01 	cmp.w	sl, #1
 8006bb6:	f200 8113 	bhi.w	8006de0 <_scanf_float+0x2a4>
 8006bba:	455e      	cmp	r6, fp
 8006bbc:	f200 8105 	bhi.w	8006dca <_scanf_float+0x28e>
 8006bc0:	2501      	movs	r5, #1
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	b007      	add	sp, #28
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006bce:	2a0d      	cmp	r2, #13
 8006bd0:	d8e6      	bhi.n	8006ba0 <_scanf_float+0x64>
 8006bd2:	a101      	add	r1, pc, #4	; (adr r1, 8006bd8 <_scanf_float+0x9c>)
 8006bd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006bd8:	08006d17 	.word	0x08006d17
 8006bdc:	08006ba1 	.word	0x08006ba1
 8006be0:	08006ba1 	.word	0x08006ba1
 8006be4:	08006ba1 	.word	0x08006ba1
 8006be8:	08006d77 	.word	0x08006d77
 8006bec:	08006d4f 	.word	0x08006d4f
 8006bf0:	08006ba1 	.word	0x08006ba1
 8006bf4:	08006ba1 	.word	0x08006ba1
 8006bf8:	08006d25 	.word	0x08006d25
 8006bfc:	08006ba1 	.word	0x08006ba1
 8006c00:	08006ba1 	.word	0x08006ba1
 8006c04:	08006ba1 	.word	0x08006ba1
 8006c08:	08006ba1 	.word	0x08006ba1
 8006c0c:	08006cdd 	.word	0x08006cdd
 8006c10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c14:	e7db      	b.n	8006bce <_scanf_float+0x92>
 8006c16:	290e      	cmp	r1, #14
 8006c18:	d8c2      	bhi.n	8006ba0 <_scanf_float+0x64>
 8006c1a:	a001      	add	r0, pc, #4	; (adr r0, 8006c20 <_scanf_float+0xe4>)
 8006c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c20:	08006ccf 	.word	0x08006ccf
 8006c24:	08006ba1 	.word	0x08006ba1
 8006c28:	08006ccf 	.word	0x08006ccf
 8006c2c:	08006d63 	.word	0x08006d63
 8006c30:	08006ba1 	.word	0x08006ba1
 8006c34:	08006c7d 	.word	0x08006c7d
 8006c38:	08006cb9 	.word	0x08006cb9
 8006c3c:	08006cb9 	.word	0x08006cb9
 8006c40:	08006cb9 	.word	0x08006cb9
 8006c44:	08006cb9 	.word	0x08006cb9
 8006c48:	08006cb9 	.word	0x08006cb9
 8006c4c:	08006cb9 	.word	0x08006cb9
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006cb9 	.word	0x08006cb9
 8006c58:	08006cb9 	.word	0x08006cb9
 8006c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8006c5e:	d809      	bhi.n	8006c74 <_scanf_float+0x138>
 8006c60:	2b60      	cmp	r3, #96	; 0x60
 8006c62:	d8b2      	bhi.n	8006bca <_scanf_float+0x8e>
 8006c64:	2b54      	cmp	r3, #84	; 0x54
 8006c66:	d077      	beq.n	8006d58 <_scanf_float+0x21c>
 8006c68:	2b59      	cmp	r3, #89	; 0x59
 8006c6a:	d199      	bne.n	8006ba0 <_scanf_float+0x64>
 8006c6c:	2d07      	cmp	r5, #7
 8006c6e:	d197      	bne.n	8006ba0 <_scanf_float+0x64>
 8006c70:	2508      	movs	r5, #8
 8006c72:	e029      	b.n	8006cc8 <_scanf_float+0x18c>
 8006c74:	2b74      	cmp	r3, #116	; 0x74
 8006c76:	d06f      	beq.n	8006d58 <_scanf_float+0x21c>
 8006c78:	2b79      	cmp	r3, #121	; 0x79
 8006c7a:	e7f6      	b.n	8006c6a <_scanf_float+0x12e>
 8006c7c:	6821      	ldr	r1, [r4, #0]
 8006c7e:	05c8      	lsls	r0, r1, #23
 8006c80:	d51a      	bpl.n	8006cb8 <_scanf_float+0x17c>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c88:	6021      	str	r1, [r4, #0]
 8006c8a:	f109 0901 	add.w	r9, r9, #1
 8006c8e:	b11b      	cbz	r3, 8006c98 <_scanf_float+0x15c>
 8006c90:	3b01      	subs	r3, #1
 8006c92:	3201      	adds	r2, #1
 8006c94:	9302      	str	r3, [sp, #8]
 8006c96:	60a2      	str	r2, [r4, #8]
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	f340 8084 	ble.w	8006db8 <_scanf_float+0x27c>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	e766      	b.n	8006b86 <_scanf_float+0x4a>
 8006cb8:	eb1a 0f05 	cmn.w	sl, r5
 8006cbc:	f47f af70 	bne.w	8006ba0 <_scanf_float+0x64>
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	f806 3b01 	strb.w	r3, [r6], #1
 8006ccc:	e7e4      	b.n	8006c98 <_scanf_float+0x15c>
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	0610      	lsls	r0, r2, #24
 8006cd2:	f57f af65 	bpl.w	8006ba0 <_scanf_float+0x64>
 8006cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cda:	e7f4      	b.n	8006cc6 <_scanf_float+0x18a>
 8006cdc:	f1ba 0f00 	cmp.w	sl, #0
 8006ce0:	d10e      	bne.n	8006d00 <_scanf_float+0x1c4>
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	d10e      	bne.n	8006d06 <_scanf_float+0x1ca>
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006cf2:	d108      	bne.n	8006d06 <_scanf_float+0x1ca>
 8006cf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cf8:	f04f 0a01 	mov.w	sl, #1
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	e7e3      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d00:	f1ba 0f02 	cmp.w	sl, #2
 8006d04:	d055      	beq.n	8006db2 <_scanf_float+0x276>
 8006d06:	2d01      	cmp	r5, #1
 8006d08:	d002      	beq.n	8006d10 <_scanf_float+0x1d4>
 8006d0a:	2d04      	cmp	r5, #4
 8006d0c:	f47f af48 	bne.w	8006ba0 <_scanf_float+0x64>
 8006d10:	3501      	adds	r5, #1
 8006d12:	b2ed      	uxtb	r5, r5
 8006d14:	e7d8      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d16:	f1ba 0f01 	cmp.w	sl, #1
 8006d1a:	f47f af41 	bne.w	8006ba0 <_scanf_float+0x64>
 8006d1e:	f04f 0a02 	mov.w	sl, #2
 8006d22:	e7d1      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d24:	b97d      	cbnz	r5, 8006d46 <_scanf_float+0x20a>
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	f47f af3c 	bne.w	8006ba6 <_scanf_float+0x6a>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d38:	f47f af39 	bne.w	8006bae <_scanf_float+0x72>
 8006d3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d40:	2501      	movs	r5, #1
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	e7c0      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d46:	2d03      	cmp	r5, #3
 8006d48:	d0e2      	beq.n	8006d10 <_scanf_float+0x1d4>
 8006d4a:	2d05      	cmp	r5, #5
 8006d4c:	e7de      	b.n	8006d0c <_scanf_float+0x1d0>
 8006d4e:	2d02      	cmp	r5, #2
 8006d50:	f47f af26 	bne.w	8006ba0 <_scanf_float+0x64>
 8006d54:	2503      	movs	r5, #3
 8006d56:	e7b7      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d58:	2d06      	cmp	r5, #6
 8006d5a:	f47f af21 	bne.w	8006ba0 <_scanf_float+0x64>
 8006d5e:	2507      	movs	r5, #7
 8006d60:	e7b2      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	0591      	lsls	r1, r2, #22
 8006d66:	f57f af1b 	bpl.w	8006ba0 <_scanf_float+0x64>
 8006d6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d74:	e7a8      	b.n	8006cc8 <_scanf_float+0x18c>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d80:	d006      	beq.n	8006d90 <_scanf_float+0x254>
 8006d82:	0550      	lsls	r0, r2, #21
 8006d84:	f57f af0c 	bpl.w	8006ba0 <_scanf_float+0x64>
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	f43f af0f 	beq.w	8006bae <_scanf_float+0x72>
 8006d90:	0591      	lsls	r1, r2, #22
 8006d92:	bf58      	it	pl
 8006d94:	9901      	ldrpl	r1, [sp, #4]
 8006d96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d9a:	bf58      	it	pl
 8006d9c:	eba9 0101 	subpl.w	r1, r9, r1
 8006da0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006da4:	f04f 0900 	mov.w	r9, #0
 8006da8:	bf58      	it	pl
 8006daa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	e78a      	b.n	8006cc8 <_scanf_float+0x18c>
 8006db2:	f04f 0a03 	mov.w	sl, #3
 8006db6:	e787      	b.n	8006cc8 <_scanf_float+0x18c>
 8006db8:	4639      	mov	r1, r7
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dc0:	4798      	blx	r3
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f43f aedf 	beq.w	8006b86 <_scanf_float+0x4a>
 8006dc8:	e6ea      	b.n	8006ba0 <_scanf_float+0x64>
 8006dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dce:	463a      	mov	r2, r7
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dd6:	4798      	blx	r3
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	e6ec      	b.n	8006bba <_scanf_float+0x7e>
 8006de0:	1e6b      	subs	r3, r5, #1
 8006de2:	2b06      	cmp	r3, #6
 8006de4:	d825      	bhi.n	8006e32 <_scanf_float+0x2f6>
 8006de6:	2d02      	cmp	r5, #2
 8006de8:	d836      	bhi.n	8006e58 <_scanf_float+0x31c>
 8006dea:	455e      	cmp	r6, fp
 8006dec:	f67f aee8 	bls.w	8006bc0 <_scanf_float+0x84>
 8006df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006df4:	463a      	mov	r2, r7
 8006df6:	4640      	mov	r0, r8
 8006df8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dfc:	4798      	blx	r3
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	6123      	str	r3, [r4, #16]
 8006e04:	e7f1      	b.n	8006dea <_scanf_float+0x2ae>
 8006e06:	9802      	ldr	r0, [sp, #8]
 8006e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e10:	463a      	mov	r2, r7
 8006e12:	9002      	str	r0, [sp, #8]
 8006e14:	4640      	mov	r0, r8
 8006e16:	4798      	blx	r3
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e22:	fa5f fa8a 	uxtb.w	sl, sl
 8006e26:	f1ba 0f02 	cmp.w	sl, #2
 8006e2a:	d1ec      	bne.n	8006e06 <_scanf_float+0x2ca>
 8006e2c:	3d03      	subs	r5, #3
 8006e2e:	b2ed      	uxtb	r5, r5
 8006e30:	1b76      	subs	r6, r6, r5
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	05da      	lsls	r2, r3, #23
 8006e36:	d52f      	bpl.n	8006e98 <_scanf_float+0x35c>
 8006e38:	055b      	lsls	r3, r3, #21
 8006e3a:	d510      	bpl.n	8006e5e <_scanf_float+0x322>
 8006e3c:	455e      	cmp	r6, fp
 8006e3e:	f67f aebf 	bls.w	8006bc0 <_scanf_float+0x84>
 8006e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e46:	463a      	mov	r2, r7
 8006e48:	4640      	mov	r0, r8
 8006e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e4e:	4798      	blx	r3
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	e7f1      	b.n	8006e3c <_scanf_float+0x300>
 8006e58:	46aa      	mov	sl, r5
 8006e5a:	9602      	str	r6, [sp, #8]
 8006e5c:	e7df      	b.n	8006e1e <_scanf_float+0x2e2>
 8006e5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	2965      	cmp	r1, #101	; 0x65
 8006e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	d00c      	beq.n	8006e8c <_scanf_float+0x350>
 8006e72:	2945      	cmp	r1, #69	; 0x45
 8006e74:	d00a      	beq.n	8006e8c <_scanf_float+0x350>
 8006e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4798      	blx	r3
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	1eb5      	subs	r5, r6, #2
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e94:	4798      	blx	r3
 8006e96:	462e      	mov	r6, r5
 8006e98:	6825      	ldr	r5, [r4, #0]
 8006e9a:	f015 0510 	ands.w	r5, r5, #16
 8006e9e:	d155      	bne.n	8006f4c <_scanf_float+0x410>
 8006ea0:	7035      	strb	r5, [r6, #0]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eac:	d11d      	bne.n	8006eea <_scanf_float+0x3ae>
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	454b      	cmp	r3, r9
 8006eb2:	eba3 0209 	sub.w	r2, r3, r9
 8006eb6:	d125      	bne.n	8006f04 <_scanf_float+0x3c8>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4659      	mov	r1, fp
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	f002 fc63 	bl	8009788 <_strtod_r>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	f8d4 c000 	ldr.w	ip, [r4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f01c 0f02 	tst.w	ip, #2
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	f103 0204 	add.w	r2, r3, #4
 8006ed6:	d020      	beq.n	8006f1a <_scanf_float+0x3de>
 8006ed8:	9903      	ldr	r1, [sp, #12]
 8006eda:	600a      	str	r2, [r1, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	e9c3 6700 	strd	r6, r7, [r3]
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60e3      	str	r3, [r4, #12]
 8006ee8:	e66b      	b.n	8006bc2 <_scanf_float+0x86>
 8006eea:	9b04      	ldr	r3, [sp, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0e3      	beq.n	8006eb8 <_scanf_float+0x37c>
 8006ef0:	9905      	ldr	r1, [sp, #20]
 8006ef2:	230a      	movs	r3, #10
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	3101      	adds	r1, #1
 8006efa:	f002 fcc9 	bl	8009890 <_strtol_r>
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	9e05      	ldr	r6, [sp, #20]
 8006f02:	1ac2      	subs	r2, r0, r3
 8006f04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f08:	429e      	cmp	r6, r3
 8006f0a:	bf28      	it	cs
 8006f0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f10:	4630      	mov	r0, r6
 8006f12:	490f      	ldr	r1, [pc, #60]	; (8006f50 <_scanf_float+0x414>)
 8006f14:	f000 f916 	bl	8007144 <siprintf>
 8006f18:	e7ce      	b.n	8006eb8 <_scanf_float+0x37c>
 8006f1a:	f01c 0f04 	tst.w	ip, #4
 8006f1e:	d1db      	bne.n	8006ed8 <_scanf_float+0x39c>
 8006f20:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f24:	f8cc 2000 	str.w	r2, [ip]
 8006f28:	f8d3 8000 	ldr.w	r8, [r3]
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	f7f9 fd6c 	bl	8000a0c <__aeabi_dcmpun>
 8006f34:	b128      	cbz	r0, 8006f42 <_scanf_float+0x406>
 8006f36:	4807      	ldr	r0, [pc, #28]	; (8006f54 <_scanf_float+0x418>)
 8006f38:	f000 fa04 	bl	8007344 <nanf>
 8006f3c:	f8c8 0000 	str.w	r0, [r8]
 8006f40:	e7cf      	b.n	8006ee2 <_scanf_float+0x3a6>
 8006f42:	4630      	mov	r0, r6
 8006f44:	4639      	mov	r1, r7
 8006f46:	f7f9 fdbf 	bl	8000ac8 <__aeabi_d2f>
 8006f4a:	e7f7      	b.n	8006f3c <_scanf_float+0x400>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	e638      	b.n	8006bc2 <_scanf_float+0x86>
 8006f50:	0800ab22 	.word	0x0800ab22
 8006f54:	0800aeb5 	.word	0x0800aeb5

08006f58 <std>:
 8006f58:	2300      	movs	r3, #0
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f66:	6083      	str	r3, [r0, #8]
 8006f68:	8181      	strh	r1, [r0, #12]
 8006f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f6c:	81c2      	strh	r2, [r0, #14]
 8006f6e:	6183      	str	r3, [r0, #24]
 8006f70:	4619      	mov	r1, r3
 8006f72:	2208      	movs	r2, #8
 8006f74:	305c      	adds	r0, #92	; 0x5c
 8006f76:	f000 f948 	bl	800720a <memset>
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <std+0x58>)
 8006f7c:	6224      	str	r4, [r4, #32]
 8006f7e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <std+0x5c>)
 8006f82:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <std+0x60>)
 8006f86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <std+0x64>)
 8006f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <std+0x68>)
 8006f8e:	429c      	cmp	r4, r3
 8006f90:	d006      	beq.n	8006fa0 <std+0x48>
 8006f92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f96:	4294      	cmp	r4, r2
 8006f98:	d002      	beq.n	8006fa0 <std+0x48>
 8006f9a:	33d0      	adds	r3, #208	; 0xd0
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d105      	bne.n	8006fac <std+0x54>
 8006fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f000 b9ac 	b.w	8007304 <__retarget_lock_init_recursive>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	bf00      	nop
 8006fb0:	08007185 	.word	0x08007185
 8006fb4:	080071a7 	.word	0x080071a7
 8006fb8:	080071df 	.word	0x080071df
 8006fbc:	08007203 	.word	0x08007203
 8006fc0:	20002f1c 	.word	0x20002f1c

08006fc4 <stdio_exit_handler>:
 8006fc4:	4a02      	ldr	r2, [pc, #8]	; (8006fd0 <stdio_exit_handler+0xc>)
 8006fc6:	4903      	ldr	r1, [pc, #12]	; (8006fd4 <stdio_exit_handler+0x10>)
 8006fc8:	4803      	ldr	r0, [pc, #12]	; (8006fd8 <stdio_exit_handler+0x14>)
 8006fca:	f000 b869 	b.w	80070a0 <_fwalk_sglue>
 8006fce:	bf00      	nop
 8006fd0:	2000001c 	.word	0x2000001c
 8006fd4:	08009c49 	.word	0x08009c49
 8006fd8:	20000028 	.word	0x20000028

08006fdc <cleanup_stdio>:
 8006fdc:	6841      	ldr	r1, [r0, #4]
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <cleanup_stdio+0x34>)
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	d001      	beq.n	8006fec <cleanup_stdio+0x10>
 8006fe8:	f002 fe2e 	bl	8009c48 <_fflush_r>
 8006fec:	68a1      	ldr	r1, [r4, #8]
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <cleanup_stdio+0x38>)
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <cleanup_stdio+0x1e>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f002 fe27 	bl	8009c48 <_fflush_r>
 8006ffa:	68e1      	ldr	r1, [r4, #12]
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <cleanup_stdio+0x3c>)
 8006ffe:	4299      	cmp	r1, r3
 8007000:	d004      	beq.n	800700c <cleanup_stdio+0x30>
 8007002:	4620      	mov	r0, r4
 8007004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007008:	f002 be1e 	b.w	8009c48 <_fflush_r>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	bf00      	nop
 8007010:	20002f1c 	.word	0x20002f1c
 8007014:	20002f84 	.word	0x20002f84
 8007018:	20002fec 	.word	0x20002fec

0800701c <global_stdio_init.part.0>:
 800701c:	b510      	push	{r4, lr}
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <global_stdio_init.part.0+0x30>)
 8007020:	4c0b      	ldr	r4, [pc, #44]	; (8007050 <global_stdio_init.part.0+0x34>)
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <global_stdio_init.part.0+0x38>)
 8007024:	4620      	mov	r0, r4
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	2104      	movs	r1, #4
 800702a:	2200      	movs	r2, #0
 800702c:	f7ff ff94 	bl	8006f58 <std>
 8007030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007034:	2201      	movs	r2, #1
 8007036:	2109      	movs	r1, #9
 8007038:	f7ff ff8e 	bl	8006f58 <std>
 800703c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007040:	2202      	movs	r2, #2
 8007042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007046:	2112      	movs	r1, #18
 8007048:	f7ff bf86 	b.w	8006f58 <std>
 800704c:	20003054 	.word	0x20003054
 8007050:	20002f1c 	.word	0x20002f1c
 8007054:	08006fc5 	.word	0x08006fc5

08007058 <__sfp_lock_acquire>:
 8007058:	4801      	ldr	r0, [pc, #4]	; (8007060 <__sfp_lock_acquire+0x8>)
 800705a:	f000 b954 	b.w	8007306 <__retarget_lock_acquire_recursive>
 800705e:	bf00      	nop
 8007060:	2000305d 	.word	0x2000305d

08007064 <__sfp_lock_release>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__sfp_lock_release+0x8>)
 8007066:	f000 b94f 	b.w	8007308 <__retarget_lock_release_recursive>
 800706a:	bf00      	nop
 800706c:	2000305d 	.word	0x2000305d

08007070 <__sinit>:
 8007070:	b510      	push	{r4, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	f7ff fff0 	bl	8007058 <__sfp_lock_acquire>
 8007078:	6a23      	ldr	r3, [r4, #32]
 800707a:	b11b      	cbz	r3, 8007084 <__sinit+0x14>
 800707c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007080:	f7ff bff0 	b.w	8007064 <__sfp_lock_release>
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__sinit+0x28>)
 8007086:	6223      	str	r3, [r4, #32]
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <__sinit+0x2c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f5      	bne.n	800707c <__sinit+0xc>
 8007090:	f7ff ffc4 	bl	800701c <global_stdio_init.part.0>
 8007094:	e7f2      	b.n	800707c <__sinit+0xc>
 8007096:	bf00      	nop
 8007098:	08006fdd 	.word	0x08006fdd
 800709c:	20003054 	.word	0x20003054

080070a0 <_fwalk_sglue>:
 80070a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a4:	4607      	mov	r7, r0
 80070a6:	4688      	mov	r8, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	2600      	movs	r6, #0
 80070ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b0:	f1b9 0901 	subs.w	r9, r9, #1
 80070b4:	d505      	bpl.n	80070c2 <_fwalk_sglue+0x22>
 80070b6:	6824      	ldr	r4, [r4, #0]
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	d1f7      	bne.n	80070ac <_fwalk_sglue+0xc>
 80070bc:	4630      	mov	r0, r6
 80070be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d907      	bls.n	80070d8 <_fwalk_sglue+0x38>
 80070c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070cc:	3301      	adds	r3, #1
 80070ce:	d003      	beq.n	80070d8 <_fwalk_sglue+0x38>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	4306      	orrs	r6, r0
 80070d8:	3568      	adds	r5, #104	; 0x68
 80070da:	e7e9      	b.n	80070b0 <_fwalk_sglue+0x10>

080070dc <sniprintf>:
 80070dc:	b40c      	push	{r2, r3}
 80070de:	b530      	push	{r4, r5, lr}
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <sniprintf+0x64>)
 80070e2:	1e0c      	subs	r4, r1, #0
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	b09d      	sub	sp, #116	; 0x74
 80070e8:	da08      	bge.n	80070fc <sniprintf+0x20>
 80070ea:	238b      	movs	r3, #139	; 0x8b
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	b01d      	add	sp, #116	; 0x74
 80070f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070f8:	b002      	add	sp, #8
 80070fa:	4770      	bx	lr
 80070fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007100:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007104:	bf0c      	ite	eq
 8007106:	4623      	moveq	r3, r4
 8007108:	f104 33ff 	addne.w	r3, r4, #4294967295
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	9307      	str	r3, [sp, #28]
 8007110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	9006      	str	r0, [sp, #24]
 8007118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800711c:	4628      	mov	r0, r5
 800711e:	ab21      	add	r3, sp, #132	; 0x84
 8007120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007122:	a902      	add	r1, sp, #8
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	f002 fc0f 	bl	8009948 <_svfiprintf_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	bfbc      	itt	lt
 800712e:	238b      	movlt	r3, #139	; 0x8b
 8007130:	602b      	strlt	r3, [r5, #0]
 8007132:	2c00      	cmp	r4, #0
 8007134:	d0dd      	beq.n	80070f2 <sniprintf+0x16>
 8007136:	2200      	movs	r2, #0
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	e7d9      	b.n	80070f2 <sniprintf+0x16>
 800713e:	bf00      	nop
 8007140:	20000074 	.word	0x20000074

08007144 <siprintf>:
 8007144:	b40e      	push	{r1, r2, r3}
 8007146:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800714a:	b500      	push	{lr}
 800714c:	b09c      	sub	sp, #112	; 0x70
 800714e:	ab1d      	add	r3, sp, #116	; 0x74
 8007150:	9002      	str	r0, [sp, #8]
 8007152:	9006      	str	r0, [sp, #24]
 8007154:	9107      	str	r1, [sp, #28]
 8007156:	9104      	str	r1, [sp, #16]
 8007158:	4808      	ldr	r0, [pc, #32]	; (800717c <siprintf+0x38>)
 800715a:	4909      	ldr	r1, [pc, #36]	; (8007180 <siprintf+0x3c>)
 800715c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007160:	9105      	str	r1, [sp, #20]
 8007162:	6800      	ldr	r0, [r0, #0]
 8007164:	a902      	add	r1, sp, #8
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	f002 fbee 	bl	8009948 <_svfiprintf_r>
 800716c:	2200      	movs	r2, #0
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	b01c      	add	sp, #112	; 0x70
 8007174:	f85d eb04 	ldr.w	lr, [sp], #4
 8007178:	b003      	add	sp, #12
 800717a:	4770      	bx	lr
 800717c:	20000074 	.word	0x20000074
 8007180:	ffff0208 	.word	0xffff0208

08007184 <__sread>:
 8007184:	b510      	push	{r4, lr}
 8007186:	460c      	mov	r4, r1
 8007188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718c:	f000 f86c 	bl	8007268 <_read_r>
 8007190:	2800      	cmp	r0, #0
 8007192:	bfab      	itete	ge
 8007194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007196:	89a3      	ldrhlt	r3, [r4, #12]
 8007198:	181b      	addge	r3, r3, r0
 800719a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800719e:	bfac      	ite	ge
 80071a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071a2:	81a3      	strhlt	r3, [r4, #12]
 80071a4:	bd10      	pop	{r4, pc}

080071a6 <__swrite>:
 80071a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071aa:	461f      	mov	r7, r3
 80071ac:	898b      	ldrh	r3, [r1, #12]
 80071ae:	4605      	mov	r5, r0
 80071b0:	05db      	lsls	r3, r3, #23
 80071b2:	460c      	mov	r4, r1
 80071b4:	4616      	mov	r6, r2
 80071b6:	d505      	bpl.n	80071c4 <__swrite+0x1e>
 80071b8:	2302      	movs	r3, #2
 80071ba:	2200      	movs	r2, #0
 80071bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c0:	f000 f840 	bl	8007244 <_lseek_r>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	4632      	mov	r2, r6
 80071c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	4628      	mov	r0, r5
 80071d0:	463b      	mov	r3, r7
 80071d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071da:	f000 b857 	b.w	800728c <_write_r>

080071de <__sseek>:
 80071de:	b510      	push	{r4, lr}
 80071e0:	460c      	mov	r4, r1
 80071e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e6:	f000 f82d 	bl	8007244 <_lseek_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	bf15      	itete	ne
 80071f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80071f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071fa:	81a3      	strheq	r3, [r4, #12]
 80071fc:	bf18      	it	ne
 80071fe:	81a3      	strhne	r3, [r4, #12]
 8007200:	bd10      	pop	{r4, pc}

08007202 <__sclose>:
 8007202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007206:	f000 b80d 	b.w	8007224 <_close_r>

0800720a <memset>:
 800720a:	4603      	mov	r3, r0
 800720c:	4402      	add	r2, r0
 800720e:	4293      	cmp	r3, r2
 8007210:	d100      	bne.n	8007214 <memset+0xa>
 8007212:	4770      	bx	lr
 8007214:	f803 1b01 	strb.w	r1, [r3], #1
 8007218:	e7f9      	b.n	800720e <memset+0x4>
	...

0800721c <_localeconv_r>:
 800721c:	4800      	ldr	r0, [pc, #0]	; (8007220 <_localeconv_r+0x4>)
 800721e:	4770      	bx	lr
 8007220:	20000168 	.word	0x20000168

08007224 <_close_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	2300      	movs	r3, #0
 8007228:	4d05      	ldr	r5, [pc, #20]	; (8007240 <_close_r+0x1c>)
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	f7fb f858 	bl	80022e4 <_close>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_close_r+0x1a>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_close_r+0x1a>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20003058 	.word	0x20003058

08007244 <_lseek_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	2200      	movs	r2, #0
 800724e:	4d05      	ldr	r5, [pc, #20]	; (8007264 <_lseek_r+0x20>)
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7fb f86a 	bl	800232c <_lseek>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_lseek_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_lseek_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20003058 	.word	0x20003058

08007268 <_read_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	2200      	movs	r2, #0
 8007272:	4d05      	ldr	r5, [pc, #20]	; (8007288 <_read_r+0x20>)
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f7fa fffb 	bl	8002272 <_read>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_read_r+0x1e>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_read_r+0x1e>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20003058 	.word	0x20003058

0800728c <_write_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	4611      	mov	r1, r2
 8007294:	2200      	movs	r2, #0
 8007296:	4d05      	ldr	r5, [pc, #20]	; (80072ac <_write_r+0x20>)
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7fb f806 	bl	80022ac <_write>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_write_r+0x1e>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_write_r+0x1e>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20003058 	.word	0x20003058

080072b0 <__errno>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <__errno+0x8>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000074 	.word	0x20000074

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	2600      	movs	r6, #0
 80072c0:	4d0c      	ldr	r5, [pc, #48]	; (80072f4 <__libc_init_array+0x38>)
 80072c2:	4c0d      	ldr	r4, [pc, #52]	; (80072f8 <__libc_init_array+0x3c>)
 80072c4:	1b64      	subs	r4, r4, r5
 80072c6:	10a4      	asrs	r4, r4, #2
 80072c8:	42a6      	cmp	r6, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	f003 fbc0 	bl	800aa50 <_init>
 80072d0:	2600      	movs	r6, #0
 80072d2:	4d0a      	ldr	r5, [pc, #40]	; (80072fc <__libc_init_array+0x40>)
 80072d4:	4c0a      	ldr	r4, [pc, #40]	; (8007300 <__libc_init_array+0x44>)
 80072d6:	1b64      	subs	r4, r4, r5
 80072d8:	10a4      	asrs	r4, r4, #2
 80072da:	42a6      	cmp	r6, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e4:	4798      	blx	r3
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ee:	4798      	blx	r3
 80072f0:	3601      	adds	r6, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	0800af18 	.word	0x0800af18
 80072f8:	0800af18 	.word	0x0800af18
 80072fc:	0800af18 	.word	0x0800af18
 8007300:	0800af1c 	.word	0x0800af1c

08007304 <__retarget_lock_init_recursive>:
 8007304:	4770      	bx	lr

08007306 <__retarget_lock_acquire_recursive>:
 8007306:	4770      	bx	lr

08007308 <__retarget_lock_release_recursive>:
 8007308:	4770      	bx	lr

0800730a <memchr>:
 800730a:	4603      	mov	r3, r0
 800730c:	b510      	push	{r4, lr}
 800730e:	b2c9      	uxtb	r1, r1
 8007310:	4402      	add	r2, r0
 8007312:	4293      	cmp	r3, r2
 8007314:	4618      	mov	r0, r3
 8007316:	d101      	bne.n	800731c <memchr+0x12>
 8007318:	2000      	movs	r0, #0
 800731a:	e003      	b.n	8007324 <memchr+0x1a>
 800731c:	7804      	ldrb	r4, [r0, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	428c      	cmp	r4, r1
 8007322:	d1f6      	bne.n	8007312 <memchr+0x8>
 8007324:	bd10      	pop	{r4, pc}

08007326 <memcpy>:
 8007326:	440a      	add	r2, r1
 8007328:	4291      	cmp	r1, r2
 800732a:	f100 33ff 	add.w	r3, r0, #4294967295
 800732e:	d100      	bne.n	8007332 <memcpy+0xc>
 8007330:	4770      	bx	lr
 8007332:	b510      	push	{r4, lr}
 8007334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007338:	4291      	cmp	r1, r2
 800733a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800733e:	d1f9      	bne.n	8007334 <memcpy+0xe>
 8007340:	bd10      	pop	{r4, pc}
	...

08007344 <nanf>:
 8007344:	4800      	ldr	r0, [pc, #0]	; (8007348 <nanf+0x4>)
 8007346:	4770      	bx	lr
 8007348:	7fc00000 	.word	0x7fc00000

0800734c <quorem>:
 800734c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	6903      	ldr	r3, [r0, #16]
 8007352:	690c      	ldr	r4, [r1, #16]
 8007354:	4607      	mov	r7, r0
 8007356:	42a3      	cmp	r3, r4
 8007358:	db7f      	blt.n	800745a <quorem+0x10e>
 800735a:	3c01      	subs	r4, #1
 800735c:	f100 0514 	add.w	r5, r0, #20
 8007360:	f101 0814 	add.w	r8, r1, #20
 8007364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800736e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007372:	3301      	adds	r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	fbb2 f6f3 	udiv	r6, r2, r3
 800737a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800737e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007382:	d331      	bcc.n	80073e8 <quorem+0x9c>
 8007384:	f04f 0e00 	mov.w	lr, #0
 8007388:	4640      	mov	r0, r8
 800738a:	46ac      	mov	ip, r5
 800738c:	46f2      	mov	sl, lr
 800738e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007392:	b293      	uxth	r3, r2
 8007394:	fb06 e303 	mla	r3, r6, r3, lr
 8007398:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800739c:	0c1a      	lsrs	r2, r3, #16
 800739e:	b29b      	uxth	r3, r3
 80073a0:	fb06 220e 	mla	r2, r6, lr, r2
 80073a4:	ebaa 0303 	sub.w	r3, sl, r3
 80073a8:	f8dc a000 	ldr.w	sl, [ip]
 80073ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073b0:	fa1f fa8a 	uxth.w	sl, sl
 80073b4:	4453      	add	r3, sl
 80073b6:	f8dc a000 	ldr.w	sl, [ip]
 80073ba:	b292      	uxth	r2, r2
 80073bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ca:	4581      	cmp	r9, r0
 80073cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073d0:	f84c 3b04 	str.w	r3, [ip], #4
 80073d4:	d2db      	bcs.n	800738e <quorem+0x42>
 80073d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80073da:	b92b      	cbnz	r3, 80073e8 <quorem+0x9c>
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	3b04      	subs	r3, #4
 80073e0:	429d      	cmp	r5, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	d32d      	bcc.n	8007442 <quorem+0xf6>
 80073e6:	613c      	str	r4, [r7, #16]
 80073e8:	4638      	mov	r0, r7
 80073ea:	f001 f9dd 	bl	80087a8 <__mcmp>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	db23      	blt.n	800743a <quorem+0xee>
 80073f2:	4629      	mov	r1, r5
 80073f4:	2000      	movs	r0, #0
 80073f6:	3601      	adds	r6, #1
 80073f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80073fc:	f8d1 c000 	ldr.w	ip, [r1]
 8007400:	b293      	uxth	r3, r2
 8007402:	1ac3      	subs	r3, r0, r3
 8007404:	0c12      	lsrs	r2, r2, #16
 8007406:	fa1f f08c 	uxth.w	r0, ip
 800740a:	4403      	add	r3, r0
 800740c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007414:	b29b      	uxth	r3, r3
 8007416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800741a:	45c1      	cmp	r9, r8
 800741c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007420:	f841 3b04 	str.w	r3, [r1], #4
 8007424:	d2e8      	bcs.n	80073f8 <quorem+0xac>
 8007426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800742a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800742e:	b922      	cbnz	r2, 800743a <quorem+0xee>
 8007430:	3b04      	subs	r3, #4
 8007432:	429d      	cmp	r5, r3
 8007434:	461a      	mov	r2, r3
 8007436:	d30a      	bcc.n	800744e <quorem+0x102>
 8007438:	613c      	str	r4, [r7, #16]
 800743a:	4630      	mov	r0, r6
 800743c:	b003      	add	sp, #12
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	3b04      	subs	r3, #4
 8007446:	2a00      	cmp	r2, #0
 8007448:	d1cd      	bne.n	80073e6 <quorem+0x9a>
 800744a:	3c01      	subs	r4, #1
 800744c:	e7c8      	b.n	80073e0 <quorem+0x94>
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	3b04      	subs	r3, #4
 8007452:	2a00      	cmp	r2, #0
 8007454:	d1f0      	bne.n	8007438 <quorem+0xec>
 8007456:	3c01      	subs	r4, #1
 8007458:	e7eb      	b.n	8007432 <quorem+0xe6>
 800745a:	2000      	movs	r0, #0
 800745c:	e7ee      	b.n	800743c <quorem+0xf0>
	...

08007460 <_dtoa_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	69c4      	ldr	r4, [r0, #28]
 800746a:	b099      	sub	sp, #100	; 0x64
 800746c:	4605      	mov	r5, r0
 800746e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007472:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007476:	b974      	cbnz	r4, 8007496 <_dtoa_r+0x36>
 8007478:	2010      	movs	r0, #16
 800747a:	f000 fe1d 	bl	80080b8 <malloc>
 800747e:	4602      	mov	r2, r0
 8007480:	61e8      	str	r0, [r5, #28]
 8007482:	b920      	cbnz	r0, 800748e <_dtoa_r+0x2e>
 8007484:	21ef      	movs	r1, #239	; 0xef
 8007486:	4bac      	ldr	r3, [pc, #688]	; (8007738 <_dtoa_r+0x2d8>)
 8007488:	48ac      	ldr	r0, [pc, #688]	; (800773c <_dtoa_r+0x2dc>)
 800748a:	f002 fc47 	bl	8009d1c <__assert_func>
 800748e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007492:	6004      	str	r4, [r0, #0]
 8007494:	60c4      	str	r4, [r0, #12]
 8007496:	69eb      	ldr	r3, [r5, #28]
 8007498:	6819      	ldr	r1, [r3, #0]
 800749a:	b151      	cbz	r1, 80074b2 <_dtoa_r+0x52>
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	2301      	movs	r3, #1
 80074a0:	4093      	lsls	r3, r2
 80074a2:	604a      	str	r2, [r1, #4]
 80074a4:	608b      	str	r3, [r1, #8]
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 fefa 	bl	80082a0 <_Bfree>
 80074ac:	2200      	movs	r2, #0
 80074ae:	69eb      	ldr	r3, [r5, #28]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	1e3b      	subs	r3, r7, #0
 80074b4:	bfaf      	iteee	ge
 80074b6:	2300      	movge	r3, #0
 80074b8:	2201      	movlt	r2, #1
 80074ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074be:	9305      	strlt	r3, [sp, #20]
 80074c0:	bfa8      	it	ge
 80074c2:	f8c8 3000 	strge.w	r3, [r8]
 80074c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80074ca:	4b9d      	ldr	r3, [pc, #628]	; (8007740 <_dtoa_r+0x2e0>)
 80074cc:	bfb8      	it	lt
 80074ce:	f8c8 2000 	strlt.w	r2, [r8]
 80074d2:	ea33 0309 	bics.w	r3, r3, r9
 80074d6:	d119      	bne.n	800750c <_dtoa_r+0xac>
 80074d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80074dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074e4:	4333      	orrs	r3, r6
 80074e6:	f000 8589 	beq.w	8007ffc <_dtoa_r+0xb9c>
 80074ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ec:	b953      	cbnz	r3, 8007504 <_dtoa_r+0xa4>
 80074ee:	4b95      	ldr	r3, [pc, #596]	; (8007744 <_dtoa_r+0x2e4>)
 80074f0:	e023      	b.n	800753a <_dtoa_r+0xda>
 80074f2:	4b95      	ldr	r3, [pc, #596]	; (8007748 <_dtoa_r+0x2e8>)
 80074f4:	9303      	str	r3, [sp, #12]
 80074f6:	3308      	adds	r3, #8
 80074f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	9803      	ldr	r0, [sp, #12]
 80074fe:	b019      	add	sp, #100	; 0x64
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007504:	4b8f      	ldr	r3, [pc, #572]	; (8007744 <_dtoa_r+0x2e4>)
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	3303      	adds	r3, #3
 800750a:	e7f5      	b.n	80074f8 <_dtoa_r+0x98>
 800750c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007510:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	f7f9 fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8007520:	4680      	mov	r8, r0
 8007522:	b160      	cbz	r0, 800753e <_dtoa_r+0xde>
 8007524:	2301      	movs	r3, #1
 8007526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8562 	beq.w	8007ff6 <_dtoa_r+0xb96>
 8007532:	4b86      	ldr	r3, [pc, #536]	; (800774c <_dtoa_r+0x2ec>)
 8007534:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	3b01      	subs	r3, #1
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	e7de      	b.n	80074fc <_dtoa_r+0x9c>
 800753e:	ab16      	add	r3, sp, #88	; 0x58
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	ab17      	add	r3, sp, #92	; 0x5c
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4628      	mov	r0, r5
 8007548:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800754c:	f001 fa3c 	bl	80089c8 <__d2b>
 8007550:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007554:	4682      	mov	sl, r0
 8007556:	2c00      	cmp	r4, #0
 8007558:	d07e      	beq.n	8007658 <_dtoa_r+0x1f8>
 800755a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800755e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007560:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007568:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800756c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007570:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007574:	4619      	mov	r1, r3
 8007576:	2200      	movs	r2, #0
 8007578:	4b75      	ldr	r3, [pc, #468]	; (8007750 <_dtoa_r+0x2f0>)
 800757a:	f7f8 fdf5 	bl	8000168 <__aeabi_dsub>
 800757e:	a368      	add	r3, pc, #416	; (adr r3, 8007720 <_dtoa_r+0x2c0>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f8 ffa8 	bl	80004d8 <__aeabi_dmul>
 8007588:	a367      	add	r3, pc, #412	; (adr r3, 8007728 <_dtoa_r+0x2c8>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 fded 	bl	800016c <__adddf3>
 8007592:	4606      	mov	r6, r0
 8007594:	4620      	mov	r0, r4
 8007596:	460f      	mov	r7, r1
 8007598:	f7f8 ff34 	bl	8000404 <__aeabi_i2d>
 800759c:	a364      	add	r3, pc, #400	; (adr r3, 8007730 <_dtoa_r+0x2d0>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 ff99 	bl	80004d8 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4630      	mov	r0, r6
 80075ac:	4639      	mov	r1, r7
 80075ae:	f7f8 fddd 	bl	800016c <__adddf3>
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	f7f9 fa3f 	bl	8000a38 <__aeabi_d2iz>
 80075ba:	2200      	movs	r2, #0
 80075bc:	4683      	mov	fp, r0
 80075be:	2300      	movs	r3, #0
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 f9fa 	bl	80009bc <__aeabi_dcmplt>
 80075c8:	b148      	cbz	r0, 80075de <_dtoa_r+0x17e>
 80075ca:	4658      	mov	r0, fp
 80075cc:	f7f8 ff1a 	bl	8000404 <__aeabi_i2d>
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	f7f9 f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80075d8:	b908      	cbnz	r0, 80075de <_dtoa_r+0x17e>
 80075da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075de:	f1bb 0f16 	cmp.w	fp, #22
 80075e2:	d857      	bhi.n	8007694 <_dtoa_r+0x234>
 80075e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075e8:	4b5a      	ldr	r3, [pc, #360]	; (8007754 <_dtoa_r+0x2f4>)
 80075ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f9 f9e3 	bl	80009bc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d04e      	beq.n	8007698 <_dtoa_r+0x238>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007600:	930f      	str	r3, [sp, #60]	; 0x3c
 8007602:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007604:	1b1b      	subs	r3, r3, r4
 8007606:	1e5a      	subs	r2, r3, #1
 8007608:	bf46      	itte	mi
 800760a:	f1c3 0901 	rsbmi	r9, r3, #1
 800760e:	2300      	movmi	r3, #0
 8007610:	f04f 0900 	movpl.w	r9, #0
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	bf48      	it	mi
 8007618:	9309      	strmi	r3, [sp, #36]	; 0x24
 800761a:	f1bb 0f00 	cmp.w	fp, #0
 800761e:	db3d      	blt.n	800769c <_dtoa_r+0x23c>
 8007620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007622:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007626:	445b      	add	r3, fp
 8007628:	9309      	str	r3, [sp, #36]	; 0x24
 800762a:	2300      	movs	r3, #0
 800762c:	930a      	str	r3, [sp, #40]	; 0x28
 800762e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007630:	2b09      	cmp	r3, #9
 8007632:	d867      	bhi.n	8007704 <_dtoa_r+0x2a4>
 8007634:	2b05      	cmp	r3, #5
 8007636:	bfc4      	itt	gt
 8007638:	3b04      	subgt	r3, #4
 800763a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800763c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800763e:	bfc8      	it	gt
 8007640:	2400      	movgt	r4, #0
 8007642:	f1a3 0302 	sub.w	r3, r3, #2
 8007646:	bfd8      	it	le
 8007648:	2401      	movle	r4, #1
 800764a:	2b03      	cmp	r3, #3
 800764c:	f200 8086 	bhi.w	800775c <_dtoa_r+0x2fc>
 8007650:	e8df f003 	tbb	[pc, r3]
 8007654:	5637392c 	.word	0x5637392c
 8007658:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800765c:	441c      	add	r4, r3
 800765e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007662:	2b20      	cmp	r3, #32
 8007664:	bfc1      	itttt	gt
 8007666:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800766a:	fa09 f903 	lslgt.w	r9, r9, r3
 800766e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007672:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007676:	bfd6      	itet	le
 8007678:	f1c3 0320 	rsble	r3, r3, #32
 800767c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007680:	fa06 f003 	lslle.w	r0, r6, r3
 8007684:	f7f8 feae 	bl	80003e4 <__aeabi_ui2d>
 8007688:	2201      	movs	r2, #1
 800768a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800768e:	3c01      	subs	r4, #1
 8007690:	9213      	str	r2, [sp, #76]	; 0x4c
 8007692:	e76f      	b.n	8007574 <_dtoa_r+0x114>
 8007694:	2301      	movs	r3, #1
 8007696:	e7b3      	b.n	8007600 <_dtoa_r+0x1a0>
 8007698:	900f      	str	r0, [sp, #60]	; 0x3c
 800769a:	e7b2      	b.n	8007602 <_dtoa_r+0x1a2>
 800769c:	f1cb 0300 	rsb	r3, fp, #0
 80076a0:	930a      	str	r3, [sp, #40]	; 0x28
 80076a2:	2300      	movs	r3, #0
 80076a4:	eba9 090b 	sub.w	r9, r9, fp
 80076a8:	930e      	str	r3, [sp, #56]	; 0x38
 80076aa:	e7c0      	b.n	800762e <_dtoa_r+0x1ce>
 80076ac:	2300      	movs	r3, #0
 80076ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	dc55      	bgt.n	8007762 <_dtoa_r+0x302>
 80076b6:	2301      	movs	r3, #1
 80076b8:	461a      	mov	r2, r3
 80076ba:	9306      	str	r3, [sp, #24]
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	9223      	str	r2, [sp, #140]	; 0x8c
 80076c0:	e00b      	b.n	80076da <_dtoa_r+0x27a>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e7f3      	b.n	80076ae <_dtoa_r+0x24e>
 80076c6:	2300      	movs	r3, #0
 80076c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076cc:	445b      	add	r3, fp
 80076ce:	9306      	str	r3, [sp, #24]
 80076d0:	3301      	adds	r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	9308      	str	r3, [sp, #32]
 80076d6:	bfb8      	it	lt
 80076d8:	2301      	movlt	r3, #1
 80076da:	2100      	movs	r1, #0
 80076dc:	2204      	movs	r2, #4
 80076de:	69e8      	ldr	r0, [r5, #28]
 80076e0:	f102 0614 	add.w	r6, r2, #20
 80076e4:	429e      	cmp	r6, r3
 80076e6:	d940      	bls.n	800776a <_dtoa_r+0x30a>
 80076e8:	6041      	str	r1, [r0, #4]
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fd98 	bl	8008220 <_Balloc>
 80076f0:	9003      	str	r0, [sp, #12]
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d13c      	bne.n	8007770 <_dtoa_r+0x310>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 11af 	movw	r1, #431	; 0x1af
 80076fc:	4b16      	ldr	r3, [pc, #88]	; (8007758 <_dtoa_r+0x2f8>)
 80076fe:	e6c3      	b.n	8007488 <_dtoa_r+0x28>
 8007700:	2301      	movs	r3, #1
 8007702:	e7e1      	b.n	80076c8 <_dtoa_r+0x268>
 8007704:	2401      	movs	r4, #1
 8007706:	2300      	movs	r3, #0
 8007708:	940b      	str	r4, [sp, #44]	; 0x2c
 800770a:	9322      	str	r3, [sp, #136]	; 0x88
 800770c:	f04f 33ff 	mov.w	r3, #4294967295
 8007710:	2200      	movs	r2, #0
 8007712:	9306      	str	r3, [sp, #24]
 8007714:	9308      	str	r3, [sp, #32]
 8007716:	2312      	movs	r3, #18
 8007718:	e7d1      	b.n	80076be <_dtoa_r+0x25e>
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	636f4361 	.word	0x636f4361
 8007724:	3fd287a7 	.word	0x3fd287a7
 8007728:	8b60c8b3 	.word	0x8b60c8b3
 800772c:	3fc68a28 	.word	0x3fc68a28
 8007730:	509f79fb 	.word	0x509f79fb
 8007734:	3fd34413 	.word	0x3fd34413
 8007738:	0800ab34 	.word	0x0800ab34
 800773c:	0800ab4b 	.word	0x0800ab4b
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	0800ab30 	.word	0x0800ab30
 8007748:	0800ab27 	.word	0x0800ab27
 800774c:	0800aaff 	.word	0x0800aaff
 8007750:	3ff80000 	.word	0x3ff80000
 8007754:	0800ac38 	.word	0x0800ac38
 8007758:	0800aba3 	.word	0x0800aba3
 800775c:	2301      	movs	r3, #1
 800775e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007760:	e7d4      	b.n	800770c <_dtoa_r+0x2ac>
 8007762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007764:	9306      	str	r3, [sp, #24]
 8007766:	9308      	str	r3, [sp, #32]
 8007768:	e7b7      	b.n	80076da <_dtoa_r+0x27a>
 800776a:	3101      	adds	r1, #1
 800776c:	0052      	lsls	r2, r2, #1
 800776e:	e7b7      	b.n	80076e0 <_dtoa_r+0x280>
 8007770:	69eb      	ldr	r3, [r5, #28]
 8007772:	9a03      	ldr	r2, [sp, #12]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	9b08      	ldr	r3, [sp, #32]
 8007778:	2b0e      	cmp	r3, #14
 800777a:	f200 80a8 	bhi.w	80078ce <_dtoa_r+0x46e>
 800777e:	2c00      	cmp	r4, #0
 8007780:	f000 80a5 	beq.w	80078ce <_dtoa_r+0x46e>
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	dd34      	ble.n	80077f4 <_dtoa_r+0x394>
 800778a:	4b9a      	ldr	r3, [pc, #616]	; (80079f4 <_dtoa_r+0x594>)
 800778c:	f00b 020f 	and.w	r2, fp, #15
 8007790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007794:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800779c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80077a4:	d016      	beq.n	80077d4 <_dtoa_r+0x374>
 80077a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077aa:	4b93      	ldr	r3, [pc, #588]	; (80079f8 <_dtoa_r+0x598>)
 80077ac:	2703      	movs	r7, #3
 80077ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077b2:	f7f8 ffbb 	bl	800072c <__aeabi_ddiv>
 80077b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ba:	f004 040f 	and.w	r4, r4, #15
 80077be:	4e8e      	ldr	r6, [pc, #568]	; (80079f8 <_dtoa_r+0x598>)
 80077c0:	b954      	cbnz	r4, 80077d8 <_dtoa_r+0x378>
 80077c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ca:	f7f8 ffaf 	bl	800072c <__aeabi_ddiv>
 80077ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077d2:	e029      	b.n	8007828 <_dtoa_r+0x3c8>
 80077d4:	2702      	movs	r7, #2
 80077d6:	e7f2      	b.n	80077be <_dtoa_r+0x35e>
 80077d8:	07e1      	lsls	r1, r4, #31
 80077da:	d508      	bpl.n	80077ee <_dtoa_r+0x38e>
 80077dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077e4:	f7f8 fe78 	bl	80004d8 <__aeabi_dmul>
 80077e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077ec:	3701      	adds	r7, #1
 80077ee:	1064      	asrs	r4, r4, #1
 80077f0:	3608      	adds	r6, #8
 80077f2:	e7e5      	b.n	80077c0 <_dtoa_r+0x360>
 80077f4:	f000 80a5 	beq.w	8007942 <_dtoa_r+0x4e2>
 80077f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077fc:	f1cb 0400 	rsb	r4, fp, #0
 8007800:	4b7c      	ldr	r3, [pc, #496]	; (80079f4 <_dtoa_r+0x594>)
 8007802:	f004 020f 	and.w	r2, r4, #15
 8007806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fe63 	bl	80004d8 <__aeabi_dmul>
 8007812:	2702      	movs	r7, #2
 8007814:	2300      	movs	r3, #0
 8007816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800781a:	4e77      	ldr	r6, [pc, #476]	; (80079f8 <_dtoa_r+0x598>)
 800781c:	1124      	asrs	r4, r4, #4
 800781e:	2c00      	cmp	r4, #0
 8007820:	f040 8084 	bne.w	800792c <_dtoa_r+0x4cc>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1d2      	bne.n	80077ce <_dtoa_r+0x36e>
 8007828:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800782c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 8087 	beq.w	8007946 <_dtoa_r+0x4e6>
 8007838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800783c:	2200      	movs	r2, #0
 800783e:	4b6f      	ldr	r3, [pc, #444]	; (80079fc <_dtoa_r+0x59c>)
 8007840:	f7f9 f8bc 	bl	80009bc <__aeabi_dcmplt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d07e      	beq.n	8007946 <_dtoa_r+0x4e6>
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d07b      	beq.n	8007946 <_dtoa_r+0x4e6>
 800784e:	9b06      	ldr	r3, [sp, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	dd38      	ble.n	80078c6 <_dtoa_r+0x466>
 8007854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007858:	2200      	movs	r2, #0
 800785a:	4b69      	ldr	r3, [pc, #420]	; (8007a00 <_dtoa_r+0x5a0>)
 800785c:	f7f8 fe3c 	bl	80004d8 <__aeabi_dmul>
 8007860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007864:	9c06      	ldr	r4, [sp, #24]
 8007866:	f10b 38ff 	add.w	r8, fp, #4294967295
 800786a:	3701      	adds	r7, #1
 800786c:	4638      	mov	r0, r7
 800786e:	f7f8 fdc9 	bl	8000404 <__aeabi_i2d>
 8007872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007876:	f7f8 fe2f 	bl	80004d8 <__aeabi_dmul>
 800787a:	2200      	movs	r2, #0
 800787c:	4b61      	ldr	r3, [pc, #388]	; (8007a04 <_dtoa_r+0x5a4>)
 800787e:	f7f8 fc75 	bl	800016c <__adddf3>
 8007882:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007886:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800788a:	9611      	str	r6, [sp, #68]	; 0x44
 800788c:	2c00      	cmp	r4, #0
 800788e:	d15d      	bne.n	800794c <_dtoa_r+0x4ec>
 8007890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007894:	2200      	movs	r2, #0
 8007896:	4b5c      	ldr	r3, [pc, #368]	; (8007a08 <_dtoa_r+0x5a8>)
 8007898:	f7f8 fc66 	bl	8000168 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078a4:	4633      	mov	r3, r6
 80078a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078a8:	f7f9 f8a6 	bl	80009f8 <__aeabi_dcmpgt>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f040 8295 	bne.w	8007ddc <_dtoa_r+0x97c>
 80078b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078bc:	f7f9 f87e 	bl	80009bc <__aeabi_dcmplt>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f040 8289 	bne.w	8007dd8 <_dtoa_r+0x978>
 80078c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80078ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f2c0 8151 	blt.w	8007b78 <_dtoa_r+0x718>
 80078d6:	f1bb 0f0e 	cmp.w	fp, #14
 80078da:	f300 814d 	bgt.w	8007b78 <_dtoa_r+0x718>
 80078de:	4b45      	ldr	r3, [pc, #276]	; (80079f4 <_dtoa_r+0x594>)
 80078e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80078ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f280 80da 	bge.w	8007aa8 <_dtoa_r+0x648>
 80078f4:	9b08      	ldr	r3, [sp, #32]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f300 80d6 	bgt.w	8007aa8 <_dtoa_r+0x648>
 80078fc:	f040 826b 	bne.w	8007dd6 <_dtoa_r+0x976>
 8007900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007904:	2200      	movs	r2, #0
 8007906:	4b40      	ldr	r3, [pc, #256]	; (8007a08 <_dtoa_r+0x5a8>)
 8007908:	f7f8 fde6 	bl	80004d8 <__aeabi_dmul>
 800790c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007910:	f7f9 f868 	bl	80009e4 <__aeabi_dcmpge>
 8007914:	9c08      	ldr	r4, [sp, #32]
 8007916:	4626      	mov	r6, r4
 8007918:	2800      	cmp	r0, #0
 800791a:	f040 8241 	bne.w	8007da0 <_dtoa_r+0x940>
 800791e:	2331      	movs	r3, #49	; 0x31
 8007920:	9f03      	ldr	r7, [sp, #12]
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	f807 3b01 	strb.w	r3, [r7], #1
 800792a:	e23d      	b.n	8007da8 <_dtoa_r+0x948>
 800792c:	07e2      	lsls	r2, r4, #31
 800792e:	d505      	bpl.n	800793c <_dtoa_r+0x4dc>
 8007930:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007934:	f7f8 fdd0 	bl	80004d8 <__aeabi_dmul>
 8007938:	2301      	movs	r3, #1
 800793a:	3701      	adds	r7, #1
 800793c:	1064      	asrs	r4, r4, #1
 800793e:	3608      	adds	r6, #8
 8007940:	e76d      	b.n	800781e <_dtoa_r+0x3be>
 8007942:	2702      	movs	r7, #2
 8007944:	e770      	b.n	8007828 <_dtoa_r+0x3c8>
 8007946:	46d8      	mov	r8, fp
 8007948:	9c08      	ldr	r4, [sp, #32]
 800794a:	e78f      	b.n	800786c <_dtoa_r+0x40c>
 800794c:	9903      	ldr	r1, [sp, #12]
 800794e:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <_dtoa_r+0x594>)
 8007950:	4421      	add	r1, r4
 8007952:	9112      	str	r1, [sp, #72]	; 0x48
 8007954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007956:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800795a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800795e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007962:	2900      	cmp	r1, #0
 8007964:	d054      	beq.n	8007a10 <_dtoa_r+0x5b0>
 8007966:	2000      	movs	r0, #0
 8007968:	4928      	ldr	r1, [pc, #160]	; (8007a0c <_dtoa_r+0x5ac>)
 800796a:	f7f8 fedf 	bl	800072c <__aeabi_ddiv>
 800796e:	463b      	mov	r3, r7
 8007970:	4632      	mov	r2, r6
 8007972:	f7f8 fbf9 	bl	8000168 <__aeabi_dsub>
 8007976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800797a:	9f03      	ldr	r7, [sp, #12]
 800797c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007980:	f7f9 f85a 	bl	8000a38 <__aeabi_d2iz>
 8007984:	4604      	mov	r4, r0
 8007986:	f7f8 fd3d 	bl	8000404 <__aeabi_i2d>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007992:	f7f8 fbe9 	bl	8000168 <__aeabi_dsub>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	3430      	adds	r4, #48	; 0x30
 800799c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079a4:	f807 4b01 	strb.w	r4, [r7], #1
 80079a8:	f7f9 f808 	bl	80009bc <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d173      	bne.n	8007a98 <_dtoa_r+0x638>
 80079b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b4:	2000      	movs	r0, #0
 80079b6:	4911      	ldr	r1, [pc, #68]	; (80079fc <_dtoa_r+0x59c>)
 80079b8:	f7f8 fbd6 	bl	8000168 <__aeabi_dsub>
 80079bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079c0:	f7f8 fffc 	bl	80009bc <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f040 80b6 	bne.w	8007b36 <_dtoa_r+0x6d6>
 80079ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079cc:	429f      	cmp	r7, r3
 80079ce:	f43f af7a 	beq.w	80078c6 <_dtoa_r+0x466>
 80079d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079d6:	2200      	movs	r2, #0
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <_dtoa_r+0x5a0>)
 80079da:	f7f8 fd7d 	bl	80004d8 <__aeabi_dmul>
 80079de:	2200      	movs	r2, #0
 80079e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e8:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <_dtoa_r+0x5a0>)
 80079ea:	f7f8 fd75 	bl	80004d8 <__aeabi_dmul>
 80079ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f2:	e7c3      	b.n	800797c <_dtoa_r+0x51c>
 80079f4:	0800ac38 	.word	0x0800ac38
 80079f8:	0800ac10 	.word	0x0800ac10
 80079fc:	3ff00000 	.word	0x3ff00000
 8007a00:	40240000 	.word	0x40240000
 8007a04:	401c0000 	.word	0x401c0000
 8007a08:	40140000 	.word	0x40140000
 8007a0c:	3fe00000 	.word	0x3fe00000
 8007a10:	4630      	mov	r0, r6
 8007a12:	4639      	mov	r1, r7
 8007a14:	f7f8 fd60 	bl	80004d8 <__aeabi_dmul>
 8007a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a1e:	9c03      	ldr	r4, [sp, #12]
 8007a20:	9314      	str	r3, [sp, #80]	; 0x50
 8007a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a26:	f7f9 f807 	bl	8000a38 <__aeabi_d2iz>
 8007a2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007a2c:	f7f8 fcea 	bl	8000404 <__aeabi_i2d>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a38:	f7f8 fb96 	bl	8000168 <__aeabi_dsub>
 8007a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a3e:	4606      	mov	r6, r0
 8007a40:	3330      	adds	r3, #48	; 0x30
 8007a42:	f804 3b01 	strb.w	r3, [r4], #1
 8007a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a48:	460f      	mov	r7, r1
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	d124      	bne.n	8007a9c <_dtoa_r+0x63c>
 8007a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a56:	4baf      	ldr	r3, [pc, #700]	; (8007d14 <_dtoa_r+0x8b4>)
 8007a58:	f7f8 fb88 	bl	800016c <__adddf3>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 ffc8 	bl	80009f8 <__aeabi_dcmpgt>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d163      	bne.n	8007b34 <_dtoa_r+0x6d4>
 8007a6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a70:	2000      	movs	r0, #0
 8007a72:	49a8      	ldr	r1, [pc, #672]	; (8007d14 <_dtoa_r+0x8b4>)
 8007a74:	f7f8 fb78 	bl	8000168 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 ff9c 	bl	80009bc <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f af1e 	beq.w	80078c6 <_dtoa_r+0x466>
 8007a8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a8c:	1e7b      	subs	r3, r7, #1
 8007a8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a94:	2b30      	cmp	r3, #48	; 0x30
 8007a96:	d0f8      	beq.n	8007a8a <_dtoa_r+0x62a>
 8007a98:	46c3      	mov	fp, r8
 8007a9a:	e03b      	b.n	8007b14 <_dtoa_r+0x6b4>
 8007a9c:	4b9e      	ldr	r3, [pc, #632]	; (8007d18 <_dtoa_r+0x8b8>)
 8007a9e:	f7f8 fd1b 	bl	80004d8 <__aeabi_dmul>
 8007aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa6:	e7bc      	b.n	8007a22 <_dtoa_r+0x5c2>
 8007aa8:	9f03      	ldr	r7, [sp, #12]
 8007aaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	f7f8 fe39 	bl	800072c <__aeabi_ddiv>
 8007aba:	f7f8 ffbd 	bl	8000a38 <__aeabi_d2iz>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	f7f8 fca0 	bl	8000404 <__aeabi_i2d>
 8007ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac8:	f7f8 fd06 	bl	80004d8 <__aeabi_dmul>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	f7f8 fb48 	bl	8000168 <__aeabi_dsub>
 8007ad8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007adc:	f807 6b01 	strb.w	r6, [r7], #1
 8007ae0:	9e03      	ldr	r6, [sp, #12]
 8007ae2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ae6:	1bbe      	subs	r6, r7, r6
 8007ae8:	45b4      	cmp	ip, r6
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	d136      	bne.n	8007b5e <_dtoa_r+0x6fe>
 8007af0:	f7f8 fb3c 	bl	800016c <__adddf3>
 8007af4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007af8:	4680      	mov	r8, r0
 8007afa:	4689      	mov	r9, r1
 8007afc:	f7f8 ff7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007b00:	bb58      	cbnz	r0, 8007b5a <_dtoa_r+0x6fa>
 8007b02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b06:	4640      	mov	r0, r8
 8007b08:	4649      	mov	r1, r9
 8007b0a:	f7f8 ff4d 	bl	80009a8 <__aeabi_dcmpeq>
 8007b0e:	b108      	cbz	r0, 8007b14 <_dtoa_r+0x6b4>
 8007b10:	07e3      	lsls	r3, r4, #31
 8007b12:	d422      	bmi.n	8007b5a <_dtoa_r+0x6fa>
 8007b14:	4651      	mov	r1, sl
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fbc2 	bl	80082a0 <_Bfree>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b20:	703b      	strb	r3, [r7, #0]
 8007b22:	f10b 0301 	add.w	r3, fp, #1
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f43f ace6 	beq.w	80074fc <_dtoa_r+0x9c>
 8007b30:	601f      	str	r7, [r3, #0]
 8007b32:	e4e3      	b.n	80074fc <_dtoa_r+0x9c>
 8007b34:	4627      	mov	r7, r4
 8007b36:	463b      	mov	r3, r7
 8007b38:	461f      	mov	r7, r3
 8007b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b3e:	2a39      	cmp	r2, #57	; 0x39
 8007b40:	d107      	bne.n	8007b52 <_dtoa_r+0x6f2>
 8007b42:	9a03      	ldr	r2, [sp, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1f7      	bne.n	8007b38 <_dtoa_r+0x6d8>
 8007b48:	2230      	movs	r2, #48	; 0x30
 8007b4a:	9903      	ldr	r1, [sp, #12]
 8007b4c:	f108 0801 	add.w	r8, r8, #1
 8007b50:	700a      	strb	r2, [r1, #0]
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	3201      	adds	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	e79e      	b.n	8007a98 <_dtoa_r+0x638>
 8007b5a:	46d8      	mov	r8, fp
 8007b5c:	e7eb      	b.n	8007b36 <_dtoa_r+0x6d6>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	4b6d      	ldr	r3, [pc, #436]	; (8007d18 <_dtoa_r+0x8b8>)
 8007b62:	f7f8 fcb9 	bl	80004d8 <__aeabi_dmul>
 8007b66:	2200      	movs	r2, #0
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	f7f8 ff1b 	bl	80009a8 <__aeabi_dcmpeq>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d09b      	beq.n	8007aae <_dtoa_r+0x64e>
 8007b76:	e7cd      	b.n	8007b14 <_dtoa_r+0x6b4>
 8007b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	f000 80c4 	beq.w	8007d08 <_dtoa_r+0x8a8>
 8007b80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b82:	2a01      	cmp	r2, #1
 8007b84:	f300 80a8 	bgt.w	8007cd8 <_dtoa_r+0x878>
 8007b88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	f000 80a0 	beq.w	8007cd0 <_dtoa_r+0x870>
 8007b90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b94:	464f      	mov	r7, r9
 8007b96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	4499      	add	r9, r3
 8007ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba4:	f000 fc7c 	bl	80084a0 <__i2b>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	b15f      	cbz	r7, 8007bc4 <_dtoa_r+0x764>
 8007bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd08      	ble.n	8007bc4 <_dtoa_r+0x764>
 8007bb2:	42bb      	cmp	r3, r7
 8007bb4:	bfa8      	it	ge
 8007bb6:	463b      	movge	r3, r7
 8007bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bba:	eba9 0903 	sub.w	r9, r9, r3
 8007bbe:	1aff      	subs	r7, r7, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc6:	b1f3      	cbz	r3, 8007c06 <_dtoa_r+0x7a6>
 8007bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80a0 	beq.w	8007d10 <_dtoa_r+0x8b0>
 8007bd0:	2c00      	cmp	r4, #0
 8007bd2:	dd10      	ble.n	8007bf6 <_dtoa_r+0x796>
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 fd1f 	bl	800861c <__pow5mult>
 8007bde:	4652      	mov	r2, sl
 8007be0:	4601      	mov	r1, r0
 8007be2:	4606      	mov	r6, r0
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 fc71 	bl	80084cc <__multiply>
 8007bea:	4680      	mov	r8, r0
 8007bec:	4651      	mov	r1, sl
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fb56 	bl	80082a0 <_Bfree>
 8007bf4:	46c2      	mov	sl, r8
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	1b1a      	subs	r2, r3, r4
 8007bfa:	d004      	beq.n	8007c06 <_dtoa_r+0x7a6>
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 fd0c 	bl	800861c <__pow5mult>
 8007c04:	4682      	mov	sl, r0
 8007c06:	2101      	movs	r1, #1
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 fc49 	bl	80084a0 <__i2b>
 8007c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c10:	4604      	mov	r4, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f340 8082 	ble.w	8007d1c <_dtoa_r+0x8bc>
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 fcfd 	bl	800861c <__pow5mult>
 8007c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c24:	4604      	mov	r4, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	dd7b      	ble.n	8007d22 <_dtoa_r+0x8c2>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c34:	6918      	ldr	r0, [r3, #16]
 8007c36:	f000 fbe5 	bl	8008404 <__hi0bits>
 8007c3a:	f1c0 0020 	rsb	r0, r0, #32
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	4418      	add	r0, r3
 8007c42:	f010 001f 	ands.w	r0, r0, #31
 8007c46:	f000 8092 	beq.w	8007d6e <_dtoa_r+0x90e>
 8007c4a:	f1c0 0320 	rsb	r3, r0, #32
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	f340 8085 	ble.w	8007d5e <_dtoa_r+0x8fe>
 8007c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c56:	f1c0 001c 	rsb	r0, r0, #28
 8007c5a:	4403      	add	r3, r0
 8007c5c:	4481      	add	r9, r0
 8007c5e:	4407      	add	r7, r0
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	f1b9 0f00 	cmp.w	r9, #0
 8007c66:	dd05      	ble.n	8007c74 <_dtoa_r+0x814>
 8007c68:	4651      	mov	r1, sl
 8007c6a:	464a      	mov	r2, r9
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 fd2f 	bl	80086d0 <__lshift>
 8007c72:	4682      	mov	sl, r0
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd05      	ble.n	8007c86 <_dtoa_r+0x826>
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fd26 	bl	80086d0 <__lshift>
 8007c84:	4604      	mov	r4, r0
 8007c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d072      	beq.n	8007d72 <_dtoa_r+0x912>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f000 fd8a 	bl	80087a8 <__mcmp>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	da6c      	bge.n	8007d72 <_dtoa_r+0x912>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4651      	mov	r1, sl
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 fb20 	bl	80082e4 <__multadd>
 8007ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca6:	4682      	mov	sl, r0
 8007ca8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 81ac 	beq.w	800800a <_dtoa_r+0xbaa>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 fb13 	bl	80082e4 <__multadd>
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f300 8093 	bgt.w	8007dee <_dtoa_r+0x98e>
 8007cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	dc59      	bgt.n	8007d82 <_dtoa_r+0x922>
 8007cce:	e08e      	b.n	8007dee <_dtoa_r+0x98e>
 8007cd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cd6:	e75d      	b.n	8007b94 <_dtoa_r+0x734>
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	1e5c      	subs	r4, r3, #1
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	bfbf      	itttt	lt
 8007ce2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ce4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007ce6:	1ae3      	sublt	r3, r4, r3
 8007ce8:	18d2      	addlt	r2, r2, r3
 8007cea:	bfa8      	it	ge
 8007cec:	1b1c      	subge	r4, r3, r4
 8007cee:	9b08      	ldr	r3, [sp, #32]
 8007cf0:	bfbe      	ittt	lt
 8007cf2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007cf4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007cf6:	2400      	movlt	r4, #0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfb5      	itete	lt
 8007cfc:	eba9 0703 	sublt.w	r7, r9, r3
 8007d00:	464f      	movge	r7, r9
 8007d02:	2300      	movlt	r3, #0
 8007d04:	9b08      	ldrge	r3, [sp, #32]
 8007d06:	e747      	b.n	8007b98 <_dtoa_r+0x738>
 8007d08:	464f      	mov	r7, r9
 8007d0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d0e:	e74c      	b.n	8007baa <_dtoa_r+0x74a>
 8007d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d12:	e773      	b.n	8007bfc <_dtoa_r+0x79c>
 8007d14:	3fe00000 	.word	0x3fe00000
 8007d18:	40240000 	.word	0x40240000
 8007d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	dc18      	bgt.n	8007d54 <_dtoa_r+0x8f4>
 8007d22:	9b04      	ldr	r3, [sp, #16]
 8007d24:	b9b3      	cbnz	r3, 8007d54 <_dtoa_r+0x8f4>
 8007d26:	9b05      	ldr	r3, [sp, #20]
 8007d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d2c:	b993      	cbnz	r3, 8007d54 <_dtoa_r+0x8f4>
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d34:	0d1b      	lsrs	r3, r3, #20
 8007d36:	051b      	lsls	r3, r3, #20
 8007d38:	b17b      	cbz	r3, 8007d5a <_dtoa_r+0x8fa>
 8007d3a:	f04f 0801 	mov.w	r8, #1
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	f109 0901 	add.w	r9, r9, #1
 8007d44:	3301      	adds	r3, #1
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af6f 	bne.w	8007c2e <_dtoa_r+0x7ce>
 8007d50:	2001      	movs	r0, #1
 8007d52:	e774      	b.n	8007c3e <_dtoa_r+0x7de>
 8007d54:	f04f 0800 	mov.w	r8, #0
 8007d58:	e7f6      	b.n	8007d48 <_dtoa_r+0x8e8>
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	e7f4      	b.n	8007d48 <_dtoa_r+0x8e8>
 8007d5e:	d080      	beq.n	8007c62 <_dtoa_r+0x802>
 8007d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d62:	331c      	adds	r3, #28
 8007d64:	441a      	add	r2, r3
 8007d66:	4499      	add	r9, r3
 8007d68:	441f      	add	r7, r3
 8007d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6c:	e779      	b.n	8007c62 <_dtoa_r+0x802>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	e7f6      	b.n	8007d60 <_dtoa_r+0x900>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dc34      	bgt.n	8007de2 <_dtoa_r+0x982>
 8007d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	dd31      	ble.n	8007de2 <_dtoa_r+0x982>
 8007d7e:	9b08      	ldr	r3, [sp, #32]
 8007d80:	9306      	str	r3, [sp, #24]
 8007d82:	9b06      	ldr	r3, [sp, #24]
 8007d84:	b963      	cbnz	r3, 8007da0 <_dtoa_r+0x940>
 8007d86:	4621      	mov	r1, r4
 8007d88:	2205      	movs	r2, #5
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 faaa 	bl	80082e4 <__multadd>
 8007d90:	4601      	mov	r1, r0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4650      	mov	r0, sl
 8007d96:	f000 fd07 	bl	80087a8 <__mcmp>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	f73f adbf 	bgt.w	800791e <_dtoa_r+0x4be>
 8007da0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007da2:	9f03      	ldr	r7, [sp, #12]
 8007da4:	ea6f 0b03 	mvn.w	fp, r3
 8007da8:	f04f 0800 	mov.w	r8, #0
 8007dac:	4621      	mov	r1, r4
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 fa76 	bl	80082a0 <_Bfree>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	f43f aead 	beq.w	8007b14 <_dtoa_r+0x6b4>
 8007dba:	f1b8 0f00 	cmp.w	r8, #0
 8007dbe:	d005      	beq.n	8007dcc <_dtoa_r+0x96c>
 8007dc0:	45b0      	cmp	r8, r6
 8007dc2:	d003      	beq.n	8007dcc <_dtoa_r+0x96c>
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 fa6a 	bl	80082a0 <_Bfree>
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 fa66 	bl	80082a0 <_Bfree>
 8007dd4:	e69e      	b.n	8007b14 <_dtoa_r+0x6b4>
 8007dd6:	2400      	movs	r4, #0
 8007dd8:	4626      	mov	r6, r4
 8007dda:	e7e1      	b.n	8007da0 <_dtoa_r+0x940>
 8007ddc:	46c3      	mov	fp, r8
 8007dde:	4626      	mov	r6, r4
 8007de0:	e59d      	b.n	800791e <_dtoa_r+0x4be>
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80c8 	beq.w	8007f7a <_dtoa_r+0xb1a>
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	9306      	str	r3, [sp, #24]
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	dd05      	ble.n	8007dfe <_dtoa_r+0x99e>
 8007df2:	4631      	mov	r1, r6
 8007df4:	463a      	mov	r2, r7
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fc6a 	bl	80086d0 <__lshift>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	f1b8 0f00 	cmp.w	r8, #0
 8007e02:	d05b      	beq.n	8007ebc <_dtoa_r+0xa5c>
 8007e04:	4628      	mov	r0, r5
 8007e06:	6871      	ldr	r1, [r6, #4]
 8007e08:	f000 fa0a 	bl	8008220 <_Balloc>
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	b928      	cbnz	r0, 8007e1c <_dtoa_r+0x9bc>
 8007e10:	4602      	mov	r2, r0
 8007e12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e16:	4b81      	ldr	r3, [pc, #516]	; (800801c <_dtoa_r+0xbbc>)
 8007e18:	f7ff bb36 	b.w	8007488 <_dtoa_r+0x28>
 8007e1c:	6932      	ldr	r2, [r6, #16]
 8007e1e:	f106 010c 	add.w	r1, r6, #12
 8007e22:	3202      	adds	r2, #2
 8007e24:	0092      	lsls	r2, r2, #2
 8007e26:	300c      	adds	r0, #12
 8007e28:	f7ff fa7d 	bl	8007326 <memcpy>
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4639      	mov	r1, r7
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 fc4d 	bl	80086d0 <__lshift>
 8007e36:	46b0      	mov	r8, r6
 8007e38:	4606      	mov	r6, r0
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	9a03      	ldr	r2, [sp, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	4413      	add	r3, r2
 8007e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	4621      	mov	r1, r4
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4650      	mov	r0, sl
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	f7ff fa77 	bl	800734c <quorem>
 8007e5e:	4641      	mov	r1, r8
 8007e60:	9006      	str	r0, [sp, #24]
 8007e62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e66:	4650      	mov	r0, sl
 8007e68:	f000 fc9e 	bl	80087a8 <__mcmp>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fcb4 	bl	80087e0 <__mdiff>
 8007e78:	68c2      	ldr	r2, [r0, #12]
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	bb02      	cbnz	r2, 8007ec0 <_dtoa_r+0xa60>
 8007e7e:	4601      	mov	r1, r0
 8007e80:	4650      	mov	r0, sl
 8007e82:	f000 fc91 	bl	80087a8 <__mcmp>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	920c      	str	r2, [sp, #48]	; 0x30
 8007e8e:	f000 fa07 	bl	80082a0 <_Bfree>
 8007e92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e96:	9f08      	ldr	r7, [sp, #32]
 8007e98:	ea43 0102 	orr.w	r1, r3, r2
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	4319      	orrs	r1, r3
 8007ea0:	d110      	bne.n	8007ec4 <_dtoa_r+0xa64>
 8007ea2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ea6:	d029      	beq.n	8007efc <_dtoa_r+0xa9c>
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd02      	ble.n	8007eb4 <_dtoa_r+0xa54>
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	f883 9000 	strb.w	r9, [r3]
 8007eba:	e777      	b.n	8007dac <_dtoa_r+0x94c>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	e7ba      	b.n	8007e36 <_dtoa_r+0x9d6>
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	e7e1      	b.n	8007e88 <_dtoa_r+0xa28>
 8007ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	db04      	blt.n	8007ed4 <_dtoa_r+0xa74>
 8007eca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	d120      	bne.n	8007f16 <_dtoa_r+0xab6>
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	dded      	ble.n	8007eb4 <_dtoa_r+0xa54>
 8007ed8:	4651      	mov	r1, sl
 8007eda:	2201      	movs	r2, #1
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 fbf7 	bl	80086d0 <__lshift>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	f000 fc5f 	bl	80087a8 <__mcmp>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	dc03      	bgt.n	8007ef6 <_dtoa_r+0xa96>
 8007eee:	d1e1      	bne.n	8007eb4 <_dtoa_r+0xa54>
 8007ef0:	f019 0f01 	tst.w	r9, #1
 8007ef4:	d0de      	beq.n	8007eb4 <_dtoa_r+0xa54>
 8007ef6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007efa:	d1d8      	bne.n	8007eae <_dtoa_r+0xa4e>
 8007efc:	2339      	movs	r3, #57	; 0x39
 8007efe:	9a04      	ldr	r2, [sp, #16]
 8007f00:	7013      	strb	r3, [r2, #0]
 8007f02:	463b      	mov	r3, r7
 8007f04:	461f      	mov	r7, r3
 8007f06:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	2a39      	cmp	r2, #57	; 0x39
 8007f0e:	d06b      	beq.n	8007fe8 <_dtoa_r+0xb88>
 8007f10:	3201      	adds	r2, #1
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e74a      	b.n	8007dac <_dtoa_r+0x94c>
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	dd07      	ble.n	8007f2a <_dtoa_r+0xaca>
 8007f1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f1e:	d0ed      	beq.n	8007efc <_dtoa_r+0xa9c>
 8007f20:	9a04      	ldr	r2, [sp, #16]
 8007f22:	f109 0301 	add.w	r3, r9, #1
 8007f26:	7013      	strb	r3, [r2, #0]
 8007f28:	e740      	b.n	8007dac <_dtoa_r+0x94c>
 8007f2a:	9b08      	ldr	r3, [sp, #32]
 8007f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d042      	beq.n	8007fbc <_dtoa_r+0xb5c>
 8007f36:	4651      	mov	r1, sl
 8007f38:	2300      	movs	r3, #0
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f000 f9d1 	bl	80082e4 <__multadd>
 8007f42:	45b0      	cmp	r8, r6
 8007f44:	4682      	mov	sl, r0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	f04f 020a 	mov.w	r2, #10
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4628      	mov	r0, r5
 8007f52:	d107      	bne.n	8007f64 <_dtoa_r+0xb04>
 8007f54:	f000 f9c6 	bl	80082e4 <__multadd>
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	9308      	str	r3, [sp, #32]
 8007f62:	e775      	b.n	8007e50 <_dtoa_r+0x9f0>
 8007f64:	f000 f9be 	bl	80082e4 <__multadd>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f9b7 	bl	80082e4 <__multadd>
 8007f76:	4606      	mov	r6, r0
 8007f78:	e7f0      	b.n	8007f5c <_dtoa_r+0xafc>
 8007f7a:	9b08      	ldr	r3, [sp, #32]
 8007f7c:	9306      	str	r3, [sp, #24]
 8007f7e:	9f03      	ldr	r7, [sp, #12]
 8007f80:	4621      	mov	r1, r4
 8007f82:	4650      	mov	r0, sl
 8007f84:	f7ff f9e2 	bl	800734c <quorem>
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f8e:	f807 9b01 	strb.w	r9, [r7], #1
 8007f92:	1afa      	subs	r2, r7, r3
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	4293      	cmp	r3, r2
 8007f98:	dd07      	ble.n	8007faa <_dtoa_r+0xb4a>
 8007f9a:	4651      	mov	r1, sl
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 f99f 	bl	80082e4 <__multadd>
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	e7ea      	b.n	8007f80 <_dtoa_r+0xb20>
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	f04f 0800 	mov.w	r8, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfcc      	ite	gt
 8007fb4:	461f      	movgt	r7, r3
 8007fb6:	2701      	movle	r7, #1
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	441f      	add	r7, r3
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 fb85 	bl	80086d0 <__lshift>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4682      	mov	sl, r0
 8007fca:	f000 fbed 	bl	80087a8 <__mcmp>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	dc97      	bgt.n	8007f02 <_dtoa_r+0xaa2>
 8007fd2:	d102      	bne.n	8007fda <_dtoa_r+0xb7a>
 8007fd4:	f019 0f01 	tst.w	r9, #1
 8007fd8:	d193      	bne.n	8007f02 <_dtoa_r+0xaa2>
 8007fda:	463b      	mov	r3, r7
 8007fdc:	461f      	mov	r7, r3
 8007fde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fe2:	2a30      	cmp	r2, #48	; 0x30
 8007fe4:	d0fa      	beq.n	8007fdc <_dtoa_r+0xb7c>
 8007fe6:	e6e1      	b.n	8007dac <_dtoa_r+0x94c>
 8007fe8:	9a03      	ldr	r2, [sp, #12]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d18a      	bne.n	8007f04 <_dtoa_r+0xaa4>
 8007fee:	2331      	movs	r3, #49	; 0x31
 8007ff0:	f10b 0b01 	add.w	fp, fp, #1
 8007ff4:	e797      	b.n	8007f26 <_dtoa_r+0xac6>
 8007ff6:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <_dtoa_r+0xbc0>)
 8007ff8:	f7ff ba9f 	b.w	800753a <_dtoa_r+0xda>
 8007ffc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f47f aa77 	bne.w	80074f2 <_dtoa_r+0x92>
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <_dtoa_r+0xbc4>)
 8008006:	f7ff ba98 	b.w	800753a <_dtoa_r+0xda>
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dcb6      	bgt.n	8007f7e <_dtoa_r+0xb1e>
 8008010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008012:	2b02      	cmp	r3, #2
 8008014:	f73f aeb5 	bgt.w	8007d82 <_dtoa_r+0x922>
 8008018:	e7b1      	b.n	8007f7e <_dtoa_r+0xb1e>
 800801a:	bf00      	nop
 800801c:	0800aba3 	.word	0x0800aba3
 8008020:	0800aafe 	.word	0x0800aafe
 8008024:	0800ab27 	.word	0x0800ab27

08008028 <_free_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4605      	mov	r5, r0
 800802c:	2900      	cmp	r1, #0
 800802e:	d040      	beq.n	80080b2 <_free_r+0x8a>
 8008030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008034:	1f0c      	subs	r4, r1, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfb8      	it	lt
 800803a:	18e4      	addlt	r4, r4, r3
 800803c:	f000 f8e4 	bl	8008208 <__malloc_lock>
 8008040:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <_free_r+0x8c>)
 8008042:	6813      	ldr	r3, [r2, #0]
 8008044:	b933      	cbnz	r3, 8008054 <_free_r+0x2c>
 8008046:	6063      	str	r3, [r4, #4]
 8008048:	6014      	str	r4, [r2, #0]
 800804a:	4628      	mov	r0, r5
 800804c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008050:	f000 b8e0 	b.w	8008214 <__malloc_unlock>
 8008054:	42a3      	cmp	r3, r4
 8008056:	d908      	bls.n	800806a <_free_r+0x42>
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	1821      	adds	r1, r4, r0
 800805c:	428b      	cmp	r3, r1
 800805e:	bf01      	itttt	eq
 8008060:	6819      	ldreq	r1, [r3, #0]
 8008062:	685b      	ldreq	r3, [r3, #4]
 8008064:	1809      	addeq	r1, r1, r0
 8008066:	6021      	streq	r1, [r4, #0]
 8008068:	e7ed      	b.n	8008046 <_free_r+0x1e>
 800806a:	461a      	mov	r2, r3
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	b10b      	cbz	r3, 8008074 <_free_r+0x4c>
 8008070:	42a3      	cmp	r3, r4
 8008072:	d9fa      	bls.n	800806a <_free_r+0x42>
 8008074:	6811      	ldr	r1, [r2, #0]
 8008076:	1850      	adds	r0, r2, r1
 8008078:	42a0      	cmp	r0, r4
 800807a:	d10b      	bne.n	8008094 <_free_r+0x6c>
 800807c:	6820      	ldr	r0, [r4, #0]
 800807e:	4401      	add	r1, r0
 8008080:	1850      	adds	r0, r2, r1
 8008082:	4283      	cmp	r3, r0
 8008084:	6011      	str	r1, [r2, #0]
 8008086:	d1e0      	bne.n	800804a <_free_r+0x22>
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	4408      	add	r0, r1
 800808e:	6010      	str	r0, [r2, #0]
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	e7da      	b.n	800804a <_free_r+0x22>
 8008094:	d902      	bls.n	800809c <_free_r+0x74>
 8008096:	230c      	movs	r3, #12
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	e7d6      	b.n	800804a <_free_r+0x22>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	1821      	adds	r1, r4, r0
 80080a0:	428b      	cmp	r3, r1
 80080a2:	bf01      	itttt	eq
 80080a4:	6819      	ldreq	r1, [r3, #0]
 80080a6:	685b      	ldreq	r3, [r3, #4]
 80080a8:	1809      	addeq	r1, r1, r0
 80080aa:	6021      	streq	r1, [r4, #0]
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	6054      	str	r4, [r2, #4]
 80080b0:	e7cb      	b.n	800804a <_free_r+0x22>
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20003060 	.word	0x20003060

080080b8 <malloc>:
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <malloc+0xc>)
 80080ba:	4601      	mov	r1, r0
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f000 b823 	b.w	8008108 <_malloc_r>
 80080c2:	bf00      	nop
 80080c4:	20000074 	.word	0x20000074

080080c8 <sbrk_aligned>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4e0e      	ldr	r6, [pc, #56]	; (8008104 <sbrk_aligned+0x3c>)
 80080cc:	460c      	mov	r4, r1
 80080ce:	6831      	ldr	r1, [r6, #0]
 80080d0:	4605      	mov	r5, r0
 80080d2:	b911      	cbnz	r1, 80080da <sbrk_aligned+0x12>
 80080d4:	f001 fe0c 	bl	8009cf0 <_sbrk_r>
 80080d8:	6030      	str	r0, [r6, #0]
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f001 fe07 	bl	8009cf0 <_sbrk_r>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	d00a      	beq.n	80080fc <sbrk_aligned+0x34>
 80080e6:	1cc4      	adds	r4, r0, #3
 80080e8:	f024 0403 	bic.w	r4, r4, #3
 80080ec:	42a0      	cmp	r0, r4
 80080ee:	d007      	beq.n	8008100 <sbrk_aligned+0x38>
 80080f0:	1a21      	subs	r1, r4, r0
 80080f2:	4628      	mov	r0, r5
 80080f4:	f001 fdfc 	bl	8009cf0 <_sbrk_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	d101      	bne.n	8008100 <sbrk_aligned+0x38>
 80080fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008100:	4620      	mov	r0, r4
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	20003064 	.word	0x20003064

08008108 <_malloc_r>:
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800810c:	1ccd      	adds	r5, r1, #3
 800810e:	f025 0503 	bic.w	r5, r5, #3
 8008112:	3508      	adds	r5, #8
 8008114:	2d0c      	cmp	r5, #12
 8008116:	bf38      	it	cc
 8008118:	250c      	movcc	r5, #12
 800811a:	2d00      	cmp	r5, #0
 800811c:	4607      	mov	r7, r0
 800811e:	db01      	blt.n	8008124 <_malloc_r+0x1c>
 8008120:	42a9      	cmp	r1, r5
 8008122:	d905      	bls.n	8008130 <_malloc_r+0x28>
 8008124:	230c      	movs	r3, #12
 8008126:	2600      	movs	r6, #0
 8008128:	603b      	str	r3, [r7, #0]
 800812a:	4630      	mov	r0, r6
 800812c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008204 <_malloc_r+0xfc>
 8008134:	f000 f868 	bl	8008208 <__malloc_lock>
 8008138:	f8d8 3000 	ldr.w	r3, [r8]
 800813c:	461c      	mov	r4, r3
 800813e:	bb5c      	cbnz	r4, 8008198 <_malloc_r+0x90>
 8008140:	4629      	mov	r1, r5
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ffc0 	bl	80080c8 <sbrk_aligned>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	4604      	mov	r4, r0
 800814c:	d155      	bne.n	80081fa <_malloc_r+0xf2>
 800814e:	f8d8 4000 	ldr.w	r4, [r8]
 8008152:	4626      	mov	r6, r4
 8008154:	2e00      	cmp	r6, #0
 8008156:	d145      	bne.n	80081e4 <_malloc_r+0xdc>
 8008158:	2c00      	cmp	r4, #0
 800815a:	d048      	beq.n	80081ee <_malloc_r+0xe6>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	4631      	mov	r1, r6
 8008160:	4638      	mov	r0, r7
 8008162:	eb04 0903 	add.w	r9, r4, r3
 8008166:	f001 fdc3 	bl	8009cf0 <_sbrk_r>
 800816a:	4581      	cmp	r9, r0
 800816c:	d13f      	bne.n	80081ee <_malloc_r+0xe6>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	4638      	mov	r0, r7
 8008172:	1a6d      	subs	r5, r5, r1
 8008174:	4629      	mov	r1, r5
 8008176:	f7ff ffa7 	bl	80080c8 <sbrk_aligned>
 800817a:	3001      	adds	r0, #1
 800817c:	d037      	beq.n	80081ee <_malloc_r+0xe6>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	442b      	add	r3, r5
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	f8d8 3000 	ldr.w	r3, [r8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d038      	beq.n	80081fe <_malloc_r+0xf6>
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	42a2      	cmp	r2, r4
 8008190:	d12b      	bne.n	80081ea <_malloc_r+0xe2>
 8008192:	2200      	movs	r2, #0
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	e00f      	b.n	80081b8 <_malloc_r+0xb0>
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	1b52      	subs	r2, r2, r5
 800819c:	d41f      	bmi.n	80081de <_malloc_r+0xd6>
 800819e:	2a0b      	cmp	r2, #11
 80081a0:	d917      	bls.n	80081d2 <_malloc_r+0xca>
 80081a2:	1961      	adds	r1, r4, r5
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	6025      	str	r5, [r4, #0]
 80081a8:	bf18      	it	ne
 80081aa:	6059      	strne	r1, [r3, #4]
 80081ac:	6863      	ldr	r3, [r4, #4]
 80081ae:	bf08      	it	eq
 80081b0:	f8c8 1000 	streq.w	r1, [r8]
 80081b4:	5162      	str	r2, [r4, r5]
 80081b6:	604b      	str	r3, [r1, #4]
 80081b8:	4638      	mov	r0, r7
 80081ba:	f104 060b 	add.w	r6, r4, #11
 80081be:	f000 f829 	bl	8008214 <__malloc_unlock>
 80081c2:	f026 0607 	bic.w	r6, r6, #7
 80081c6:	1d23      	adds	r3, r4, #4
 80081c8:	1af2      	subs	r2, r6, r3
 80081ca:	d0ae      	beq.n	800812a <_malloc_r+0x22>
 80081cc:	1b9b      	subs	r3, r3, r6
 80081ce:	50a3      	str	r3, [r4, r2]
 80081d0:	e7ab      	b.n	800812a <_malloc_r+0x22>
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	6862      	ldr	r2, [r4, #4]
 80081d6:	d1dd      	bne.n	8008194 <_malloc_r+0x8c>
 80081d8:	f8c8 2000 	str.w	r2, [r8]
 80081dc:	e7ec      	b.n	80081b8 <_malloc_r+0xb0>
 80081de:	4623      	mov	r3, r4
 80081e0:	6864      	ldr	r4, [r4, #4]
 80081e2:	e7ac      	b.n	800813e <_malloc_r+0x36>
 80081e4:	4634      	mov	r4, r6
 80081e6:	6876      	ldr	r6, [r6, #4]
 80081e8:	e7b4      	b.n	8008154 <_malloc_r+0x4c>
 80081ea:	4613      	mov	r3, r2
 80081ec:	e7cc      	b.n	8008188 <_malloc_r+0x80>
 80081ee:	230c      	movs	r3, #12
 80081f0:	4638      	mov	r0, r7
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	f000 f80e 	bl	8008214 <__malloc_unlock>
 80081f8:	e797      	b.n	800812a <_malloc_r+0x22>
 80081fa:	6025      	str	r5, [r4, #0]
 80081fc:	e7dc      	b.n	80081b8 <_malloc_r+0xb0>
 80081fe:	605b      	str	r3, [r3, #4]
 8008200:	deff      	udf	#255	; 0xff
 8008202:	bf00      	nop
 8008204:	20003060 	.word	0x20003060

08008208 <__malloc_lock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_lock+0x8>)
 800820a:	f7ff b87c 	b.w	8007306 <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	2000305c 	.word	0x2000305c

08008214 <__malloc_unlock>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__malloc_unlock+0x8>)
 8008216:	f7ff b877 	b.w	8007308 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	2000305c 	.word	0x2000305c

08008220 <_Balloc>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	69c6      	ldr	r6, [r0, #28]
 8008224:	4604      	mov	r4, r0
 8008226:	460d      	mov	r5, r1
 8008228:	b976      	cbnz	r6, 8008248 <_Balloc+0x28>
 800822a:	2010      	movs	r0, #16
 800822c:	f7ff ff44 	bl	80080b8 <malloc>
 8008230:	4602      	mov	r2, r0
 8008232:	61e0      	str	r0, [r4, #28]
 8008234:	b920      	cbnz	r0, 8008240 <_Balloc+0x20>
 8008236:	216b      	movs	r1, #107	; 0x6b
 8008238:	4b17      	ldr	r3, [pc, #92]	; (8008298 <_Balloc+0x78>)
 800823a:	4818      	ldr	r0, [pc, #96]	; (800829c <_Balloc+0x7c>)
 800823c:	f001 fd6e 	bl	8009d1c <__assert_func>
 8008240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008244:	6006      	str	r6, [r0, #0]
 8008246:	60c6      	str	r6, [r0, #12]
 8008248:	69e6      	ldr	r6, [r4, #28]
 800824a:	68f3      	ldr	r3, [r6, #12]
 800824c:	b183      	cbz	r3, 8008270 <_Balloc+0x50>
 800824e:	69e3      	ldr	r3, [r4, #28]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008256:	b9b8      	cbnz	r0, 8008288 <_Balloc+0x68>
 8008258:	2101      	movs	r1, #1
 800825a:	fa01 f605 	lsl.w	r6, r1, r5
 800825e:	1d72      	adds	r2, r6, #5
 8008260:	4620      	mov	r0, r4
 8008262:	0092      	lsls	r2, r2, #2
 8008264:	f001 fd78 	bl	8009d58 <_calloc_r>
 8008268:	b160      	cbz	r0, 8008284 <_Balloc+0x64>
 800826a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800826e:	e00e      	b.n	800828e <_Balloc+0x6e>
 8008270:	2221      	movs	r2, #33	; 0x21
 8008272:	2104      	movs	r1, #4
 8008274:	4620      	mov	r0, r4
 8008276:	f001 fd6f 	bl	8009d58 <_calloc_r>
 800827a:	69e3      	ldr	r3, [r4, #28]
 800827c:	60f0      	str	r0, [r6, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e4      	bne.n	800824e <_Balloc+0x2e>
 8008284:	2000      	movs	r0, #0
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	6802      	ldr	r2, [r0, #0]
 800828a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800828e:	2300      	movs	r3, #0
 8008290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008294:	e7f7      	b.n	8008286 <_Balloc+0x66>
 8008296:	bf00      	nop
 8008298:	0800ab34 	.word	0x0800ab34
 800829c:	0800abb4 	.word	0x0800abb4

080082a0 <_Bfree>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	69c6      	ldr	r6, [r0, #28]
 80082a4:	4605      	mov	r5, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	b976      	cbnz	r6, 80082c8 <_Bfree+0x28>
 80082aa:	2010      	movs	r0, #16
 80082ac:	f7ff ff04 	bl	80080b8 <malloc>
 80082b0:	4602      	mov	r2, r0
 80082b2:	61e8      	str	r0, [r5, #28]
 80082b4:	b920      	cbnz	r0, 80082c0 <_Bfree+0x20>
 80082b6:	218f      	movs	r1, #143	; 0x8f
 80082b8:	4b08      	ldr	r3, [pc, #32]	; (80082dc <_Bfree+0x3c>)
 80082ba:	4809      	ldr	r0, [pc, #36]	; (80082e0 <_Bfree+0x40>)
 80082bc:	f001 fd2e 	bl	8009d1c <__assert_func>
 80082c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c4:	6006      	str	r6, [r0, #0]
 80082c6:	60c6      	str	r6, [r0, #12]
 80082c8:	b13c      	cbz	r4, 80082da <_Bfree+0x3a>
 80082ca:	69eb      	ldr	r3, [r5, #28]
 80082cc:	6862      	ldr	r2, [r4, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082d4:	6021      	str	r1, [r4, #0]
 80082d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	0800ab34 	.word	0x0800ab34
 80082e0:	0800abb4 	.word	0x0800abb4

080082e4 <__multadd>:
 80082e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	461e      	mov	r6, r3
 80082ee:	2000      	movs	r0, #0
 80082f0:	690d      	ldr	r5, [r1, #16]
 80082f2:	f101 0c14 	add.w	ip, r1, #20
 80082f6:	f8dc 3000 	ldr.w	r3, [ip]
 80082fa:	3001      	adds	r0, #1
 80082fc:	b299      	uxth	r1, r3
 80082fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008302:	0c1e      	lsrs	r6, r3, #16
 8008304:	0c0b      	lsrs	r3, r1, #16
 8008306:	fb02 3306 	mla	r3, r2, r6, r3
 800830a:	b289      	uxth	r1, r1
 800830c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008310:	4285      	cmp	r5, r0
 8008312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008316:	f84c 1b04 	str.w	r1, [ip], #4
 800831a:	dcec      	bgt.n	80082f6 <__multadd+0x12>
 800831c:	b30e      	cbz	r6, 8008362 <__multadd+0x7e>
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	42ab      	cmp	r3, r5
 8008322:	dc19      	bgt.n	8008358 <__multadd+0x74>
 8008324:	6861      	ldr	r1, [r4, #4]
 8008326:	4638      	mov	r0, r7
 8008328:	3101      	adds	r1, #1
 800832a:	f7ff ff79 	bl	8008220 <_Balloc>
 800832e:	4680      	mov	r8, r0
 8008330:	b928      	cbnz	r0, 800833e <__multadd+0x5a>
 8008332:	4602      	mov	r2, r0
 8008334:	21ba      	movs	r1, #186	; 0xba
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <__multadd+0x84>)
 8008338:	480c      	ldr	r0, [pc, #48]	; (800836c <__multadd+0x88>)
 800833a:	f001 fcef 	bl	8009d1c <__assert_func>
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	f104 010c 	add.w	r1, r4, #12
 8008344:	3202      	adds	r2, #2
 8008346:	0092      	lsls	r2, r2, #2
 8008348:	300c      	adds	r0, #12
 800834a:	f7fe ffec 	bl	8007326 <memcpy>
 800834e:	4621      	mov	r1, r4
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ffa5 	bl	80082a0 <_Bfree>
 8008356:	4644      	mov	r4, r8
 8008358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800835c:	3501      	adds	r5, #1
 800835e:	615e      	str	r6, [r3, #20]
 8008360:	6125      	str	r5, [r4, #16]
 8008362:	4620      	mov	r0, r4
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	0800aba3 	.word	0x0800aba3
 800836c:	0800abb4 	.word	0x0800abb4

08008370 <__s2b>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	4615      	mov	r5, r2
 8008376:	2209      	movs	r2, #9
 8008378:	461f      	mov	r7, r3
 800837a:	3308      	adds	r3, #8
 800837c:	460c      	mov	r4, r1
 800837e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008382:	4606      	mov	r6, r0
 8008384:	2201      	movs	r2, #1
 8008386:	2100      	movs	r1, #0
 8008388:	429a      	cmp	r2, r3
 800838a:	db09      	blt.n	80083a0 <__s2b+0x30>
 800838c:	4630      	mov	r0, r6
 800838e:	f7ff ff47 	bl	8008220 <_Balloc>
 8008392:	b940      	cbnz	r0, 80083a6 <__s2b+0x36>
 8008394:	4602      	mov	r2, r0
 8008396:	21d3      	movs	r1, #211	; 0xd3
 8008398:	4b18      	ldr	r3, [pc, #96]	; (80083fc <__s2b+0x8c>)
 800839a:	4819      	ldr	r0, [pc, #100]	; (8008400 <__s2b+0x90>)
 800839c:	f001 fcbe 	bl	8009d1c <__assert_func>
 80083a0:	0052      	lsls	r2, r2, #1
 80083a2:	3101      	adds	r1, #1
 80083a4:	e7f0      	b.n	8008388 <__s2b+0x18>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	2d09      	cmp	r5, #9
 80083aa:	6143      	str	r3, [r0, #20]
 80083ac:	f04f 0301 	mov.w	r3, #1
 80083b0:	6103      	str	r3, [r0, #16]
 80083b2:	dd16      	ble.n	80083e2 <__s2b+0x72>
 80083b4:	f104 0909 	add.w	r9, r4, #9
 80083b8:	46c8      	mov	r8, r9
 80083ba:	442c      	add	r4, r5
 80083bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083c0:	4601      	mov	r1, r0
 80083c2:	220a      	movs	r2, #10
 80083c4:	4630      	mov	r0, r6
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	f7ff ff8c 	bl	80082e4 <__multadd>
 80083cc:	45a0      	cmp	r8, r4
 80083ce:	d1f5      	bne.n	80083bc <__s2b+0x4c>
 80083d0:	f1a5 0408 	sub.w	r4, r5, #8
 80083d4:	444c      	add	r4, r9
 80083d6:	1b2d      	subs	r5, r5, r4
 80083d8:	1963      	adds	r3, r4, r5
 80083da:	42bb      	cmp	r3, r7
 80083dc:	db04      	blt.n	80083e8 <__s2b+0x78>
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	2509      	movs	r5, #9
 80083e4:	340a      	adds	r4, #10
 80083e6:	e7f6      	b.n	80083d6 <__s2b+0x66>
 80083e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083ec:	4601      	mov	r1, r0
 80083ee:	220a      	movs	r2, #10
 80083f0:	4630      	mov	r0, r6
 80083f2:	3b30      	subs	r3, #48	; 0x30
 80083f4:	f7ff ff76 	bl	80082e4 <__multadd>
 80083f8:	e7ee      	b.n	80083d8 <__s2b+0x68>
 80083fa:	bf00      	nop
 80083fc:	0800aba3 	.word	0x0800aba3
 8008400:	0800abb4 	.word	0x0800abb4

08008404 <__hi0bits>:
 8008404:	0c02      	lsrs	r2, r0, #16
 8008406:	0412      	lsls	r2, r2, #16
 8008408:	4603      	mov	r3, r0
 800840a:	b9ca      	cbnz	r2, 8008440 <__hi0bits+0x3c>
 800840c:	0403      	lsls	r3, r0, #16
 800840e:	2010      	movs	r0, #16
 8008410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008414:	bf04      	itt	eq
 8008416:	021b      	lsleq	r3, r3, #8
 8008418:	3008      	addeq	r0, #8
 800841a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800841e:	bf04      	itt	eq
 8008420:	011b      	lsleq	r3, r3, #4
 8008422:	3004      	addeq	r0, #4
 8008424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008428:	bf04      	itt	eq
 800842a:	009b      	lsleq	r3, r3, #2
 800842c:	3002      	addeq	r0, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	db05      	blt.n	800843e <__hi0bits+0x3a>
 8008432:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008436:	f100 0001 	add.w	r0, r0, #1
 800843a:	bf08      	it	eq
 800843c:	2020      	moveq	r0, #32
 800843e:	4770      	bx	lr
 8008440:	2000      	movs	r0, #0
 8008442:	e7e5      	b.n	8008410 <__hi0bits+0xc>

08008444 <__lo0bits>:
 8008444:	6803      	ldr	r3, [r0, #0]
 8008446:	4602      	mov	r2, r0
 8008448:	f013 0007 	ands.w	r0, r3, #7
 800844c:	d00b      	beq.n	8008466 <__lo0bits+0x22>
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d421      	bmi.n	8008496 <__lo0bits+0x52>
 8008452:	0798      	lsls	r0, r3, #30
 8008454:	bf49      	itett	mi
 8008456:	085b      	lsrmi	r3, r3, #1
 8008458:	089b      	lsrpl	r3, r3, #2
 800845a:	2001      	movmi	r0, #1
 800845c:	6013      	strmi	r3, [r2, #0]
 800845e:	bf5c      	itt	pl
 8008460:	2002      	movpl	r0, #2
 8008462:	6013      	strpl	r3, [r2, #0]
 8008464:	4770      	bx	lr
 8008466:	b299      	uxth	r1, r3
 8008468:	b909      	cbnz	r1, 800846e <__lo0bits+0x2a>
 800846a:	2010      	movs	r0, #16
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	b2d9      	uxtb	r1, r3
 8008470:	b909      	cbnz	r1, 8008476 <__lo0bits+0x32>
 8008472:	3008      	adds	r0, #8
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	0719      	lsls	r1, r3, #28
 8008478:	bf04      	itt	eq
 800847a:	091b      	lsreq	r3, r3, #4
 800847c:	3004      	addeq	r0, #4
 800847e:	0799      	lsls	r1, r3, #30
 8008480:	bf04      	itt	eq
 8008482:	089b      	lsreq	r3, r3, #2
 8008484:	3002      	addeq	r0, #2
 8008486:	07d9      	lsls	r1, r3, #31
 8008488:	d403      	bmi.n	8008492 <__lo0bits+0x4e>
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	f100 0001 	add.w	r0, r0, #1
 8008490:	d003      	beq.n	800849a <__lo0bits+0x56>
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	4770      	bx	lr
 8008496:	2000      	movs	r0, #0
 8008498:	4770      	bx	lr
 800849a:	2020      	movs	r0, #32
 800849c:	4770      	bx	lr
	...

080084a0 <__i2b>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	2101      	movs	r1, #1
 80084a6:	f7ff febb 	bl	8008220 <_Balloc>
 80084aa:	4602      	mov	r2, r0
 80084ac:	b928      	cbnz	r0, 80084ba <__i2b+0x1a>
 80084ae:	f240 1145 	movw	r1, #325	; 0x145
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <__i2b+0x24>)
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <__i2b+0x28>)
 80084b6:	f001 fc31 	bl	8009d1c <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	6144      	str	r4, [r0, #20]
 80084be:	6103      	str	r3, [r0, #16]
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	bf00      	nop
 80084c4:	0800aba3 	.word	0x0800aba3
 80084c8:	0800abb4 	.word	0x0800abb4

080084cc <__multiply>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4691      	mov	r9, r2
 80084d2:	690a      	ldr	r2, [r1, #16]
 80084d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d8:	460c      	mov	r4, r1
 80084da:	429a      	cmp	r2, r3
 80084dc:	bfbe      	ittt	lt
 80084de:	460b      	movlt	r3, r1
 80084e0:	464c      	movlt	r4, r9
 80084e2:	4699      	movlt	r9, r3
 80084e4:	6927      	ldr	r7, [r4, #16]
 80084e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084ea:	68a3      	ldr	r3, [r4, #8]
 80084ec:	6861      	ldr	r1, [r4, #4]
 80084ee:	eb07 060a 	add.w	r6, r7, sl
 80084f2:	42b3      	cmp	r3, r6
 80084f4:	b085      	sub	sp, #20
 80084f6:	bfb8      	it	lt
 80084f8:	3101      	addlt	r1, #1
 80084fa:	f7ff fe91 	bl	8008220 <_Balloc>
 80084fe:	b930      	cbnz	r0, 800850e <__multiply+0x42>
 8008500:	4602      	mov	r2, r0
 8008502:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008506:	4b43      	ldr	r3, [pc, #268]	; (8008614 <__multiply+0x148>)
 8008508:	4843      	ldr	r0, [pc, #268]	; (8008618 <__multiply+0x14c>)
 800850a:	f001 fc07 	bl	8009d1c <__assert_func>
 800850e:	f100 0514 	add.w	r5, r0, #20
 8008512:	462b      	mov	r3, r5
 8008514:	2200      	movs	r2, #0
 8008516:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800851a:	4543      	cmp	r3, r8
 800851c:	d321      	bcc.n	8008562 <__multiply+0x96>
 800851e:	f104 0314 	add.w	r3, r4, #20
 8008522:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008526:	f109 0314 	add.w	r3, r9, #20
 800852a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800852e:	9202      	str	r2, [sp, #8]
 8008530:	1b3a      	subs	r2, r7, r4
 8008532:	3a15      	subs	r2, #21
 8008534:	f022 0203 	bic.w	r2, r2, #3
 8008538:	3204      	adds	r2, #4
 800853a:	f104 0115 	add.w	r1, r4, #21
 800853e:	428f      	cmp	r7, r1
 8008540:	bf38      	it	cc
 8008542:	2204      	movcc	r2, #4
 8008544:	9201      	str	r2, [sp, #4]
 8008546:	9a02      	ldr	r2, [sp, #8]
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	429a      	cmp	r2, r3
 800854c:	d80c      	bhi.n	8008568 <__multiply+0x9c>
 800854e:	2e00      	cmp	r6, #0
 8008550:	dd03      	ble.n	800855a <__multiply+0x8e>
 8008552:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008556:	2b00      	cmp	r3, #0
 8008558:	d05a      	beq.n	8008610 <__multiply+0x144>
 800855a:	6106      	str	r6, [r0, #16]
 800855c:	b005      	add	sp, #20
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	f843 2b04 	str.w	r2, [r3], #4
 8008566:	e7d8      	b.n	800851a <__multiply+0x4e>
 8008568:	f8b3 a000 	ldrh.w	sl, [r3]
 800856c:	f1ba 0f00 	cmp.w	sl, #0
 8008570:	d023      	beq.n	80085ba <__multiply+0xee>
 8008572:	46a9      	mov	r9, r5
 8008574:	f04f 0c00 	mov.w	ip, #0
 8008578:	f104 0e14 	add.w	lr, r4, #20
 800857c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008580:	f8d9 1000 	ldr.w	r1, [r9]
 8008584:	fa1f fb82 	uxth.w	fp, r2
 8008588:	b289      	uxth	r1, r1
 800858a:	fb0a 110b 	mla	r1, sl, fp, r1
 800858e:	4461      	add	r1, ip
 8008590:	f8d9 c000 	ldr.w	ip, [r9]
 8008594:	0c12      	lsrs	r2, r2, #16
 8008596:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800859a:	fb0a c202 	mla	r2, sl, r2, ip
 800859e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085a2:	b289      	uxth	r1, r1
 80085a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085a8:	4577      	cmp	r7, lr
 80085aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085ae:	f849 1b04 	str.w	r1, [r9], #4
 80085b2:	d8e3      	bhi.n	800857c <__multiply+0xb0>
 80085b4:	9a01      	ldr	r2, [sp, #4]
 80085b6:	f845 c002 	str.w	ip, [r5, r2]
 80085ba:	9a03      	ldr	r2, [sp, #12]
 80085bc:	3304      	adds	r3, #4
 80085be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	d021      	beq.n	800860c <__multiply+0x140>
 80085c8:	46ae      	mov	lr, r5
 80085ca:	f04f 0a00 	mov.w	sl, #0
 80085ce:	6829      	ldr	r1, [r5, #0]
 80085d0:	f104 0c14 	add.w	ip, r4, #20
 80085d4:	f8bc b000 	ldrh.w	fp, [ip]
 80085d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085dc:	b289      	uxth	r1, r1
 80085de:	fb09 220b 	mla	r2, r9, fp, r2
 80085e2:	4452      	add	r2, sl
 80085e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085e8:	f84e 1b04 	str.w	r1, [lr], #4
 80085ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085f4:	f8be 1000 	ldrh.w	r1, [lr]
 80085f8:	4567      	cmp	r7, ip
 80085fa:	fb09 110a 	mla	r1, r9, sl, r1
 80085fe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008602:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008606:	d8e5      	bhi.n	80085d4 <__multiply+0x108>
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	50a9      	str	r1, [r5, r2]
 800860c:	3504      	adds	r5, #4
 800860e:	e79a      	b.n	8008546 <__multiply+0x7a>
 8008610:	3e01      	subs	r6, #1
 8008612:	e79c      	b.n	800854e <__multiply+0x82>
 8008614:	0800aba3 	.word	0x0800aba3
 8008618:	0800abb4 	.word	0x0800abb4

0800861c <__pow5mult>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4615      	mov	r5, r2
 8008622:	f012 0203 	ands.w	r2, r2, #3
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	d007      	beq.n	800863c <__pow5mult+0x20>
 800862c:	4c25      	ldr	r4, [pc, #148]	; (80086c4 <__pow5mult+0xa8>)
 800862e:	3a01      	subs	r2, #1
 8008630:	2300      	movs	r3, #0
 8008632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008636:	f7ff fe55 	bl	80082e4 <__multadd>
 800863a:	4607      	mov	r7, r0
 800863c:	10ad      	asrs	r5, r5, #2
 800863e:	d03d      	beq.n	80086bc <__pow5mult+0xa0>
 8008640:	69f4      	ldr	r4, [r6, #28]
 8008642:	b97c      	cbnz	r4, 8008664 <__pow5mult+0x48>
 8008644:	2010      	movs	r0, #16
 8008646:	f7ff fd37 	bl	80080b8 <malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	61f0      	str	r0, [r6, #28]
 800864e:	b928      	cbnz	r0, 800865c <__pow5mult+0x40>
 8008650:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <__pow5mult+0xac>)
 8008656:	481d      	ldr	r0, [pc, #116]	; (80086cc <__pow5mult+0xb0>)
 8008658:	f001 fb60 	bl	8009d1c <__assert_func>
 800865c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008660:	6004      	str	r4, [r0, #0]
 8008662:	60c4      	str	r4, [r0, #12]
 8008664:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800866c:	b94c      	cbnz	r4, 8008682 <__pow5mult+0x66>
 800866e:	f240 2171 	movw	r1, #625	; 0x271
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ff14 	bl	80084a0 <__i2b>
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	f04f 0900 	mov.w	r9, #0
 8008686:	07eb      	lsls	r3, r5, #31
 8008688:	d50a      	bpl.n	80086a0 <__pow5mult+0x84>
 800868a:	4639      	mov	r1, r7
 800868c:	4622      	mov	r2, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ff1c 	bl	80084cc <__multiply>
 8008694:	4680      	mov	r8, r0
 8008696:	4639      	mov	r1, r7
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fe01 	bl	80082a0 <_Bfree>
 800869e:	4647      	mov	r7, r8
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	d00b      	beq.n	80086bc <__pow5mult+0xa0>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	b938      	cbnz	r0, 80086b8 <__pow5mult+0x9c>
 80086a8:	4622      	mov	r2, r4
 80086aa:	4621      	mov	r1, r4
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ff0d 	bl	80084cc <__multiply>
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f8c0 9000 	str.w	r9, [r0]
 80086b8:	4604      	mov	r4, r0
 80086ba:	e7e4      	b.n	8008686 <__pow5mult+0x6a>
 80086bc:	4638      	mov	r0, r7
 80086be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c2:	bf00      	nop
 80086c4:	0800ad00 	.word	0x0800ad00
 80086c8:	0800ab34 	.word	0x0800ab34
 80086cc:	0800abb4 	.word	0x0800abb4

080086d0 <__lshift>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	4607      	mov	r7, r0
 80086d8:	4691      	mov	r9, r2
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	6849      	ldr	r1, [r1, #4]
 80086de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e8:	f108 0601 	add.w	r6, r8, #1
 80086ec:	42b3      	cmp	r3, r6
 80086ee:	db0b      	blt.n	8008708 <__lshift+0x38>
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff fd95 	bl	8008220 <_Balloc>
 80086f6:	4605      	mov	r5, r0
 80086f8:	b948      	cbnz	r0, 800870e <__lshift+0x3e>
 80086fa:	4602      	mov	r2, r0
 80086fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008700:	4b27      	ldr	r3, [pc, #156]	; (80087a0 <__lshift+0xd0>)
 8008702:	4828      	ldr	r0, [pc, #160]	; (80087a4 <__lshift+0xd4>)
 8008704:	f001 fb0a 	bl	8009d1c <__assert_func>
 8008708:	3101      	adds	r1, #1
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	e7ee      	b.n	80086ec <__lshift+0x1c>
 800870e:	2300      	movs	r3, #0
 8008710:	f100 0114 	add.w	r1, r0, #20
 8008714:	f100 0210 	add.w	r2, r0, #16
 8008718:	4618      	mov	r0, r3
 800871a:	4553      	cmp	r3, sl
 800871c:	db33      	blt.n	8008786 <__lshift+0xb6>
 800871e:	6920      	ldr	r0, [r4, #16]
 8008720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008724:	f104 0314 	add.w	r3, r4, #20
 8008728:	f019 091f 	ands.w	r9, r9, #31
 800872c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008734:	d02b      	beq.n	800878e <__lshift+0xbe>
 8008736:	468a      	mov	sl, r1
 8008738:	2200      	movs	r2, #0
 800873a:	f1c9 0e20 	rsb	lr, r9, #32
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	fa00 f009 	lsl.w	r0, r0, r9
 8008744:	4310      	orrs	r0, r2
 8008746:	f84a 0b04 	str.w	r0, [sl], #4
 800874a:	f853 2b04 	ldr.w	r2, [r3], #4
 800874e:	459c      	cmp	ip, r3
 8008750:	fa22 f20e 	lsr.w	r2, r2, lr
 8008754:	d8f3      	bhi.n	800873e <__lshift+0x6e>
 8008756:	ebac 0304 	sub.w	r3, ip, r4
 800875a:	3b15      	subs	r3, #21
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	3304      	adds	r3, #4
 8008762:	f104 0015 	add.w	r0, r4, #21
 8008766:	4584      	cmp	ip, r0
 8008768:	bf38      	it	cc
 800876a:	2304      	movcc	r3, #4
 800876c:	50ca      	str	r2, [r1, r3]
 800876e:	b10a      	cbz	r2, 8008774 <__lshift+0xa4>
 8008770:	f108 0602 	add.w	r6, r8, #2
 8008774:	3e01      	subs	r6, #1
 8008776:	4638      	mov	r0, r7
 8008778:	4621      	mov	r1, r4
 800877a:	612e      	str	r6, [r5, #16]
 800877c:	f7ff fd90 	bl	80082a0 <_Bfree>
 8008780:	4628      	mov	r0, r5
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	f842 0f04 	str.w	r0, [r2, #4]!
 800878a:	3301      	adds	r3, #1
 800878c:	e7c5      	b.n	800871a <__lshift+0x4a>
 800878e:	3904      	subs	r1, #4
 8008790:	f853 2b04 	ldr.w	r2, [r3], #4
 8008794:	459c      	cmp	ip, r3
 8008796:	f841 2f04 	str.w	r2, [r1, #4]!
 800879a:	d8f9      	bhi.n	8008790 <__lshift+0xc0>
 800879c:	e7ea      	b.n	8008774 <__lshift+0xa4>
 800879e:	bf00      	nop
 80087a0:	0800aba3 	.word	0x0800aba3
 80087a4:	0800abb4 	.word	0x0800abb4

080087a8 <__mcmp>:
 80087a8:	4603      	mov	r3, r0
 80087aa:	690a      	ldr	r2, [r1, #16]
 80087ac:	6900      	ldr	r0, [r0, #16]
 80087ae:	b530      	push	{r4, r5, lr}
 80087b0:	1a80      	subs	r0, r0, r2
 80087b2:	d10d      	bne.n	80087d0 <__mcmp+0x28>
 80087b4:	3314      	adds	r3, #20
 80087b6:	3114      	adds	r1, #20
 80087b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087c8:	4295      	cmp	r5, r2
 80087ca:	d002      	beq.n	80087d2 <__mcmp+0x2a>
 80087cc:	d304      	bcc.n	80087d8 <__mcmp+0x30>
 80087ce:	2001      	movs	r0, #1
 80087d0:	bd30      	pop	{r4, r5, pc}
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	d3f4      	bcc.n	80087c0 <__mcmp+0x18>
 80087d6:	e7fb      	b.n	80087d0 <__mcmp+0x28>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e7f8      	b.n	80087d0 <__mcmp+0x28>
	...

080087e0 <__mdiff>:
 80087e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	460d      	mov	r5, r1
 80087e6:	4607      	mov	r7, r0
 80087e8:	4611      	mov	r1, r2
 80087ea:	4628      	mov	r0, r5
 80087ec:	4614      	mov	r4, r2
 80087ee:	f7ff ffdb 	bl	80087a8 <__mcmp>
 80087f2:	1e06      	subs	r6, r0, #0
 80087f4:	d111      	bne.n	800881a <__mdiff+0x3a>
 80087f6:	4631      	mov	r1, r6
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff fd11 	bl	8008220 <_Balloc>
 80087fe:	4602      	mov	r2, r0
 8008800:	b928      	cbnz	r0, 800880e <__mdiff+0x2e>
 8008802:	f240 2137 	movw	r1, #567	; 0x237
 8008806:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <__mdiff+0x110>)
 8008808:	483a      	ldr	r0, [pc, #232]	; (80088f4 <__mdiff+0x114>)
 800880a:	f001 fa87 	bl	8009d1c <__assert_func>
 800880e:	2301      	movs	r3, #1
 8008810:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008814:	4610      	mov	r0, r2
 8008816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	bfa4      	itt	ge
 800881c:	4623      	movge	r3, r4
 800881e:	462c      	movge	r4, r5
 8008820:	4638      	mov	r0, r7
 8008822:	6861      	ldr	r1, [r4, #4]
 8008824:	bfa6      	itte	ge
 8008826:	461d      	movge	r5, r3
 8008828:	2600      	movge	r6, #0
 800882a:	2601      	movlt	r6, #1
 800882c:	f7ff fcf8 	bl	8008220 <_Balloc>
 8008830:	4602      	mov	r2, r0
 8008832:	b918      	cbnz	r0, 800883c <__mdiff+0x5c>
 8008834:	f240 2145 	movw	r1, #581	; 0x245
 8008838:	4b2d      	ldr	r3, [pc, #180]	; (80088f0 <__mdiff+0x110>)
 800883a:	e7e5      	b.n	8008808 <__mdiff+0x28>
 800883c:	f102 0814 	add.w	r8, r2, #20
 8008840:	46c2      	mov	sl, r8
 8008842:	f04f 0c00 	mov.w	ip, #0
 8008846:	6927      	ldr	r7, [r4, #16]
 8008848:	60c6      	str	r6, [r0, #12]
 800884a:	692e      	ldr	r6, [r5, #16]
 800884c:	f104 0014 	add.w	r0, r4, #20
 8008850:	f105 0914 	add.w	r9, r5, #20
 8008854:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800885c:	3410      	adds	r4, #16
 800885e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008862:	f859 3b04 	ldr.w	r3, [r9], #4
 8008866:	fa1f f18b 	uxth.w	r1, fp
 800886a:	4461      	add	r1, ip
 800886c:	fa1f fc83 	uxth.w	ip, r3
 8008870:	0c1b      	lsrs	r3, r3, #16
 8008872:	eba1 010c 	sub.w	r1, r1, ip
 8008876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800887a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800887e:	b289      	uxth	r1, r1
 8008880:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008884:	454e      	cmp	r6, r9
 8008886:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800888a:	f84a 1b04 	str.w	r1, [sl], #4
 800888e:	d8e6      	bhi.n	800885e <__mdiff+0x7e>
 8008890:	1b73      	subs	r3, r6, r5
 8008892:	3b15      	subs	r3, #21
 8008894:	f023 0303 	bic.w	r3, r3, #3
 8008898:	3515      	adds	r5, #21
 800889a:	3304      	adds	r3, #4
 800889c:	42ae      	cmp	r6, r5
 800889e:	bf38      	it	cc
 80088a0:	2304      	movcc	r3, #4
 80088a2:	4418      	add	r0, r3
 80088a4:	4443      	add	r3, r8
 80088a6:	461e      	mov	r6, r3
 80088a8:	4605      	mov	r5, r0
 80088aa:	4575      	cmp	r5, lr
 80088ac:	d30e      	bcc.n	80088cc <__mdiff+0xec>
 80088ae:	f10e 0103 	add.w	r1, lr, #3
 80088b2:	1a09      	subs	r1, r1, r0
 80088b4:	f021 0103 	bic.w	r1, r1, #3
 80088b8:	3803      	subs	r0, #3
 80088ba:	4586      	cmp	lr, r0
 80088bc:	bf38      	it	cc
 80088be:	2100      	movcc	r1, #0
 80088c0:	440b      	add	r3, r1
 80088c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088c6:	b189      	cbz	r1, 80088ec <__mdiff+0x10c>
 80088c8:	6117      	str	r7, [r2, #16]
 80088ca:	e7a3      	b.n	8008814 <__mdiff+0x34>
 80088cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80088d0:	fa1f f188 	uxth.w	r1, r8
 80088d4:	4461      	add	r1, ip
 80088d6:	140c      	asrs	r4, r1, #16
 80088d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088dc:	b289      	uxth	r1, r1
 80088de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088e2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80088e6:	f846 1b04 	str.w	r1, [r6], #4
 80088ea:	e7de      	b.n	80088aa <__mdiff+0xca>
 80088ec:	3f01      	subs	r7, #1
 80088ee:	e7e8      	b.n	80088c2 <__mdiff+0xe2>
 80088f0:	0800aba3 	.word	0x0800aba3
 80088f4:	0800abb4 	.word	0x0800abb4

080088f8 <__ulp>:
 80088f8:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <__ulp+0x3c>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008900:	2b00      	cmp	r3, #0
 8008902:	dc08      	bgt.n	8008916 <__ulp+0x1e>
 8008904:	425b      	negs	r3, r3
 8008906:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800890a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800890e:	da04      	bge.n	800891a <__ulp+0x22>
 8008910:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008914:	4113      	asrs	r3, r2
 8008916:	2200      	movs	r2, #0
 8008918:	e008      	b.n	800892c <__ulp+0x34>
 800891a:	f1a2 0314 	sub.w	r3, r2, #20
 800891e:	2b1e      	cmp	r3, #30
 8008920:	bfd6      	itet	le
 8008922:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008926:	2201      	movgt	r2, #1
 8008928:	40da      	lsrle	r2, r3
 800892a:	2300      	movs	r3, #0
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	7ff00000 	.word	0x7ff00000

08008938 <__b2d>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	6905      	ldr	r5, [r0, #16]
 800893c:	f100 0714 	add.w	r7, r0, #20
 8008940:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008944:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008948:	1f2e      	subs	r6, r5, #4
 800894a:	4620      	mov	r0, r4
 800894c:	f7ff fd5a 	bl	8008404 <__hi0bits>
 8008950:	f1c0 0220 	rsb	r2, r0, #32
 8008954:	280a      	cmp	r0, #10
 8008956:	4603      	mov	r3, r0
 8008958:	f8df c068 	ldr.w	ip, [pc, #104]	; 80089c4 <__b2d+0x8c>
 800895c:	600a      	str	r2, [r1, #0]
 800895e:	dc12      	bgt.n	8008986 <__b2d+0x4e>
 8008960:	f1c0 0e0b 	rsb	lr, r0, #11
 8008964:	fa24 f20e 	lsr.w	r2, r4, lr
 8008968:	42b7      	cmp	r7, r6
 800896a:	ea42 010c 	orr.w	r1, r2, ip
 800896e:	bf2c      	ite	cs
 8008970:	2200      	movcs	r2, #0
 8008972:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008976:	3315      	adds	r3, #21
 8008978:	fa04 f303 	lsl.w	r3, r4, r3
 800897c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008980:	431a      	orrs	r2, r3
 8008982:	4610      	mov	r0, r2
 8008984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008986:	42b7      	cmp	r7, r6
 8008988:	bf2e      	itee	cs
 800898a:	2200      	movcs	r2, #0
 800898c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008990:	f1a5 0608 	subcc.w	r6, r5, #8
 8008994:	3b0b      	subs	r3, #11
 8008996:	d012      	beq.n	80089be <__b2d+0x86>
 8008998:	f1c3 0520 	rsb	r5, r3, #32
 800899c:	fa22 f105 	lsr.w	r1, r2, r5
 80089a0:	409c      	lsls	r4, r3
 80089a2:	430c      	orrs	r4, r1
 80089a4:	42be      	cmp	r6, r7
 80089a6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80089aa:	bf94      	ite	ls
 80089ac:	2400      	movls	r4, #0
 80089ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80089b2:	409a      	lsls	r2, r3
 80089b4:	40ec      	lsrs	r4, r5
 80089b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089ba:	4322      	orrs	r2, r4
 80089bc:	e7e1      	b.n	8008982 <__b2d+0x4a>
 80089be:	ea44 010c 	orr.w	r1, r4, ip
 80089c2:	e7de      	b.n	8008982 <__b2d+0x4a>
 80089c4:	3ff00000 	.word	0x3ff00000

080089c8 <__d2b>:
 80089c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ca:	2101      	movs	r1, #1
 80089cc:	4617      	mov	r7, r2
 80089ce:	461c      	mov	r4, r3
 80089d0:	9e08      	ldr	r6, [sp, #32]
 80089d2:	f7ff fc25 	bl	8008220 <_Balloc>
 80089d6:	4605      	mov	r5, r0
 80089d8:	b930      	cbnz	r0, 80089e8 <__d2b+0x20>
 80089da:	4602      	mov	r2, r0
 80089dc:	f240 310f 	movw	r1, #783	; 0x30f
 80089e0:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <__d2b+0xa4>)
 80089e2:	4823      	ldr	r0, [pc, #140]	; (8008a70 <__d2b+0xa8>)
 80089e4:	f001 f99a 	bl	8009d1c <__assert_func>
 80089e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80089ec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80089f0:	bb24      	cbnz	r4, 8008a3c <__d2b+0x74>
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	d026      	beq.n	8008a46 <__d2b+0x7e>
 80089f8:	4668      	mov	r0, sp
 80089fa:	9700      	str	r7, [sp, #0]
 80089fc:	f7ff fd22 	bl	8008444 <__lo0bits>
 8008a00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a04:	b1e8      	cbz	r0, 8008a42 <__d2b+0x7a>
 8008a06:	f1c0 0320 	rsb	r3, r0, #32
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	40c2      	lsrs	r2, r0
 8008a12:	616b      	str	r3, [r5, #20]
 8008a14:	9201      	str	r2, [sp, #4]
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bf14      	ite	ne
 8008a1c:	2102      	movne	r1, #2
 8008a1e:	2101      	moveq	r1, #1
 8008a20:	61ab      	str	r3, [r5, #24]
 8008a22:	6129      	str	r1, [r5, #16]
 8008a24:	b1bc      	cbz	r4, 8008a56 <__d2b+0x8e>
 8008a26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a2a:	4404      	add	r4, r0
 8008a2c:	6034      	str	r4, [r6, #0]
 8008a2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	6018      	str	r0, [r3, #0]
 8008a36:	4628      	mov	r0, r5
 8008a38:	b003      	add	sp, #12
 8008a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a40:	e7d7      	b.n	80089f2 <__d2b+0x2a>
 8008a42:	6169      	str	r1, [r5, #20]
 8008a44:	e7e7      	b.n	8008a16 <__d2b+0x4e>
 8008a46:	a801      	add	r0, sp, #4
 8008a48:	f7ff fcfc 	bl	8008444 <__lo0bits>
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	2101      	movs	r1, #1
 8008a50:	616b      	str	r3, [r5, #20]
 8008a52:	3020      	adds	r0, #32
 8008a54:	e7e5      	b.n	8008a22 <__d2b+0x5a>
 8008a56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a5a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008a5e:	6030      	str	r0, [r6, #0]
 8008a60:	6918      	ldr	r0, [r3, #16]
 8008a62:	f7ff fccf 	bl	8008404 <__hi0bits>
 8008a66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a6a:	e7e2      	b.n	8008a32 <__d2b+0x6a>
 8008a6c:	0800aba3 	.word	0x0800aba3
 8008a70:	0800abb4 	.word	0x0800abb4

08008a74 <__ratio>:
 8008a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	4688      	mov	r8, r1
 8008a7a:	4669      	mov	r1, sp
 8008a7c:	4681      	mov	r9, r0
 8008a7e:	f7ff ff5b 	bl	8008938 <__b2d>
 8008a82:	460f      	mov	r7, r1
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	a901      	add	r1, sp, #4
 8008a8c:	f7ff ff54 	bl	8008938 <__b2d>
 8008a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008a98:	468b      	mov	fp, r1
 8008a9a:	eba3 0c02 	sub.w	ip, r3, r2
 8008a9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfd5      	itete	le
 8008aac:	460a      	movle	r2, r1
 8008aae:	462a      	movgt	r2, r5
 8008ab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ab4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ab8:	bfd8      	it	le
 8008aba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7f7 fe31 	bl	800072c <__aeabi_ddiv>
 8008aca:	b003      	add	sp, #12
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ad0 <__copybits>:
 8008ad0:	3901      	subs	r1, #1
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	1149      	asrs	r1, r1, #5
 8008ad6:	6914      	ldr	r4, [r2, #16]
 8008ad8:	3101      	adds	r1, #1
 8008ada:	f102 0314 	add.w	r3, r2, #20
 8008ade:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ae2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ae6:	1f05      	subs	r5, r0, #4
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d30c      	bcc.n	8008b06 <__copybits+0x36>
 8008aec:	1aa3      	subs	r3, r4, r2
 8008aee:	3b11      	subs	r3, #17
 8008af0:	f023 0303 	bic.w	r3, r3, #3
 8008af4:	3211      	adds	r2, #17
 8008af6:	42a2      	cmp	r2, r4
 8008af8:	bf88      	it	hi
 8008afa:	2300      	movhi	r3, #0
 8008afc:	4418      	add	r0, r3
 8008afe:	2300      	movs	r3, #0
 8008b00:	4288      	cmp	r0, r1
 8008b02:	d305      	bcc.n	8008b10 <__copybits+0x40>
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b0e:	e7eb      	b.n	8008ae8 <__copybits+0x18>
 8008b10:	f840 3b04 	str.w	r3, [r0], #4
 8008b14:	e7f4      	b.n	8008b00 <__copybits+0x30>

08008b16 <__any_on>:
 8008b16:	f100 0214 	add.w	r2, r0, #20
 8008b1a:	6900      	ldr	r0, [r0, #16]
 8008b1c:	114b      	asrs	r3, r1, #5
 8008b1e:	4298      	cmp	r0, r3
 8008b20:	b510      	push	{r4, lr}
 8008b22:	db11      	blt.n	8008b48 <__any_on+0x32>
 8008b24:	dd0a      	ble.n	8008b3c <__any_on+0x26>
 8008b26:	f011 011f 	ands.w	r1, r1, #31
 8008b2a:	d007      	beq.n	8008b3c <__any_on+0x26>
 8008b2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b30:	fa24 f001 	lsr.w	r0, r4, r1
 8008b34:	fa00 f101 	lsl.w	r1, r0, r1
 8008b38:	428c      	cmp	r4, r1
 8008b3a:	d10b      	bne.n	8008b54 <__any_on+0x3e>
 8008b3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d803      	bhi.n	8008b4c <__any_on+0x36>
 8008b44:	2000      	movs	r0, #0
 8008b46:	bd10      	pop	{r4, pc}
 8008b48:	4603      	mov	r3, r0
 8008b4a:	e7f7      	b.n	8008b3c <__any_on+0x26>
 8008b4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d0f5      	beq.n	8008b40 <__any_on+0x2a>
 8008b54:	2001      	movs	r0, #1
 8008b56:	e7f6      	b.n	8008b46 <__any_on+0x30>

08008b58 <sulp>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	4690      	mov	r8, r2
 8008b60:	f7ff feca 	bl	80088f8 <__ulp>
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	f1b8 0f00 	cmp.w	r8, #0
 8008b6c:	d011      	beq.n	8008b92 <sulp+0x3a>
 8008b6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008b72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dd0b      	ble.n	8008b92 <sulp+0x3a>
 8008b7a:	2400      	movs	r4, #0
 8008b7c:	051b      	lsls	r3, r3, #20
 8008b7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b86:	4622      	mov	r2, r4
 8008b88:	462b      	mov	r3, r5
 8008b8a:	f7f7 fca5 	bl	80004d8 <__aeabi_dmul>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	460d      	mov	r5, r1
 8008b92:	4620      	mov	r0, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9a:	0000      	movs	r0, r0
 8008b9c:	0000      	movs	r0, r0
	...

08008ba0 <_strtod_l>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	b09f      	sub	sp, #124	; 0x7c
 8008ba6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	921a      	str	r2, [sp, #104]	; 0x68
 8008bae:	460d      	mov	r5, r1
 8008bb0:	f04f 0800 	mov.w	r8, #0
 8008bb4:	f04f 0900 	mov.w	r9, #0
 8008bb8:	460a      	mov	r2, r1
 8008bba:	9219      	str	r2, [sp, #100]	; 0x64
 8008bbc:	7811      	ldrb	r1, [r2, #0]
 8008bbe:	292b      	cmp	r1, #43	; 0x2b
 8008bc0:	d04a      	beq.n	8008c58 <_strtod_l+0xb8>
 8008bc2:	d838      	bhi.n	8008c36 <_strtod_l+0x96>
 8008bc4:	290d      	cmp	r1, #13
 8008bc6:	d832      	bhi.n	8008c2e <_strtod_l+0x8e>
 8008bc8:	2908      	cmp	r1, #8
 8008bca:	d832      	bhi.n	8008c32 <_strtod_l+0x92>
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d03b      	beq.n	8008c48 <_strtod_l+0xa8>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	920e      	str	r2, [sp, #56]	; 0x38
 8008bd4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008bd6:	7832      	ldrb	r2, [r6, #0]
 8008bd8:	2a30      	cmp	r2, #48	; 0x30
 8008bda:	f040 80b2 	bne.w	8008d42 <_strtod_l+0x1a2>
 8008bde:	7872      	ldrb	r2, [r6, #1]
 8008be0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008be4:	2a58      	cmp	r2, #88	; 0x58
 8008be6:	d16e      	bne.n	8008cc6 <_strtod_l+0x126>
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bec:	4620      	mov	r0, r4
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	ab1a      	add	r3, sp, #104	; 0x68
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4a8c      	ldr	r2, [pc, #560]	; (8008e28 <_strtod_l+0x288>)
 8008bf6:	ab1b      	add	r3, sp, #108	; 0x6c
 8008bf8:	a919      	add	r1, sp, #100	; 0x64
 8008bfa:	f001 f929 	bl	8009e50 <__gethex>
 8008bfe:	f010 070f 	ands.w	r7, r0, #15
 8008c02:	4605      	mov	r5, r0
 8008c04:	d005      	beq.n	8008c12 <_strtod_l+0x72>
 8008c06:	2f06      	cmp	r7, #6
 8008c08:	d128      	bne.n	8008c5c <_strtod_l+0xbc>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	9619      	str	r6, [sp, #100]	; 0x64
 8008c10:	930e      	str	r3, [sp, #56]	; 0x38
 8008c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 85a0 	bne.w	800975a <_strtod_l+0xbba>
 8008c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c1c:	b1cb      	cbz	r3, 8008c52 <_strtod_l+0xb2>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c24:	4610      	mov	r0, r2
 8008c26:	4619      	mov	r1, r3
 8008c28:	b01f      	add	sp, #124	; 0x7c
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	2920      	cmp	r1, #32
 8008c30:	d1ce      	bne.n	8008bd0 <_strtod_l+0x30>
 8008c32:	3201      	adds	r2, #1
 8008c34:	e7c1      	b.n	8008bba <_strtod_l+0x1a>
 8008c36:	292d      	cmp	r1, #45	; 0x2d
 8008c38:	d1ca      	bne.n	8008bd0 <_strtod_l+0x30>
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	910e      	str	r1, [sp, #56]	; 0x38
 8008c3e:	1c51      	adds	r1, r2, #1
 8008c40:	9119      	str	r1, [sp, #100]	; 0x64
 8008c42:	7852      	ldrb	r2, [r2, #1]
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	d1c5      	bne.n	8008bd4 <_strtod_l+0x34>
 8008c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c4a:	9519      	str	r5, [sp, #100]	; 0x64
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8582 	bne.w	8009756 <_strtod_l+0xbb6>
 8008c52:	4642      	mov	r2, r8
 8008c54:	464b      	mov	r3, r9
 8008c56:	e7e5      	b.n	8008c24 <_strtod_l+0x84>
 8008c58:	2100      	movs	r1, #0
 8008c5a:	e7ef      	b.n	8008c3c <_strtod_l+0x9c>
 8008c5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c5e:	b13a      	cbz	r2, 8008c70 <_strtod_l+0xd0>
 8008c60:	2135      	movs	r1, #53	; 0x35
 8008c62:	a81c      	add	r0, sp, #112	; 0x70
 8008c64:	f7ff ff34 	bl	8008ad0 <__copybits>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c6c:	f7ff fb18 	bl	80082a0 <_Bfree>
 8008c70:	3f01      	subs	r7, #1
 8008c72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c74:	2f04      	cmp	r7, #4
 8008c76:	d806      	bhi.n	8008c86 <_strtod_l+0xe6>
 8008c78:	e8df f007 	tbb	[pc, r7]
 8008c7c:	201d0314 	.word	0x201d0314
 8008c80:	14          	.byte	0x14
 8008c81:	00          	.byte	0x00
 8008c82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008c86:	05e9      	lsls	r1, r5, #23
 8008c88:	bf48      	it	mi
 8008c8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008c8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c92:	0d1b      	lsrs	r3, r3, #20
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1bb      	bne.n	8008c12 <_strtod_l+0x72>
 8008c9a:	f7fe fb09 	bl	80072b0 <__errno>
 8008c9e:	2322      	movs	r3, #34	; 0x22
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	e7b6      	b.n	8008c12 <_strtod_l+0x72>
 8008ca4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ca8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008cac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008cb4:	e7e7      	b.n	8008c86 <_strtod_l+0xe6>
 8008cb6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008e2c <_strtod_l+0x28c>
 8008cba:	e7e4      	b.n	8008c86 <_strtod_l+0xe6>
 8008cbc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008cc0:	f04f 38ff 	mov.w	r8, #4294967295
 8008cc4:	e7df      	b.n	8008c86 <_strtod_l+0xe6>
 8008cc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	9219      	str	r2, [sp, #100]	; 0x64
 8008ccc:	785b      	ldrb	r3, [r3, #1]
 8008cce:	2b30      	cmp	r3, #48	; 0x30
 8008cd0:	d0f9      	beq.n	8008cc6 <_strtod_l+0x126>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d09d      	beq.n	8008c12 <_strtod_l+0x72>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f04f 0a00 	mov.w	sl, #0
 8008cdc:	220a      	movs	r2, #10
 8008cde:	46d3      	mov	fp, sl
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ce4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008cec:	7806      	ldrb	r6, [r0, #0]
 8008cee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008cf2:	b2d9      	uxtb	r1, r3
 8008cf4:	2909      	cmp	r1, #9
 8008cf6:	d926      	bls.n	8008d46 <_strtod_l+0x1a6>
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	494d      	ldr	r1, [pc, #308]	; (8008e30 <_strtod_l+0x290>)
 8008cfc:	f000 ffe6 	bl	8009ccc <strncmp>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d030      	beq.n	8008d66 <_strtod_l+0x1c6>
 8008d04:	2000      	movs	r0, #0
 8008d06:	4632      	mov	r2, r6
 8008d08:	4603      	mov	r3, r0
 8008d0a:	465e      	mov	r6, fp
 8008d0c:	9008      	str	r0, [sp, #32]
 8008d0e:	2a65      	cmp	r2, #101	; 0x65
 8008d10:	d001      	beq.n	8008d16 <_strtod_l+0x176>
 8008d12:	2a45      	cmp	r2, #69	; 0x45
 8008d14:	d113      	bne.n	8008d3e <_strtod_l+0x19e>
 8008d16:	b91e      	cbnz	r6, 8008d20 <_strtod_l+0x180>
 8008d18:	9a05      	ldr	r2, [sp, #20]
 8008d1a:	4302      	orrs	r2, r0
 8008d1c:	d094      	beq.n	8008c48 <_strtod_l+0xa8>
 8008d1e:	2600      	movs	r6, #0
 8008d20:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008d22:	1c6a      	adds	r2, r5, #1
 8008d24:	9219      	str	r2, [sp, #100]	; 0x64
 8008d26:	786a      	ldrb	r2, [r5, #1]
 8008d28:	2a2b      	cmp	r2, #43	; 0x2b
 8008d2a:	d074      	beq.n	8008e16 <_strtod_l+0x276>
 8008d2c:	2a2d      	cmp	r2, #45	; 0x2d
 8008d2e:	d078      	beq.n	8008e22 <_strtod_l+0x282>
 8008d30:	f04f 0c00 	mov.w	ip, #0
 8008d34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d38:	2909      	cmp	r1, #9
 8008d3a:	d97f      	bls.n	8008e3c <_strtod_l+0x29c>
 8008d3c:	9519      	str	r5, [sp, #100]	; 0x64
 8008d3e:	2700      	movs	r7, #0
 8008d40:	e09e      	b.n	8008e80 <_strtod_l+0x2e0>
 8008d42:	2300      	movs	r3, #0
 8008d44:	e7c8      	b.n	8008cd8 <_strtod_l+0x138>
 8008d46:	f1bb 0f08 	cmp.w	fp, #8
 8008d4a:	bfd8      	it	le
 8008d4c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008d4e:	f100 0001 	add.w	r0, r0, #1
 8008d52:	bfd6      	itet	le
 8008d54:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d58:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008d5c:	930a      	strle	r3, [sp, #40]	; 0x28
 8008d5e:	f10b 0b01 	add.w	fp, fp, #1
 8008d62:	9019      	str	r0, [sp, #100]	; 0x64
 8008d64:	e7c1      	b.n	8008cea <_strtod_l+0x14a>
 8008d66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	9219      	str	r2, [sp, #100]	; 0x64
 8008d6c:	785a      	ldrb	r2, [r3, #1]
 8008d6e:	f1bb 0f00 	cmp.w	fp, #0
 8008d72:	d037      	beq.n	8008de4 <_strtod_l+0x244>
 8008d74:	465e      	mov	r6, fp
 8008d76:	9008      	str	r0, [sp, #32]
 8008d78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d912      	bls.n	8008da6 <_strtod_l+0x206>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e7c4      	b.n	8008d0e <_strtod_l+0x16e>
 8008d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d86:	3001      	adds	r0, #1
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008d8c:	785a      	ldrb	r2, [r3, #1]
 8008d8e:	2a30      	cmp	r2, #48	; 0x30
 8008d90:	d0f8      	beq.n	8008d84 <_strtod_l+0x1e4>
 8008d92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	f200 84e4 	bhi.w	8009764 <_strtod_l+0xbc4>
 8008d9c:	9008      	str	r0, [sp, #32]
 8008d9e:	2000      	movs	r0, #0
 8008da0:	4606      	mov	r6, r0
 8008da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da6:	3a30      	subs	r2, #48	; 0x30
 8008da8:	f100 0301 	add.w	r3, r0, #1
 8008dac:	d014      	beq.n	8008dd8 <_strtod_l+0x238>
 8008dae:	9908      	ldr	r1, [sp, #32]
 8008db0:	eb00 0c06 	add.w	ip, r0, r6
 8008db4:	4419      	add	r1, r3
 8008db6:	9108      	str	r1, [sp, #32]
 8008db8:	4633      	mov	r3, r6
 8008dba:	210a      	movs	r1, #10
 8008dbc:	4563      	cmp	r3, ip
 8008dbe:	d113      	bne.n	8008de8 <_strtod_l+0x248>
 8008dc0:	1833      	adds	r3, r6, r0
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	f106 0601 	add.w	r6, r6, #1
 8008dc8:	4406      	add	r6, r0
 8008dca:	dc1a      	bgt.n	8008e02 <_strtod_l+0x262>
 8008dcc:	230a      	movs	r3, #10
 8008dce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008dd0:	fb03 2301 	mla	r3, r3, r1, r2
 8008dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008dda:	4618      	mov	r0, r3
 8008ddc:	1c51      	adds	r1, r2, #1
 8008dde:	9119      	str	r1, [sp, #100]	; 0x64
 8008de0:	7852      	ldrb	r2, [r2, #1]
 8008de2:	e7c9      	b.n	8008d78 <_strtod_l+0x1d8>
 8008de4:	4658      	mov	r0, fp
 8008de6:	e7d2      	b.n	8008d8e <_strtod_l+0x1ee>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	f103 0301 	add.w	r3, r3, #1
 8008dee:	dc03      	bgt.n	8008df8 <_strtod_l+0x258>
 8008df0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008df2:	434f      	muls	r7, r1
 8008df4:	970a      	str	r7, [sp, #40]	; 0x28
 8008df6:	e7e1      	b.n	8008dbc <_strtod_l+0x21c>
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	bfd8      	it	le
 8008dfc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e00:	e7dc      	b.n	8008dbc <_strtod_l+0x21c>
 8008e02:	2e10      	cmp	r6, #16
 8008e04:	bfdc      	itt	le
 8008e06:	230a      	movle	r3, #10
 8008e08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e0c:	e7e3      	b.n	8008dd6 <_strtod_l+0x236>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9308      	str	r3, [sp, #32]
 8008e12:	2301      	movs	r3, #1
 8008e14:	e780      	b.n	8008d18 <_strtod_l+0x178>
 8008e16:	f04f 0c00 	mov.w	ip, #0
 8008e1a:	1caa      	adds	r2, r5, #2
 8008e1c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e1e:	78aa      	ldrb	r2, [r5, #2]
 8008e20:	e788      	b.n	8008d34 <_strtod_l+0x194>
 8008e22:	f04f 0c01 	mov.w	ip, #1
 8008e26:	e7f8      	b.n	8008e1a <_strtod_l+0x27a>
 8008e28:	0800ad10 	.word	0x0800ad10
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	0800ad0c 	.word	0x0800ad0c
 8008e34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e36:	1c51      	adds	r1, r2, #1
 8008e38:	9119      	str	r1, [sp, #100]	; 0x64
 8008e3a:	7852      	ldrb	r2, [r2, #1]
 8008e3c:	2a30      	cmp	r2, #48	; 0x30
 8008e3e:	d0f9      	beq.n	8008e34 <_strtod_l+0x294>
 8008e40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008e44:	2908      	cmp	r1, #8
 8008e46:	f63f af7a 	bhi.w	8008d3e <_strtod_l+0x19e>
 8008e4a:	3a30      	subs	r2, #48	; 0x30
 8008e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e50:	920c      	str	r2, [sp, #48]	; 0x30
 8008e52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e54:	1c57      	adds	r7, r2, #1
 8008e56:	9719      	str	r7, [sp, #100]	; 0x64
 8008e58:	7852      	ldrb	r2, [r2, #1]
 8008e5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008e5e:	f1be 0f09 	cmp.w	lr, #9
 8008e62:	d938      	bls.n	8008ed6 <_strtod_l+0x336>
 8008e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e66:	1a7f      	subs	r7, r7, r1
 8008e68:	2f08      	cmp	r7, #8
 8008e6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008e6e:	dc03      	bgt.n	8008e78 <_strtod_l+0x2d8>
 8008e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e72:	428f      	cmp	r7, r1
 8008e74:	bfa8      	it	ge
 8008e76:	460f      	movge	r7, r1
 8008e78:	f1bc 0f00 	cmp.w	ip, #0
 8008e7c:	d000      	beq.n	8008e80 <_strtod_l+0x2e0>
 8008e7e:	427f      	negs	r7, r7
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	d14f      	bne.n	8008f24 <_strtod_l+0x384>
 8008e84:	9905      	ldr	r1, [sp, #20]
 8008e86:	4301      	orrs	r1, r0
 8008e88:	f47f aec3 	bne.w	8008c12 <_strtod_l+0x72>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aedb 	bne.w	8008c48 <_strtod_l+0xa8>
 8008e92:	2a69      	cmp	r2, #105	; 0x69
 8008e94:	d029      	beq.n	8008eea <_strtod_l+0x34a>
 8008e96:	dc26      	bgt.n	8008ee6 <_strtod_l+0x346>
 8008e98:	2a49      	cmp	r2, #73	; 0x49
 8008e9a:	d026      	beq.n	8008eea <_strtod_l+0x34a>
 8008e9c:	2a4e      	cmp	r2, #78	; 0x4e
 8008e9e:	f47f aed3 	bne.w	8008c48 <_strtod_l+0xa8>
 8008ea2:	499a      	ldr	r1, [pc, #616]	; (800910c <_strtod_l+0x56c>)
 8008ea4:	a819      	add	r0, sp, #100	; 0x64
 8008ea6:	f001 fa15 	bl	800a2d4 <__match>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	f43f aecc 	beq.w	8008c48 <_strtod_l+0xa8>
 8008eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b28      	cmp	r3, #40	; 0x28
 8008eb6:	d12f      	bne.n	8008f18 <_strtod_l+0x378>
 8008eb8:	4995      	ldr	r1, [pc, #596]	; (8009110 <_strtod_l+0x570>)
 8008eba:	aa1c      	add	r2, sp, #112	; 0x70
 8008ebc:	a819      	add	r0, sp, #100	; 0x64
 8008ebe:	f001 fa1d 	bl	800a2fc <__hexnan>
 8008ec2:	2805      	cmp	r0, #5
 8008ec4:	d128      	bne.n	8008f18 <_strtod_l+0x378>
 8008ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ec8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008ecc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ed0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008ed4:	e69d      	b.n	8008c12 <_strtod_l+0x72>
 8008ed6:	210a      	movs	r1, #10
 8008ed8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008eda:	fb01 2107 	mla	r1, r1, r7, r2
 8008ede:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee4:	e7b5      	b.n	8008e52 <_strtod_l+0x2b2>
 8008ee6:	2a6e      	cmp	r2, #110	; 0x6e
 8008ee8:	e7d9      	b.n	8008e9e <_strtod_l+0x2fe>
 8008eea:	498a      	ldr	r1, [pc, #552]	; (8009114 <_strtod_l+0x574>)
 8008eec:	a819      	add	r0, sp, #100	; 0x64
 8008eee:	f001 f9f1 	bl	800a2d4 <__match>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f43f aea8 	beq.w	8008c48 <_strtod_l+0xa8>
 8008ef8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008efa:	4987      	ldr	r1, [pc, #540]	; (8009118 <_strtod_l+0x578>)
 8008efc:	3b01      	subs	r3, #1
 8008efe:	a819      	add	r0, sp, #100	; 0x64
 8008f00:	9319      	str	r3, [sp, #100]	; 0x64
 8008f02:	f001 f9e7 	bl	800a2d4 <__match>
 8008f06:	b910      	cbnz	r0, 8008f0e <_strtod_l+0x36e>
 8008f08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	9319      	str	r3, [sp, #100]	; 0x64
 8008f0e:	f04f 0800 	mov.w	r8, #0
 8008f12:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800911c <_strtod_l+0x57c>
 8008f16:	e67c      	b.n	8008c12 <_strtod_l+0x72>
 8008f18:	4881      	ldr	r0, [pc, #516]	; (8009120 <_strtod_l+0x580>)
 8008f1a:	f000 fef9 	bl	8009d10 <nan>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4689      	mov	r9, r1
 8008f22:	e676      	b.n	8008c12 <_strtod_l+0x72>
 8008f24:	9b08      	ldr	r3, [sp, #32]
 8008f26:	f1bb 0f00 	cmp.w	fp, #0
 8008f2a:	bf08      	it	eq
 8008f2c:	46b3      	moveq	fp, r6
 8008f2e:	1afb      	subs	r3, r7, r3
 8008f30:	2e10      	cmp	r6, #16
 8008f32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f34:	4635      	mov	r5, r6
 8008f36:	9309      	str	r3, [sp, #36]	; 0x24
 8008f38:	bfa8      	it	ge
 8008f3a:	2510      	movge	r5, #16
 8008f3c:	f7f7 fa52 	bl	80003e4 <__aeabi_ui2d>
 8008f40:	2e09      	cmp	r6, #9
 8008f42:	4680      	mov	r8, r0
 8008f44:	4689      	mov	r9, r1
 8008f46:	dd13      	ble.n	8008f70 <_strtod_l+0x3d0>
 8008f48:	4b76      	ldr	r3, [pc, #472]	; (8009124 <_strtod_l+0x584>)
 8008f4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f52:	f7f7 fac1 	bl	80004d8 <__aeabi_dmul>
 8008f56:	4680      	mov	r8, r0
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4689      	mov	r9, r1
 8008f5c:	f7f7 fa42 	bl	80003e4 <__aeabi_ui2d>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 f900 	bl	800016c <__adddf3>
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	2e0f      	cmp	r6, #15
 8008f72:	dc36      	bgt.n	8008fe2 <_strtod_l+0x442>
 8008f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f43f ae4b 	beq.w	8008c12 <_strtod_l+0x72>
 8008f7c:	dd22      	ble.n	8008fc4 <_strtod_l+0x424>
 8008f7e:	2b16      	cmp	r3, #22
 8008f80:	dc09      	bgt.n	8008f96 <_strtod_l+0x3f6>
 8008f82:	4968      	ldr	r1, [pc, #416]	; (8009124 <_strtod_l+0x584>)
 8008f84:	4642      	mov	r2, r8
 8008f86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f90:	f7f7 faa2 	bl	80004d8 <__aeabi_dmul>
 8008f94:	e7c3      	b.n	8008f1e <_strtod_l+0x37e>
 8008f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f98:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	db20      	blt.n	8008fe2 <_strtod_l+0x442>
 8008fa0:	4c60      	ldr	r4, [pc, #384]	; (8009124 <_strtod_l+0x584>)
 8008fa2:	f1c6 060f 	rsb	r6, r6, #15
 8008fa6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008faa:	4642      	mov	r2, r8
 8008fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	f7f7 fa91 	bl	80004d8 <__aeabi_dmul>
 8008fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb8:	1b9e      	subs	r6, r3, r6
 8008fba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fc2:	e7e5      	b.n	8008f90 <_strtod_l+0x3f0>
 8008fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc6:	3316      	adds	r3, #22
 8008fc8:	db0b      	blt.n	8008fe2 <_strtod_l+0x442>
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	4640      	mov	r0, r8
 8008fce:	1bdf      	subs	r7, r3, r7
 8008fd0:	4b54      	ldr	r3, [pc, #336]	; (8009124 <_strtod_l+0x584>)
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fdc:	f7f7 fba6 	bl	800072c <__aeabi_ddiv>
 8008fe0:	e79d      	b.n	8008f1e <_strtod_l+0x37e>
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	1b75      	subs	r5, r6, r5
 8008fe6:	441d      	add	r5, r3
 8008fe8:	2d00      	cmp	r5, #0
 8008fea:	dd70      	ble.n	80090ce <_strtod_l+0x52e>
 8008fec:	f015 030f 	ands.w	r3, r5, #15
 8008ff0:	d00a      	beq.n	8009008 <_strtod_l+0x468>
 8008ff2:	494c      	ldr	r1, [pc, #304]	; (8009124 <_strtod_l+0x584>)
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ffe:	464b      	mov	r3, r9
 8009000:	f7f7 fa6a 	bl	80004d8 <__aeabi_dmul>
 8009004:	4680      	mov	r8, r0
 8009006:	4689      	mov	r9, r1
 8009008:	f035 050f 	bics.w	r5, r5, #15
 800900c:	d04d      	beq.n	80090aa <_strtod_l+0x50a>
 800900e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009012:	dd22      	ble.n	800905a <_strtod_l+0x4ba>
 8009014:	2600      	movs	r6, #0
 8009016:	46b3      	mov	fp, r6
 8009018:	960b      	str	r6, [sp, #44]	; 0x2c
 800901a:	9608      	str	r6, [sp, #32]
 800901c:	2322      	movs	r3, #34	; 0x22
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800911c <_strtod_l+0x57c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800902a:	2b00      	cmp	r3, #0
 800902c:	f43f adf1 	beq.w	8008c12 <_strtod_l+0x72>
 8009030:	4620      	mov	r0, r4
 8009032:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009034:	f7ff f934 	bl	80082a0 <_Bfree>
 8009038:	4620      	mov	r0, r4
 800903a:	9908      	ldr	r1, [sp, #32]
 800903c:	f7ff f930 	bl	80082a0 <_Bfree>
 8009040:	4659      	mov	r1, fp
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff f92c 	bl	80082a0 <_Bfree>
 8009048:	4620      	mov	r0, r4
 800904a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800904c:	f7ff f928 	bl	80082a0 <_Bfree>
 8009050:	4631      	mov	r1, r6
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff f924 	bl	80082a0 <_Bfree>
 8009058:	e5db      	b.n	8008c12 <_strtod_l+0x72>
 800905a:	4b33      	ldr	r3, [pc, #204]	; (8009128 <_strtod_l+0x588>)
 800905c:	4640      	mov	r0, r8
 800905e:	9305      	str	r3, [sp, #20]
 8009060:	2300      	movs	r3, #0
 8009062:	4649      	mov	r1, r9
 8009064:	469a      	mov	sl, r3
 8009066:	112d      	asrs	r5, r5, #4
 8009068:	2d01      	cmp	r5, #1
 800906a:	dc21      	bgt.n	80090b0 <_strtod_l+0x510>
 800906c:	b10b      	cbz	r3, 8009072 <_strtod_l+0x4d2>
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	492d      	ldr	r1, [pc, #180]	; (8009128 <_strtod_l+0x588>)
 8009074:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009078:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800907c:	4642      	mov	r2, r8
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	464b      	mov	r3, r9
 8009084:	f7f7 fa28 	bl	80004d8 <__aeabi_dmul>
 8009088:	4b24      	ldr	r3, [pc, #144]	; (800911c <_strtod_l+0x57c>)
 800908a:	460a      	mov	r2, r1
 800908c:	400b      	ands	r3, r1
 800908e:	4927      	ldr	r1, [pc, #156]	; (800912c <_strtod_l+0x58c>)
 8009090:	4680      	mov	r8, r0
 8009092:	428b      	cmp	r3, r1
 8009094:	d8be      	bhi.n	8009014 <_strtod_l+0x474>
 8009096:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800909a:	428b      	cmp	r3, r1
 800909c:	bf86      	itte	hi
 800909e:	f04f 38ff 	movhi.w	r8, #4294967295
 80090a2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009130 <_strtod_l+0x590>
 80090a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80090aa:	2300      	movs	r3, #0
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	e07b      	b.n	80091a8 <_strtod_l+0x608>
 80090b0:	07ea      	lsls	r2, r5, #31
 80090b2:	d505      	bpl.n	80090c0 <_strtod_l+0x520>
 80090b4:	9b05      	ldr	r3, [sp, #20]
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 fa0d 	bl	80004d8 <__aeabi_dmul>
 80090be:	2301      	movs	r3, #1
 80090c0:	9a05      	ldr	r2, [sp, #20]
 80090c2:	f10a 0a01 	add.w	sl, sl, #1
 80090c6:	3208      	adds	r2, #8
 80090c8:	106d      	asrs	r5, r5, #1
 80090ca:	9205      	str	r2, [sp, #20]
 80090cc:	e7cc      	b.n	8009068 <_strtod_l+0x4c8>
 80090ce:	d0ec      	beq.n	80090aa <_strtod_l+0x50a>
 80090d0:	426d      	negs	r5, r5
 80090d2:	f015 020f 	ands.w	r2, r5, #15
 80090d6:	d00a      	beq.n	80090ee <_strtod_l+0x54e>
 80090d8:	4b12      	ldr	r3, [pc, #72]	; (8009124 <_strtod_l+0x584>)
 80090da:	4640      	mov	r0, r8
 80090dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e0:	4649      	mov	r1, r9
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fb21 	bl	800072c <__aeabi_ddiv>
 80090ea:	4680      	mov	r8, r0
 80090ec:	4689      	mov	r9, r1
 80090ee:	112d      	asrs	r5, r5, #4
 80090f0:	d0db      	beq.n	80090aa <_strtod_l+0x50a>
 80090f2:	2d1f      	cmp	r5, #31
 80090f4:	dd1e      	ble.n	8009134 <_strtod_l+0x594>
 80090f6:	2600      	movs	r6, #0
 80090f8:	46b3      	mov	fp, r6
 80090fa:	960b      	str	r6, [sp, #44]	; 0x2c
 80090fc:	9608      	str	r6, [sp, #32]
 80090fe:	2322      	movs	r3, #34	; 0x22
 8009100:	f04f 0800 	mov.w	r8, #0
 8009104:	f04f 0900 	mov.w	r9, #0
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	e78d      	b.n	8009028 <_strtod_l+0x488>
 800910c:	0800aafb 	.word	0x0800aafb
 8009110:	0800ad24 	.word	0x0800ad24
 8009114:	0800aaf3 	.word	0x0800aaf3
 8009118:	0800ab2a 	.word	0x0800ab2a
 800911c:	7ff00000 	.word	0x7ff00000
 8009120:	0800aeb5 	.word	0x0800aeb5
 8009124:	0800ac38 	.word	0x0800ac38
 8009128:	0800ac10 	.word	0x0800ac10
 800912c:	7ca00000 	.word	0x7ca00000
 8009130:	7fefffff 	.word	0x7fefffff
 8009134:	f015 0310 	ands.w	r3, r5, #16
 8009138:	bf18      	it	ne
 800913a:	236a      	movne	r3, #106	; 0x6a
 800913c:	4640      	mov	r0, r8
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	4649      	mov	r1, r9
 8009142:	2300      	movs	r3, #0
 8009144:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009410 <_strtod_l+0x870>
 8009148:	07ea      	lsls	r2, r5, #31
 800914a:	d504      	bpl.n	8009156 <_strtod_l+0x5b6>
 800914c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009150:	f7f7 f9c2 	bl	80004d8 <__aeabi_dmul>
 8009154:	2301      	movs	r3, #1
 8009156:	106d      	asrs	r5, r5, #1
 8009158:	f10a 0a08 	add.w	sl, sl, #8
 800915c:	d1f4      	bne.n	8009148 <_strtod_l+0x5a8>
 800915e:	b10b      	cbz	r3, 8009164 <_strtod_l+0x5c4>
 8009160:	4680      	mov	r8, r0
 8009162:	4689      	mov	r9, r1
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	b1bb      	cbz	r3, 8009198 <_strtod_l+0x5f8>
 8009168:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800916c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009170:	2b00      	cmp	r3, #0
 8009172:	4649      	mov	r1, r9
 8009174:	dd10      	ble.n	8009198 <_strtod_l+0x5f8>
 8009176:	2b1f      	cmp	r3, #31
 8009178:	f340 8128 	ble.w	80093cc <_strtod_l+0x82c>
 800917c:	2b34      	cmp	r3, #52	; 0x34
 800917e:	bfd8      	it	le
 8009180:	f04f 33ff 	movle.w	r3, #4294967295
 8009184:	f04f 0800 	mov.w	r8, #0
 8009188:	bfcf      	iteee	gt
 800918a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800918e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009192:	4093      	lslle	r3, r2
 8009194:	ea03 0901 	andle.w	r9, r3, r1
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1a6      	bne.n	80090f6 <_strtod_l+0x556>
 80091a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091aa:	465a      	mov	r2, fp
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	4620      	mov	r0, r4
 80091b0:	4633      	mov	r3, r6
 80091b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091b4:	f7ff f8dc 	bl	8008370 <__s2b>
 80091b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80091ba:	2800      	cmp	r0, #0
 80091bc:	f43f af2a 	beq.w	8009014 <_strtod_l+0x474>
 80091c0:	2600      	movs	r6, #0
 80091c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c4:	9b08      	ldr	r3, [sp, #32]
 80091c6:	2a00      	cmp	r2, #0
 80091c8:	eba3 0307 	sub.w	r3, r3, r7
 80091cc:	bfa8      	it	ge
 80091ce:	2300      	movge	r3, #0
 80091d0:	46b3      	mov	fp, r6
 80091d2:	9312      	str	r3, [sp, #72]	; 0x48
 80091d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80091d8:	9316      	str	r3, [sp, #88]	; 0x58
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	4620      	mov	r0, r4
 80091de:	6859      	ldr	r1, [r3, #4]
 80091e0:	f7ff f81e 	bl	8008220 <_Balloc>
 80091e4:	9008      	str	r0, [sp, #32]
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f af18 	beq.w	800901c <_strtod_l+0x47c>
 80091ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ee:	300c      	adds	r0, #12
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	f103 010c 	add.w	r1, r3, #12
 80091f6:	3202      	adds	r2, #2
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	f7fe f894 	bl	8007326 <memcpy>
 80091fe:	ab1c      	add	r3, sp, #112	; 0x70
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	ab1b      	add	r3, sp, #108	; 0x6c
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4642      	mov	r2, r8
 8009208:	464b      	mov	r3, r9
 800920a:	4620      	mov	r0, r4
 800920c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009210:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009214:	f7ff fbd8 	bl	80089c8 <__d2b>
 8009218:	901a      	str	r0, [sp, #104]	; 0x68
 800921a:	2800      	cmp	r0, #0
 800921c:	f43f aefe 	beq.w	800901c <_strtod_l+0x47c>
 8009220:	2101      	movs	r1, #1
 8009222:	4620      	mov	r0, r4
 8009224:	f7ff f93c 	bl	80084a0 <__i2b>
 8009228:	4683      	mov	fp, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aef6 	beq.w	800901c <_strtod_l+0x47c>
 8009230:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009232:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009234:	2f00      	cmp	r7, #0
 8009236:	bfab      	itete	ge
 8009238:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800923a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800923c:	eb07 0a03 	addge.w	sl, r7, r3
 8009240:	1bdd      	sublt	r5, r3, r7
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	bfa8      	it	ge
 8009246:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009248:	eba7 0703 	sub.w	r7, r7, r3
 800924c:	4417      	add	r7, r2
 800924e:	4b71      	ldr	r3, [pc, #452]	; (8009414 <_strtod_l+0x874>)
 8009250:	f107 37ff 	add.w	r7, r7, #4294967295
 8009254:	bfb8      	it	lt
 8009256:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800925a:	429f      	cmp	r7, r3
 800925c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009260:	f280 80c7 	bge.w	80093f2 <_strtod_l+0x852>
 8009264:	1bdb      	subs	r3, r3, r7
 8009266:	2b1f      	cmp	r3, #31
 8009268:	f04f 0101 	mov.w	r1, #1
 800926c:	eba2 0203 	sub.w	r2, r2, r3
 8009270:	f300 80b3 	bgt.w	80093da <_strtod_l+0x83a>
 8009274:	fa01 f303 	lsl.w	r3, r1, r3
 8009278:	9313      	str	r3, [sp, #76]	; 0x4c
 800927a:	2300      	movs	r3, #0
 800927c:	9310      	str	r3, [sp, #64]	; 0x40
 800927e:	eb0a 0702 	add.w	r7, sl, r2
 8009282:	9b05      	ldr	r3, [sp, #20]
 8009284:	45ba      	cmp	sl, r7
 8009286:	4415      	add	r5, r2
 8009288:	441d      	add	r5, r3
 800928a:	4653      	mov	r3, sl
 800928c:	bfa8      	it	ge
 800928e:	463b      	movge	r3, r7
 8009290:	42ab      	cmp	r3, r5
 8009292:	bfa8      	it	ge
 8009294:	462b      	movge	r3, r5
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfc2      	ittt	gt
 800929a:	1aff      	subgt	r7, r7, r3
 800929c:	1aed      	subgt	r5, r5, r3
 800929e:	ebaa 0a03 	subgt.w	sl, sl, r3
 80092a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd17      	ble.n	80092d8 <_strtod_l+0x738>
 80092a8:	4659      	mov	r1, fp
 80092aa:	461a      	mov	r2, r3
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7ff f9b5 	bl	800861c <__pow5mult>
 80092b2:	4683      	mov	fp, r0
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f43f aeb1 	beq.w	800901c <_strtod_l+0x47c>
 80092ba:	4601      	mov	r1, r0
 80092bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff f904 	bl	80084cc <__multiply>
 80092c4:	900a      	str	r0, [sp, #40]	; 0x28
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f aea8 	beq.w	800901c <_strtod_l+0x47c>
 80092cc:	4620      	mov	r0, r4
 80092ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092d0:	f7fe ffe6 	bl	80082a0 <_Bfree>
 80092d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d6:	931a      	str	r3, [sp, #104]	; 0x68
 80092d8:	2f00      	cmp	r7, #0
 80092da:	f300 808f 	bgt.w	80093fc <_strtod_l+0x85c>
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dd08      	ble.n	80092f6 <_strtod_l+0x756>
 80092e4:	4620      	mov	r0, r4
 80092e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092e8:	9908      	ldr	r1, [sp, #32]
 80092ea:	f7ff f997 	bl	800861c <__pow5mult>
 80092ee:	9008      	str	r0, [sp, #32]
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f43f ae93 	beq.w	800901c <_strtod_l+0x47c>
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	dd08      	ble.n	800930c <_strtod_l+0x76c>
 80092fa:	462a      	mov	r2, r5
 80092fc:	4620      	mov	r0, r4
 80092fe:	9908      	ldr	r1, [sp, #32]
 8009300:	f7ff f9e6 	bl	80086d0 <__lshift>
 8009304:	9008      	str	r0, [sp, #32]
 8009306:	2800      	cmp	r0, #0
 8009308:	f43f ae88 	beq.w	800901c <_strtod_l+0x47c>
 800930c:	f1ba 0f00 	cmp.w	sl, #0
 8009310:	dd08      	ble.n	8009324 <_strtod_l+0x784>
 8009312:	4659      	mov	r1, fp
 8009314:	4652      	mov	r2, sl
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff f9da 	bl	80086d0 <__lshift>
 800931c:	4683      	mov	fp, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f ae7c 	beq.w	800901c <_strtod_l+0x47c>
 8009324:	4620      	mov	r0, r4
 8009326:	9a08      	ldr	r2, [sp, #32]
 8009328:	991a      	ldr	r1, [sp, #104]	; 0x68
 800932a:	f7ff fa59 	bl	80087e0 <__mdiff>
 800932e:	4606      	mov	r6, r0
 8009330:	2800      	cmp	r0, #0
 8009332:	f43f ae73 	beq.w	800901c <_strtod_l+0x47c>
 8009336:	2500      	movs	r5, #0
 8009338:	68c3      	ldr	r3, [r0, #12]
 800933a:	4659      	mov	r1, fp
 800933c:	60c5      	str	r5, [r0, #12]
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	f7ff fa32 	bl	80087a8 <__mcmp>
 8009344:	42a8      	cmp	r0, r5
 8009346:	da6b      	bge.n	8009420 <_strtod_l+0x880>
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	ea53 0308 	orrs.w	r3, r3, r8
 800934e:	f040 808f 	bne.w	8009470 <_strtod_l+0x8d0>
 8009352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 808a 	bne.w	8009470 <_strtod_l+0x8d0>
 800935c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009368:	f240 8082 	bls.w	8009470 <_strtod_l+0x8d0>
 800936c:	6973      	ldr	r3, [r6, #20]
 800936e:	b913      	cbnz	r3, 8009376 <_strtod_l+0x7d6>
 8009370:	6933      	ldr	r3, [r6, #16]
 8009372:	2b01      	cmp	r3, #1
 8009374:	dd7c      	ble.n	8009470 <_strtod_l+0x8d0>
 8009376:	4631      	mov	r1, r6
 8009378:	2201      	movs	r2, #1
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff f9a8 	bl	80086d0 <__lshift>
 8009380:	4659      	mov	r1, fp
 8009382:	4606      	mov	r6, r0
 8009384:	f7ff fa10 	bl	80087a8 <__mcmp>
 8009388:	2800      	cmp	r0, #0
 800938a:	dd71      	ble.n	8009470 <_strtod_l+0x8d0>
 800938c:	9905      	ldr	r1, [sp, #20]
 800938e:	464b      	mov	r3, r9
 8009390:	4a21      	ldr	r2, [pc, #132]	; (8009418 <_strtod_l+0x878>)
 8009392:	2900      	cmp	r1, #0
 8009394:	f000 808d 	beq.w	80094b2 <_strtod_l+0x912>
 8009398:	ea02 0109 	and.w	r1, r2, r9
 800939c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093a0:	f300 8087 	bgt.w	80094b2 <_strtod_l+0x912>
 80093a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093a8:	f77f aea9 	ble.w	80090fe <_strtod_l+0x55e>
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	4b1a      	ldr	r3, [pc, #104]	; (800941c <_strtod_l+0x87c>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f7 f890 	bl	80004d8 <__aeabi_dmul>
 80093b8:	4b17      	ldr	r3, [pc, #92]	; (8009418 <_strtod_l+0x878>)
 80093ba:	4680      	mov	r8, r0
 80093bc:	400b      	ands	r3, r1
 80093be:	4689      	mov	r9, r1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f47f ae35 	bne.w	8009030 <_strtod_l+0x490>
 80093c6:	2322      	movs	r3, #34	; 0x22
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	e631      	b.n	8009030 <_strtod_l+0x490>
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	ea03 0808 	and.w	r8, r3, r8
 80093d8:	e6de      	b.n	8009198 <_strtod_l+0x5f8>
 80093da:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80093de:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80093e2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80093e6:	37e2      	adds	r7, #226	; 0xe2
 80093e8:	fa01 f307 	lsl.w	r3, r1, r7
 80093ec:	9310      	str	r3, [sp, #64]	; 0x40
 80093ee:	9113      	str	r1, [sp, #76]	; 0x4c
 80093f0:	e745      	b.n	800927e <_strtod_l+0x6de>
 80093f2:	2300      	movs	r3, #0
 80093f4:	9310      	str	r3, [sp, #64]	; 0x40
 80093f6:	2301      	movs	r3, #1
 80093f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80093fa:	e740      	b.n	800927e <_strtod_l+0x6de>
 80093fc:	463a      	mov	r2, r7
 80093fe:	4620      	mov	r0, r4
 8009400:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009402:	f7ff f965 	bl	80086d0 <__lshift>
 8009406:	901a      	str	r0, [sp, #104]	; 0x68
 8009408:	2800      	cmp	r0, #0
 800940a:	f47f af68 	bne.w	80092de <_strtod_l+0x73e>
 800940e:	e605      	b.n	800901c <_strtod_l+0x47c>
 8009410:	0800ad38 	.word	0x0800ad38
 8009414:	fffffc02 	.word	0xfffffc02
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	39500000 	.word	0x39500000
 8009420:	46ca      	mov	sl, r9
 8009422:	d165      	bne.n	80094f0 <_strtod_l+0x950>
 8009424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009426:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800942a:	b352      	cbz	r2, 8009482 <_strtod_l+0x8e2>
 800942c:	4a9e      	ldr	r2, [pc, #632]	; (80096a8 <_strtod_l+0xb08>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d12a      	bne.n	8009488 <_strtod_l+0x8e8>
 8009432:	9b05      	ldr	r3, [sp, #20]
 8009434:	4641      	mov	r1, r8
 8009436:	b1fb      	cbz	r3, 8009478 <_strtod_l+0x8d8>
 8009438:	4b9c      	ldr	r3, [pc, #624]	; (80096ac <_strtod_l+0xb0c>)
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	ea09 0303 	and.w	r3, r9, r3
 8009442:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009446:	d81a      	bhi.n	800947e <_strtod_l+0x8de>
 8009448:	0d1b      	lsrs	r3, r3, #20
 800944a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800944e:	fa02 f303 	lsl.w	r3, r2, r3
 8009452:	4299      	cmp	r1, r3
 8009454:	d118      	bne.n	8009488 <_strtod_l+0x8e8>
 8009456:	4b96      	ldr	r3, [pc, #600]	; (80096b0 <_strtod_l+0xb10>)
 8009458:	459a      	cmp	sl, r3
 800945a:	d102      	bne.n	8009462 <_strtod_l+0x8c2>
 800945c:	3101      	adds	r1, #1
 800945e:	f43f addd 	beq.w	800901c <_strtod_l+0x47c>
 8009462:	f04f 0800 	mov.w	r8, #0
 8009466:	4b91      	ldr	r3, [pc, #580]	; (80096ac <_strtod_l+0xb0c>)
 8009468:	ea0a 0303 	and.w	r3, sl, r3
 800946c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009470:	9b05      	ldr	r3, [sp, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d19a      	bne.n	80093ac <_strtod_l+0x80c>
 8009476:	e5db      	b.n	8009030 <_strtod_l+0x490>
 8009478:	f04f 33ff 	mov.w	r3, #4294967295
 800947c:	e7e9      	b.n	8009452 <_strtod_l+0x8b2>
 800947e:	4613      	mov	r3, r2
 8009480:	e7e7      	b.n	8009452 <_strtod_l+0x8b2>
 8009482:	ea53 0308 	orrs.w	r3, r3, r8
 8009486:	d081      	beq.n	800938c <_strtod_l+0x7ec>
 8009488:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800948a:	b1e3      	cbz	r3, 80094c6 <_strtod_l+0x926>
 800948c:	ea13 0f0a 	tst.w	r3, sl
 8009490:	d0ee      	beq.n	8009470 <_strtod_l+0x8d0>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	9a05      	ldr	r2, [sp, #20]
 800949a:	b1c3      	cbz	r3, 80094ce <_strtod_l+0x92e>
 800949c:	f7ff fb5c 	bl	8008b58 <sulp>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094a8:	f7f6 fe60 	bl	800016c <__adddf3>
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	e7de      	b.n	8009470 <_strtod_l+0x8d0>
 80094b2:	4013      	ands	r3, r2
 80094b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80094bc:	f04f 38ff 	mov.w	r8, #4294967295
 80094c0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80094c4:	e7d4      	b.n	8009470 <_strtod_l+0x8d0>
 80094c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094c8:	ea13 0f08 	tst.w	r3, r8
 80094cc:	e7e0      	b.n	8009490 <_strtod_l+0x8f0>
 80094ce:	f7ff fb43 	bl	8008b58 <sulp>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094da:	f7f6 fe45 	bl	8000168 <__aeabi_dsub>
 80094de:	2200      	movs	r2, #0
 80094e0:	2300      	movs	r3, #0
 80094e2:	4680      	mov	r8, r0
 80094e4:	4689      	mov	r9, r1
 80094e6:	f7f7 fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d0c0      	beq.n	8009470 <_strtod_l+0x8d0>
 80094ee:	e606      	b.n	80090fe <_strtod_l+0x55e>
 80094f0:	4659      	mov	r1, fp
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff fabe 	bl	8008a74 <__ratio>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009500:	2200      	movs	r2, #0
 8009502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009506:	f7f7 fa63 	bl	80009d0 <__aeabi_dcmple>
 800950a:	2800      	cmp	r0, #0
 800950c:	d06f      	beq.n	80095ee <_strtod_l+0xa4e>
 800950e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009510:	2b00      	cmp	r3, #0
 8009512:	d17c      	bne.n	800960e <_strtod_l+0xa6e>
 8009514:	f1b8 0f00 	cmp.w	r8, #0
 8009518:	d159      	bne.n	80095ce <_strtod_l+0xa2e>
 800951a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800951e:	2b00      	cmp	r3, #0
 8009520:	d17b      	bne.n	800961a <_strtod_l+0xa7a>
 8009522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009526:	2200      	movs	r2, #0
 8009528:	4b62      	ldr	r3, [pc, #392]	; (80096b4 <_strtod_l+0xb14>)
 800952a:	f7f7 fa47 	bl	80009bc <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	d15a      	bne.n	80095e8 <_strtod_l+0xa48>
 8009532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009536:	2200      	movs	r2, #0
 8009538:	4b5f      	ldr	r3, [pc, #380]	; (80096b8 <_strtod_l+0xb18>)
 800953a:	f7f6 ffcd 	bl	80004d8 <__aeabi_dmul>
 800953e:	4605      	mov	r5, r0
 8009540:	460f      	mov	r7, r1
 8009542:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009546:	9506      	str	r5, [sp, #24]
 8009548:	9307      	str	r3, [sp, #28]
 800954a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800954e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009552:	4b56      	ldr	r3, [pc, #344]	; (80096ac <_strtod_l+0xb0c>)
 8009554:	4a55      	ldr	r2, [pc, #340]	; (80096ac <_strtod_l+0xb0c>)
 8009556:	ea0a 0303 	and.w	r3, sl, r3
 800955a:	9313      	str	r3, [sp, #76]	; 0x4c
 800955c:	4b57      	ldr	r3, [pc, #348]	; (80096bc <_strtod_l+0xb1c>)
 800955e:	ea0a 0202 	and.w	r2, sl, r2
 8009562:	429a      	cmp	r2, r3
 8009564:	f040 80b0 	bne.w	80096c8 <_strtod_l+0xb28>
 8009568:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7ff f9c2 	bl	80088f8 <__ulp>
 8009574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009578:	f7f6 ffae 	bl	80004d8 <__aeabi_dmul>
 800957c:	4642      	mov	r2, r8
 800957e:	464b      	mov	r3, r9
 8009580:	f7f6 fdf4 	bl	800016c <__adddf3>
 8009584:	f8df a124 	ldr.w	sl, [pc, #292]	; 80096ac <_strtod_l+0xb0c>
 8009588:	4a4d      	ldr	r2, [pc, #308]	; (80096c0 <_strtod_l+0xb20>)
 800958a:	ea01 0a0a 	and.w	sl, r1, sl
 800958e:	4592      	cmp	sl, r2
 8009590:	4680      	mov	r8, r0
 8009592:	d948      	bls.n	8009626 <_strtod_l+0xa86>
 8009594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009596:	4b46      	ldr	r3, [pc, #280]	; (80096b0 <_strtod_l+0xb10>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d103      	bne.n	80095a4 <_strtod_l+0xa04>
 800959c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959e:	3301      	adds	r3, #1
 80095a0:	f43f ad3c 	beq.w	800901c <_strtod_l+0x47c>
 80095a4:	f04f 38ff 	mov.w	r8, #4294967295
 80095a8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80096b0 <_strtod_l+0xb10>
 80095ac:	4620      	mov	r0, r4
 80095ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80095b0:	f7fe fe76 	bl	80082a0 <_Bfree>
 80095b4:	4620      	mov	r0, r4
 80095b6:	9908      	ldr	r1, [sp, #32]
 80095b8:	f7fe fe72 	bl	80082a0 <_Bfree>
 80095bc:	4659      	mov	r1, fp
 80095be:	4620      	mov	r0, r4
 80095c0:	f7fe fe6e 	bl	80082a0 <_Bfree>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4620      	mov	r0, r4
 80095c8:	f7fe fe6a 	bl	80082a0 <_Bfree>
 80095cc:	e605      	b.n	80091da <_strtod_l+0x63a>
 80095ce:	f1b8 0f01 	cmp.w	r8, #1
 80095d2:	d103      	bne.n	80095dc <_strtod_l+0xa3c>
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	f43f ad91 	beq.w	80090fe <_strtod_l+0x55e>
 80095dc:	2200      	movs	r2, #0
 80095de:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <_strtod_l+0xb24>)
 80095e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095e6:	e016      	b.n	8009616 <_strtod_l+0xa76>
 80095e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095ea:	4f33      	ldr	r7, [pc, #204]	; (80096b8 <_strtod_l+0xb18>)
 80095ec:	e7a9      	b.n	8009542 <_strtod_l+0x9a2>
 80095ee:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <_strtod_l+0xb18>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095f6:	f7f6 ff6f 	bl	80004d8 <__aeabi_dmul>
 80095fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fc:	4605      	mov	r5, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d09e      	beq.n	8009542 <_strtod_l+0x9a2>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800960c:	e79d      	b.n	800954a <_strtod_l+0x9aa>
 800960e:	2200      	movs	r2, #0
 8009610:	4b28      	ldr	r3, [pc, #160]	; (80096b4 <_strtod_l+0xb14>)
 8009612:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009616:	4f27      	ldr	r7, [pc, #156]	; (80096b4 <_strtod_l+0xb14>)
 8009618:	e797      	b.n	800954a <_strtod_l+0x9aa>
 800961a:	2200      	movs	r2, #0
 800961c:	4b29      	ldr	r3, [pc, #164]	; (80096c4 <_strtod_l+0xb24>)
 800961e:	4645      	mov	r5, r8
 8009620:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009624:	e7f7      	b.n	8009616 <_strtod_l+0xa76>
 8009626:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	46ca      	mov	sl, r9
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1bc      	bne.n	80095ac <_strtod_l+0xa0c>
 8009632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009636:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009638:	0d1b      	lsrs	r3, r3, #20
 800963a:	051b      	lsls	r3, r3, #20
 800963c:	429a      	cmp	r2, r3
 800963e:	d1b5      	bne.n	80095ac <_strtod_l+0xa0c>
 8009640:	4628      	mov	r0, r5
 8009642:	4639      	mov	r1, r7
 8009644:	f7f7 fc14 	bl	8000e70 <__aeabi_d2lz>
 8009648:	f7f6 ff18 	bl	800047c <__aeabi_l2d>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4628      	mov	r0, r5
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 fd88 	bl	8000168 <__aeabi_dsub>
 8009658:	460b      	mov	r3, r1
 800965a:	4602      	mov	r2, r0
 800965c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009660:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009666:	ea4a 0a08 	orr.w	sl, sl, r8
 800966a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800966e:	d06c      	beq.n	800974a <_strtod_l+0xbaa>
 8009670:	a309      	add	r3, pc, #36	; (adr r3, 8009698 <_strtod_l+0xaf8>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f7 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800967a:	2800      	cmp	r0, #0
 800967c:	f47f acd8 	bne.w	8009030 <_strtod_l+0x490>
 8009680:	a307      	add	r3, pc, #28	; (adr r3, 80096a0 <_strtod_l+0xb00>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800968a:	f7f7 f9b5 	bl	80009f8 <__aeabi_dcmpgt>
 800968e:	2800      	cmp	r0, #0
 8009690:	d08c      	beq.n	80095ac <_strtod_l+0xa0c>
 8009692:	e4cd      	b.n	8009030 <_strtod_l+0x490>
 8009694:	f3af 8000 	nop.w
 8009698:	94a03595 	.word	0x94a03595
 800969c:	3fdfffff 	.word	0x3fdfffff
 80096a0:	35afe535 	.word	0x35afe535
 80096a4:	3fe00000 	.word	0x3fe00000
 80096a8:	000fffff 	.word	0x000fffff
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	7fefffff 	.word	0x7fefffff
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	3fe00000 	.word	0x3fe00000
 80096bc:	7fe00000 	.word	0x7fe00000
 80096c0:	7c9fffff 	.word	0x7c9fffff
 80096c4:	bff00000 	.word	0xbff00000
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	b333      	cbz	r3, 800971a <_strtod_l+0xb7a>
 80096cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096d2:	d822      	bhi.n	800971a <_strtod_l+0xb7a>
 80096d4:	a328      	add	r3, pc, #160	; (adr r3, 8009778 <_strtod_l+0xbd8>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	4628      	mov	r0, r5
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f7 f977 	bl	80009d0 <__aeabi_dcmple>
 80096e2:	b1a0      	cbz	r0, 800970e <_strtod_l+0xb6e>
 80096e4:	4639      	mov	r1, r7
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7f7 f9ce 	bl	8000a88 <__aeabi_d2uiz>
 80096ec:	2801      	cmp	r0, #1
 80096ee:	bf38      	it	cc
 80096f0:	2001      	movcc	r0, #1
 80096f2:	f7f6 fe77 	bl	80003e4 <__aeabi_ui2d>
 80096f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f8:	4605      	mov	r5, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	bb03      	cbnz	r3, 8009740 <_strtod_l+0xba0>
 80096fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009702:	9014      	str	r0, [sp, #80]	; 0x50
 8009704:	9315      	str	r3, [sp, #84]	; 0x54
 8009706:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800970a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800970e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009712:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	9311      	str	r3, [sp, #68]	; 0x44
 800971a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800971c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800971e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009722:	f7ff f8e9 	bl	80088f8 <__ulp>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4640      	mov	r0, r8
 800972c:	4649      	mov	r1, r9
 800972e:	f7f6 fed3 	bl	80004d8 <__aeabi_dmul>
 8009732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009736:	f7f6 fd19 	bl	800016c <__adddf3>
 800973a:	4680      	mov	r8, r0
 800973c:	4689      	mov	r9, r1
 800973e:	e774      	b.n	800962a <_strtod_l+0xa8a>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009748:	e7dd      	b.n	8009706 <_strtod_l+0xb66>
 800974a:	a30d      	add	r3, pc, #52	; (adr r3, 8009780 <_strtod_l+0xbe0>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f7 f934 	bl	80009bc <__aeabi_dcmplt>
 8009754:	e79b      	b.n	800968e <_strtod_l+0xaee>
 8009756:	2300      	movs	r3, #0
 8009758:	930e      	str	r3, [sp, #56]	; 0x38
 800975a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800975c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	f7ff ba5b 	b.w	8008c1a <_strtod_l+0x7a>
 8009764:	2a65      	cmp	r2, #101	; 0x65
 8009766:	f43f ab52 	beq.w	8008e0e <_strtod_l+0x26e>
 800976a:	2a45      	cmp	r2, #69	; 0x45
 800976c:	f43f ab4f 	beq.w	8008e0e <_strtod_l+0x26e>
 8009770:	2301      	movs	r3, #1
 8009772:	f7ff bb87 	b.w	8008e84 <_strtod_l+0x2e4>
 8009776:	bf00      	nop
 8009778:	ffc00000 	.word	0xffc00000
 800977c:	41dfffff 	.word	0x41dfffff
 8009780:	94a03595 	.word	0x94a03595
 8009784:	3fcfffff 	.word	0x3fcfffff

08009788 <_strtod_r>:
 8009788:	4b01      	ldr	r3, [pc, #4]	; (8009790 <_strtod_r+0x8>)
 800978a:	f7ff ba09 	b.w	8008ba0 <_strtod_l>
 800978e:	bf00      	nop
 8009790:	20000078 	.word	0x20000078

08009794 <_strtol_l.constprop.0>:
 8009794:	2b01      	cmp	r3, #1
 8009796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800979a:	4686      	mov	lr, r0
 800979c:	4690      	mov	r8, r2
 800979e:	d001      	beq.n	80097a4 <_strtol_l.constprop.0+0x10>
 80097a0:	2b24      	cmp	r3, #36	; 0x24
 80097a2:	d906      	bls.n	80097b2 <_strtol_l.constprop.0+0x1e>
 80097a4:	f7fd fd84 	bl	80072b0 <__errno>
 80097a8:	2316      	movs	r3, #22
 80097aa:	6003      	str	r3, [r0, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	460d      	mov	r5, r1
 80097b4:	4835      	ldr	r0, [pc, #212]	; (800988c <_strtol_l.constprop.0+0xf8>)
 80097b6:	462a      	mov	r2, r5
 80097b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097bc:	5d06      	ldrb	r6, [r0, r4]
 80097be:	f016 0608 	ands.w	r6, r6, #8
 80097c2:	d1f8      	bne.n	80097b6 <_strtol_l.constprop.0+0x22>
 80097c4:	2c2d      	cmp	r4, #45	; 0x2d
 80097c6:	d12e      	bne.n	8009826 <_strtol_l.constprop.0+0x92>
 80097c8:	2601      	movs	r6, #1
 80097ca:	782c      	ldrb	r4, [r5, #0]
 80097cc:	1c95      	adds	r5, r2, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d057      	beq.n	8009882 <_strtol_l.constprop.0+0xee>
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d109      	bne.n	80097ea <_strtol_l.constprop.0+0x56>
 80097d6:	2c30      	cmp	r4, #48	; 0x30
 80097d8:	d107      	bne.n	80097ea <_strtol_l.constprop.0+0x56>
 80097da:	782a      	ldrb	r2, [r5, #0]
 80097dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80097e0:	2a58      	cmp	r2, #88	; 0x58
 80097e2:	d149      	bne.n	8009878 <_strtol_l.constprop.0+0xe4>
 80097e4:	2310      	movs	r3, #16
 80097e6:	786c      	ldrb	r4, [r5, #1]
 80097e8:	3502      	adds	r5, #2
 80097ea:	2200      	movs	r2, #0
 80097ec:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80097f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097f4:	fbbc f9f3 	udiv	r9, ip, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80097fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009802:	2f09      	cmp	r7, #9
 8009804:	d814      	bhi.n	8009830 <_strtol_l.constprop.0+0x9c>
 8009806:	463c      	mov	r4, r7
 8009808:	42a3      	cmp	r3, r4
 800980a:	dd20      	ble.n	800984e <_strtol_l.constprop.0+0xba>
 800980c:	1c57      	adds	r7, r2, #1
 800980e:	d007      	beq.n	8009820 <_strtol_l.constprop.0+0x8c>
 8009810:	4581      	cmp	r9, r0
 8009812:	d319      	bcc.n	8009848 <_strtol_l.constprop.0+0xb4>
 8009814:	d101      	bne.n	800981a <_strtol_l.constprop.0+0x86>
 8009816:	45a2      	cmp	sl, r4
 8009818:	db16      	blt.n	8009848 <_strtol_l.constprop.0+0xb4>
 800981a:	2201      	movs	r2, #1
 800981c:	fb00 4003 	mla	r0, r0, r3, r4
 8009820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009824:	e7eb      	b.n	80097fe <_strtol_l.constprop.0+0x6a>
 8009826:	2c2b      	cmp	r4, #43	; 0x2b
 8009828:	bf04      	itt	eq
 800982a:	782c      	ldrbeq	r4, [r5, #0]
 800982c:	1c95      	addeq	r5, r2, #2
 800982e:	e7ce      	b.n	80097ce <_strtol_l.constprop.0+0x3a>
 8009830:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009834:	2f19      	cmp	r7, #25
 8009836:	d801      	bhi.n	800983c <_strtol_l.constprop.0+0xa8>
 8009838:	3c37      	subs	r4, #55	; 0x37
 800983a:	e7e5      	b.n	8009808 <_strtol_l.constprop.0+0x74>
 800983c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009840:	2f19      	cmp	r7, #25
 8009842:	d804      	bhi.n	800984e <_strtol_l.constprop.0+0xba>
 8009844:	3c57      	subs	r4, #87	; 0x57
 8009846:	e7df      	b.n	8009808 <_strtol_l.constprop.0+0x74>
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	e7e8      	b.n	8009820 <_strtol_l.constprop.0+0x8c>
 800984e:	1c53      	adds	r3, r2, #1
 8009850:	d108      	bne.n	8009864 <_strtol_l.constprop.0+0xd0>
 8009852:	2322      	movs	r3, #34	; 0x22
 8009854:	4660      	mov	r0, ip
 8009856:	f8ce 3000 	str.w	r3, [lr]
 800985a:	f1b8 0f00 	cmp.w	r8, #0
 800985e:	d0a6      	beq.n	80097ae <_strtol_l.constprop.0+0x1a>
 8009860:	1e69      	subs	r1, r5, #1
 8009862:	e006      	b.n	8009872 <_strtol_l.constprop.0+0xde>
 8009864:	b106      	cbz	r6, 8009868 <_strtol_l.constprop.0+0xd4>
 8009866:	4240      	negs	r0, r0
 8009868:	f1b8 0f00 	cmp.w	r8, #0
 800986c:	d09f      	beq.n	80097ae <_strtol_l.constprop.0+0x1a>
 800986e:	2a00      	cmp	r2, #0
 8009870:	d1f6      	bne.n	8009860 <_strtol_l.constprop.0+0xcc>
 8009872:	f8c8 1000 	str.w	r1, [r8]
 8009876:	e79a      	b.n	80097ae <_strtol_l.constprop.0+0x1a>
 8009878:	2430      	movs	r4, #48	; 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1b5      	bne.n	80097ea <_strtol_l.constprop.0+0x56>
 800987e:	2308      	movs	r3, #8
 8009880:	e7b3      	b.n	80097ea <_strtol_l.constprop.0+0x56>
 8009882:	2c30      	cmp	r4, #48	; 0x30
 8009884:	d0a9      	beq.n	80097da <_strtol_l.constprop.0+0x46>
 8009886:	230a      	movs	r3, #10
 8009888:	e7af      	b.n	80097ea <_strtol_l.constprop.0+0x56>
 800988a:	bf00      	nop
 800988c:	0800ad61 	.word	0x0800ad61

08009890 <_strtol_r>:
 8009890:	f7ff bf80 	b.w	8009794 <_strtol_l.constprop.0>

08009894 <__ssputs_r>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	461f      	mov	r7, r3
 800989a:	688e      	ldr	r6, [r1, #8]
 800989c:	4682      	mov	sl, r0
 800989e:	42be      	cmp	r6, r7
 80098a0:	460c      	mov	r4, r1
 80098a2:	4690      	mov	r8, r2
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	d82c      	bhi.n	8009902 <__ssputs_r+0x6e>
 80098a8:	898a      	ldrh	r2, [r1, #12]
 80098aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098ae:	d026      	beq.n	80098fe <__ssputs_r+0x6a>
 80098b0:	6965      	ldr	r5, [r4, #20]
 80098b2:	6909      	ldr	r1, [r1, #16]
 80098b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b8:	eba3 0901 	sub.w	r9, r3, r1
 80098bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c0:	1c7b      	adds	r3, r7, #1
 80098c2:	444b      	add	r3, r9
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	429d      	cmp	r5, r3
 80098c8:	bf38      	it	cc
 80098ca:	461d      	movcc	r5, r3
 80098cc:	0553      	lsls	r3, r2, #21
 80098ce:	d527      	bpl.n	8009920 <__ssputs_r+0x8c>
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7fe fc19 	bl	8008108 <_malloc_r>
 80098d6:	4606      	mov	r6, r0
 80098d8:	b360      	cbz	r0, 8009934 <__ssputs_r+0xa0>
 80098da:	464a      	mov	r2, r9
 80098dc:	6921      	ldr	r1, [r4, #16]
 80098de:	f7fd fd22 	bl	8007326 <memcpy>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6126      	str	r6, [r4, #16]
 80098f0:	444e      	add	r6, r9
 80098f2:	6026      	str	r6, [r4, #0]
 80098f4:	463e      	mov	r6, r7
 80098f6:	6165      	str	r5, [r4, #20]
 80098f8:	eba5 0509 	sub.w	r5, r5, r9
 80098fc:	60a5      	str	r5, [r4, #8]
 80098fe:	42be      	cmp	r6, r7
 8009900:	d900      	bls.n	8009904 <__ssputs_r+0x70>
 8009902:	463e      	mov	r6, r7
 8009904:	4632      	mov	r2, r6
 8009906:	4641      	mov	r1, r8
 8009908:	6820      	ldr	r0, [r4, #0]
 800990a:	f000 f9c5 	bl	8009c98 <memmove>
 800990e:	2000      	movs	r0, #0
 8009910:	68a3      	ldr	r3, [r4, #8]
 8009912:	1b9b      	subs	r3, r3, r6
 8009914:	60a3      	str	r3, [r4, #8]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	4433      	add	r3, r6
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009920:	462a      	mov	r2, r5
 8009922:	f000 fd98 	bl	800a456 <_realloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d1e0      	bne.n	80098ee <__ssputs_r+0x5a>
 800992c:	4650      	mov	r0, sl
 800992e:	6921      	ldr	r1, [r4, #16]
 8009930:	f7fe fb7a 	bl	8008028 <_free_r>
 8009934:	230c      	movs	r3, #12
 8009936:	f8ca 3000 	str.w	r3, [sl]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7e9      	b.n	800991c <__ssputs_r+0x88>

08009948 <_svfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4698      	mov	r8, r3
 800994e:	898b      	ldrh	r3, [r1, #12]
 8009950:	4607      	mov	r7, r0
 8009952:	061b      	lsls	r3, r3, #24
 8009954:	460d      	mov	r5, r1
 8009956:	4614      	mov	r4, r2
 8009958:	b09d      	sub	sp, #116	; 0x74
 800995a:	d50e      	bpl.n	800997a <_svfiprintf_r+0x32>
 800995c:	690b      	ldr	r3, [r1, #16]
 800995e:	b963      	cbnz	r3, 800997a <_svfiprintf_r+0x32>
 8009960:	2140      	movs	r1, #64	; 0x40
 8009962:	f7fe fbd1 	bl	8008108 <_malloc_r>
 8009966:	6028      	str	r0, [r5, #0]
 8009968:	6128      	str	r0, [r5, #16]
 800996a:	b920      	cbnz	r0, 8009976 <_svfiprintf_r+0x2e>
 800996c:	230c      	movs	r3, #12
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	f04f 30ff 	mov.w	r0, #4294967295
 8009974:	e0d0      	b.n	8009b18 <_svfiprintf_r+0x1d0>
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	616b      	str	r3, [r5, #20]
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	; 0x24
 800997e:	2320      	movs	r3, #32
 8009980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009984:	2330      	movs	r3, #48	; 0x30
 8009986:	f04f 0901 	mov.w	r9, #1
 800998a:	f8cd 800c 	str.w	r8, [sp, #12]
 800998e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009b30 <_svfiprintf_r+0x1e8>
 8009992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009996:	4623      	mov	r3, r4
 8009998:	469a      	mov	sl, r3
 800999a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800999e:	b10a      	cbz	r2, 80099a4 <_svfiprintf_r+0x5c>
 80099a0:	2a25      	cmp	r2, #37	; 0x25
 80099a2:	d1f9      	bne.n	8009998 <_svfiprintf_r+0x50>
 80099a4:	ebba 0b04 	subs.w	fp, sl, r4
 80099a8:	d00b      	beq.n	80099c2 <_svfiprintf_r+0x7a>
 80099aa:	465b      	mov	r3, fp
 80099ac:	4622      	mov	r2, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ff6f 	bl	8009894 <__ssputs_r>
 80099b6:	3001      	adds	r0, #1
 80099b8:	f000 80a9 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099be:	445a      	add	r2, fp
 80099c0:	9209      	str	r2, [sp, #36]	; 0x24
 80099c2:	f89a 3000 	ldrb.w	r3, [sl]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80a1 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099cc:	2300      	movs	r3, #0
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d6:	f10a 0a01 	add.w	sl, sl, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	9307      	str	r3, [sp, #28]
 80099de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e2:	931a      	str	r3, [sp, #104]	; 0x68
 80099e4:	4654      	mov	r4, sl
 80099e6:	2205      	movs	r2, #5
 80099e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ec:	4850      	ldr	r0, [pc, #320]	; (8009b30 <_svfiprintf_r+0x1e8>)
 80099ee:	f7fd fc8c 	bl	800730a <memchr>
 80099f2:	9a04      	ldr	r2, [sp, #16]
 80099f4:	b9d8      	cbnz	r0, 8009a2e <_svfiprintf_r+0xe6>
 80099f6:	06d0      	lsls	r0, r2, #27
 80099f8:	bf44      	itt	mi
 80099fa:	2320      	movmi	r3, #32
 80099fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a00:	0711      	lsls	r1, r2, #28
 8009a02:	bf44      	itt	mi
 8009a04:	232b      	movmi	r3, #43	; 0x2b
 8009a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a10:	d015      	beq.n	8009a3e <_svfiprintf_r+0xf6>
 8009a12:	4654      	mov	r4, sl
 8009a14:	2000      	movs	r0, #0
 8009a16:	f04f 0c0a 	mov.w	ip, #10
 8009a1a:	9a07      	ldr	r2, [sp, #28]
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a22:	3b30      	subs	r3, #48	; 0x30
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d94d      	bls.n	8009ac4 <_svfiprintf_r+0x17c>
 8009a28:	b1b0      	cbz	r0, 8009a58 <_svfiprintf_r+0x110>
 8009a2a:	9207      	str	r2, [sp, #28]
 8009a2c:	e014      	b.n	8009a58 <_svfiprintf_r+0x110>
 8009a2e:	eba0 0308 	sub.w	r3, r0, r8
 8009a32:	fa09 f303 	lsl.w	r3, r9, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	46a2      	mov	sl, r4
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	e7d2      	b.n	80099e4 <_svfiprintf_r+0x9c>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	1d19      	adds	r1, r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	9103      	str	r1, [sp, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfbb      	ittet	lt
 8009a4a:	425b      	neglt	r3, r3
 8009a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a50:	9307      	strge	r3, [sp, #28]
 8009a52:	9307      	strlt	r3, [sp, #28]
 8009a54:	bfb8      	it	lt
 8009a56:	9204      	strlt	r2, [sp, #16]
 8009a58:	7823      	ldrb	r3, [r4, #0]
 8009a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5c:	d10c      	bne.n	8009a78 <_svfiprintf_r+0x130>
 8009a5e:	7863      	ldrb	r3, [r4, #1]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d134      	bne.n	8009ace <_svfiprintf_r+0x186>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	3402      	adds	r4, #2
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9203      	str	r2, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfb8      	it	lt
 8009a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009b34 <_svfiprintf_r+0x1ec>
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	4650      	mov	r0, sl
 8009a80:	7821      	ldrb	r1, [r4, #0]
 8009a82:	f7fd fc42 	bl	800730a <memchr>
 8009a86:	b138      	cbz	r0, 8009a98 <_svfiprintf_r+0x150>
 8009a88:	2240      	movs	r2, #64	; 0x40
 8009a8a:	9b04      	ldr	r3, [sp, #16]
 8009a8c:	eba0 000a 	sub.w	r0, r0, sl
 8009a90:	4082      	lsls	r2, r0
 8009a92:	4313      	orrs	r3, r2
 8009a94:	3401      	adds	r4, #1
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	2206      	movs	r2, #6
 8009a9e:	4826      	ldr	r0, [pc, #152]	; (8009b38 <_svfiprintf_r+0x1f0>)
 8009aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa4:	f7fd fc31 	bl	800730a <memchr>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d038      	beq.n	8009b1e <_svfiprintf_r+0x1d6>
 8009aac:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <_svfiprintf_r+0x1f4>)
 8009aae:	bb1b      	cbnz	r3, 8009af8 <_svfiprintf_r+0x1b0>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	3307      	adds	r3, #7
 8009ab4:	f023 0307 	bic.w	r3, r3, #7
 8009ab8:	3308      	adds	r3, #8
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abe:	4433      	add	r3, r6
 8009ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac2:	e768      	b.n	8009996 <_svfiprintf_r+0x4e>
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009acc:	e7a6      	b.n	8009a1c <_svfiprintf_r+0xd4>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 0c0a 	mov.w	ip, #10
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	4620      	mov	r0, r4
 8009adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae0:	3a30      	subs	r2, #48	; 0x30
 8009ae2:	2a09      	cmp	r2, #9
 8009ae4:	d903      	bls.n	8009aee <_svfiprintf_r+0x1a6>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0c6      	beq.n	8009a78 <_svfiprintf_r+0x130>
 8009aea:	9105      	str	r1, [sp, #20]
 8009aec:	e7c4      	b.n	8009a78 <_svfiprintf_r+0x130>
 8009aee:	4604      	mov	r4, r0
 8009af0:	2301      	movs	r3, #1
 8009af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af6:	e7f0      	b.n	8009ada <_svfiprintf_r+0x192>
 8009af8:	ab03      	add	r3, sp, #12
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	462a      	mov	r2, r5
 8009afe:	4638      	mov	r0, r7
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b02:	a904      	add	r1, sp, #16
 8009b04:	f7fc fc58 	bl	80063b8 <_printf_float>
 8009b08:	1c42      	adds	r2, r0, #1
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	d1d6      	bne.n	8009abc <_svfiprintf_r+0x174>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	065b      	lsls	r3, r3, #25
 8009b12:	f53f af2d 	bmi.w	8009970 <_svfiprintf_r+0x28>
 8009b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b18:	b01d      	add	sp, #116	; 0x74
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4638      	mov	r0, r7
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	f7fc fee5 	bl	80068f8 <_printf_i>
 8009b2e:	e7eb      	b.n	8009b08 <_svfiprintf_r+0x1c0>
 8009b30:	0800ae61 	.word	0x0800ae61
 8009b34:	0800ae67 	.word	0x0800ae67
 8009b38:	0800ae6b 	.word	0x0800ae6b
 8009b3c:	080063b9 	.word	0x080063b9
 8009b40:	08009895 	.word	0x08009895

08009b44 <__sflush_r>:
 8009b44:	898a      	ldrh	r2, [r1, #12]
 8009b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b48:	4605      	mov	r5, r0
 8009b4a:	0710      	lsls	r0, r2, #28
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	d457      	bmi.n	8009c00 <__sflush_r+0xbc>
 8009b50:	684b      	ldr	r3, [r1, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dc04      	bgt.n	8009b60 <__sflush_r+0x1c>
 8009b56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dc01      	bgt.n	8009b60 <__sflush_r+0x1c>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	d0fa      	beq.n	8009b5c <__sflush_r+0x18>
 8009b66:	2300      	movs	r3, #0
 8009b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b6c:	682f      	ldr	r7, [r5, #0]
 8009b6e:	6a21      	ldr	r1, [r4, #32]
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	d032      	beq.n	8009bda <__sflush_r+0x96>
 8009b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	075a      	lsls	r2, r3, #29
 8009b7a:	d505      	bpl.n	8009b88 <__sflush_r+0x44>
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	1ac0      	subs	r0, r0, r3
 8009b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b82:	b10b      	cbz	r3, 8009b88 <__sflush_r+0x44>
 8009b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b86:	1ac0      	subs	r0, r0, r3
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b8e:	4628      	mov	r0, r5
 8009b90:	6a21      	ldr	r1, [r4, #32]
 8009b92:	47b0      	blx	r6
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	d106      	bne.n	8009ba8 <__sflush_r+0x64>
 8009b9a:	6829      	ldr	r1, [r5, #0]
 8009b9c:	291d      	cmp	r1, #29
 8009b9e:	d82b      	bhi.n	8009bf8 <__sflush_r+0xb4>
 8009ba0:	4a28      	ldr	r2, [pc, #160]	; (8009c44 <__sflush_r+0x100>)
 8009ba2:	410a      	asrs	r2, r1
 8009ba4:	07d6      	lsls	r6, r2, #31
 8009ba6:	d427      	bmi.n	8009bf8 <__sflush_r+0xb4>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	6062      	str	r2, [r4, #4]
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	04d9      	lsls	r1, r3, #19
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	d504      	bpl.n	8009bbe <__sflush_r+0x7a>
 8009bb4:	1c42      	adds	r2, r0, #1
 8009bb6:	d101      	bne.n	8009bbc <__sflush_r+0x78>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b903      	cbnz	r3, 8009bbe <__sflush_r+0x7a>
 8009bbc:	6560      	str	r0, [r4, #84]	; 0x54
 8009bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc0:	602f      	str	r7, [r5, #0]
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	d0ca      	beq.n	8009b5c <__sflush_r+0x18>
 8009bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bca:	4299      	cmp	r1, r3
 8009bcc:	d002      	beq.n	8009bd4 <__sflush_r+0x90>
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f7fe fa2a 	bl	8008028 <_free_r>
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd8:	e7c1      	b.n	8009b5e <__sflush_r+0x1a>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b0      	blx	r6
 8009be0:	1c41      	adds	r1, r0, #1
 8009be2:	d1c8      	bne.n	8009b76 <__sflush_r+0x32>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c5      	beq.n	8009b76 <__sflush_r+0x32>
 8009bea:	2b1d      	cmp	r3, #29
 8009bec:	d001      	beq.n	8009bf2 <__sflush_r+0xae>
 8009bee:	2b16      	cmp	r3, #22
 8009bf0:	d101      	bne.n	8009bf6 <__sflush_r+0xb2>
 8009bf2:	602f      	str	r7, [r5, #0]
 8009bf4:	e7b2      	b.n	8009b5c <__sflush_r+0x18>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	e7ae      	b.n	8009b5e <__sflush_r+0x1a>
 8009c00:	690f      	ldr	r7, [r1, #16]
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	d0aa      	beq.n	8009b5c <__sflush_r+0x18>
 8009c06:	0793      	lsls	r3, r2, #30
 8009c08:	bf18      	it	ne
 8009c0a:	2300      	movne	r3, #0
 8009c0c:	680e      	ldr	r6, [r1, #0]
 8009c0e:	bf08      	it	eq
 8009c10:	694b      	ldreq	r3, [r1, #20]
 8009c12:	1bf6      	subs	r6, r6, r7
 8009c14:	600f      	str	r7, [r1, #0]
 8009c16:	608b      	str	r3, [r1, #8]
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	dd9f      	ble.n	8009b5c <__sflush_r+0x18>
 8009c1c:	4633      	mov	r3, r6
 8009c1e:	463a      	mov	r2, r7
 8009c20:	4628      	mov	r0, r5
 8009c22:	6a21      	ldr	r1, [r4, #32]
 8009c24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c28:	47e0      	blx	ip
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	dc06      	bgt.n	8009c3c <__sflush_r+0xf8>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	e790      	b.n	8009b5e <__sflush_r+0x1a>
 8009c3c:	4407      	add	r7, r0
 8009c3e:	1a36      	subs	r6, r6, r0
 8009c40:	e7ea      	b.n	8009c18 <__sflush_r+0xd4>
 8009c42:	bf00      	nop
 8009c44:	dfbffffe 	.word	0xdfbffffe

08009c48 <_fflush_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	b913      	cbnz	r3, 8009c58 <_fflush_r+0x10>
 8009c52:	2500      	movs	r5, #0
 8009c54:	4628      	mov	r0, r5
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	b118      	cbz	r0, 8009c62 <_fflush_r+0x1a>
 8009c5a:	6a03      	ldr	r3, [r0, #32]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <_fflush_r+0x1a>
 8009c5e:	f7fd fa07 	bl	8007070 <__sinit>
 8009c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0f3      	beq.n	8009c52 <_fflush_r+0xa>
 8009c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c6c:	07d0      	lsls	r0, r2, #31
 8009c6e:	d404      	bmi.n	8009c7a <_fflush_r+0x32>
 8009c70:	0599      	lsls	r1, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_fflush_r+0x32>
 8009c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c76:	f7fd fb46 	bl	8007306 <__retarget_lock_acquire_recursive>
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	f7ff ff61 	bl	8009b44 <__sflush_r>
 8009c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c84:	4605      	mov	r5, r0
 8009c86:	07da      	lsls	r2, r3, #31
 8009c88:	d4e4      	bmi.n	8009c54 <_fflush_r+0xc>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	059b      	lsls	r3, r3, #22
 8009c8e:	d4e1      	bmi.n	8009c54 <_fflush_r+0xc>
 8009c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c92:	f7fd fb39 	bl	8007308 <__retarget_lock_release_recursive>
 8009c96:	e7dd      	b.n	8009c54 <_fflush_r+0xc>

08009c98 <memmove>:
 8009c98:	4288      	cmp	r0, r1
 8009c9a:	b510      	push	{r4, lr}
 8009c9c:	eb01 0402 	add.w	r4, r1, r2
 8009ca0:	d902      	bls.n	8009ca8 <memmove+0x10>
 8009ca2:	4284      	cmp	r4, r0
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	d807      	bhi.n	8009cb8 <memmove+0x20>
 8009ca8:	1e43      	subs	r3, r0, #1
 8009caa:	42a1      	cmp	r1, r4
 8009cac:	d008      	beq.n	8009cc0 <memmove+0x28>
 8009cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cb6:	e7f8      	b.n	8009caa <memmove+0x12>
 8009cb8:	4601      	mov	r1, r0
 8009cba:	4402      	add	r2, r0
 8009cbc:	428a      	cmp	r2, r1
 8009cbe:	d100      	bne.n	8009cc2 <memmove+0x2a>
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cca:	e7f7      	b.n	8009cbc <memmove+0x24>

08009ccc <strncmp>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	b16a      	cbz	r2, 8009cec <strncmp+0x20>
 8009cd0:	3901      	subs	r1, #1
 8009cd2:	1884      	adds	r4, r0, r2
 8009cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d103      	bne.n	8009ce8 <strncmp+0x1c>
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d001      	beq.n	8009ce8 <strncmp+0x1c>
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d1f5      	bne.n	8009cd4 <strncmp+0x8>
 8009ce8:	1ad0      	subs	r0, r2, r3
 8009cea:	bd10      	pop	{r4, pc}
 8009cec:	4610      	mov	r0, r2
 8009cee:	e7fc      	b.n	8009cea <strncmp+0x1e>

08009cf0 <_sbrk_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4d05      	ldr	r5, [pc, #20]	; (8009d0c <_sbrk_r+0x1c>)
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f8 fb22 	bl	8002344 <_sbrk>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_sbrk_r+0x1a>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_sbrk_r+0x1a>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20003058 	.word	0x20003058

08009d10 <nan>:
 8009d10:	2000      	movs	r0, #0
 8009d12:	4901      	ldr	r1, [pc, #4]	; (8009d18 <nan+0x8>)
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	7ff80000 	.word	0x7ff80000

08009d1c <__assert_func>:
 8009d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1e:	4614      	mov	r4, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <__assert_func+0x2c>)
 8009d24:	4605      	mov	r5, r0
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68d8      	ldr	r0, [r3, #12]
 8009d2a:	b14c      	cbz	r4, 8009d40 <__assert_func+0x24>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <__assert_func+0x30>)
 8009d2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d32:	9100      	str	r1, [sp, #0]
 8009d34:	462b      	mov	r3, r5
 8009d36:	4906      	ldr	r1, [pc, #24]	; (8009d50 <__assert_func+0x34>)
 8009d38:	f000 fbca 	bl	800a4d0 <fiprintf>
 8009d3c:	f000 fbda 	bl	800a4f4 <abort>
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <__assert_func+0x38>)
 8009d42:	461c      	mov	r4, r3
 8009d44:	e7f3      	b.n	8009d2e <__assert_func+0x12>
 8009d46:	bf00      	nop
 8009d48:	20000074 	.word	0x20000074
 8009d4c:	0800ae7a 	.word	0x0800ae7a
 8009d50:	0800ae87 	.word	0x0800ae87
 8009d54:	0800aeb5 	.word	0x0800aeb5

08009d58 <_calloc_r>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	fba1 5402 	umull	r5, r4, r1, r2
 8009d5e:	b934      	cbnz	r4, 8009d6e <_calloc_r+0x16>
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7fe f9d1 	bl	8008108 <_malloc_r>
 8009d66:	4606      	mov	r6, r0
 8009d68:	b928      	cbnz	r0, 8009d76 <_calloc_r+0x1e>
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	220c      	movs	r2, #12
 8009d70:	2600      	movs	r6, #0
 8009d72:	6002      	str	r2, [r0, #0]
 8009d74:	e7f9      	b.n	8009d6a <_calloc_r+0x12>
 8009d76:	462a      	mov	r2, r5
 8009d78:	4621      	mov	r1, r4
 8009d7a:	f7fd fa46 	bl	800720a <memset>
 8009d7e:	e7f4      	b.n	8009d6a <_calloc_r+0x12>

08009d80 <rshift>:
 8009d80:	6903      	ldr	r3, [r0, #16]
 8009d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d8a:	f100 0414 	add.w	r4, r0, #20
 8009d8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d92:	dd46      	ble.n	8009e22 <rshift+0xa2>
 8009d94:	f011 011f 	ands.w	r1, r1, #31
 8009d98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009da0:	d10c      	bne.n	8009dbc <rshift+0x3c>
 8009da2:	4629      	mov	r1, r5
 8009da4:	f100 0710 	add.w	r7, r0, #16
 8009da8:	42b1      	cmp	r1, r6
 8009daa:	d335      	bcc.n	8009e18 <rshift+0x98>
 8009dac:	1a9b      	subs	r3, r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	1eea      	subs	r2, r5, #3
 8009db2:	4296      	cmp	r6, r2
 8009db4:	bf38      	it	cc
 8009db6:	2300      	movcc	r3, #0
 8009db8:	4423      	add	r3, r4
 8009dba:	e015      	b.n	8009de8 <rshift+0x68>
 8009dbc:	46a1      	mov	r9, r4
 8009dbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009dc2:	f1c1 0820 	rsb	r8, r1, #32
 8009dc6:	40cf      	lsrs	r7, r1
 8009dc8:	f105 0e04 	add.w	lr, r5, #4
 8009dcc:	4576      	cmp	r6, lr
 8009dce:	46f4      	mov	ip, lr
 8009dd0:	d816      	bhi.n	8009e00 <rshift+0x80>
 8009dd2:	1a9a      	subs	r2, r3, r2
 8009dd4:	0092      	lsls	r2, r2, #2
 8009dd6:	3a04      	subs	r2, #4
 8009dd8:	3501      	adds	r5, #1
 8009dda:	42ae      	cmp	r6, r5
 8009ddc:	bf38      	it	cc
 8009dde:	2200      	movcc	r2, #0
 8009de0:	18a3      	adds	r3, r4, r2
 8009de2:	50a7      	str	r7, [r4, r2]
 8009de4:	b107      	cbz	r7, 8009de8 <rshift+0x68>
 8009de6:	3304      	adds	r3, #4
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	eba3 0204 	sub.w	r2, r3, r4
 8009dee:	bf08      	it	eq
 8009df0:	2300      	moveq	r3, #0
 8009df2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009df6:	6102      	str	r2, [r0, #16]
 8009df8:	bf08      	it	eq
 8009dfa:	6143      	streq	r3, [r0, #20]
 8009dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e00:	f8dc c000 	ldr.w	ip, [ip]
 8009e04:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e08:	ea4c 0707 	orr.w	r7, ip, r7
 8009e0c:	f849 7b04 	str.w	r7, [r9], #4
 8009e10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e14:	40cf      	lsrs	r7, r1
 8009e16:	e7d9      	b.n	8009dcc <rshift+0x4c>
 8009e18:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e20:	e7c2      	b.n	8009da8 <rshift+0x28>
 8009e22:	4623      	mov	r3, r4
 8009e24:	e7e0      	b.n	8009de8 <rshift+0x68>

08009e26 <__hexdig_fun>:
 8009e26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e2a:	2b09      	cmp	r3, #9
 8009e2c:	d802      	bhi.n	8009e34 <__hexdig_fun+0xe>
 8009e2e:	3820      	subs	r0, #32
 8009e30:	b2c0      	uxtb	r0, r0
 8009e32:	4770      	bx	lr
 8009e34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	d801      	bhi.n	8009e40 <__hexdig_fun+0x1a>
 8009e3c:	3847      	subs	r0, #71	; 0x47
 8009e3e:	e7f7      	b.n	8009e30 <__hexdig_fun+0xa>
 8009e40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e44:	2b05      	cmp	r3, #5
 8009e46:	d801      	bhi.n	8009e4c <__hexdig_fun+0x26>
 8009e48:	3827      	subs	r0, #39	; 0x27
 8009e4a:	e7f1      	b.n	8009e30 <__hexdig_fun+0xa>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	4770      	bx	lr

08009e50 <__gethex>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	4681      	mov	r9, r0
 8009e56:	468a      	mov	sl, r1
 8009e58:	4617      	mov	r7, r2
 8009e5a:	680a      	ldr	r2, [r1, #0]
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	f102 0b02 	add.w	fp, r2, #2
 8009e62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e6a:	9302      	str	r3, [sp, #8]
 8009e6c:	32fe      	adds	r2, #254	; 0xfe
 8009e6e:	eb02 030b 	add.w	r3, r2, fp
 8009e72:	46d8      	mov	r8, fp
 8009e74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	2830      	cmp	r0, #48	; 0x30
 8009e7c:	d0f7      	beq.n	8009e6e <__gethex+0x1e>
 8009e7e:	f7ff ffd2 	bl	8009e26 <__hexdig_fun>
 8009e82:	4604      	mov	r4, r0
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d138      	bne.n	8009efa <__gethex+0xaa>
 8009e88:	2201      	movs	r2, #1
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	49a7      	ldr	r1, [pc, #668]	; (800a12c <__gethex+0x2dc>)
 8009e8e:	f7ff ff1d 	bl	8009ccc <strncmp>
 8009e92:	4606      	mov	r6, r0
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d169      	bne.n	8009f6c <__gethex+0x11c>
 8009e98:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009e9c:	465d      	mov	r5, fp
 8009e9e:	f7ff ffc2 	bl	8009e26 <__hexdig_fun>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d064      	beq.n	8009f70 <__gethex+0x120>
 8009ea6:	465a      	mov	r2, fp
 8009ea8:	7810      	ldrb	r0, [r2, #0]
 8009eaa:	4690      	mov	r8, r2
 8009eac:	2830      	cmp	r0, #48	; 0x30
 8009eae:	f102 0201 	add.w	r2, r2, #1
 8009eb2:	d0f9      	beq.n	8009ea8 <__gethex+0x58>
 8009eb4:	f7ff ffb7 	bl	8009e26 <__hexdig_fun>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	fab0 f480 	clz	r4, r0
 8009ebe:	465e      	mov	r6, fp
 8009ec0:	0964      	lsrs	r4, r4, #5
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	4615      	mov	r5, r2
 8009ec8:	7828      	ldrb	r0, [r5, #0]
 8009eca:	3201      	adds	r2, #1
 8009ecc:	f7ff ffab 	bl	8009e26 <__hexdig_fun>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d1f8      	bne.n	8009ec6 <__gethex+0x76>
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	4994      	ldr	r1, [pc, #592]	; (800a12c <__gethex+0x2dc>)
 8009eda:	f7ff fef7 	bl	8009ccc <strncmp>
 8009ede:	b978      	cbnz	r0, 8009f00 <__gethex+0xb0>
 8009ee0:	b946      	cbnz	r6, 8009ef4 <__gethex+0xa4>
 8009ee2:	1c6e      	adds	r6, r5, #1
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	4615      	mov	r5, r2
 8009ee8:	7828      	ldrb	r0, [r5, #0]
 8009eea:	3201      	adds	r2, #1
 8009eec:	f7ff ff9b 	bl	8009e26 <__hexdig_fun>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1f8      	bne.n	8009ee6 <__gethex+0x96>
 8009ef4:	1b73      	subs	r3, r6, r5
 8009ef6:	009e      	lsls	r6, r3, #2
 8009ef8:	e004      	b.n	8009f04 <__gethex+0xb4>
 8009efa:	2400      	movs	r4, #0
 8009efc:	4626      	mov	r6, r4
 8009efe:	e7e1      	b.n	8009ec4 <__gethex+0x74>
 8009f00:	2e00      	cmp	r6, #0
 8009f02:	d1f7      	bne.n	8009ef4 <__gethex+0xa4>
 8009f04:	782b      	ldrb	r3, [r5, #0]
 8009f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f0a:	2b50      	cmp	r3, #80	; 0x50
 8009f0c:	d13d      	bne.n	8009f8a <__gethex+0x13a>
 8009f0e:	786b      	ldrb	r3, [r5, #1]
 8009f10:	2b2b      	cmp	r3, #43	; 0x2b
 8009f12:	d02f      	beq.n	8009f74 <__gethex+0x124>
 8009f14:	2b2d      	cmp	r3, #45	; 0x2d
 8009f16:	d031      	beq.n	8009f7c <__gethex+0x12c>
 8009f18:	f04f 0b00 	mov.w	fp, #0
 8009f1c:	1c69      	adds	r1, r5, #1
 8009f1e:	7808      	ldrb	r0, [r1, #0]
 8009f20:	f7ff ff81 	bl	8009e26 <__hexdig_fun>
 8009f24:	1e42      	subs	r2, r0, #1
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	2a18      	cmp	r2, #24
 8009f2a:	d82e      	bhi.n	8009f8a <__gethex+0x13a>
 8009f2c:	f1a0 0210 	sub.w	r2, r0, #16
 8009f30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f34:	f7ff ff77 	bl	8009e26 <__hexdig_fun>
 8009f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f3c:	fa5f fc8c 	uxtb.w	ip, ip
 8009f40:	f1bc 0f18 	cmp.w	ip, #24
 8009f44:	d91d      	bls.n	8009f82 <__gethex+0x132>
 8009f46:	f1bb 0f00 	cmp.w	fp, #0
 8009f4a:	d000      	beq.n	8009f4e <__gethex+0xfe>
 8009f4c:	4252      	negs	r2, r2
 8009f4e:	4416      	add	r6, r2
 8009f50:	f8ca 1000 	str.w	r1, [sl]
 8009f54:	b1dc      	cbz	r4, 8009f8e <__gethex+0x13e>
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bf14      	ite	ne
 8009f5c:	f04f 0800 	movne.w	r8, #0
 8009f60:	f04f 0806 	moveq.w	r8, #6
 8009f64:	4640      	mov	r0, r8
 8009f66:	b005      	add	sp, #20
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	4645      	mov	r5, r8
 8009f6e:	4626      	mov	r6, r4
 8009f70:	2401      	movs	r4, #1
 8009f72:	e7c7      	b.n	8009f04 <__gethex+0xb4>
 8009f74:	f04f 0b00 	mov.w	fp, #0
 8009f78:	1ca9      	adds	r1, r5, #2
 8009f7a:	e7d0      	b.n	8009f1e <__gethex+0xce>
 8009f7c:	f04f 0b01 	mov.w	fp, #1
 8009f80:	e7fa      	b.n	8009f78 <__gethex+0x128>
 8009f82:	230a      	movs	r3, #10
 8009f84:	fb03 0002 	mla	r0, r3, r2, r0
 8009f88:	e7d0      	b.n	8009f2c <__gethex+0xdc>
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	e7e0      	b.n	8009f50 <__gethex+0x100>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	eba5 0308 	sub.w	r3, r5, r8
 8009f94:	3b01      	subs	r3, #1
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	dc0a      	bgt.n	8009fb0 <__gethex+0x160>
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	f7fe f940 	bl	8008220 <_Balloc>
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	b940      	cbnz	r0, 8009fb6 <__gethex+0x166>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	21e4      	movs	r1, #228	; 0xe4
 8009fa8:	4b61      	ldr	r3, [pc, #388]	; (800a130 <__gethex+0x2e0>)
 8009faa:	4862      	ldr	r0, [pc, #392]	; (800a134 <__gethex+0x2e4>)
 8009fac:	f7ff feb6 	bl	8009d1c <__assert_func>
 8009fb0:	3101      	adds	r1, #1
 8009fb2:	105b      	asrs	r3, r3, #1
 8009fb4:	e7ef      	b.n	8009f96 <__gethex+0x146>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	469b      	mov	fp, r3
 8009fba:	f100 0a14 	add.w	sl, r0, #20
 8009fbe:	f8cd a004 	str.w	sl, [sp, #4]
 8009fc2:	45a8      	cmp	r8, r5
 8009fc4:	d344      	bcc.n	800a050 <__gethex+0x200>
 8009fc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009fca:	4658      	mov	r0, fp
 8009fcc:	f848 bb04 	str.w	fp, [r8], #4
 8009fd0:	eba8 080a 	sub.w	r8, r8, sl
 8009fd4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009fd8:	6122      	str	r2, [r4, #16]
 8009fda:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009fde:	f7fe fa11 	bl	8008404 <__hi0bits>
 8009fe2:	683d      	ldr	r5, [r7, #0]
 8009fe4:	eba8 0800 	sub.w	r8, r8, r0
 8009fe8:	45a8      	cmp	r8, r5
 8009fea:	dd59      	ble.n	800a0a0 <__gethex+0x250>
 8009fec:	eba8 0805 	sub.w	r8, r8, r5
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fe fd8f 	bl	8008b16 <__any_on>
 8009ff8:	4683      	mov	fp, r0
 8009ffa:	b1b8      	cbz	r0, 800a02c <__gethex+0x1dc>
 8009ffc:	f04f 0b01 	mov.w	fp, #1
 800a000:	f108 33ff 	add.w	r3, r8, #4294967295
 800a004:	1159      	asrs	r1, r3, #5
 800a006:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a00a:	f003 021f 	and.w	r2, r3, #31
 800a00e:	fa0b f202 	lsl.w	r2, fp, r2
 800a012:	420a      	tst	r2, r1
 800a014:	d00a      	beq.n	800a02c <__gethex+0x1dc>
 800a016:	455b      	cmp	r3, fp
 800a018:	dd06      	ble.n	800a028 <__gethex+0x1d8>
 800a01a:	4620      	mov	r0, r4
 800a01c:	f1a8 0102 	sub.w	r1, r8, #2
 800a020:	f7fe fd79 	bl	8008b16 <__any_on>
 800a024:	2800      	cmp	r0, #0
 800a026:	d138      	bne.n	800a09a <__gethex+0x24a>
 800a028:	f04f 0b02 	mov.w	fp, #2
 800a02c:	4641      	mov	r1, r8
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff fea6 	bl	8009d80 <rshift>
 800a034:	4446      	add	r6, r8
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	42b3      	cmp	r3, r6
 800a03a:	da41      	bge.n	800a0c0 <__gethex+0x270>
 800a03c:	4621      	mov	r1, r4
 800a03e:	4648      	mov	r0, r9
 800a040:	f7fe f92e 	bl	80082a0 <_Bfree>
 800a044:	2300      	movs	r3, #0
 800a046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a048:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	e789      	b.n	8009f64 <__gethex+0x114>
 800a050:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a054:	2a2e      	cmp	r2, #46	; 0x2e
 800a056:	d014      	beq.n	800a082 <__gethex+0x232>
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d106      	bne.n	800a06a <__gethex+0x21a>
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	f843 bb04 	str.w	fp, [r3], #4
 800a062:	f04f 0b00 	mov.w	fp, #0
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	465b      	mov	r3, fp
 800a06a:	7828      	ldrb	r0, [r5, #0]
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	f7ff feda 	bl	8009e26 <__hexdig_fun>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	f000 000f 	and.w	r0, r0, #15
 800a078:	4098      	lsls	r0, r3
 800a07a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a07e:	3304      	adds	r3, #4
 800a080:	e79f      	b.n	8009fc2 <__gethex+0x172>
 800a082:	45a8      	cmp	r8, r5
 800a084:	d8e8      	bhi.n	800a058 <__gethex+0x208>
 800a086:	2201      	movs	r2, #1
 800a088:	4628      	mov	r0, r5
 800a08a:	4928      	ldr	r1, [pc, #160]	; (800a12c <__gethex+0x2dc>)
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	f7ff fe1d 	bl	8009ccc <strncmp>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	2800      	cmp	r0, #0
 800a096:	d1df      	bne.n	800a058 <__gethex+0x208>
 800a098:	e793      	b.n	8009fc2 <__gethex+0x172>
 800a09a:	f04f 0b03 	mov.w	fp, #3
 800a09e:	e7c5      	b.n	800a02c <__gethex+0x1dc>
 800a0a0:	da0b      	bge.n	800a0ba <__gethex+0x26a>
 800a0a2:	eba5 0808 	sub.w	r8, r5, r8
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f7fe fb10 	bl	80086d0 <__lshift>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	eba6 0608 	sub.w	r6, r6, r8
 800a0b6:	f100 0a14 	add.w	sl, r0, #20
 800a0ba:	f04f 0b00 	mov.w	fp, #0
 800a0be:	e7ba      	b.n	800a036 <__gethex+0x1e6>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	42b3      	cmp	r3, r6
 800a0c4:	dd74      	ble.n	800a1b0 <__gethex+0x360>
 800a0c6:	1b9e      	subs	r6, r3, r6
 800a0c8:	42b5      	cmp	r5, r6
 800a0ca:	dc35      	bgt.n	800a138 <__gethex+0x2e8>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d023      	beq.n	800a11a <__gethex+0x2ca>
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d025      	beq.n	800a122 <__gethex+0x2d2>
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d115      	bne.n	800a106 <__gethex+0x2b6>
 800a0da:	42b5      	cmp	r5, r6
 800a0dc:	d113      	bne.n	800a106 <__gethex+0x2b6>
 800a0de:	2d01      	cmp	r5, #1
 800a0e0:	d10b      	bne.n	800a0fa <__gethex+0x2aa>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	9a02      	ldr	r2, [sp, #8]
 800a0e6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	f8ca 3000 	str.w	r3, [sl]
 800a0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f6:	601c      	str	r4, [r3, #0]
 800a0f8:	e734      	b.n	8009f64 <__gethex+0x114>
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	1e69      	subs	r1, r5, #1
 800a0fe:	f7fe fd0a 	bl	8008b16 <__any_on>
 800a102:	2800      	cmp	r0, #0
 800a104:	d1ed      	bne.n	800a0e2 <__gethex+0x292>
 800a106:	4621      	mov	r1, r4
 800a108:	4648      	mov	r0, r9
 800a10a:	f7fe f8c9 	bl	80082a0 <_Bfree>
 800a10e:	2300      	movs	r3, #0
 800a110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a112:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	e724      	b.n	8009f64 <__gethex+0x114>
 800a11a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1f2      	bne.n	800a106 <__gethex+0x2b6>
 800a120:	e7df      	b.n	800a0e2 <__gethex+0x292>
 800a122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1dc      	bne.n	800a0e2 <__gethex+0x292>
 800a128:	e7ed      	b.n	800a106 <__gethex+0x2b6>
 800a12a:	bf00      	nop
 800a12c:	0800ad0c 	.word	0x0800ad0c
 800a130:	0800aba3 	.word	0x0800aba3
 800a134:	0800aeb6 	.word	0x0800aeb6
 800a138:	f106 38ff 	add.w	r8, r6, #4294967295
 800a13c:	f1bb 0f00 	cmp.w	fp, #0
 800a140:	d133      	bne.n	800a1aa <__gethex+0x35a>
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	d004      	beq.n	800a152 <__gethex+0x302>
 800a148:	4641      	mov	r1, r8
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7fe fce3 	bl	8008b16 <__any_on>
 800a150:	4683      	mov	fp, r0
 800a152:	2301      	movs	r3, #1
 800a154:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a158:	f008 081f 	and.w	r8, r8, #31
 800a15c:	fa03 f308 	lsl.w	r3, r3, r8
 800a160:	f04f 0802 	mov.w	r8, #2
 800a164:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a168:	4631      	mov	r1, r6
 800a16a:	4213      	tst	r3, r2
 800a16c:	4620      	mov	r0, r4
 800a16e:	bf18      	it	ne
 800a170:	f04b 0b02 	orrne.w	fp, fp, #2
 800a174:	1bad      	subs	r5, r5, r6
 800a176:	f7ff fe03 	bl	8009d80 <rshift>
 800a17a:	687e      	ldr	r6, [r7, #4]
 800a17c:	f1bb 0f00 	cmp.w	fp, #0
 800a180:	d04a      	beq.n	800a218 <__gethex+0x3c8>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d016      	beq.n	800a1b6 <__gethex+0x366>
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d018      	beq.n	800a1be <__gethex+0x36e>
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d109      	bne.n	800a1a4 <__gethex+0x354>
 800a190:	f01b 0f02 	tst.w	fp, #2
 800a194:	d006      	beq.n	800a1a4 <__gethex+0x354>
 800a196:	f8da 3000 	ldr.w	r3, [sl]
 800a19a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a19e:	f01b 0f01 	tst.w	fp, #1
 800a1a2:	d10f      	bne.n	800a1c4 <__gethex+0x374>
 800a1a4:	f048 0810 	orr.w	r8, r8, #16
 800a1a8:	e036      	b.n	800a218 <__gethex+0x3c8>
 800a1aa:	f04f 0b01 	mov.w	fp, #1
 800a1ae:	e7d0      	b.n	800a152 <__gethex+0x302>
 800a1b0:	f04f 0801 	mov.w	r8, #1
 800a1b4:	e7e2      	b.n	800a17c <__gethex+0x32c>
 800a1b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b8:	f1c3 0301 	rsb	r3, r3, #1
 800a1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0ef      	beq.n	800a1a4 <__gethex+0x354>
 800a1c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a1c8:	f104 0214 	add.w	r2, r4, #20
 800a1cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a1d8:	4694      	mov	ip, r2
 800a1da:	f852 1b04 	ldr.w	r1, [r2], #4
 800a1de:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a1e2:	d01e      	beq.n	800a222 <__gethex+0x3d2>
 800a1e4:	3101      	adds	r1, #1
 800a1e6:	f8cc 1000 	str.w	r1, [ip]
 800a1ea:	f1b8 0f02 	cmp.w	r8, #2
 800a1ee:	f104 0214 	add.w	r2, r4, #20
 800a1f2:	d13d      	bne.n	800a270 <__gethex+0x420>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	d10b      	bne.n	800a214 <__gethex+0x3c4>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	1169      	asrs	r1, r5, #5
 800a200:	f005 051f 	and.w	r5, r5, #31
 800a204:	fa03 f505 	lsl.w	r5, r3, r5
 800a208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a20c:	421d      	tst	r5, r3
 800a20e:	bf18      	it	ne
 800a210:	f04f 0801 	movne.w	r8, #1
 800a214:	f048 0820 	orr.w	r8, r8, #32
 800a218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a21a:	601c      	str	r4, [r3, #0]
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	601e      	str	r6, [r3, #0]
 800a220:	e6a0      	b.n	8009f64 <__gethex+0x114>
 800a222:	4290      	cmp	r0, r2
 800a224:	f842 3c04 	str.w	r3, [r2, #-4]
 800a228:	d8d6      	bhi.n	800a1d8 <__gethex+0x388>
 800a22a:	68a2      	ldr	r2, [r4, #8]
 800a22c:	4593      	cmp	fp, r2
 800a22e:	db17      	blt.n	800a260 <__gethex+0x410>
 800a230:	6861      	ldr	r1, [r4, #4]
 800a232:	4648      	mov	r0, r9
 800a234:	3101      	adds	r1, #1
 800a236:	f7fd fff3 	bl	8008220 <_Balloc>
 800a23a:	4682      	mov	sl, r0
 800a23c:	b918      	cbnz	r0, 800a246 <__gethex+0x3f6>
 800a23e:	4602      	mov	r2, r0
 800a240:	2184      	movs	r1, #132	; 0x84
 800a242:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <__gethex+0x45c>)
 800a244:	e6b1      	b.n	8009faa <__gethex+0x15a>
 800a246:	6922      	ldr	r2, [r4, #16]
 800a248:	f104 010c 	add.w	r1, r4, #12
 800a24c:	3202      	adds	r2, #2
 800a24e:	0092      	lsls	r2, r2, #2
 800a250:	300c      	adds	r0, #12
 800a252:	f7fd f868 	bl	8007326 <memcpy>
 800a256:	4621      	mov	r1, r4
 800a258:	4648      	mov	r0, r9
 800a25a:	f7fe f821 	bl	80082a0 <_Bfree>
 800a25e:	4654      	mov	r4, sl
 800a260:	6922      	ldr	r2, [r4, #16]
 800a262:	1c51      	adds	r1, r2, #1
 800a264:	6121      	str	r1, [r4, #16]
 800a266:	2101      	movs	r1, #1
 800a268:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a26c:	6151      	str	r1, [r2, #20]
 800a26e:	e7bc      	b.n	800a1ea <__gethex+0x39a>
 800a270:	6921      	ldr	r1, [r4, #16]
 800a272:	4559      	cmp	r1, fp
 800a274:	dd0b      	ble.n	800a28e <__gethex+0x43e>
 800a276:	2101      	movs	r1, #1
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff fd81 	bl	8009d80 <rshift>
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	3601      	adds	r6, #1
 800a282:	42b3      	cmp	r3, r6
 800a284:	f6ff aeda 	blt.w	800a03c <__gethex+0x1ec>
 800a288:	f04f 0801 	mov.w	r8, #1
 800a28c:	e7c2      	b.n	800a214 <__gethex+0x3c4>
 800a28e:	f015 051f 	ands.w	r5, r5, #31
 800a292:	d0f9      	beq.n	800a288 <__gethex+0x438>
 800a294:	9b01      	ldr	r3, [sp, #4]
 800a296:	f1c5 0520 	rsb	r5, r5, #32
 800a29a:	441a      	add	r2, r3
 800a29c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a2a0:	f7fe f8b0 	bl	8008404 <__hi0bits>
 800a2a4:	42a8      	cmp	r0, r5
 800a2a6:	dbe6      	blt.n	800a276 <__gethex+0x426>
 800a2a8:	e7ee      	b.n	800a288 <__gethex+0x438>
 800a2aa:	bf00      	nop
 800a2ac:	0800aba3 	.word	0x0800aba3

0800a2b0 <L_shift>:
 800a2b0:	f1c2 0208 	rsb	r2, r2, #8
 800a2b4:	0092      	lsls	r2, r2, #2
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	f1c2 0620 	rsb	r6, r2, #32
 800a2bc:	6843      	ldr	r3, [r0, #4]
 800a2be:	6804      	ldr	r4, [r0, #0]
 800a2c0:	fa03 f506 	lsl.w	r5, r3, r6
 800a2c4:	432c      	orrs	r4, r5
 800a2c6:	40d3      	lsrs	r3, r2
 800a2c8:	6004      	str	r4, [r0, #0]
 800a2ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2ce:	4288      	cmp	r0, r1
 800a2d0:	d3f4      	bcc.n	800a2bc <L_shift+0xc>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}

0800a2d4 <__match>:
 800a2d4:	b530      	push	{r4, r5, lr}
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2de:	b914      	cbnz	r4, 800a2e6 <__match+0x12>
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	bd30      	pop	{r4, r5, pc}
 800a2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a2ee:	2d19      	cmp	r5, #25
 800a2f0:	bf98      	it	ls
 800a2f2:	3220      	addls	r2, #32
 800a2f4:	42a2      	cmp	r2, r4
 800a2f6:	d0f0      	beq.n	800a2da <__match+0x6>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7f3      	b.n	800a2e4 <__match+0x10>

0800a2fc <__hexnan>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	2500      	movs	r5, #0
 800a302:	680b      	ldr	r3, [r1, #0]
 800a304:	4682      	mov	sl, r0
 800a306:	115e      	asrs	r6, r3, #5
 800a308:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a30c:	f013 031f 	ands.w	r3, r3, #31
 800a310:	bf18      	it	ne
 800a312:	3604      	addne	r6, #4
 800a314:	1f37      	subs	r7, r6, #4
 800a316:	4690      	mov	r8, r2
 800a318:	46b9      	mov	r9, r7
 800a31a:	463c      	mov	r4, r7
 800a31c:	46ab      	mov	fp, r5
 800a31e:	b087      	sub	sp, #28
 800a320:	6801      	ldr	r1, [r0, #0]
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	f846 5c04 	str.w	r5, [r6, #-4]
 800a328:	9502      	str	r5, [sp, #8]
 800a32a:	784a      	ldrb	r2, [r1, #1]
 800a32c:	1c4b      	adds	r3, r1, #1
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	b342      	cbz	r2, 800a384 <__hexnan+0x88>
 800a332:	4610      	mov	r0, r2
 800a334:	9105      	str	r1, [sp, #20]
 800a336:	9204      	str	r2, [sp, #16]
 800a338:	f7ff fd75 	bl	8009e26 <__hexdig_fun>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d14f      	bne.n	800a3e0 <__hexnan+0xe4>
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	9905      	ldr	r1, [sp, #20]
 800a344:	2a20      	cmp	r2, #32
 800a346:	d818      	bhi.n	800a37a <__hexnan+0x7e>
 800a348:	9b02      	ldr	r3, [sp, #8]
 800a34a:	459b      	cmp	fp, r3
 800a34c:	dd13      	ble.n	800a376 <__hexnan+0x7a>
 800a34e:	454c      	cmp	r4, r9
 800a350:	d206      	bcs.n	800a360 <__hexnan+0x64>
 800a352:	2d07      	cmp	r5, #7
 800a354:	dc04      	bgt.n	800a360 <__hexnan+0x64>
 800a356:	462a      	mov	r2, r5
 800a358:	4649      	mov	r1, r9
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff ffa8 	bl	800a2b0 <L_shift>
 800a360:	4544      	cmp	r4, r8
 800a362:	d950      	bls.n	800a406 <__hexnan+0x10a>
 800a364:	2300      	movs	r3, #0
 800a366:	f1a4 0904 	sub.w	r9, r4, #4
 800a36a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a36e:	461d      	mov	r5, r3
 800a370:	464c      	mov	r4, r9
 800a372:	f8cd b008 	str.w	fp, [sp, #8]
 800a376:	9903      	ldr	r1, [sp, #12]
 800a378:	e7d7      	b.n	800a32a <__hexnan+0x2e>
 800a37a:	2a29      	cmp	r2, #41	; 0x29
 800a37c:	d155      	bne.n	800a42a <__hexnan+0x12e>
 800a37e:	3102      	adds	r1, #2
 800a380:	f8ca 1000 	str.w	r1, [sl]
 800a384:	f1bb 0f00 	cmp.w	fp, #0
 800a388:	d04f      	beq.n	800a42a <__hexnan+0x12e>
 800a38a:	454c      	cmp	r4, r9
 800a38c:	d206      	bcs.n	800a39c <__hexnan+0xa0>
 800a38e:	2d07      	cmp	r5, #7
 800a390:	dc04      	bgt.n	800a39c <__hexnan+0xa0>
 800a392:	462a      	mov	r2, r5
 800a394:	4649      	mov	r1, r9
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff ff8a 	bl	800a2b0 <L_shift>
 800a39c:	4544      	cmp	r4, r8
 800a39e:	d934      	bls.n	800a40a <__hexnan+0x10e>
 800a3a0:	4623      	mov	r3, r4
 800a3a2:	f1a8 0204 	sub.w	r2, r8, #4
 800a3a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3aa:	429f      	cmp	r7, r3
 800a3ac:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3b0:	d2f9      	bcs.n	800a3a6 <__hexnan+0xaa>
 800a3b2:	1b3b      	subs	r3, r7, r4
 800a3b4:	f023 0303 	bic.w	r3, r3, #3
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	3e03      	subs	r6, #3
 800a3bc:	3401      	adds	r4, #1
 800a3be:	42a6      	cmp	r6, r4
 800a3c0:	bf38      	it	cc
 800a3c2:	2304      	movcc	r3, #4
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4443      	add	r3, r8
 800a3c8:	f843 2b04 	str.w	r2, [r3], #4
 800a3cc:	429f      	cmp	r7, r3
 800a3ce:	d2fb      	bcs.n	800a3c8 <__hexnan+0xcc>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	b91b      	cbnz	r3, 800a3dc <__hexnan+0xe0>
 800a3d4:	4547      	cmp	r7, r8
 800a3d6:	d126      	bne.n	800a426 <__hexnan+0x12a>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	2005      	movs	r0, #5
 800a3de:	e025      	b.n	800a42c <__hexnan+0x130>
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	2d08      	cmp	r5, #8
 800a3e4:	f10b 0b01 	add.w	fp, fp, #1
 800a3e8:	dd06      	ble.n	800a3f8 <__hexnan+0xfc>
 800a3ea:	4544      	cmp	r4, r8
 800a3ec:	d9c3      	bls.n	800a376 <__hexnan+0x7a>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2501      	movs	r5, #1
 800a3f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3f6:	3c04      	subs	r4, #4
 800a3f8:	6822      	ldr	r2, [r4, #0]
 800a3fa:	f000 000f 	and.w	r0, r0, #15
 800a3fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	e7b7      	b.n	800a376 <__hexnan+0x7a>
 800a406:	2508      	movs	r5, #8
 800a408:	e7b5      	b.n	800a376 <__hexnan+0x7a>
 800a40a:	9b01      	ldr	r3, [sp, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0df      	beq.n	800a3d0 <__hexnan+0xd4>
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	f1c3 0320 	rsb	r3, r3, #32
 800a418:	40da      	lsrs	r2, r3
 800a41a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a41e:	4013      	ands	r3, r2
 800a420:	f846 3c04 	str.w	r3, [r6, #-4]
 800a424:	e7d4      	b.n	800a3d0 <__hexnan+0xd4>
 800a426:	3f04      	subs	r7, #4
 800a428:	e7d2      	b.n	800a3d0 <__hexnan+0xd4>
 800a42a:	2004      	movs	r0, #4
 800a42c:	b007      	add	sp, #28
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a432 <__ascii_mbtowc>:
 800a432:	b082      	sub	sp, #8
 800a434:	b901      	cbnz	r1, 800a438 <__ascii_mbtowc+0x6>
 800a436:	a901      	add	r1, sp, #4
 800a438:	b142      	cbz	r2, 800a44c <__ascii_mbtowc+0x1a>
 800a43a:	b14b      	cbz	r3, 800a450 <__ascii_mbtowc+0x1e>
 800a43c:	7813      	ldrb	r3, [r2, #0]
 800a43e:	600b      	str	r3, [r1, #0]
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	1e10      	subs	r0, r2, #0
 800a444:	bf18      	it	ne
 800a446:	2001      	movne	r0, #1
 800a448:	b002      	add	sp, #8
 800a44a:	4770      	bx	lr
 800a44c:	4610      	mov	r0, r2
 800a44e:	e7fb      	b.n	800a448 <__ascii_mbtowc+0x16>
 800a450:	f06f 0001 	mvn.w	r0, #1
 800a454:	e7f8      	b.n	800a448 <__ascii_mbtowc+0x16>

0800a456 <_realloc_r>:
 800a456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45a:	4680      	mov	r8, r0
 800a45c:	4614      	mov	r4, r2
 800a45e:	460e      	mov	r6, r1
 800a460:	b921      	cbnz	r1, 800a46c <_realloc_r+0x16>
 800a462:	4611      	mov	r1, r2
 800a464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a468:	f7fd be4e 	b.w	8008108 <_malloc_r>
 800a46c:	b92a      	cbnz	r2, 800a47a <_realloc_r+0x24>
 800a46e:	f7fd fddb 	bl	8008028 <_free_r>
 800a472:	4625      	mov	r5, r4
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47a:	f000 f842 	bl	800a502 <_malloc_usable_size_r>
 800a47e:	4284      	cmp	r4, r0
 800a480:	4607      	mov	r7, r0
 800a482:	d802      	bhi.n	800a48a <_realloc_r+0x34>
 800a484:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a488:	d812      	bhi.n	800a4b0 <_realloc_r+0x5a>
 800a48a:	4621      	mov	r1, r4
 800a48c:	4640      	mov	r0, r8
 800a48e:	f7fd fe3b 	bl	8008108 <_malloc_r>
 800a492:	4605      	mov	r5, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	d0ed      	beq.n	800a474 <_realloc_r+0x1e>
 800a498:	42bc      	cmp	r4, r7
 800a49a:	4622      	mov	r2, r4
 800a49c:	4631      	mov	r1, r6
 800a49e:	bf28      	it	cs
 800a4a0:	463a      	movcs	r2, r7
 800a4a2:	f7fc ff40 	bl	8007326 <memcpy>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	f7fd fdbd 	bl	8008028 <_free_r>
 800a4ae:	e7e1      	b.n	800a474 <_realloc_r+0x1e>
 800a4b0:	4635      	mov	r5, r6
 800a4b2:	e7df      	b.n	800a474 <_realloc_r+0x1e>

0800a4b4 <__ascii_wctomb>:
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	4608      	mov	r0, r1
 800a4b8:	b141      	cbz	r1, 800a4cc <__ascii_wctomb+0x18>
 800a4ba:	2aff      	cmp	r2, #255	; 0xff
 800a4bc:	d904      	bls.n	800a4c8 <__ascii_wctomb+0x14>
 800a4be:	228a      	movs	r2, #138	; 0x8a
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	4770      	bx	lr
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	700a      	strb	r2, [r1, #0]
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <fiprintf+0x20>)
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f000 f83d 	bl	800a560 <_vfiprintf_r>
 800a4e6:	b002      	add	sp, #8
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	20000074 	.word	0x20000074

0800a4f4 <abort>:
 800a4f4:	2006      	movs	r0, #6
 800a4f6:	b508      	push	{r3, lr}
 800a4f8:	f000 fa0a 	bl	800a910 <raise>
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f7f7 feae 	bl	800225e <_exit>

0800a502 <_malloc_usable_size_r>:
 800a502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a506:	1f18      	subs	r0, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bfbc      	itt	lt
 800a50c:	580b      	ldrlt	r3, [r1, r0]
 800a50e:	18c0      	addlt	r0, r0, r3
 800a510:	4770      	bx	lr

0800a512 <__sfputc_r>:
 800a512:	6893      	ldr	r3, [r2, #8]
 800a514:	b410      	push	{r4}
 800a516:	3b01      	subs	r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	6093      	str	r3, [r2, #8]
 800a51c:	da07      	bge.n	800a52e <__sfputc_r+0x1c>
 800a51e:	6994      	ldr	r4, [r2, #24]
 800a520:	42a3      	cmp	r3, r4
 800a522:	db01      	blt.n	800a528 <__sfputc_r+0x16>
 800a524:	290a      	cmp	r1, #10
 800a526:	d102      	bne.n	800a52e <__sfputc_r+0x1c>
 800a528:	bc10      	pop	{r4}
 800a52a:	f000 b933 	b.w	800a794 <__swbuf_r>
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	1c58      	adds	r0, r3, #1
 800a532:	6010      	str	r0, [r2, #0]
 800a534:	7019      	strb	r1, [r3, #0]
 800a536:	4608      	mov	r0, r1
 800a538:	bc10      	pop	{r4}
 800a53a:	4770      	bx	lr

0800a53c <__sfputs_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	4614      	mov	r4, r2
 800a544:	18d5      	adds	r5, r2, r3
 800a546:	42ac      	cmp	r4, r5
 800a548:	d101      	bne.n	800a54e <__sfputs_r+0x12>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e007      	b.n	800a55e <__sfputs_r+0x22>
 800a54e:	463a      	mov	r2, r7
 800a550:	4630      	mov	r0, r6
 800a552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a556:	f7ff ffdc 	bl	800a512 <__sfputc_r>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d1f3      	bne.n	800a546 <__sfputs_r+0xa>
 800a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a560 <_vfiprintf_r>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	460d      	mov	r5, r1
 800a566:	4614      	mov	r4, r2
 800a568:	4698      	mov	r8, r3
 800a56a:	4606      	mov	r6, r0
 800a56c:	b09d      	sub	sp, #116	; 0x74
 800a56e:	b118      	cbz	r0, 800a578 <_vfiprintf_r+0x18>
 800a570:	6a03      	ldr	r3, [r0, #32]
 800a572:	b90b      	cbnz	r3, 800a578 <_vfiprintf_r+0x18>
 800a574:	f7fc fd7c 	bl	8007070 <__sinit>
 800a578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a57a:	07d9      	lsls	r1, r3, #31
 800a57c:	d405      	bmi.n	800a58a <_vfiprintf_r+0x2a>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	059a      	lsls	r2, r3, #22
 800a582:	d402      	bmi.n	800a58a <_vfiprintf_r+0x2a>
 800a584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a586:	f7fc febe 	bl	8007306 <__retarget_lock_acquire_recursive>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	071b      	lsls	r3, r3, #28
 800a58e:	d501      	bpl.n	800a594 <_vfiprintf_r+0x34>
 800a590:	692b      	ldr	r3, [r5, #16]
 800a592:	b99b      	cbnz	r3, 800a5bc <_vfiprintf_r+0x5c>
 800a594:	4629      	mov	r1, r5
 800a596:	4630      	mov	r0, r6
 800a598:	f000 f93a 	bl	800a810 <__swsetup_r>
 800a59c:	b170      	cbz	r0, 800a5bc <_vfiprintf_r+0x5c>
 800a59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a0:	07dc      	lsls	r4, r3, #31
 800a5a2:	d504      	bpl.n	800a5ae <_vfiprintf_r+0x4e>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	b01d      	add	sp, #116	; 0x74
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	0598      	lsls	r0, r3, #22
 800a5b2:	d4f7      	bmi.n	800a5a4 <_vfiprintf_r+0x44>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b6:	f7fc fea7 	bl	8007308 <__retarget_lock_release_recursive>
 800a5ba:	e7f3      	b.n	800a5a4 <_vfiprintf_r+0x44>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	2320      	movs	r3, #32
 800a5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c6:	2330      	movs	r3, #48	; 0x30
 800a5c8:	f04f 0901 	mov.w	r9, #1
 800a5cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a780 <_vfiprintf_r+0x220>
 800a5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d8:	4623      	mov	r3, r4
 800a5da:	469a      	mov	sl, r3
 800a5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e0:	b10a      	cbz	r2, 800a5e6 <_vfiprintf_r+0x86>
 800a5e2:	2a25      	cmp	r2, #37	; 0x25
 800a5e4:	d1f9      	bne.n	800a5da <_vfiprintf_r+0x7a>
 800a5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ea:	d00b      	beq.n	800a604 <_vfiprintf_r+0xa4>
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7ff ffa2 	bl	800a53c <__sfputs_r>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f000 80a9 	beq.w	800a750 <_vfiprintf_r+0x1f0>
 800a5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a600:	445a      	add	r2, fp
 800a602:	9209      	str	r2, [sp, #36]	; 0x24
 800a604:	f89a 3000 	ldrb.w	r3, [sl]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80a1 	beq.w	800a750 <_vfiprintf_r+0x1f0>
 800a60e:	2300      	movs	r3, #0
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a618:	f10a 0a01 	add.w	sl, sl, #1
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a624:	931a      	str	r3, [sp, #104]	; 0x68
 800a626:	4654      	mov	r4, sl
 800a628:	2205      	movs	r2, #5
 800a62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62e:	4854      	ldr	r0, [pc, #336]	; (800a780 <_vfiprintf_r+0x220>)
 800a630:	f7fc fe6b 	bl	800730a <memchr>
 800a634:	9a04      	ldr	r2, [sp, #16]
 800a636:	b9d8      	cbnz	r0, 800a670 <_vfiprintf_r+0x110>
 800a638:	06d1      	lsls	r1, r2, #27
 800a63a:	bf44      	itt	mi
 800a63c:	2320      	movmi	r3, #32
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a642:	0713      	lsls	r3, r2, #28
 800a644:	bf44      	itt	mi
 800a646:	232b      	movmi	r3, #43	; 0x2b
 800a648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64c:	f89a 3000 	ldrb.w	r3, [sl]
 800a650:	2b2a      	cmp	r3, #42	; 0x2a
 800a652:	d015      	beq.n	800a680 <_vfiprintf_r+0x120>
 800a654:	4654      	mov	r4, sl
 800a656:	2000      	movs	r0, #0
 800a658:	f04f 0c0a 	mov.w	ip, #10
 800a65c:	9a07      	ldr	r2, [sp, #28]
 800a65e:	4621      	mov	r1, r4
 800a660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a664:	3b30      	subs	r3, #48	; 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d94d      	bls.n	800a706 <_vfiprintf_r+0x1a6>
 800a66a:	b1b0      	cbz	r0, 800a69a <_vfiprintf_r+0x13a>
 800a66c:	9207      	str	r2, [sp, #28]
 800a66e:	e014      	b.n	800a69a <_vfiprintf_r+0x13a>
 800a670:	eba0 0308 	sub.w	r3, r0, r8
 800a674:	fa09 f303 	lsl.w	r3, r9, r3
 800a678:	4313      	orrs	r3, r2
 800a67a:	46a2      	mov	sl, r4
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	e7d2      	b.n	800a626 <_vfiprintf_r+0xc6>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	1d19      	adds	r1, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	9103      	str	r1, [sp, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfbb      	ittet	lt
 800a68c:	425b      	neglt	r3, r3
 800a68e:	f042 0202 	orrlt.w	r2, r2, #2
 800a692:	9307      	strge	r3, [sp, #28]
 800a694:	9307      	strlt	r3, [sp, #28]
 800a696:	bfb8      	it	lt
 800a698:	9204      	strlt	r2, [sp, #16]
 800a69a:	7823      	ldrb	r3, [r4, #0]
 800a69c:	2b2e      	cmp	r3, #46	; 0x2e
 800a69e:	d10c      	bne.n	800a6ba <_vfiprintf_r+0x15a>
 800a6a0:	7863      	ldrb	r3, [r4, #1]
 800a6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a4:	d134      	bne.n	800a710 <_vfiprintf_r+0x1b0>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	3402      	adds	r4, #2
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	9203      	str	r2, [sp, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	bfb8      	it	lt
 800a6b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b8:	9305      	str	r3, [sp, #20]
 800a6ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a784 <_vfiprintf_r+0x224>
 800a6be:	2203      	movs	r2, #3
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	7821      	ldrb	r1, [r4, #0]
 800a6c4:	f7fc fe21 	bl	800730a <memchr>
 800a6c8:	b138      	cbz	r0, 800a6da <_vfiprintf_r+0x17a>
 800a6ca:	2240      	movs	r2, #64	; 0x40
 800a6cc:	9b04      	ldr	r3, [sp, #16]
 800a6ce:	eba0 000a 	sub.w	r0, r0, sl
 800a6d2:	4082      	lsls	r2, r0
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6de:	2206      	movs	r2, #6
 800a6e0:	4829      	ldr	r0, [pc, #164]	; (800a788 <_vfiprintf_r+0x228>)
 800a6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e6:	f7fc fe10 	bl	800730a <memchr>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d03f      	beq.n	800a76e <_vfiprintf_r+0x20e>
 800a6ee:	4b27      	ldr	r3, [pc, #156]	; (800a78c <_vfiprintf_r+0x22c>)
 800a6f0:	bb1b      	cbnz	r3, 800a73a <_vfiprintf_r+0x1da>
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	3307      	adds	r3, #7
 800a6f6:	f023 0307 	bic.w	r3, r3, #7
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	443b      	add	r3, r7
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	e768      	b.n	800a5d8 <_vfiprintf_r+0x78>
 800a706:	460c      	mov	r4, r1
 800a708:	2001      	movs	r0, #1
 800a70a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70e:	e7a6      	b.n	800a65e <_vfiprintf_r+0xfe>
 800a710:	2300      	movs	r3, #0
 800a712:	f04f 0c0a 	mov.w	ip, #10
 800a716:	4619      	mov	r1, r3
 800a718:	3401      	adds	r4, #1
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	4620      	mov	r0, r4
 800a71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a722:	3a30      	subs	r2, #48	; 0x30
 800a724:	2a09      	cmp	r2, #9
 800a726:	d903      	bls.n	800a730 <_vfiprintf_r+0x1d0>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0c6      	beq.n	800a6ba <_vfiprintf_r+0x15a>
 800a72c:	9105      	str	r1, [sp, #20]
 800a72e:	e7c4      	b.n	800a6ba <_vfiprintf_r+0x15a>
 800a730:	4604      	mov	r4, r0
 800a732:	2301      	movs	r3, #1
 800a734:	fb0c 2101 	mla	r1, ip, r1, r2
 800a738:	e7f0      	b.n	800a71c <_vfiprintf_r+0x1bc>
 800a73a:	ab03      	add	r3, sp, #12
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	462a      	mov	r2, r5
 800a740:	4630      	mov	r0, r6
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <_vfiprintf_r+0x230>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	f7fb fe37 	bl	80063b8 <_printf_float>
 800a74a:	4607      	mov	r7, r0
 800a74c:	1c78      	adds	r0, r7, #1
 800a74e:	d1d6      	bne.n	800a6fe <_vfiprintf_r+0x19e>
 800a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x202>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x202>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7fc fdd3 	bl	8007308 <__retarget_lock_release_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	065b      	lsls	r3, r3, #25
 800a766:	f53f af1d 	bmi.w	800a5a4 <_vfiprintf_r+0x44>
 800a76a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76c:	e71c      	b.n	800a5a8 <_vfiprintf_r+0x48>
 800a76e:	ab03      	add	r3, sp, #12
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	462a      	mov	r2, r5
 800a774:	4630      	mov	r0, r6
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <_vfiprintf_r+0x230>)
 800a778:	a904      	add	r1, sp, #16
 800a77a:	f7fc f8bd 	bl	80068f8 <_printf_i>
 800a77e:	e7e4      	b.n	800a74a <_vfiprintf_r+0x1ea>
 800a780:	0800ae61 	.word	0x0800ae61
 800a784:	0800ae67 	.word	0x0800ae67
 800a788:	0800ae6b 	.word	0x0800ae6b
 800a78c:	080063b9 	.word	0x080063b9
 800a790:	0800a53d 	.word	0x0800a53d

0800a794 <__swbuf_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	460e      	mov	r6, r1
 800a798:	4614      	mov	r4, r2
 800a79a:	4605      	mov	r5, r0
 800a79c:	b118      	cbz	r0, 800a7a6 <__swbuf_r+0x12>
 800a79e:	6a03      	ldr	r3, [r0, #32]
 800a7a0:	b90b      	cbnz	r3, 800a7a6 <__swbuf_r+0x12>
 800a7a2:	f7fc fc65 	bl	8007070 <__sinit>
 800a7a6:	69a3      	ldr	r3, [r4, #24]
 800a7a8:	60a3      	str	r3, [r4, #8]
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	071a      	lsls	r2, r3, #28
 800a7ae:	d525      	bpl.n	800a7fc <__swbuf_r+0x68>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	b31b      	cbz	r3, 800a7fc <__swbuf_r+0x68>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	6922      	ldr	r2, [r4, #16]
 800a7b8:	b2f6      	uxtb	r6, r6
 800a7ba:	1a98      	subs	r0, r3, r2
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	4637      	mov	r7, r6
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	dc04      	bgt.n	800a7ce <__swbuf_r+0x3a>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f7ff fa3e 	bl	8009c48 <_fflush_r>
 800a7cc:	b9e0      	cbnz	r0, 800a808 <__swbuf_r+0x74>
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	60a3      	str	r3, [r4, #8]
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	6022      	str	r2, [r4, #0]
 800a7da:	701e      	strb	r6, [r3, #0]
 800a7dc:	6962      	ldr	r2, [r4, #20]
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d004      	beq.n	800a7ee <__swbuf_r+0x5a>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	07db      	lsls	r3, r3, #31
 800a7e8:	d506      	bpl.n	800a7f8 <__swbuf_r+0x64>
 800a7ea:	2e0a      	cmp	r6, #10
 800a7ec:	d104      	bne.n	800a7f8 <__swbuf_r+0x64>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7ff fa29 	bl	8009c48 <_fflush_r>
 800a7f6:	b938      	cbnz	r0, 800a808 <__swbuf_r+0x74>
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 f806 	bl	800a810 <__swsetup_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	d0d5      	beq.n	800a7b4 <__swbuf_r+0x20>
 800a808:	f04f 37ff 	mov.w	r7, #4294967295
 800a80c:	e7f4      	b.n	800a7f8 <__swbuf_r+0x64>
	...

0800a810 <__swsetup_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4b2a      	ldr	r3, [pc, #168]	; (800a8bc <__swsetup_r+0xac>)
 800a814:	4605      	mov	r5, r0
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	460c      	mov	r4, r1
 800a81a:	b118      	cbz	r0, 800a824 <__swsetup_r+0x14>
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	b90b      	cbnz	r3, 800a824 <__swsetup_r+0x14>
 800a820:	f7fc fc26 	bl	8007070 <__sinit>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a82a:	0718      	lsls	r0, r3, #28
 800a82c:	d422      	bmi.n	800a874 <__swsetup_r+0x64>
 800a82e:	06d9      	lsls	r1, r3, #27
 800a830:	d407      	bmi.n	800a842 <__swsetup_r+0x32>
 800a832:	2309      	movs	r3, #9
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a83a:	f04f 30ff 	mov.w	r0, #4294967295
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	e034      	b.n	800a8ac <__swsetup_r+0x9c>
 800a842:	0758      	lsls	r0, r3, #29
 800a844:	d512      	bpl.n	800a86c <__swsetup_r+0x5c>
 800a846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a848:	b141      	cbz	r1, 800a85c <__swsetup_r+0x4c>
 800a84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a84e:	4299      	cmp	r1, r3
 800a850:	d002      	beq.n	800a858 <__swsetup_r+0x48>
 800a852:	4628      	mov	r0, r5
 800a854:	f7fd fbe8 	bl	8008028 <_free_r>
 800a858:	2300      	movs	r3, #0
 800a85a:	6363      	str	r3, [r4, #52]	; 0x34
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	2300      	movs	r3, #0
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	6923      	ldr	r3, [r4, #16]
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0308 	orr.w	r3, r3, #8
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	b94b      	cbnz	r3, 800a88c <__swsetup_r+0x7c>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a882:	d003      	beq.n	800a88c <__swsetup_r+0x7c>
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f883 	bl	800a992 <__smakebuf_r>
 800a88c:	89a0      	ldrh	r0, [r4, #12]
 800a88e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a892:	f010 0301 	ands.w	r3, r0, #1
 800a896:	d00a      	beq.n	800a8ae <__swsetup_r+0x9e>
 800a898:	2300      	movs	r3, #0
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6963      	ldr	r3, [r4, #20]
 800a89e:	425b      	negs	r3, r3
 800a8a0:	61a3      	str	r3, [r4, #24]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	b943      	cbnz	r3, 800a8b8 <__swsetup_r+0xa8>
 800a8a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8aa:	d1c4      	bne.n	800a836 <__swsetup_r+0x26>
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	0781      	lsls	r1, r0, #30
 800a8b0:	bf58      	it	pl
 800a8b2:	6963      	ldrpl	r3, [r4, #20]
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	e7f4      	b.n	800a8a2 <__swsetup_r+0x92>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7f7      	b.n	800a8ac <__swsetup_r+0x9c>
 800a8bc:	20000074 	.word	0x20000074

0800a8c0 <_raise_r>:
 800a8c0:	291f      	cmp	r1, #31
 800a8c2:	b538      	push	{r3, r4, r5, lr}
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	d904      	bls.n	800a8d4 <_raise_r+0x14>
 800a8ca:	2316      	movs	r3, #22
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8d6:	b112      	cbz	r2, 800a8de <_raise_r+0x1e>
 800a8d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8dc:	b94b      	cbnz	r3, 800a8f2 <_raise_r+0x32>
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f830 	bl	800a944 <_getpid_r>
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ee:	f000 b817 	b.w	800a920 <_kill_r>
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d00a      	beq.n	800a90c <_raise_r+0x4c>
 800a8f6:	1c59      	adds	r1, r3, #1
 800a8f8:	d103      	bne.n	800a902 <_raise_r+0x42>
 800a8fa:	2316      	movs	r3, #22
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7e7      	b.n	800a8d2 <_raise_r+0x12>
 800a902:	2400      	movs	r4, #0
 800a904:	4628      	mov	r0, r5
 800a906:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a90a:	4798      	blx	r3
 800a90c:	2000      	movs	r0, #0
 800a90e:	e7e0      	b.n	800a8d2 <_raise_r+0x12>

0800a910 <raise>:
 800a910:	4b02      	ldr	r3, [pc, #8]	; (800a91c <raise+0xc>)
 800a912:	4601      	mov	r1, r0
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	f7ff bfd3 	b.w	800a8c0 <_raise_r>
 800a91a:	bf00      	nop
 800a91c:	20000074 	.word	0x20000074

0800a920 <_kill_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	2300      	movs	r3, #0
 800a924:	4d06      	ldr	r5, [pc, #24]	; (800a940 <_kill_r+0x20>)
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	f7f7 fc86 	bl	800223e <_kill>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d102      	bne.n	800a93c <_kill_r+0x1c>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b103      	cbz	r3, 800a93c <_kill_r+0x1c>
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	20003058 	.word	0x20003058

0800a944 <_getpid_r>:
 800a944:	f7f7 bc74 	b.w	8002230 <_getpid>

0800a948 <__swhatbuf_r>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	460c      	mov	r4, r1
 800a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a950:	4615      	mov	r5, r2
 800a952:	2900      	cmp	r1, #0
 800a954:	461e      	mov	r6, r3
 800a956:	b096      	sub	sp, #88	; 0x58
 800a958:	da0c      	bge.n	800a974 <__swhatbuf_r+0x2c>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	2100      	movs	r1, #0
 800a95e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a962:	bf0c      	ite	eq
 800a964:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a968:	2340      	movne	r3, #64	; 0x40
 800a96a:	2000      	movs	r0, #0
 800a96c:	6031      	str	r1, [r6, #0]
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	b016      	add	sp, #88	; 0x58
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	466a      	mov	r2, sp
 800a976:	f000 f849 	bl	800aa0c <_fstat_r>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	dbed      	blt.n	800a95a <__swhatbuf_r+0x12>
 800a97e:	9901      	ldr	r1, [sp, #4]
 800a980:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a984:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a988:	4259      	negs	r1, r3
 800a98a:	4159      	adcs	r1, r3
 800a98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a990:	e7eb      	b.n	800a96a <__swhatbuf_r+0x22>

0800a992 <__smakebuf_r>:
 800a992:	898b      	ldrh	r3, [r1, #12]
 800a994:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a996:	079d      	lsls	r5, r3, #30
 800a998:	4606      	mov	r6, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	d507      	bpl.n	800a9ae <__smakebuf_r+0x1c>
 800a99e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	6163      	str	r3, [r4, #20]
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
 800a9ae:	466a      	mov	r2, sp
 800a9b0:	ab01      	add	r3, sp, #4
 800a9b2:	f7ff ffc9 	bl	800a948 <__swhatbuf_r>
 800a9b6:	9900      	ldr	r1, [sp, #0]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7fd fba4 	bl	8008108 <_malloc_r>
 800a9c0:	b948      	cbnz	r0, 800a9d6 <__smakebuf_r+0x44>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	059a      	lsls	r2, r3, #22
 800a9c8:	d4ef      	bmi.n	800a9aa <__smakebuf_r+0x18>
 800a9ca:	f023 0303 	bic.w	r3, r3, #3
 800a9ce:	f043 0302 	orr.w	r3, r3, #2
 800a9d2:	81a3      	strh	r3, [r4, #12]
 800a9d4:	e7e3      	b.n	800a99e <__smakebuf_r+0xc>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	6020      	str	r0, [r4, #0]
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	9b00      	ldr	r3, [sp, #0]
 800a9e2:	6120      	str	r0, [r4, #16]
 800a9e4:	6163      	str	r3, [r4, #20]
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	b15b      	cbz	r3, 800aa02 <__smakebuf_r+0x70>
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f0:	f000 f81e 	bl	800aa30 <_isatty_r>
 800a9f4:	b128      	cbz	r0, 800aa02 <__smakebuf_r+0x70>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	f043 0301 	orr.w	r3, r3, #1
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	431d      	orrs	r5, r3
 800aa06:	81a5      	strh	r5, [r4, #12]
 800aa08:	e7cf      	b.n	800a9aa <__smakebuf_r+0x18>
	...

0800aa0c <_fstat_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	2300      	movs	r3, #0
 800aa10:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_fstat_r+0x20>)
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	f7f7 fc6e 	bl	80022fa <_fstat>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	d102      	bne.n	800aa28 <_fstat_r+0x1c>
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	b103      	cbz	r3, 800aa28 <_fstat_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd38      	pop	{r3, r4, r5, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20003058 	.word	0x20003058

0800aa30 <_isatty_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	2300      	movs	r3, #0
 800aa34:	4d05      	ldr	r5, [pc, #20]	; (800aa4c <_isatty_r+0x1c>)
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f7 fc6c 	bl	8002318 <_isatty>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_isatty_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_isatty_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20003058 	.word	0x20003058

0800aa50 <_init>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr

0800aa5c <_fini>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr
