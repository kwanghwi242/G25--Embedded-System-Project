
round_robin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800b578  0800b578  0000c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae0  0800bae0  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bae0  0800bae0  0000cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae8  0800bae8  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae8  0800bae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baec  0800baec  0000caec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800baf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e74  200001dc  0800bccc  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003050  0800bccc  0000e050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180b8  00000000  00000000  0000d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003913  00000000  00000000  000252bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00028bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001121  00000000  00000000  0002a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af23  00000000  00000000  0002b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ee1  00000000  00000000  00046204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097bdd  00000000  00000000  000600e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000716c  00000000  00000000  000f7d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000fee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b560 	.word	0x0800b560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800b560 	.word	0x0800b560

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dfe:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e0a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2a:	bf00      	nop
     __ASM volatile ("NOP");
 8000e2c:	bf00      	nop
  __ASM volatile ("NOP");
 8000e2e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e000      	b.n	8000e3e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000e3c:	2301      	movs	r3, #1
  }
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000edf0 	.word	0xe000edf0
 8000e4c:	e0001000 	.word	0xe0001000

08000e50 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <delay+0x40>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e5e:	f002 fae7 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <delay+0x44>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e74:	bf00      	nop
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <delay+0x40>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3f8      	bcc.n	8000e76 <delay+0x26>
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e0001000 	.word	0xe0001000
 8000e94:	431bde83 	.word	0x431bde83

08000e98 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f001 f8a3 	bl	8002010 <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f001 f886 	bl	8002010 <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DHT_Start>:


void DHT_Start (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f10:	f7ff ff6e 	bl	8000df0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f14:	2108      	movs	r1, #8
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <DHT_Start+0x40>)
 8000f18:	f7ff ffbe 	bl	8000e98 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2108      	movs	r1, #8
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <DHT_Start+0x40>)
 8000f22:	f001 fa10 	bl	8002346 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f26:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000f2a:	f7ff ff91 	bl	8000e50 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2108      	movs	r1, #8
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <DHT_Start+0x40>)
 8000f34:	f001 fa07 	bl	8002346 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000f38:	2014      	movs	r0, #20
 8000f3a:	f7ff ff89 	bl	8000e50 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <DHT_Start+0x40>)
 8000f42:	f7ff ffc6 	bl	8000ed2 <Set_Pin_Input>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010800 	.word	0x40010800

08000f50 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f7ff ff78 	bl	8000e50 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f60:	2108      	movs	r1, #8
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f64:	f001 f9d8 	bl	8002318 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000f6e:	2050      	movs	r0, #80	@ 0x50
 8000f70:	f7ff ff6e 	bl	8000e50 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f74:	2108      	movs	r1, #8
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f78:	f001 f9ce 	bl	8002318 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <DHT_Check_Response+0x38>
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <DHT_Check_Response+0x3c>
		else Response = -1;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f92:	f001 f9c1 	bl	8002318 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f8      	bne.n	8000f8e <DHT_Check_Response+0x3e>

	return Response;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	e037      	b.n	8001028 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fb8:	bf00      	nop
 8000fba:	2108      	movs	r1, #8
 8000fbc:	481e      	ldr	r0, [pc, #120]	@ (8001038 <DHT_Read+0x8c>)
 8000fbe:	f001 f9ab 	bl	8002318 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000fc8:	2028      	movs	r0, #40	@ 0x28
 8000fca:	f7ff ff41 	bl	8000e50 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fce:	2108      	movs	r1, #8
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <DHT_Read+0x8c>)
 8000fd2:	f001 f9a1 	bl	8002318 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e00b      	b.n	8001012 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f1c3 0307 	rsb	r3, r3, #7
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001012:	bf00      	nop
 8001014:	2108      	movs	r1, #8
 8001016:	4808      	ldr	r0, [pc, #32]	@ (8001038 <DHT_Read+0x8c>)
 8001018:	f001 f97e 	bl	8002318 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f8      	bne.n	8001014 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9c4      	bls.n	8000fb8 <DHT_Read+0xc>
	}
	return i;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010800 	.word	0x40010800

0800103c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001044:	f7ff ff62 	bl	8000f0c <DHT_Start>
	Presence = DHT_Check_Response ();
 8001048:	f7ff ff82 	bl	8000f50 <DHT_Check_Response>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <DHT_GetData+0xa0>)
 8001052:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001054:	f7ff ffaa 	bl	8000fac <DHT_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <DHT_GetData+0xa4>)
 800105e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001060:	f7ff ffa4 	bl	8000fac <DHT_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <DHT_GetData+0xa8>)
 800106a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800106c:	f7ff ff9e 	bl	8000fac <DHT_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <DHT_GetData+0xac>)
 8001076:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001078:	f7ff ff98 	bl	8000fac <DHT_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <DHT_GetData+0xb0>)
 8001082:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001084:	f7ff ff92 	bl	8000fac <DHT_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <DHT_GetData+0xb4>)
 800108e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <DHT_GetData+0xb4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <DHT_GetData+0xa4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <DHT_GetData+0xa8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <DHT_GetData+0xac>)
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <DHT_GetData+0xb0>)
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4299      	cmp	r1, r3
 80010b0:	d10f      	bne.n	80010d2 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <DHT_GetData+0xac>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe0c 	bl	8000cd4 <__aeabi_ui2f>
 80010bc:	4602      	mov	r2, r0
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <DHT_GetData+0xa4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe04 	bl	8000cd4 <__aeabi_ui2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001fe 	.word	0x200001fe
 80010e0:	200001f8 	.word	0x200001f8
 80010e4:	200001f9 	.word	0x200001f9
 80010e8:	200001fa 	.word	0x200001fa
 80010ec:	200001fb 	.word	0x200001fb
 80010f0:	200001fc 	.word	0x200001fc

080010f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a06      	ldr	r2, [pc, #24]	@ (800111c <vApplicationGetIdleTaskMemory+0x28>)
 8001104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <vApplicationGetIdleTaskMemory+0x2c>)
 800110a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2280      	movs	r2, #128	@ 0x80
 8001110:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000200 	.word	0x20000200
 8001120:	200002a0 	.word	0x200002a0

08001124 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f043 030c 	orr.w	r3, r3, #12
 8001142:	b2db      	uxtb	r3, r3
 8001144:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2db      	uxtb	r3, r3
 8001158:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	b2db      	uxtb	r3, r3
 8001162:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2304      	movs	r3, #4
 800116e:	214e      	movs	r1, #78	@ 0x4e
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <lcd_send_cmd+0x5c>)
 8001172:	f001 fa45 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200004a0 	.word	0x200004a0

08001184 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 030d 	orr.w	r3, r3, #13
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0309 	orr.w	r3, r3, #9
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2304      	movs	r3, #4
 80011ce:	214e      	movs	r1, #78	@ 0x4e
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <lcd_send_data+0x5c>)
 80011d2:	f001 fa15 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200004a0 	.word	0x200004a0

080011e4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    switch (row)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <lcd_put_cur+0x18>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <lcd_put_cur+0x22>
 80011fa:	e009      	b.n	8001210 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	603b      	str	r3, [r7, #0]
            break;
 8001204:	e004      	b.n	8001210 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800120c:	603b      	str	r3, [r7, #0]
            break;
 800120e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff85 	bl	8001124 <lcd_send_cmd>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lcd_init>:


void lcd_init (void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001226:	2032      	movs	r0, #50	@ 0x32
 8001228:	f000 fd3c 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800122c:	2030      	movs	r0, #48	@ 0x30
 800122e:	f7ff ff79 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001232:	2005      	movs	r0, #5
 8001234:	f000 fd36 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f7ff ff73 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fd30 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001244:	2030      	movs	r0, #48	@ 0x30
 8001246:	f7ff ff6d 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f000 fd2a 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001250:	2020      	movs	r0, #32
 8001252:	f7ff ff67 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f000 fd24 	bl	8001ca4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800125c:	2028      	movs	r0, #40	@ 0x28
 800125e:	f7ff ff61 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 fd1e 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff5b 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f000 fd18 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ff55 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fd12 	bl	8001ca4 <HAL_Delay>
	HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f000 fd0f 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001286:	2006      	movs	r0, #6
 8001288:	f7ff ff4c 	bl	8001124 <lcd_send_cmd>
	HAL_Delay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f000 fd09 	bl	8001ca4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001292:	200c      	movs	r0, #12
 8001294:	f7ff ff46 	bl	8001124 <lcd_send_cmd>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012a4:	e006      	b.n	80012b4 <lcd_send_string+0x18>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff68 	bl	8001184 <lcd_send_data>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f4      	bne.n	80012a6 <lcd_send_string+0xa>
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b0a2      	sub	sp, #136	@ 0x88
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fcb7 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f893 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f925 	bl	8001524 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012da:	f000 f8cb 	bl	8001474 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012de:	f000 f8f7 	bl	80014d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012e2:	f7ff ff9e 	bl	8001222 <lcd_init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4937      	ldr	r1, [pc, #220]	@ (80013c8 <main+0x100>)
 80012ea:	4838      	ldr	r0, [pc, #224]	@ (80013cc <main+0x104>)
 80012ec:	f002 fc39 	bl	8003b62 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80012fc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fa4c 	bl	800479e <osMutexCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a31      	ldr	r2, [pc, #196]	@ (80013d0 <main+0x108>)
 800130a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uartQueue */
  osMessageQDef(uartQueue, 3, uint8_t);
 800130c:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <main+0x10c>)
 800130e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartQueueHandle = osMessageCreate(osMessageQ(uartQueue), NULL);
 8001318:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fa8c 	bl	800483c <osMessageCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <main+0x110>)
 8001328:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 512);
 800132a:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <main+0x114>)
 800132c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001330:	461d      	mov	r5, r3
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800133e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f9ca 	bl	80046de <osThreadCreate>
 800134a:	4603      	mov	r3, r0
 800134c:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <main+0x118>)
 800134e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 512);
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <main+0x11c>)
 8001352:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001364:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f9b7 	bl	80046de <osThreadCreate>
 8001370:	4603      	mov	r3, r0
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <main+0x120>)
 8001374:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 512);
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <main+0x124>)
 8001378:	f107 041c 	add.w	r4, r7, #28
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f003 f9a4 	bl	80046de <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <main+0x128>)
 800139a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 512);
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <main+0x12c>)
 800139e:	463c      	mov	r4, r7
 80013a0:	461d      	mov	r5, r3
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80013ae:	463b      	mov	r3, r7
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f993 	bl	80046de <osThreadCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <main+0x130>)
 80013bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013be:	f003 f987 	bl	80046d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	bf00      	nop
 80013c4:	e7fd      	b.n	80013c2 <main+0xfa>
 80013c6:	bf00      	nop
 80013c8:	2000055c 	.word	0x2000055c
 80013cc:	200004f4 	.word	0x200004f4
 80013d0:	20000550 	.word	0x20000550
 80013d4:	0800b578 	.word	0x0800b578
 80013d8:	2000054c 	.word	0x2000054c
 80013dc:	0800b594 	.word	0x0800b594
 80013e0:	2000053c 	.word	0x2000053c
 80013e4:	0800b5bc 	.word	0x0800b5bc
 80013e8:	20000540 	.word	0x20000540
 80013ec:	0800b5e4 	.word	0x0800b5e4
 80013f0:	20000544 	.word	0x20000544
 80013f4:	0800b60c 	.word	0x0800b60c
 80013f8:	20000548 	.word	0x20000548

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b090      	sub	sp, #64	@ 0x40
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2228      	movs	r2, #40	@ 0x28
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fc89 	bl	8007d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001426:	2310      	movs	r3, #16
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fc3c 	bl	8002cb0 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800143e:	f000 f9a1 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f001 feaa 	bl	80031b4 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001466:	f000 f98d 	bl	8001784 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3740      	adds	r7, #64	@ 0x40
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f000 ff61 	bl	8002378 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 f962 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200004a0 	.word	0x200004a0
 80014c8:	40005400 	.word	0x40005400
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f002 fa50 	bl	80039ac <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f937 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004f4 	.word	0x200004f4
 8001520:	40013800 	.word	0x40013800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_GPIO_Init+0x40>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <MX_GPIO_Init+0x40>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_GPIO_Init+0x40>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_GPIO_Init+0x40>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <MX_GPIO_Init+0x40>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <MX_GPIO_Init+0x40>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	osMessagePut(uartQueueHandle,(uint8_t)rxData, osWaitForever);
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <HAL_UART_RxCpltCallback+0x40>)
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	4611      	mov	r1, r2
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	4618      	mov	r0, r3
 8001580:	f003 f984 	bl	800488c <osMessagePut>
	HAL_UART_Transmit(&huart1,(uint8_t*) "hello", 5, HAL_MAX_DELAY);
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	2205      	movs	r2, #5
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <HAL_UART_RxCpltCallback+0x44>)
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <HAL_UART_RxCpltCallback+0x48>)
 800158e:	f002 fa5d 	bl	8003a4c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	4904      	ldr	r1, [pc, #16]	@ (80015a8 <HAL_UART_RxCpltCallback+0x40>)
 8001596:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <HAL_UART_RxCpltCallback+0x48>)
 8001598:	f002 fae3 	bl	8003b62 <HAL_UART_Receive_IT>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000054c 	.word	0x2000054c
 80015a8:	2000055c 	.word	0x2000055c
 80015ac:	0800b628 	.word	0x0800b628
 80015b0:	200004f4 	.word	0x200004f4

080015b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	taskENTER_CRITICAL();
 80015bc:	f005 f8fe 	bl	80067bc <vPortEnterCritical>
	uint32_t t = period;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <StartDefaultTask+0x3c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	617b      	str	r3, [r7, #20]
	DHT_DataTypedef dht;
	DHT_GetData(&dht);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd36 	bl	800103c <DHT_GetData>
	dataGlobal = dht;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <StartDefaultTask+0x40>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015dc:	e882 0003 	stmia.w	r2, {r0, r1}
	taskEXIT_CRITICAL();
 80015e0:	f005 f91c 	bl	800681c <vPortExitCritical>
    osDelay(t);
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f003 f8c6 	bl	8004776 <osDelay>
  {
 80015ea:	bf00      	nop
 80015ec:	e7e6      	b.n	80015bc <StartDefaultTask+0x8>
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000554 	.word	0x20000554

080015f8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b0a4      	sub	sp, #144	@ 0x90
 80015fc:	af06      	add	r7, sp, #24
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //if(osMutexWait(myMutex01Handle, osWaitForever)==osOK){
	  	  uint32_t t = period;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <StartTask02+0x70>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	677b      	str	r3, [r7, #116]	@ 0x74
		  char message[100];
		  uint8_t length = snprintf(message, sizeof(message), "Nhiet do: %.2f va Do am: %.2f va Chu ky:%ld\n", dataGlobal.Temperature, dataGlobal.Humidity, t);
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <StartTask02+0x74>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff0c 	bl	8000428 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <StartTask02+0x74>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff05 	bl	8000428 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	f107 000c 	add.w	r0, r7, #12
 8001626:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001628:	9104      	str	r1, [sp, #16]
 800162a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162e:	e9cd 4500 	strd	r4, r5, [sp]
 8001632:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <StartTask02+0x78>)
 8001634:	2164      	movs	r1, #100	@ 0x64
 8001636:	f006 fadd 	bl	8007bf4 <sniprintf>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		  HAL_UART_Transmit(&huart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 8001640:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001644:	b29a      	uxth	r2, r3
 8001646:	f107 010c 	add.w	r1, r7, #12
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	4809      	ldr	r0, [pc, #36]	@ (8001674 <StartTask02+0x7c>)
 8001650:	f002 f9fc 	bl	8003a4c <HAL_UART_Transmit>
		  osMutexRelease(myMutex01Handle);
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <StartTask02+0x80>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 f8b9 	bl	80047d0 <osMutexRelease>
	  //}
	  osDelay(t);
 800165e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001660:	f003 f889 	bl	8004776 <osDelay>
  {
 8001664:	bf00      	nop
 8001666:	e7cb      	b.n	8001600 <StartTask02+0x8>
 8001668:	20000000 	.word	0x20000000
 800166c:	20000554 	.word	0x20000554
 8001670:	0800b630 	.word	0x0800b630
 8001674:	200004f4 	.word	0x200004f4
 8001678:	20000550 	.word	0x20000550

0800167c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0a0      	sub	sp, #128	@ 0x80
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
	for(;;)
	{
		//if(osMutexWait(myMutex01Handle, osWaitForever)==osOK){
			uint32_t t = period;
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <StartTask03+0x84>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	677b      	str	r3, [r7, #116]	@ 0x74
			char temp[50];
			char humid[50];
			lcd_put_cur(0,0);
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fda9 	bl	80011e4 <lcd_put_cur>
			snprintf(temp,sizeof(temp),"Nhiet do: %.2f",dataGlobal.Temperature);
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <StartTask03+0x88>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fec6 	bl	8000428 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	f107 000c 	add.w	r0, r7, #12
 80016a4:	e9cd 2300 	strd	r2, r3, [sp]
 80016a8:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <StartTask03+0x8c>)
 80016aa:	2132      	movs	r1, #50	@ 0x32
 80016ac:	f006 faa2 	bl	8007bf4 <sniprintf>
			snprintf(humid,sizeof(humid),"Do am: %.2f",dataGlobal.Humidity);
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <StartTask03+0x88>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe feb7 	bl	8000428 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80016c2:	e9cd 2300 	strd	r2, r3, [sp]
 80016c6:	4a11      	ldr	r2, [pc, #68]	@ (800170c <StartTask03+0x90>)
 80016c8:	2132      	movs	r1, #50	@ 0x32
 80016ca:	f006 fa93 	bl	8007bf4 <sniprintf>
			lcd_send_string(temp);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fde2 	bl	800129c <lcd_send_string>
			lcd_put_cur(1,0);
 80016d8:	2100      	movs	r1, #0
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fd82 	bl	80011e4 <lcd_put_cur>
			lcd_send_string(humid);
 80016e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fdd9 	bl	800129c <lcd_send_string>
			osMutexRelease(myMutex01Handle);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <StartTask03+0x94>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 f86e 	bl	80047d0 <osMutexRelease>
		//}
		osDelay(t);
 80016f4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80016f6:	f003 f83e 	bl	8004776 <osDelay>
	{
 80016fa:	bf00      	nop
 80016fc:	e7c2      	b.n	8001684 <StartTask03+0x8>
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000
 8001704:	20000554 	.word	0x20000554
 8001708:	0800b660 	.word	0x0800b660
 800170c:	0800b670 	.word	0x0800b670
 8001710:	20000550 	.word	0x20000550

08001714 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  osEvent evt = osMessageGet(uartQueueHandle, osWaitForever);
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <StartTask04+0x44>)
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	4618      	mov	r0, r3
 800172a:	f003 f8ef 	bl	800490c <osMessageGet>
	  if(evt.status == osEventMessage){
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b10      	cmp	r3, #16
 8001732:	d1f3      	bne.n	800171c <StartTask04+0x8>
		  uint8_t receivedData = (uint8_t)(evt.value.v);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	75fb      	strb	r3, [r7, #23]
		  if (receivedData == '1'){
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b31      	cmp	r3, #49	@ 0x31
 800173c:	d103      	bne.n	8001746 <StartTask04+0x32>
			  period = 3000;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <StartTask04+0x48>)
 8001740:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001744:	601a      	str	r2, [r3, #0]
		  }
		  if (receivedData == '2'){
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b32      	cmp	r3, #50	@ 0x32
 800174a:	d1e7      	bne.n	800171c <StartTask04+0x8>
			  period = 10000;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <StartTask04+0x48>)
 800174e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001752:	601a      	str	r2, [r3, #0]
  {
 8001754:	e7e2      	b.n	800171c <StartTask04+0x8>
 8001756:	bf00      	nop
 8001758:	2000054c 	.word	0x2000054c
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001772:	f000 fa7b 	bl	8001c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40012c00 	.word	0x40012c00

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_MspInit+0x68>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <HAL_MspInit+0x68>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_MspInit+0x68>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_MspInit+0x68>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_MspInit+0x68>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	210f      	movs	r1, #15
 80017ca:	f06f 0001 	mvn.w	r0, #1
 80017ce:	f000 fb42 	bl	8001e56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_MspInit+0x6c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_MspInit+0x6c>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a15      	ldr	r2, [pc, #84]	@ (8001870 <HAL_I2C_MspInit+0x70>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d123      	bne.n	8001868 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001838:	23c0      	movs	r3, #192	@ 0xc0
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	@ (8001878 <HAL_I2C_MspInit+0x78>)
 800184c:	f000 fbe0 	bl	8002010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_I2C_MspInit+0x74>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40005400 	.word	0x40005400
 8001874:	40021000 	.word	0x40021000
 8001878:	40010c00 	.word	0x40010c00

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a20      	ldr	r2, [pc, #128]	@ (8001918 <HAL_UART_MspInit+0x9c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d139      	bne.n	8001910 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <HAL_UART_MspInit+0xa0>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a1e      	ldr	r2, [pc, #120]	@ (800191c <HAL_UART_MspInit+0xa0>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <HAL_UART_MspInit+0xa0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_UART_MspInit+0xa0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a18      	ldr	r2, [pc, #96]	@ (800191c <HAL_UART_MspInit+0xa0>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <HAL_UART_MspInit+0xa0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	@ (8001920 <HAL_UART_MspInit+0xa4>)
 80018e2:	f000 fb95 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4809      	ldr	r0, [pc, #36]	@ (8001920 <HAL_UART_MspInit+0xa4>)
 80018fc:	f000 fb88 	bl	8002010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2105      	movs	r1, #5
 8001904:	2025      	movs	r0, #37	@ 0x25
 8001906:	f000 faa6 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190a:	2025      	movs	r0, #37	@ 0x25
 800190c:	f000 fabf 	bl	8001e8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013800 	.word	0x40013800
 800191c:	40021000 	.word	0x40021000
 8001920:	40010800 	.word	0x40010800

08001924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_InitTick+0xd0>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4a2d      	ldr	r2, [pc, #180]	@ (80019f4 <HAL_InitTick+0xd0>)
 8001940:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001944:	6193      	str	r3, [r2, #24]
 8001946:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <HAL_InitTick+0xd0>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001952:	f107 020c 	add.w	r2, r7, #12
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f001 fd99 	bl	8003494 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001962:	f001 fd83 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8001966:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <HAL_InitTick+0xd4>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	3b01      	subs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_InitTick+0xd8>)
 8001978:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <HAL_InitTick+0xdc>)
 800197a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <HAL_InitTick+0xd8>)
 800197e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001982:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <HAL_InitTick+0xd8>)
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800198a:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <HAL_InitTick+0xd8>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_InitTick+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_InitTick+0xd8>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800199c:	4817      	ldr	r0, [pc, #92]	@ (80019fc <HAL_InitTick+0xd8>)
 800199e:	f001 fdc7 	bl	8003530 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80019a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11b      	bne.n	80019e8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019b0:	4812      	ldr	r0, [pc, #72]	@ (80019fc <HAL_InitTick+0xd8>)
 80019b2:	f001 fe15 	bl	80035e0 <HAL_TIM_Base_Start_IT>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80019bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019c4:	2019      	movs	r0, #25
 80019c6:	f000 fa62 	bl	8001e8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d808      	bhi.n	80019e2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	2019      	movs	r0, #25
 80019d6:	f000 fa3e 	bl	8001e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_InitTick+0xe0>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e002      	b.n	80019e8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3730      	adds	r7, #48	@ 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	20000560 	.word	0x20000560
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	20000008 	.word	0x20000008

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <NMI_Handler+0x4>

08001a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <MemManage_Handler+0x4>

08001a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <TIM1_UP_IRQHandler+0x10>)
 8001a42:	f001 fe1f 	bl	8003684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000560 	.word	0x20000560

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f002 f8a9 	bl	8003bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200004f4 	.word	0x200004f4

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_kill>:

int _kill(int pid, int sig)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7c:	f006 f9fa 	bl	8007e74 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2216      	movs	r2, #22
 8001a84:	601a      	str	r2, [r3, #0]
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_exit>:

void _exit (int status)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffe7 	bl	8001a72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <_exit+0x12>

08001aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
  }
  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b40:	605a      	str	r2, [r3, #4]
  return 0;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f006 f962 	bl	8007e74 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20005000 	.word	0x20005000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	200005a8 	.word	0x200005a8
 8001be4:	20003050 	.word	0x20003050

08001be8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff fff8 	bl	8001be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bfa:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c10:	4c09      	ldr	r4, [pc, #36]	@ (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f006 f92f 	bl	8007e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7ff fb51 	bl	80012c8 <main>
  bx lr
 8001c26:	4770      	bx	lr
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c30:	0800baf0 	.word	0x0800baf0
  ldr r2, =_sbss
 8001c34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c38:	20003050 	.word	0x20003050

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <HAL_Init+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <HAL_Init+0x28>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f8f5 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fe64 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fd98 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_IncTick+0x1c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a03      	ldr	r2, [pc, #12]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	200005ac 	.word	0x200005ac

08001c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b02      	ldr	r3, [pc, #8]	@ (8001ca0 <HAL_GetTick+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	200005ac 	.word	0x200005ac

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffe0 	bl	8001c90 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4906      	ldr	r1, [pc, #24]	@ (8001d84 <__NVIC_EnableIRQ+0x34>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff4f 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff64 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ffb2 	bl	8001ddc <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff81 	bl	8001d88 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff57 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d008      	beq.n	8001ed4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e020      	b.n	8001f16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 020e 	bic.w	r2, r2, #14
 8001ee2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d005      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e051      	b.n	8001fe8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020e 	bic.w	r2, r2, #14
 8001f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <HAL_DMA_Abort_IT+0xd4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d029      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0xa2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <HAL_DMA_Abort_IT+0xd8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x9e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_DMA_Abort_IT+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01a      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x98>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_DMA_Abort_IT+0xe0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d012      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x92>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_DMA_Abort_IT+0xe4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00a      	beq.n	8001fac <HAL_DMA_Abort_IT+0x8c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_DMA_Abort_IT+0xe8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_DMA_Abort_IT+0x86>
 8001fa0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fa4:	e00e      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001faa:	e00b      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb0:	e008      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb6:	e005      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fbc:	e002      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Abort_IT+0xa4>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4a11      	ldr	r2, [pc, #68]	@ (800200c <HAL_DMA_Abort_IT+0xec>)
 8001fc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
    } 
  }
  return status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020008 	.word	0x40020008
 8001ff8:	4002001c 	.word	0x4002001c
 8001ffc:	40020030 	.word	0x40020030
 8002000:	40020044 	.word	0x40020044
 8002004:	40020058 	.word	0x40020058
 8002008:	4002006c 	.word	0x4002006c
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b08b      	sub	sp, #44	@ 0x2c
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e169      	b.n	80022f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002024:	2201      	movs	r2, #1
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 8158 	bne.w	80022f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a9a      	ldr	r2, [pc, #616]	@ (80022b0 <HAL_GPIO_Init+0x2a0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d05e      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 800204c:	4a98      	ldr	r2, [pc, #608]	@ (80022b0 <HAL_GPIO_Init+0x2a0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d875      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002052:	4a98      	ldr	r2, [pc, #608]	@ (80022b4 <HAL_GPIO_Init+0x2a4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d058      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002058:	4a96      	ldr	r2, [pc, #600]	@ (80022b4 <HAL_GPIO_Init+0x2a4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d86f      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800205e:	4a96      	ldr	r2, [pc, #600]	@ (80022b8 <HAL_GPIO_Init+0x2a8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d052      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002064:	4a94      	ldr	r2, [pc, #592]	@ (80022b8 <HAL_GPIO_Init+0x2a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d869      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800206a:	4a94      	ldr	r2, [pc, #592]	@ (80022bc <HAL_GPIO_Init+0x2ac>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d04c      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 8002070:	4a92      	ldr	r2, [pc, #584]	@ (80022bc <HAL_GPIO_Init+0x2ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d863      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002076:	4a92      	ldr	r2, [pc, #584]	@ (80022c0 <HAL_GPIO_Init+0x2b0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d046      	beq.n	800210a <HAL_GPIO_Init+0xfa>
 800207c:	4a90      	ldr	r2, [pc, #576]	@ (80022c0 <HAL_GPIO_Init+0x2b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d85d      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 8002082:	2b12      	cmp	r3, #18
 8002084:	d82a      	bhi.n	80020dc <HAL_GPIO_Init+0xcc>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d859      	bhi.n	800213e <HAL_GPIO_Init+0x12e>
 800208a:	a201      	add	r2, pc, #4	@ (adr r2, 8002090 <HAL_GPIO_Init+0x80>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	0800210b 	.word	0x0800210b
 8002094:	080020e5 	.word	0x080020e5
 8002098:	080020f7 	.word	0x080020f7
 800209c:	08002139 	.word	0x08002139
 80020a0:	0800213f 	.word	0x0800213f
 80020a4:	0800213f 	.word	0x0800213f
 80020a8:	0800213f 	.word	0x0800213f
 80020ac:	0800213f 	.word	0x0800213f
 80020b0:	0800213f 	.word	0x0800213f
 80020b4:	0800213f 	.word	0x0800213f
 80020b8:	0800213f 	.word	0x0800213f
 80020bc:	0800213f 	.word	0x0800213f
 80020c0:	0800213f 	.word	0x0800213f
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	0800213f 	.word	0x0800213f
 80020cc:	0800213f 	.word	0x0800213f
 80020d0:	0800213f 	.word	0x0800213f
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	08002101 	.word	0x08002101
 80020dc:	4a79      	ldr	r2, [pc, #484]	@ (80022c4 <HAL_GPIO_Init+0x2b4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e2:	e02c      	b.n	800213e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e029      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	3304      	adds	r3, #4
 80020f2:	623b      	str	r3, [r7, #32]
          break;
 80020f4:	e024      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	3308      	adds	r3, #8
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e01f      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	330c      	adds	r3, #12
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e01a      	b.n	8002140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002112:	2304      	movs	r3, #4
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e013      	b.n	8002140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002120:	2308      	movs	r3, #8
 8002122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	611a      	str	r2, [r3, #16]
          break;
 800212a:	e009      	b.n	8002140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800212c:	2308      	movs	r3, #8
 800212e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	615a      	str	r2, [r3, #20]
          break;
 8002136:	e003      	b.n	8002140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x130>
          break;
 800213e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	@ 0xff
 8002144:	d801      	bhi.n	800214a <HAL_GPIO_Init+0x13a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	e001      	b.n	800214e <HAL_GPIO_Init+0x13e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2bff      	cmp	r3, #255	@ 0xff
 8002154:	d802      	bhi.n	800215c <HAL_GPIO_Init+0x14c>
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x152>
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	3b08      	subs	r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	210f      	movs	r1, #15
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80b1 	beq.w	80022f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002190:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_GPIO_Init+0x2b8>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a4c      	ldr	r2, [pc, #304]	@ (80022c8 <HAL_GPIO_Init+0x2b8>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_GPIO_Init+0x2b8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021a8:	4a48      	ldr	r2, [pc, #288]	@ (80022cc <HAL_GPIO_Init+0x2bc>)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a40      	ldr	r2, [pc, #256]	@ (80022d0 <HAL_GPIO_Init+0x2c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <HAL_GPIO_Init+0x1ec>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3f      	ldr	r2, [pc, #252]	@ (80022d4 <HAL_GPIO_Init+0x2c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00d      	beq.n	80021f8 <HAL_GPIO_Init+0x1e8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3e      	ldr	r2, [pc, #248]	@ (80022d8 <HAL_GPIO_Init+0x2c8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x1e4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3d      	ldr	r2, [pc, #244]	@ (80022dc <HAL_GPIO_Init+0x2cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_GPIO_Init+0x1e0>
 80021ec:	2303      	movs	r3, #3
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x1ee>
 80021fc:	2300      	movs	r3, #0
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800220e:	492f      	ldr	r1, [pc, #188]	@ (80022cc <HAL_GPIO_Init+0x2bc>)
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	492c      	ldr	r1, [pc, #176]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002236:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4928      	ldr	r1, [pc, #160]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002240:	4013      	ands	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	491e      	ldr	r1, [pc, #120]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002268:	4013      	ands	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4918      	ldr	r1, [pc, #96]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002286:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	4914      	ldr	r1, [pc, #80]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d021      	beq.n	80022e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	490e      	ldr	r1, [pc, #56]	@ (80022e0 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e021      	b.n	80022f2 <HAL_GPIO_Init+0x2e2>
 80022ae:	bf00      	nop
 80022b0:	10320000 	.word	0x10320000
 80022b4:	10310000 	.word	0x10310000
 80022b8:	10220000 	.word	0x10220000
 80022bc:	10210000 	.word	0x10210000
 80022c0:	10120000 	.word	0x10120000
 80022c4:	10110000 	.word	0x10110000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40010800 	.word	0x40010800
 80022d4:	40010c00 	.word	0x40010c00
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_GPIO_Init+0x304>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	4909      	ldr	r1, [pc, #36]	@ (8002314 <HAL_GPIO_Init+0x304>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	3301      	adds	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	f47f ae8e 	bne.w	8002024 <HAL_GPIO_Init+0x14>
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	372c      	adds	r7, #44	@ 0x2c
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]
 8002352:	4613      	mov	r3, r2
 8002354:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002356:	787b      	ldrb	r3, [r7, #1]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002362:	e003      	b.n	800236c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
	...

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e12b      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fa2e 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023dc:	f001 f832 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a81      	ldr	r2, [pc, #516]	@ (80025ec <HAL_I2C_Init+0x274>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d807      	bhi.n	80023fc <HAL_I2C_Init+0x84>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a80      	ldr	r2, [pc, #512]	@ (80025f0 <HAL_I2C_Init+0x278>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e006      	b.n	800240a <HAL_I2C_Init+0x92>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a7d      	ldr	r2, [pc, #500]	@ (80025f4 <HAL_I2C_Init+0x27c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0e7      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a78      	ldr	r2, [pc, #480]	@ (80025f8 <HAL_I2C_Init+0x280>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a6a      	ldr	r2, [pc, #424]	@ (80025ec <HAL_I2C_Init+0x274>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d802      	bhi.n	800244c <HAL_I2C_Init+0xd4>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3301      	adds	r3, #1
 800244a:	e009      	b.n	8002460 <HAL_I2C_Init+0xe8>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a69      	ldr	r2, [pc, #420]	@ (80025fc <HAL_I2C_Init+0x284>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002472:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	495c      	ldr	r1, [pc, #368]	@ (80025ec <HAL_I2C_Init+0x274>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d819      	bhi.n	80024b4 <HAL_I2C_Init+0x13c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e59      	subs	r1, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fbb1 f3f3 	udiv	r3, r1, r3
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002494:	400b      	ands	r3, r1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_I2C_Init+0x138>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e59      	subs	r1, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	e051      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e04f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d111      	bne.n	80024e0 <HAL_I2C_Init+0x168>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e012      	b.n	8002506 <HAL_I2C_Init+0x18e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x196>
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10e      	bne.n	8002534 <HAL_I2C_Init+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e58      	subs	r0, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	fbb0 f3f3 	udiv	r3, r0, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002532:	e00f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	6809      	ldr	r1, [r1, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6911      	ldr	r1, [r2, #16]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	000186a0 	.word	0x000186a0
 80025f0:	001e847f 	.word	0x001e847f
 80025f4:	003d08ff 	.word	0x003d08ff
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fb3c 	bl	8001c90 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80e0 	bne.w	80027e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4970      	ldr	r1, [pc, #448]	@ (80027f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f964 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0d3      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e0cc      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	@ 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a50      	ldr	r2, [pc, #320]	@ (80027f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f89c 	bl	80027fc <I2C_MasterRequestWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e4:	e066      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa22 	bl	8002b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x188>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fa19 	bl	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b04      	cmp	r3, #4
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01a      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d194      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000

080027fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d006      	beq.n	8002826 <I2C_MasterRequestWrite+0x2a>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d003      	beq.n	8002826 <I2C_MasterRequestWrite+0x2a>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002824:	d108      	bne.n	8002838 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e00b      	b.n	8002850 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	2b12      	cmp	r3, #18
 800283e:	d107      	bne.n	8002850 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800284e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f84f 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002876:	d103      	bne.n	8002880 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800287e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e035      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800288c:	d108      	bne.n	80028a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e01b      	b.n	80028d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028a0:	897b      	ldrh	r3, [r7, #10]
 80028a2:	11db      	asrs	r3, r3, #7
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0306 	and.w	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f063 030f 	orn	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	490e      	ldr	r1, [pc, #56]	@ (80028f8 <I2C_MasterRequestWrite+0xfc>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f898 	bl	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e010      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <I2C_MasterRequestWrite+0x100>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f888 	bl	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	00010008 	.word	0x00010008
 80028fc:	00010002 	.word	0x00010002

08002900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002910:	e048      	b.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d044      	beq.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff f9b9 	bl	8001c90 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d139      	bne.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	0c1b      	lsrs	r3, r3, #16
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10d      	bne.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x56>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	e00c      	b.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	429a      	cmp	r2, r3
 8002974:	d116      	bne.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e023      	b.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	0c1b      	lsrs	r3, r3, #16
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10d      	bne.n	80029ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	e00c      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d093      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a02:	e071      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a12:	d123      	bne.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e067      	b.n	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d041      	beq.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	f7ff f914 	bl	8001c90 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d302      	bcc.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d136      	bne.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10c      	bne.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e00b      	b.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e021      	b.n	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d10c      	bne.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e00b      	b.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f af6d 	bne.w	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b40:	e034      	b.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f886 	bl	8002c54 <I2C_IsAcknowledgeFailed>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e034      	b.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d028      	beq.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7ff f899 	bl	8001c90 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11d      	bne.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	2b80      	cmp	r3, #128	@ 0x80
 8002b7c:	d016      	beq.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d1c3      	bne.n	8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	e034      	b.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f83e 	bl	8002c54 <I2C_IsAcknowledgeFailed>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e034      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d028      	beq.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7ff f851 	bl	8001c90 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11d      	bne.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d016      	beq.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e007      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d1c3      	bne.n	8002bd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d11b      	bne.n	8002ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e272      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8087 	beq.w	8002dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d112      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf4:	d10b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf6:	4b89      	ldr	r3, [pc, #548]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x12c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d168      	bne.n	8002ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e24c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x76>
 8002d18:	4b80      	ldr	r3, [pc, #512]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e02e      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7a      	ldr	r2, [pc, #488]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b78      	ldr	r3, [pc, #480]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a77      	ldr	r2, [pc, #476]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0xbc>
 8002d52:	4b72      	ldr	r3, [pc, #456]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a71      	ldr	r2, [pc, #452]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6e      	ldr	r2, [pc, #440]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe ff80 	bl	8001c90 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe ff7c 	bl	8001c90 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	@ 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e200      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe4>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe ff6c 	bl	8001c90 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe ff68 	bl	8001c90 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1ec      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x10c>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
 8002e02:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b43      	ldr	r3, [pc, #268]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1c0      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4939      	ldr	r1, [pc, #228]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe ff21 	bl	8001c90 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe ff1d 	bl	8001c90 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1a1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4927      	ldr	r1, [pc, #156]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe ff00 	bl	8001c90 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fefc 	bl	8001c90 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e180      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03a      	beq.n	8002f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fee0 	bl	8001c90 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fedc 	bl	8001c90 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e160      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f000 fafe 	bl	80034f4 <RCC_Delay>
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fec6 	bl	8001c90 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	e00f      	b.n	8002f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fec2 	bl	8001c90 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e146      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	42420000 	.word	0x42420000
 8002f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b92      	ldr	r3, [pc, #584]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e9      	bne.n	8002f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a6 	beq.w	800308e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b8b      	ldr	r3, [pc, #556]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a87      	ldr	r2, [pc, #540]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b85      	ldr	r3, [pc, #532]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fe83 	bl	8001c90 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fe fe7f 	bl	8001c90 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	@ 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e103      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b75      	ldr	r3, [pc, #468]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e02d      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8002fca:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a69      	ldr	r2, [pc, #420]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a66      	ldr	r2, [pc, #408]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	e01c      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x356>
 8002fec:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a60      	ldr	r2, [pc, #384]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8003006:	4b5b      	ldr	r3, [pc, #364]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe fe33 	bl	8001c90 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fe2f 	bl	8001c90 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0b1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b4b      	ldr	r3, [pc, #300]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCC_OscConfig+0x37e>
 8003050:	e014      	b.n	800307c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fe fe1d 	bl	8001c90 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fe19 	bl	8001c90 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e09b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b3c      	ldr	r3, [pc, #240]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4a3b      	ldr	r2, [pc, #236]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8087 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d061      	beq.n	8003168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d146      	bne.n	800313a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe fded 	bl	8001c90 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fde9 	bl	8001c90 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e06d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e2:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4921      	ldr	r1, [pc, #132]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a19      	ldr	r1, [r3, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	491b      	ldr	r1, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fdbd 	bl	8001c90 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fdb9 	bl	8001c90 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e03d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x46a>
 8003138:	e035      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fda6 	bl	8001c90 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fda2 	bl	8001c90 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e026      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x498>
 8003166:	e01e      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e019      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
 800317c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_OscConfig+0x500>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0d0      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b67      	ldr	r3, [pc, #412]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4965      	ldr	r1, [pc, #404]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800321a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d040      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e073      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b39      	ldr	r3, [pc, #228]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4936      	ldr	r1, [pc, #216]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fcf4 	bl	8001c90 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fcf0 	bl	8001c90 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e053      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d210      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4922      	ldr	r1, [pc, #136]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332e:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1cc>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fade 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40022000 	.word	0x40022000
 8003378:	40021000 	.word	0x40021000
 800337c:	0800b684 	.word	0x0800b684
 8003380:	20000004 	.word	0x20000004
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <HAL_RCC_GetSysClockFreq+0x94>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x30>
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d003      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x36>
 80033b6:	e027      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ba:	613b      	str	r3, [r7, #16]
      break;
 80033bc:	e027      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <HAL_RCC_GetSysClockFreq+0x94>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0c5b      	lsrs	r3, r3, #17
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ea:	fb03 f202 	mul.w	r2, r3, r2
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e004      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	@ (800342c <HAL_RCC_GetSysClockFreq+0xa4>)
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	693b      	ldr	r3, [r7, #16]
}
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	0800b69c 	.word	0x0800b69c
 8003428:	0800b6ac 	.word	0x0800b6ac
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b02      	ldr	r3, [pc, #8]	@ (8003440 <HAL_RCC_GetHCLKFreq+0x10>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff2 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	@ (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	0800b694 	.word	0x0800b694

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffde 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0adb      	lsrs	r3, r3, #11
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	@ (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	0800b694 	.word	0x0800b694

08003494 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	220f      	movs	r2, #15
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_GetClockConfig+0x58>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_RCC_GetClockConfig+0x58>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_GetClockConfig+0x58>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_RCC_GetClockConfig+0x58>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_GetClockConfig+0x5c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0207 	and.w	r2, r3, #7
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40022000 	.word	0x40022000

080034f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <RCC_Delay+0x34>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <RCC_Delay+0x38>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003510:	bf00      	nop
  }
  while (Delay --);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f9      	bne.n	8003510 <RCC_Delay+0x1c>
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000004 	.word	0x20000004
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e041      	b.n	80035c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f839 	bl	80035ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 f99c 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d001      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e03a      	b.n	800366e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_TIM_Base_Start_IT+0x98>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003622:	d009      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	@ (800367c <HAL_TIM_Base_Start_IT+0x9c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <HAL_TIM_Base_Start_IT+0xa0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d010      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	e007      	b.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800

08003684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d020      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01b      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0202 	mvn.w	r2, #2
 80036b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8d1 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8c4 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8d3 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0204 	mvn.w	r2, #4
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8ab 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f89e 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8ad 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0208 	mvn.w	r2, #8
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f885 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f878 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f887 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0210 	mvn.w	r2, #16
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2208      	movs	r2, #8
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f85f 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f852 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f861 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0201 	mvn.w	r2, #1
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd ffb8 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8c3 	bl	800399a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f831 	bl	800389a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0220 	mvn.w	r2, #32
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f896 	bl	8003988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a2f      	ldr	r2, [pc, #188]	@ (800397c <TIM_Base_SetConfig+0xd0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <TIM_Base_SetConfig+0xd4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <TIM_Base_SetConfig+0xd8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a22      	ldr	r2, [pc, #136]	@ (800397c <TIM_Base_SetConfig+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <TIM_Base_SetConfig+0xd4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <TIM_Base_SetConfig+0xd8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <TIM_Base_SetConfig+0xd0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f023 0201 	bic.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]
  }
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800

08003988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e042      	b.n	8003a44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd ff52 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	@ 0x24
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fdb7 	bl	8004564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	@ 0x28
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d175      	bne.n	8003b58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_Transmit+0x2c>
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e06e      	b.n	8003b5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2221      	movs	r2, #33	@ 0x21
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe f901 	bl	8001c90 <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	d108      	bne.n	8003ab8 <HAL_UART_Transmit+0x6c>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e003      	b.n	8003ac0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac0:	e02e      	b.n	8003b20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	@ 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fb1c 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e03a      	b.n	8003b5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	3302      	adds	r3, #2
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e007      	b.n	8003b12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1cb      	bne.n	8003ac2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2140      	movs	r1, #64	@ 0x40
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fae8 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d112      	bne.n	8003ba2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_Receive_IT+0x26>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e00b      	b.n	8003ba4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fb0f 	bl	80041bc <UART_Start_Receive_IT>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0ba      	sub	sp, #232	@ 0xe8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fbec 	bl	80043e8 <UART_Receive_IT>
      return;
 8003c10:	e25b      	b.n	80040ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80de 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
 8003c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80d1 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
 8003c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d011      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f043 0208 	orr.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 81f2 	beq.w	80040c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fb77 	bl	80043e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_UART_IRQHandler+0x17a>
 8003d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04f      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa81 	bl	800422e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d041      	beq.n	8003dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d9      	bne.n	8003d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d92:	4a7e      	ldr	r2, [pc, #504]	@ (8003f8c <HAL_UART_IRQHandler+0x3e0>)
 8003d94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f8c0 	bl	8001f20 <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00e      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f993 	bl	80040e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f98f 	bl	80040e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f98b 	bl	80040e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dd2:	e175      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	bf00      	nop
    return;
 8003dd6:	e173      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 814f 	bne.w	8004080 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8148 	beq.w	8004080 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8141 	beq.w	8004080 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80b6 	beq.w	8003f90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8145 	beq.w	80040c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e42:	429a      	cmp	r2, r3
 8003e44:	f080 813e 	bcs.w	80040c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	f000 8088 	beq.w	8003f6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1d9      	bne.n	8003e5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ecc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e1      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f08:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e3      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f3c:	f023 0310 	bic.w	r3, r3, #16
 8003f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e3      	bne.n	8003f2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd ff9f 	bl	8001eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8b6 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f88:	e09c      	b.n	80040c4 <HAL_UART_IRQHandler+0x518>
 8003f8a:	bf00      	nop
 8003f8c:	080042f3 	.word	0x080042f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808e 	beq.w	80040c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8089 	beq.w	80040c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fda:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e3      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004012:	633a      	str	r2, [r7, #48]	@ 0x30
 8004014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e3      	bne.n	8003fee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e3      	bne.n	8004034 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f83b 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800407e:	e023      	b.n	80040c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <HAL_UART_IRQHandler+0x4f4>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f93e 	bl	800431a <UART_Transmit_IT>
    return;
 800409e:	e014      	b.n	80040ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <HAL_UART_IRQHandler+0x51e>
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f97d 	bl	80043b8 <UART_EndTransmit_IT>
    return;
 80040be:	e004      	b.n	80040ca <HAL_UART_IRQHandler+0x51e>
    return;
 80040c0:	bf00      	nop
 80040c2:	e002      	b.n	80040ca <HAL_UART_IRQHandler+0x51e>
      return;
 80040c4:	bf00      	nop
 80040c6:	e000      	b.n	80040ca <HAL_UART_IRQHandler+0x51e>
      return;
 80040c8:	bf00      	nop
  }
}
 80040ca:	37e8      	adds	r7, #232	@ 0xe8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	e03b      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d037      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fd fdb4 	bl	8001c90 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <UART_WaitOnFlagUntilTimeout+0x30>
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e03a      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d023      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b80      	cmp	r3, #128	@ 0x80
 8004150:	d020      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	d01d      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d116      	bne.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f856 	bl	800422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2208      	movs	r2, #8
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e00f      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d0b4      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2222      	movs	r2, #34	@ 0x22
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004200:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0220 	orr.w	r2, r2, #32
 8004220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422e:	b480      	push	{r7}
 8004230:	b095      	sub	sp, #84	@ 0x54
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800424c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004256:	643a      	str	r2, [r7, #64]	@ 0x40
 8004258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800425c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	61fb      	str	r3, [r7, #28]
   return(result);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800428a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d119      	bne.n	80042da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042c6:	61ba      	str	r2, [r7, #24]
 80042c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042e8:	bf00      	nop
 80042ea:	3754      	adds	r7, #84	@ 0x54
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fee8 	bl	80040e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b21      	cmp	r3, #33	@ 0x21
 800432c:	d13e      	bne.n	80043ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	d114      	bne.n	8004362 <UART_Transmit_IT+0x48>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d110      	bne.n	8004362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	621a      	str	r2, [r3, #32]
 8004360:	e008      	b.n	8004374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6211      	str	r1, [r2, #32]
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4619      	mov	r1, r3
 8004382:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fe79 	bl	80040d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	@ 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b22      	cmp	r3, #34	@ 0x22
 80043fa:	f040 80ae 	bne.w	800455a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004406:	d117      	bne.n	8004438 <UART_Receive_IT+0x50>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d113      	bne.n	8004438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	b29a      	uxth	r2, r3
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28
 8004436:	e026      	b.n	8004486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	d007      	beq.n	800445c <UART_Receive_IT+0x74>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <UART_Receive_IT+0x82>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e008      	b.n	800447c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004476:	b2da      	uxtb	r2, r3
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4619      	mov	r1, r3
 8004494:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004496:	2b00      	cmp	r3, #0
 8004498:	d15d      	bne.n	8004556 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0220 	bic.w	r2, r2, #32
 80044a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d135      	bne.n	800454c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	613b      	str	r3, [r7, #16]
   return(result);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f023 0310 	bic.w	r3, r3, #16
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004506:	623a      	str	r2, [r7, #32]
 8004508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	69f9      	ldr	r1, [r7, #28]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	61bb      	str	r3, [r7, #24]
   return(result);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b10      	cmp	r3, #16
 8004526:	d10a      	bne.n	800453e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004542:	4619      	mov	r1, r3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fdd5 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
 800454a:	e002      	b.n	8004552 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fd f80b 	bl	8001568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e002      	b.n	800455c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3730      	adds	r7, #48	@ 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800459e:	f023 030c 	bic.w	r3, r3, #12
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <UART_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe ff4e 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	e002      	b.n	80045da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe ff36 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 80045d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	4a22      	ldr	r2, [pc, #136]	@ (800467c <UART_SetConfig+0x118>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	0119      	lsls	r1, r3, #4
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <UART_SetConfig+0x118>)
 8004612:	fba3 0302 	umull	r0, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2064      	movs	r0, #100	@ 0x64
 800461a:	fb00 f303 	mul.w	r3, r0, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	@ 0x32
 8004624:	4a15      	ldr	r2, [pc, #84]	@ (800467c <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004630:	4419      	add	r1, r3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	@ 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	@ 0x32
 800465c:	4a07      	ldr	r2, [pc, #28]	@ (800467c <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	440a      	add	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40013800 	.word	0x40013800
 800467c:	51eb851f 	.word	0x51eb851f

08004680 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800468e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004692:	2b84      	cmp	r3, #132	@ 0x84
 8004694:	d005      	beq.n	80046a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	3303      	adds	r3, #3
 80046a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b4:	f3ef 8305 	mrs	r3, IPSR
 80046b8:	607b      	str	r3, [r7, #4]
  return(result);
 80046ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046d4:	f001 fa56 	bl	8005b84 <vTaskStartScheduler>
  
  return osOK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	bd80      	pop	{r7, pc}

080046de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e0:	b089      	sub	sp, #36	@ 0x24
 80046e2:	af04      	add	r7, sp, #16
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <osThreadCreate+0x54>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01c      	beq.n	8004732 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685c      	ldr	r4, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691e      	ldr	r6, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ffb8 	bl	8004680 <makeFreeRtosPriority>
 8004710:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800471a:	9202      	str	r2, [sp, #8]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	9100      	str	r1, [sp, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4632      	mov	r2, r6
 8004724:	4629      	mov	r1, r5
 8004726:	4620      	mov	r0, r4
 8004728:	f001 f846 	bl	80057b8 <xTaskCreateStatic>
 800472c:	4603      	mov	r3, r0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e01c      	b.n	800476c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685c      	ldr	r4, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800473e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ff9a 	bl	8004680 <makeFreeRtosPriority>
 800474c:	4602      	mov	r2, r0
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	9200      	str	r2, [sp, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	4632      	mov	r2, r6
 800475a:	4629      	mov	r1, r5
 800475c:	4620      	mov	r0, r4
 800475e:	f001 f88b 	bl	8005878 <xTaskCreate>
 8004762:	4603      	mov	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d001      	beq.n	800476c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004776 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <osDelay+0x16>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e000      	b.n	800478e <osDelay+0x18>
 800478c:	2301      	movs	r3, #1
 800478e:	4618      	mov	r0, r3
 8004790:	f001 f9c2 	bl	8005b18 <vTaskDelay>
  
  return osOK;
 8004794:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4619      	mov	r1, r3
 80047b4:	2001      	movs	r0, #1
 80047b6:	f000 fb40 	bl	8004e3a <xQueueCreateMutexStatic>
 80047ba:	4603      	mov	r3, r0
 80047bc:	e003      	b.n	80047c6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80047be:	2001      	movs	r0, #1
 80047c0:	f000 fb23 	bl	8004e0a <xQueueCreateMutex>
 80047c4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80047e0:	f7ff ff65 	bl	80046ae <inHandlerMode>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047ea:	f107 0308 	add.w	r3, r7, #8
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fcdd 	bl	80051b0 <xQueueGiveFromISR>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d001      	beq.n	8004800 <osMutexRelease+0x30>
      return osErrorOS;
 80047fc:	23ff      	movs	r3, #255	@ 0xff
 80047fe:	e017      	b.n	8004830 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d013      	beq.n	800482e <osMutexRelease+0x5e>
 8004806:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <osMutexRelease+0x68>)
 8004808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	e00a      	b.n	800482e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004818:	2300      	movs	r3, #0
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fb26 	bl	8004e70 <xQueueGenericSend>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800482a:	23ff      	movs	r3, #255	@ 0xff
 800482c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d011      	beq.n	8004872 <osMessageCreate+0x36>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2400      	movs	r4, #0
 8004868:	9400      	str	r4, [sp, #0]
 800486a:	f000 f9dd 	bl	8004c28 <xQueueGenericCreateStatic>
 800486e:	4603      	mov	r3, r0
 8004870:	e008      	b.n	8004884 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	f000 fa50 	bl	8004d22 <xQueueGenericCreate>
 8004882:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}

0800488c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <osMessagePut+0x1e>
    ticks = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048aa:	f7ff ff00 	bl	80046ae <inHandlerMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d018      	beq.n	80048e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048b4:	f107 0210 	add.w	r2, r7, #16
 80048b8:	f107 0108 	add.w	r1, r7, #8
 80048bc:	2300      	movs	r3, #0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fbd8 	bl	8005074 <xQueueGenericSendFromISR>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <osMessagePut+0x42>
      return osErrorOS;
 80048ca:	23ff      	movs	r3, #255	@ 0xff
 80048cc:	e018      	b.n	8004900 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d014      	beq.n	80048fe <osMessagePut+0x72>
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <osMessagePut+0x7c>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	e00b      	b.n	80048fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80048e6:	f107 0108 	add.w	r1, r7, #8
 80048ea:	2300      	movs	r3, #0
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fabe 	bl	8004e70 <xQueueGenericSend>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <osMessagePut+0x72>
      return osErrorOS;
 80048fa:	23ff      	movs	r3, #255	@ 0xff
 80048fc:	e000      	b.n	8004900 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b08b      	sub	sp, #44	@ 0x2c
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	617b      	str	r3, [r7, #20]
    return event;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	461c      	mov	r4, r3
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800493a:	e054      	b.n	80049e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d103      	bne.n	8004954 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
 8004952:	e009      	b.n	8004968 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <osMessageGet+0x5c>
      ticks = 1;
 8004964:	2301      	movs	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004968:	f7ff fea1 	bl	80046ae <inHandlerMode>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01c      	beq.n	80049ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004972:	f107 0220 	add.w	r2, r7, #32
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	68b8      	ldr	r0, [r7, #8]
 8004980:	f000 fd88 	bl	8005494 <xQueueReceiveFromISR>
 8004984:	4603      	mov	r3, r0
 8004986:	2b01      	cmp	r3, #1
 8004988:	d102      	bne.n	8004990 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800498a:	2310      	movs	r3, #16
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e001      	b.n	8004994 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01d      	beq.n	80049d6 <osMessageGet+0xca>
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <osMessageGet+0xe4>)
 800499c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	e014      	b.n	80049d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	3304      	adds	r3, #4
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	4619      	mov	r1, r3
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f000 fc8a 	bl	80052d0 <xQueueReceive>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80049c2:	2310      	movs	r3, #16
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e006      	b.n	80049d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <osMessageGet+0xc6>
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <osMessageGet+0xc8>
 80049d2:	2340      	movs	r3, #64	@ 0x40
 80049d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	461c      	mov	r4, r3
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	372c      	adds	r7, #44	@ 0x2c
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f103 0208 	add.w	r2, r3, #8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f103 0208 	add.w	r2, r3, #8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0208 	add.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e00c      	b.n	8004aca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e002      	b.n	8004abe <vListInsert+0x2e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d2f6      	bcs.n	8004ab8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d103      	bne.n	8004b34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
	...

08004b54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b80:	f001 fe1c 	bl	80067bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	22ff      	movs	r2, #255	@ 0xff
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d114      	bne.n	8004c00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01a      	beq.n	8004c14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3310      	adds	r3, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fa26 	bl	8006034 <xTaskRemoveFromEventList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bee:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <xQueueGenericReset+0xd0>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	e009      	b.n	8004c14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3310      	adds	r3, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fef5 	bl	80049f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3324      	adds	r3, #36	@ 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fef0 	bl	80049f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c14:	f001 fe02 	bl	800681c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c18:	2301      	movs	r3, #1
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	@ 0x38
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	e7fd      	b.n	8004c6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <xQueueGenericCreateStatic+0x56>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <xQueueGenericCreateStatic+0x5a>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericCreateStatic+0x5c>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	623b      	str	r3, [r7, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	e7fd      	b.n	8004c9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <xQueueGenericCreateStatic+0x84>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <xQueueGenericCreateStatic+0x88>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <xQueueGenericCreateStatic+0x8a>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61fb      	str	r3, [r7, #28]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cce:	2348      	movs	r3, #72	@ 0x48
 8004cd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b48      	cmp	r3, #72	@ 0x48
 8004cd6:	d00b      	beq.n	8004cf0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61bb      	str	r3, [r7, #24]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cf0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f840 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3730      	adds	r7, #48	@ 0x30
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	@ 0x28
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	613b      	str	r3, [r7, #16]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3348      	adds	r3, #72	@ 0x48
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fe2f 	bl	80069c0 <pvPortMalloc>
 8004d62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3348      	adds	r3, #72	@ 0x48
 8004d72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d7c:	79fa      	ldrb	r2, [r7, #7]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f805 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e002      	b.n	8004dba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	69b8      	ldr	r0, [r7, #24]
 8004dca:	f7ff fec3 	bl	8004b54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004df6:	2300      	movs	r3, #0
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f837 	bl	8004e70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b086      	sub	sp, #24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e14:	2301      	movs	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6939      	ldr	r1, [r7, #16]
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f7ff ff7d 	bl	8004d22 <xQueueGenericCreate>
 8004e28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff ffd3 	bl	8004dd6 <prvInitialiseMutex>

		return xNewQueue;
 8004e30:	68fb      	ldr	r3, [r7, #12]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b088      	sub	sp, #32
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	4603      	mov	r3, r0
 8004e42:	6039      	str	r1, [r7, #0]
 8004e44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2200      	movs	r2, #0
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	6978      	ldr	r0, [r7, #20]
 8004e5a:	f7ff fee5 	bl	8004c28 <xQueueGenericCreateStatic>
 8004e5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ffb8 	bl	8004dd6 <prvInitialiseMutex>

		return xNewQueue;
 8004e66:	68fb      	ldr	r3, [r7, #12]
	}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	@ 0x38
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSend+0x34>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSend+0x42>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericSend+0x46>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericSend+0x48>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <xQueueGenericSend+0x64>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x72>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <xQueueGenericSend+0x76>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <xQueueGenericSend+0x78>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <xQueueGenericSend+0x94>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	623b      	str	r3, [r7, #32]
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	f001 fa5c 	bl	80063c0 <xTaskGetSchedulerState>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueGenericSend+0xa4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <xQueueGenericSend+0xa8>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <xQueueGenericSend+0xaa>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <xQueueGenericSend+0xc6>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61fb      	str	r3, [r7, #28]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f36:	f001 fc41 	bl	80067bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <xQueueGenericSend+0xdc>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d129      	bne.n	8004fa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f52:	f000 fb21 	bl	8005598 <prvCopyDataToQueue>
 8004f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d010      	beq.n	8004f82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	3324      	adds	r3, #36	@ 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 f865 	bl	8006034 <xTaskRemoveFromEventList>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f70:	4b3f      	ldr	r3, [pc, #252]	@ (8005070 <xQueueGenericSend+0x200>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	e00a      	b.n	8004f98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f88:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <xQueueGenericSend+0x200>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f98:	f001 fc40 	bl	800681c <vPortExitCritical>
				return pdPASS;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e063      	b.n	8005068 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa6:	f001 fc39 	bl	800681c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e05c      	b.n	8005068 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 f89f 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc2:	f001 fc2b 	bl	800681c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc6:	f000 fe47 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fca:	f001 fbf7 	bl	80067bc <vPortEnterCritical>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d103      	bne.n	8004fe4 <xQueueGenericSend+0x174>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSend+0x18a>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ffa:	f001 fc0f 	bl	800681c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffe:	1d3a      	adds	r2, r7, #4
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f88e 	bl	8006128 <xTaskCheckForTimeOut>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d124      	bne.n	800505c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005014:	f000 fbb8 	bl	8005788 <prvIsQueueFull>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	3310      	adds	r3, #16
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 ffde 	bl	8005fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800502c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800502e:	f000 fb43 	bl	80056b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005032:	f000 fe1f 	bl	8005c74 <xTaskResumeAll>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f af7c 	bne.w	8004f36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <xQueueGenericSend+0x200>)
 8005040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	e772      	b.n	8004f36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005052:	f000 fb31 	bl	80056b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005056:	f000 fe0d 	bl	8005c74 <xTaskResumeAll>
 800505a:	e76c      	b.n	8004f36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800505c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800505e:	f000 fb2b 	bl	80056b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005062:	f000 fe07 	bl	8005c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005068:	4618      	mov	r0, r3
 800506a:	3738      	adds	r7, #56	@ 0x38
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b090      	sub	sp, #64	@ 0x40
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSendFromISR+0x3e>
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSendFromISR+0x42>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSendFromISR+0x44>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSendFromISR+0x6e>
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <xQueueGenericSendFromISR+0x72>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericSendFromISR+0x74>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005104:	f001 fc1c 	bl	8006940 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005108:	f3ef 8211 	mrs	r2, BASEPRI
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fa      	str	r2, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005120:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <xQueueGenericSendFromISR+0xc2>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d12f      	bne.n	8005196 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800513c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800514c:	f000 fa24 	bl	8005598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005150:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d112      	bne.n	8005180 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	3324      	adds	r3, #36	@ 0x24
 8005166:	4618      	mov	r0, r3
 8005168:	f000 ff64 	bl	8006034 <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e007      	b.n	8005190 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005184:	3301      	adds	r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	b25a      	sxtb	r2, r3
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005190:	2301      	movs	r3, #1
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005194:	e001      	b.n	800519a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005196:	2300      	movs	r3, #0
 8005198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800519a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3740      	adds	r7, #64	@ 0x40
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	@ 0x38
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	623b      	str	r3, [r7, #32]
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <xQueueGiveFromISR+0x5c>
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <xQueueGiveFromISR+0x60>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <xQueueGiveFromISR+0x62>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	61bb      	str	r3, [r7, #24]
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	e7fd      	b.n	800522a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522e:	f001 fb87 	bl	8006940 <vPortValidateInterruptPriority>
	__asm volatile
 8005232:	f3ef 8211 	mrs	r2, BASEPRI
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617a      	str	r2, [r7, #20]
 8005248:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800524a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800524c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800525a:	429a      	cmp	r2, r3
 800525c:	d22b      	bcs.n	80052b6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005270:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d112      	bne.n	80052a0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	3324      	adds	r3, #36	@ 0x24
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fed4 	bl	8006034 <xTaskRemoveFromEventList>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e007      	b.n	80052b0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	b25a      	sxtb	r2, r3
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	e001      	b.n	80052ba <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f383 8811 	msr	BASEPRI, r3
}
 80052c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3738      	adds	r7, #56	@ 0x38
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	@ 0x30
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <xQueueReceive+0x32>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	623b      	str	r3, [r7, #32]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <xQueueReceive+0x40>
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <xQueueReceive+0x44>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <xQueueReceive+0x46>
 8005314:	2300      	movs	r3, #0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xQueueReceive+0x62>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	61fb      	str	r3, [r7, #28]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005332:	f001 f845 	bl	80063c0 <xTaskGetSchedulerState>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <xQueueReceive+0x72>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueReceive+0x76>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueReceive+0x78>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <xQueueReceive+0x94>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61bb      	str	r3, [r7, #24]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005364:	f001 fa2a 	bl	80067bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01f      	beq.n	80053b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005378:	f000 f978 	bl	800566c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00f      	beq.n	80053ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	3310      	adds	r3, #16
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fe4f 	bl	8006034 <xTaskRemoveFromEventList>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800539c:	4b3c      	ldr	r3, [pc, #240]	@ (8005490 <xQueueReceive+0x1c0>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053ac:	f001 fa36 	bl	800681c <vPortExitCritical>
				return pdPASS;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e069      	b.n	8005488 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ba:	f001 fa2f 	bl	800681c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053be:	2300      	movs	r3, #0
 80053c0:	e062      	b.n	8005488 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c8:	f107 0310 	add.w	r3, r7, #16
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fe95 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053d6:	f001 fa21 	bl	800681c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053da:	f000 fc3d 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053de:	f001 f9ed 	bl	80067bc <vPortEnterCritical>
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d103      	bne.n	80053f8 <xQueueReceive+0x128>
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d103      	bne.n	800540e <xQueueReceive+0x13e>
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800540e:	f001 fa05 	bl	800681c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005412:	1d3a      	adds	r2, r7, #4
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe84 	bl	8006128 <xTaskCheckForTimeOut>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d123      	bne.n	800546e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005428:	f000 f998 	bl	800575c <prvIsQueueEmpty>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d017      	beq.n	8005462 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	3324      	adds	r3, #36	@ 0x24
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fdd4 	bl	8005fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005442:	f000 f939 	bl	80056b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005446:	f000 fc15 	bl	8005c74 <xTaskResumeAll>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d189      	bne.n	8005364 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005450:	4b0f      	ldr	r3, [pc, #60]	@ (8005490 <xQueueReceive+0x1c0>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	e780      	b.n	8005364 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005464:	f000 f928 	bl	80056b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005468:	f000 fc04 	bl	8005c74 <xTaskResumeAll>
 800546c:	e77a      	b.n	8005364 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800546e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005470:	f000 f922 	bl	80056b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005474:	f000 fbfe 	bl	8005c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547a:	f000 f96f 	bl	800575c <prvIsQueueEmpty>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f43f af6f 	beq.w	8005364 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005486:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005488:	4618      	mov	r0, r3
 800548a:	3730      	adds	r7, #48	@ 0x30
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	@ 0x38
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	623b      	str	r3, [r7, #32]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <xQueueReceiveFromISR+0x3c>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <xQueueReceiveFromISR+0x40>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <xQueueReceiveFromISR+0x42>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	61fb      	str	r3, [r7, #28]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f2:	f001 fa25 	bl	8006940 <vPortValidateInterruptPriority>
	__asm volatile
 80054f6:	f3ef 8211 	mrs	r2, BASEPRI
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	61ba      	str	r2, [r7, #24]
 800550c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800550e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02f      	beq.n	800557e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800552c:	f000 f89e 	bl	800566c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	1e5a      	subs	r2, r3, #1
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005538:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d112      	bne.n	8005568 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	3310      	adds	r3, #16
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fd70 	bl	8006034 <xTaskRemoveFromEventList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e007      	b.n	8005578 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800556c:	3301      	adds	r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	b25a      	sxtb	r2, r3
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005578:	2301      	movs	r3, #1
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
 800557c:	e001      	b.n	8005582 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f383 8811 	msr	BASEPRI, r3
}
 800558c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800558e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005590:	4618      	mov	r0, r3
 8005592:	3738      	adds	r7, #56	@ 0x38
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d14d      	bne.n	800565a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 ff1a 	bl	80063fc <xTaskPriorityDisinherit>
 80055c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	e043      	b.n	800565a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d119      	bne.n	800560c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6858      	ldr	r0, [r3, #4]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	461a      	mov	r2, r3
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	f002 fc81 	bl	8007eea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d32b      	bcc.n	800565a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e026      	b.n	800565a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68d8      	ldr	r0, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	461a      	mov	r2, r3
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	f002 fc67 	bl	8007eea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	425b      	negs	r3, r3
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d207      	bcs.n	8005648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	425b      	negs	r3, r3
 8005642:	441a      	add	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d105      	bne.n	800565a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3b01      	subs	r3, #1
 8005658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005662:	697b      	ldr	r3, [r7, #20]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d018      	beq.n	80056b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	441a      	add	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	429a      	cmp	r2, r3
 8005696:	d303      	bcc.n	80056a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68d9      	ldr	r1, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	461a      	mov	r2, r3
 80056aa:	6838      	ldr	r0, [r7, #0]
 80056ac:	f002 fc1d 	bl	8007eea <memcpy>
	}
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056c0:	f001 f87c 	bl	80067bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056cc:	e011      	b.n	80056f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d012      	beq.n	80056fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3324      	adds	r3, #36	@ 0x24
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fcaa 	bl	8006034 <xTaskRemoveFromEventList>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056e6:	f000 fd83 	bl	80061f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	dce9      	bgt.n	80056ce <prvUnlockQueue+0x16>
 80056fa:	e000      	b.n	80056fe <prvUnlockQueue+0x46>
					break;
 80056fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	22ff      	movs	r2, #255	@ 0xff
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005706:	f001 f889 	bl	800681c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800570a:	f001 f857 	bl	80067bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005716:	e011      	b.n	800573c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d012      	beq.n	8005746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3310      	adds	r3, #16
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fc85 	bl	8006034 <xTaskRemoveFromEventList>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005730:	f000 fd5e 	bl	80061f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	3b01      	subs	r3, #1
 8005738:	b2db      	uxtb	r3, r3
 800573a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800573c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005740:	2b00      	cmp	r3, #0
 8005742:	dce9      	bgt.n	8005718 <prvUnlockQueue+0x60>
 8005744:	e000      	b.n	8005748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	22ff      	movs	r2, #255	@ 0xff
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005750:	f001 f864 	bl	800681c <vPortExitCritical>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005764:	f001 f82a 	bl	80067bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e001      	b.n	800577a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800577a:	f001 f84f 	bl	800681c <vPortExitCritical>

	return xReturn;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005790:	f001 f814 	bl	80067bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	429a      	cmp	r2, r3
 800579e:	d102      	bne.n	80057a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e001      	b.n	80057aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057aa:	f001 f837 	bl	800681c <vPortExitCritical>

	return xReturn;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	623b      	str	r3, [r7, #32]
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <xTaskCreateStatic+0x4a>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	61fb      	str	r3, [r7, #28]
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	e7fd      	b.n	80057fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005802:	23a0      	movs	r3, #160	@ 0xa0
 8005804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2ba0      	cmp	r3, #160	@ 0xa0
 800580a:	d00b      	beq.n	8005824 <xTaskCreateStatic+0x6c>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	61bb      	str	r3, [r7, #24]
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005824:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <xTaskCreateStatic+0xb2>
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01b      	beq.n	800586a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	2202      	movs	r2, #2
 8005840:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005844:	2300      	movs	r3, #0
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f851 	bl	8005904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005864:	f000 f8ee 	bl	8005a44 <prvAddNewTaskToReadyList>
 8005868:	e001      	b.n	800586e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800586e:	697b      	ldr	r3, [r7, #20]
	}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	@ 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	@ 0x30
 800587c:	af04      	add	r7, sp, #16
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f897 	bl	80069c0 <pvPortMalloc>
 8005892:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00e      	beq.n	80058b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800589a:	20a0      	movs	r0, #160	@ 0xa0
 800589c:	f001 f890 	bl	80069c0 <pvPortMalloc>
 80058a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80058ae:	e005      	b.n	80058bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058b0:	6978      	ldr	r0, [r7, #20]
 80058b2:	f001 f953 	bl	8006b5c <vPortFree>
 80058b6:	e001      	b.n	80058bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d017      	beq.n	80058f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9302      	str	r3, [sp, #8]
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f80f 	bl	8005904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e6:	69f8      	ldr	r0, [r7, #28]
 80058e8:	f000 f8ac 	bl	8005a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058ec:	2301      	movs	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e002      	b.n	80058f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
 80058f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058f8:	69bb      	ldr	r3, [r7, #24]
	}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800591c:	3b01      	subs	r3, #1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	617b      	str	r3, [r7, #20]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01f      	beq.n	8005994 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e012      	b.n	8005980 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	3334      	adds	r3, #52	@ 0x34
 800596a:	460a      	mov	r2, r1
 800596c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d9e9      	bls.n	800595a <prvInitialiseNewTask+0x56>
 8005986:	e000      	b.n	800598a <prvInitialiseNewTask+0x86>
			{
				break;
 8005988:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005992:	e003      	b.n	800599c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d901      	bls.n	80059a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059a2:	2306      	movs	r3, #6
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff f838 	bl	8004a32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	3318      	adds	r3, #24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff f833 	bl	8004a32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	f1c3 0207 	rsb	r2, r3, #7
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	334c      	adds	r3, #76	@ 0x4c
 80059f6:	224c      	movs	r2, #76	@ 0x4c
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f002 f991 	bl	8007d22 <memset>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <prvInitialiseNewTask+0x134>)
 8005a04:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	4a0c      	ldr	r2, [pc, #48]	@ (8005a3c <prvInitialiseNewTask+0x138>)
 8005a0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a40 <prvInitialiseNewTask+0x13c>)
 8005a10:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	69b8      	ldr	r0, [r7, #24]
 8005a18:	f000 fdde 	bl	80065d8 <pxPortInitialiseStack>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2e:	bf00      	nop
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20002f04 	.word	0x20002f04
 8005a3c:	20002f6c 	.word	0x20002f6c
 8005a40:	20002fd4 	.word	0x20002fd4

08005a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a4c:	f000 feb6 	bl	80067bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a50:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <prvAddNewTaskToReadyList+0xb8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	4a29      	ldr	r2, [pc, #164]	@ (8005afc <prvAddNewTaskToReadyList+0xb8>)
 8005a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a5a:	4b29      	ldr	r3, [pc, #164]	@ (8005b00 <prvAddNewTaskToReadyList+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a62:	4a27      	ldr	r2, [pc, #156]	@ (8005b00 <prvAddNewTaskToReadyList+0xbc>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a68:	4b24      	ldr	r3, [pc, #144]	@ (8005afc <prvAddNewTaskToReadyList+0xb8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d110      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a70:	f000 fbe2 	bl	8006238 <prvInitialiseTaskLists>
 8005a74:	e00d      	b.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a76:	4b23      	ldr	r3, [pc, #140]	@ (8005b04 <prvAddNewTaskToReadyList+0xc0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a7e:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <prvAddNewTaskToReadyList+0xbc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d802      	bhi.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <prvAddNewTaskToReadyList+0xbc>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a92:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	4b19      	ldr	r3, [pc, #100]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4a15      	ldr	r2, [pc, #84]	@ (8005b10 <prvAddNewTaskToReadyList+0xcc>)
 8005abc:	441a      	add	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7fe ffc0 	bl	8004a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aca:	f000 fea7 	bl	800681c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <prvAddNewTaskToReadyList+0xc0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <prvAddNewTaskToReadyList+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d207      	bcs.n	8005af4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200006b0 	.word	0x200006b0
 8005b00:	200005b0 	.word	0x200005b0
 8005b04:	200006bc 	.word	0x200006bc
 8005b08:	200006cc 	.word	0x200006cc
 8005b0c:	200006b8 	.word	0x200006b8
 8005b10:	200005b4 	.word	0x200005b4
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b2a:	4b14      	ldr	r3, [pc, #80]	@ (8005b7c <vTaskDelay+0x64>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <vTaskDelay+0x32>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60bb      	str	r3, [r7, #8]
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	e7fd      	b.n	8005b46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b4a:	f000 f885 	bl	8005c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fcdb 	bl	800650c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b56:	f000 f88d 	bl	8005c74 <xTaskResumeAll>
 8005b5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <vTaskDelay+0x68>)
 8005b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200006d8 	.word	0x200006d8
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b92:	463a      	mov	r2, r7
 8005b94:	1d39      	adds	r1, r7, #4
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fb faaa 	bl	80010f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	9202      	str	r2, [sp, #8]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	2300      	movs	r3, #0
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	460a      	mov	r2, r1
 8005bb2:	4921      	ldr	r1, [pc, #132]	@ (8005c38 <vTaskStartScheduler+0xb4>)
 8005bb4:	4821      	ldr	r0, [pc, #132]	@ (8005c3c <vTaskStartScheduler+0xb8>)
 8005bb6:	f7ff fdff 	bl	80057b8 <xTaskCreateStatic>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4a20      	ldr	r2, [pc, #128]	@ (8005c40 <vTaskStartScheduler+0xbc>)
 8005bbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c40 <vTaskStartScheduler+0xbc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e001      	b.n	8005bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d11b      	bne.n	8005c10 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	613b      	str	r3, [r7, #16]
}
 8005bea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bec:	4b15      	ldr	r3, [pc, #84]	@ (8005c44 <vTaskStartScheduler+0xc0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	334c      	adds	r3, #76	@ 0x4c
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <vTaskStartScheduler+0xc4>)
 8005bf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <vTaskStartScheduler+0xc8>)
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <vTaskStartScheduler+0xcc>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c04:	4b13      	ldr	r3, [pc, #76]	@ (8005c54 <vTaskStartScheduler+0xd0>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c0a:	f000 fd65 	bl	80066d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c0e:	e00f      	b.n	8005c30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d10b      	bne.n	8005c30 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60fb      	str	r3, [r7, #12]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <vTaskStartScheduler+0xa8>
}
 8005c30:	bf00      	nop
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0800b67c 	.word	0x0800b67c
 8005c3c:	08006209 	.word	0x08006209
 8005c40:	200006d4 	.word	0x200006d4
 8005c44:	200005b0 	.word	0x200005b0
 8005c48:	20000020 	.word	0x20000020
 8005c4c:	200006d0 	.word	0x200006d0
 8005c50:	200006bc 	.word	0x200006bc
 8005c54:	200006b4 	.word	0x200006b4

08005c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c5c:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <vTaskSuspendAll+0x18>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a03      	ldr	r2, [pc, #12]	@ (8005c70 <vTaskSuspendAll+0x18>)
 8005c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	200006d8 	.word	0x200006d8

08005c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c82:	4b42      	ldr	r3, [pc, #264]	@ (8005d8c <xTaskResumeAll+0x118>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	603b      	str	r3, [r7, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ca2:	f000 fd8b 	bl	80067bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ca6:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <xTaskResumeAll+0x118>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a37      	ldr	r2, [pc, #220]	@ (8005d8c <xTaskResumeAll+0x118>)
 8005cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb0:	4b36      	ldr	r3, [pc, #216]	@ (8005d8c <xTaskResumeAll+0x118>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d161      	bne.n	8005d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cb8:	4b35      	ldr	r3, [pc, #212]	@ (8005d90 <xTaskResumeAll+0x11c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d05d      	beq.n	8005d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc0:	e02e      	b.n	8005d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc2:	4b34      	ldr	r3, [pc, #208]	@ (8005d94 <xTaskResumeAll+0x120>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3318      	adds	r3, #24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe ff16 	bl	8004b00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe ff11 	bl	8004b00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d98 <xTaskResumeAll+0x124>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	4a2a      	ldr	r2, [pc, #168]	@ (8005d98 <xTaskResumeAll+0x124>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4a27      	ldr	r2, [pc, #156]	@ (8005d9c <xTaskResumeAll+0x128>)
 8005cfe:	441a      	add	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fe9f 	bl	8004a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <xTaskResumeAll+0x12c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d1a:	4b22      	ldr	r3, [pc, #136]	@ (8005da4 <xTaskResumeAll+0x130>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <xTaskResumeAll+0x120>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1cc      	bne.n	8005cc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d2e:	f000 fb27 	bl	8006380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d32:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <xTaskResumeAll+0x134>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d3e:	f000 f837 	bl	8005db0 <xTaskIncrementTick>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d48:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <xTaskResumeAll+0x130>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f1      	bne.n	8005d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <xTaskResumeAll+0x134>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d60:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <xTaskResumeAll+0x130>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <xTaskResumeAll+0x138>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d7c:	f000 fd4e 	bl	800681c <vPortExitCritical>

	return xAlreadyYielded;
 8005d80:	68bb      	ldr	r3, [r7, #8]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200006d8 	.word	0x200006d8
 8005d90:	200006b0 	.word	0x200006b0
 8005d94:	20000670 	.word	0x20000670
 8005d98:	200006b8 	.word	0x200006b8
 8005d9c:	200005b4 	.word	0x200005b4
 8005da0:	200005b0 	.word	0x200005b0
 8005da4:	200006c4 	.word	0x200006c4
 8005da8:	200006c0 	.word	0x200006c0
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dba:	4b4f      	ldr	r3, [pc, #316]	@ (8005ef8 <xTaskIncrementTick+0x148>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 808f 	bne.w	8005ee2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8005efc <xTaskIncrementTick+0x14c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8005efc <xTaskIncrementTick+0x14c>)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d121      	bne.n	8005e1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dd8:	4b49      	ldr	r3, [pc, #292]	@ (8005f00 <xTaskIncrementTick+0x150>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	603b      	str	r3, [r7, #0]
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	e7fd      	b.n	8005df6 <xTaskIncrementTick+0x46>
 8005dfa:	4b41      	ldr	r3, [pc, #260]	@ (8005f00 <xTaskIncrementTick+0x150>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4b40      	ldr	r3, [pc, #256]	@ (8005f04 <xTaskIncrementTick+0x154>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3e      	ldr	r2, [pc, #248]	@ (8005f00 <xTaskIncrementTick+0x150>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4a3e      	ldr	r2, [pc, #248]	@ (8005f04 <xTaskIncrementTick+0x154>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f08 <xTaskIncrementTick+0x158>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a3c      	ldr	r2, [pc, #240]	@ (8005f08 <xTaskIncrementTick+0x158>)
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	f000 fab2 	bl	8006380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f0c <xTaskIncrementTick+0x15c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d348      	bcc.n	8005eb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e26:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <xTaskIncrementTick+0x150>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e30:	4b36      	ldr	r3, [pc, #216]	@ (8005f0c <xTaskIncrementTick+0x15c>)
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	601a      	str	r2, [r3, #0]
					break;
 8005e38:	e03e      	b.n	8005eb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3a:	4b31      	ldr	r3, [pc, #196]	@ (8005f00 <xTaskIncrementTick+0x150>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d203      	bcs.n	8005e5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e52:	4a2e      	ldr	r2, [pc, #184]	@ (8005f0c <xTaskIncrementTick+0x15c>)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e58:	e02e      	b.n	8005eb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fe4e 	bl	8004b00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fe45 	bl	8004b00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b24      	ldr	r3, [pc, #144]	@ (8005f10 <xTaskIncrementTick+0x160>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a22      	ldr	r2, [pc, #136]	@ (8005f10 <xTaskIncrementTick+0x160>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a1f      	ldr	r2, [pc, #124]	@ (8005f14 <xTaskIncrementTick+0x164>)
 8005e96:	441a      	add	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fdd3 	bl	8004a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f18 <xTaskIncrementTick+0x168>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d3b9      	bcc.n	8005e26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	e7b6      	b.n	8005e26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eb8:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <xTaskIncrementTick+0x168>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4915      	ldr	r1, [pc, #84]	@ (8005f14 <xTaskIncrementTick+0x164>)
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d901      	bls.n	8005ed4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ed4:	4b11      	ldr	r3, [pc, #68]	@ (8005f1c <xTaskIncrementTick+0x16c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e004      	b.n	8005eec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <xTaskIncrementTick+0x170>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f20 <xTaskIncrementTick+0x170>)
 8005eea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eec:	697b      	ldr	r3, [r7, #20]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200006d8 	.word	0x200006d8
 8005efc:	200006b4 	.word	0x200006b4
 8005f00:	20000668 	.word	0x20000668
 8005f04:	2000066c 	.word	0x2000066c
 8005f08:	200006c8 	.word	0x200006c8
 8005f0c:	200006d0 	.word	0x200006d0
 8005f10:	200006b8 	.word	0x200006b8
 8005f14:	200005b4 	.word	0x200005b4
 8005f18:	200005b0 	.word	0x200005b0
 8005f1c:	200006c4 	.word	0x200006c4
 8005f20:	200006c0 	.word	0x200006c0

08005f24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f2a:	4b29      	ldr	r3, [pc, #164]	@ (8005fd0 <vTaskSwitchContext+0xac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f32:	4b28      	ldr	r3, [pc, #160]	@ (8005fd4 <vTaskSwitchContext+0xb0>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f38:	e045      	b.n	8005fc6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005f3a:	4b26      	ldr	r3, [pc, #152]	@ (8005fd4 <vTaskSwitchContext+0xb0>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f40:	4b25      	ldr	r3, [pc, #148]	@ (8005fd8 <vTaskSwitchContext+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	fab3 f383 	clz	r3, r3
 8005f4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	f1c3 031f 	rsb	r3, r3, #31
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	4921      	ldr	r1, [pc, #132]	@ (8005fdc <vTaskSwitchContext+0xb8>)
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	607b      	str	r3, [r7, #4]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <vTaskSwitchContext+0x5a>
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4a13      	ldr	r2, [pc, #76]	@ (8005fdc <vTaskSwitchContext+0xb8>)
 8005f8e:	4413      	add	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d104      	bne.n	8005fb2 <vTaskSwitchContext+0x8e>
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a09      	ldr	r2, [pc, #36]	@ (8005fe0 <vTaskSwitchContext+0xbc>)
 8005fba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <vTaskSwitchContext+0xbc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	334c      	adds	r3, #76	@ 0x4c
 8005fc2:	4a08      	ldr	r2, [pc, #32]	@ (8005fe4 <vTaskSwitchContext+0xc0>)
 8005fc4:	6013      	str	r3, [r2, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	200006d8 	.word	0x200006d8
 8005fd4:	200006c4 	.word	0x200006c4
 8005fd8:	200006b8 	.word	0x200006b8
 8005fdc:	200005b4 	.word	0x200005b4
 8005fe0:	200005b0 	.word	0x200005b0
 8005fe4:	20000020 	.word	0x20000020

08005fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	60fb      	str	r3, [r7, #12]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006010:	4b07      	ldr	r3, [pc, #28]	@ (8006030 <vTaskPlaceOnEventList+0x48>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3318      	adds	r3, #24
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fe fd39 	bl	8004a90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800601e:	2101      	movs	r1, #1
 8006020:	6838      	ldr	r0, [r7, #0]
 8006022:	f000 fa73 	bl	800650c <prvAddCurrentTaskToDelayedList>
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	200005b0 	.word	0x200005b0

08006034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	60fb      	str	r3, [r7, #12]
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	e7fd      	b.n	800605e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3318      	adds	r3, #24
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fd4a 	bl	8004b00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606c:	4b1d      	ldr	r3, [pc, #116]	@ (80060e4 <xTaskRemoveFromEventList+0xb0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11c      	bne.n	80060ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fd41 	bl	8004b00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006082:	2201      	movs	r2, #1
 8006084:	409a      	lsls	r2, r3
 8006086:	4b18      	ldr	r3, [pc, #96]	@ (80060e8 <xTaskRemoveFromEventList+0xb4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4313      	orrs	r3, r2
 800608c:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <xTaskRemoveFromEventList+0xb4>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4a13      	ldr	r2, [pc, #76]	@ (80060ec <xTaskRemoveFromEventList+0xb8>)
 800609e:	441a      	add	r2, r3
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fccf 	bl	8004a4a <vListInsertEnd>
 80060ac:	e005      	b.n	80060ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3318      	adds	r3, #24
 80060b2:	4619      	mov	r1, r3
 80060b4:	480e      	ldr	r0, [pc, #56]	@ (80060f0 <xTaskRemoveFromEventList+0xbc>)
 80060b6:	f7fe fcc8 	bl	8004a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <xTaskRemoveFromEventList+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d905      	bls.n	80060d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060cc:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <xTaskRemoveFromEventList+0xc4>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e001      	b.n	80060d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060d8:	697b      	ldr	r3, [r7, #20]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	200006d8 	.word	0x200006d8
 80060e8:	200006b8 	.word	0x200006b8
 80060ec:	200005b4 	.word	0x200005b4
 80060f0:	20000670 	.word	0x20000670
 80060f4:	200005b0 	.word	0x200005b0
 80060f8:	200006c4 	.word	0x200006c4

080060fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006104:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <vTaskInternalSetTimeOutState+0x24>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <vTaskInternalSetTimeOutState+0x28>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	605a      	str	r2, [r3, #4]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	200006c8 	.word	0x200006c8
 8006124:	200006b4 	.word	0x200006b4

08006128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	613b      	str	r3, [r7, #16]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800616e:	f000 fb25 	bl	80067bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006172:	4b1d      	ldr	r3, [pc, #116]	@ (80061e8 <xTaskCheckForTimeOut+0xc0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d102      	bne.n	8006192 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	e023      	b.n	80061da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b15      	ldr	r3, [pc, #84]	@ (80061ec <xTaskCheckForTimeOut+0xc4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d007      	beq.n	80061ae <xTaskCheckForTimeOut+0x86>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d302      	bcc.n	80061ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	e015      	b.n	80061da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d20b      	bcs.n	80061d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff99 	bl	80060fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	e004      	b.n	80061da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061d6:	2301      	movs	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061da:	f000 fb1f 	bl	800681c <vPortExitCritical>

	return xReturn;
 80061de:	69fb      	ldr	r3, [r7, #28]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200006b4 	.word	0x200006b4
 80061ec:	200006c8 	.word	0x200006c8

080061f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061f4:	4b03      	ldr	r3, [pc, #12]	@ (8006204 <vTaskMissedYield+0x14>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	200006c4 	.word	0x200006c4

08006208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006210:	f000 f852 	bl	80062b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006214:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <prvIdleTask+0x28>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d9f9      	bls.n	8006210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800621c:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <prvIdleTask+0x2c>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800622c:	e7f0      	b.n	8006210 <prvIdleTask+0x8>
 800622e:	bf00      	nop
 8006230:	200005b4 	.word	0x200005b4
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800623e:	2300      	movs	r3, #0
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	e00c      	b.n	800625e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4a12      	ldr	r2, [pc, #72]	@ (8006298 <prvInitialiseTaskLists+0x60>)
 8006250:	4413      	add	r3, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fbce 	bl	80049f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3301      	adds	r3, #1
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b06      	cmp	r3, #6
 8006262:	d9ef      	bls.n	8006244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006264:	480d      	ldr	r0, [pc, #52]	@ (800629c <prvInitialiseTaskLists+0x64>)
 8006266:	f7fe fbc5 	bl	80049f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800626a:	480d      	ldr	r0, [pc, #52]	@ (80062a0 <prvInitialiseTaskLists+0x68>)
 800626c:	f7fe fbc2 	bl	80049f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006270:	480c      	ldr	r0, [pc, #48]	@ (80062a4 <prvInitialiseTaskLists+0x6c>)
 8006272:	f7fe fbbf 	bl	80049f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006276:	480c      	ldr	r0, [pc, #48]	@ (80062a8 <prvInitialiseTaskLists+0x70>)
 8006278:	f7fe fbbc 	bl	80049f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800627c:	480b      	ldr	r0, [pc, #44]	@ (80062ac <prvInitialiseTaskLists+0x74>)
 800627e:	f7fe fbb9 	bl	80049f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006282:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <prvInitialiseTaskLists+0x78>)
 8006284:	4a05      	ldr	r2, [pc, #20]	@ (800629c <prvInitialiseTaskLists+0x64>)
 8006286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <prvInitialiseTaskLists+0x7c>)
 800628a:	4a05      	ldr	r2, [pc, #20]	@ (80062a0 <prvInitialiseTaskLists+0x68>)
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	200005b4 	.word	0x200005b4
 800629c:	20000640 	.word	0x20000640
 80062a0:	20000654 	.word	0x20000654
 80062a4:	20000670 	.word	0x20000670
 80062a8:	20000684 	.word	0x20000684
 80062ac:	2000069c 	.word	0x2000069c
 80062b0:	20000668 	.word	0x20000668
 80062b4:	2000066c 	.word	0x2000066c

080062b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062be:	e019      	b.n	80062f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062c0:	f000 fa7c 	bl	80067bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c4:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <prvCheckTasksWaitingTermination+0x50>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fc15 	bl	8004b00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <prvCheckTasksWaitingTermination+0x54>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3b01      	subs	r3, #1
 80062dc:	4a0b      	ldr	r2, [pc, #44]	@ (800630c <prvCheckTasksWaitingTermination+0x54>)
 80062de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <prvCheckTasksWaitingTermination+0x58>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <prvCheckTasksWaitingTermination+0x58>)
 80062e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062ea:	f000 fa97 	bl	800681c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f810 	bl	8006314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <prvCheckTasksWaitingTermination+0x58>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e1      	bne.n	80062c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000684 	.word	0x20000684
 800630c:	200006b0 	.word	0x200006b0
 8006310:	20000698 	.word	0x20000698

08006314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	334c      	adds	r3, #76	@ 0x4c
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fd1b 	bl	8007d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800632c:	2b00      	cmp	r3, #0
 800632e:	d108      	bne.n	8006342 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fc11 	bl	8006b5c <vPortFree>
				vPortFree( pxTCB );
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fc0e 	bl	8006b5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006340:	e019      	b.n	8006376 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006348:	2b01      	cmp	r3, #1
 800634a:	d103      	bne.n	8006354 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fc05 	bl	8006b5c <vPortFree>
	}
 8006352:	e010      	b.n	8006376 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800635a:	2b02      	cmp	r3, #2
 800635c:	d00b      	beq.n	8006376 <prvDeleteTCB+0x62>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <prvDeleteTCB+0x5e>
	}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006386:	4b0c      	ldr	r3, [pc, #48]	@ (80063b8 <prvResetNextTaskUnblockTime+0x38>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <prvResetNextTaskUnblockTime+0x3c>)
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006398:	e008      	b.n	80063ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639a:	4b07      	ldr	r3, [pc, #28]	@ (80063b8 <prvResetNextTaskUnblockTime+0x38>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a04      	ldr	r2, [pc, #16]	@ (80063bc <prvResetNextTaskUnblockTime+0x3c>)
 80063aa:	6013      	str	r3, [r2, #0]
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000668 	.word	0x20000668
 80063bc:	200006d0 	.word	0x200006d0

080063c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063c6:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <xTaskGetSchedulerState+0x34>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ce:	2301      	movs	r3, #1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	e008      	b.n	80063e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d4:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <xTaskGetSchedulerState+0x38>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063dc:	2302      	movs	r3, #2
 80063de:	607b      	str	r3, [r7, #4]
 80063e0:	e001      	b.n	80063e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063e2:	2300      	movs	r3, #0
 80063e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063e6:	687b      	ldr	r3, [r7, #4]
	}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200006bc 	.word	0x200006bc
 80063f8:	200006d8 	.word	0x200006d8

080063fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d070      	beq.n	80064f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006412:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <xTaskPriorityDisinherit+0x104>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d00b      	beq.n	8006434 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	e7fd      	b.n	8006430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10b      	bne.n	8006454 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60bb      	str	r3, [r7, #8]
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006466:	429a      	cmp	r2, r3
 8006468:	d044      	beq.n	80064f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646e:	2b00      	cmp	r3, #0
 8006470:	d140      	bne.n	80064f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fb42 	bl	8004b00 <uxListRemove>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d115      	bne.n	80064ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006486:	491f      	ldr	r1, [pc, #124]	@ (8006504 <xTaskPriorityDisinherit+0x108>)
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xTaskPriorityDisinherit+0xb2>
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	2201      	movs	r2, #1
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43da      	mvns	r2, r3
 80064a4:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <xTaskPriorityDisinherit+0x10c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4013      	ands	r3, r2
 80064aa:	4a17      	ldr	r2, [pc, #92]	@ (8006508 <xTaskPriorityDisinherit+0x10c>)
 80064ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	f1c3 0207 	rsb	r2, r3, #7
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	2201      	movs	r2, #1
 80064c8:	409a      	lsls	r2, r3
 80064ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <xTaskPriorityDisinherit+0x10c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006508 <xTaskPriorityDisinherit+0x10c>)
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4a08      	ldr	r2, [pc, #32]	@ (8006504 <xTaskPriorityDisinherit+0x108>)
 80064e2:	441a      	add	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7fe faad 	bl	8004a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064f4:	697b      	ldr	r3, [r7, #20]
	}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200005b0 	.word	0x200005b0
 8006504:	200005b4 	.word	0x200005b4
 8006508:	200006b8 	.word	0x200006b8

0800650c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006516:	4b29      	ldr	r3, [pc, #164]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800651c:	4b28      	ldr	r3, [pc, #160]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3304      	adds	r3, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe faec 	bl	8004b00 <uxListRemove>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800652e:	4b24      	ldr	r3, [pc, #144]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	4b21      	ldr	r3, [pc, #132]	@ (80065c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4013      	ands	r3, r2
 8006542:	4a20      	ldr	r2, [pc, #128]	@ (80065c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006544:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d10a      	bne.n	8006564 <prvAddCurrentTaskToDelayedList+0x58>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006554:	4b1a      	ldr	r3, [pc, #104]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	481a      	ldr	r0, [pc, #104]	@ (80065c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800655e:	f7fe fa74 	bl	8004a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006562:	e026      	b.n	80065b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800656c:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	429a      	cmp	r2, r3
 800657a:	d209      	bcs.n	8006590 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657c:	4b13      	ldr	r3, [pc, #76]	@ (80065cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3304      	adds	r3, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7fe fa81 	bl	8004a90 <vListInsert>
}
 800658e:	e010      	b.n	80065b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006590:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7fe fa77 	bl	8004a90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d202      	bcs.n	80065b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065ac:	4a09      	ldr	r2, [pc, #36]	@ (80065d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6013      	str	r3, [r2, #0]
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200006b4 	.word	0x200006b4
 80065c0:	200005b0 	.word	0x200005b0
 80065c4:	200006b8 	.word	0x200006b8
 80065c8:	2000069c 	.word	0x2000069c
 80065cc:	2000066c 	.word	0x2000066c
 80065d0:	20000668 	.word	0x20000668
 80065d4:	200006d0 	.word	0x200006d0

080065d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3b04      	subs	r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006608:	4a08      	ldr	r2, [pc, #32]	@ (800662c <pxPortInitialiseStack+0x54>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b14      	subs	r3, #20
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b20      	subs	r3, #32
 800661e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006620:	68fb      	ldr	r3, [r7, #12]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	08006631 	.word	0x08006631

08006630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800663a:	4b12      	ldr	r3, [pc, #72]	@ (8006684 <prvTaskExitError+0x54>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d00b      	beq.n	800665c <prvTaskExitError+0x2c>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <prvTaskExitError+0x28>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60bb      	str	r3, [r7, #8]
}
 800666e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006670:	bf00      	nop
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0fc      	beq.n	8006672 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr
 8006684:	20000010 	.word	0x20000010
	...

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80066ae:	4770      	bx	lr

080066b0 <pxCurrentTCBConst2>:
 80066b0:	200005b0 	.word	0x200005b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80066b8:	4806      	ldr	r0, [pc, #24]	@ (80066d4 <prvPortStartFirstTask+0x1c>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	b662      	cpsie	i
 80066c4:	b661      	cpsie	f
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	df00      	svc	0
 80066d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066d2:	bf00      	nop
 80066d4:	e000ed08 	.word	0xe000ed08

080066d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066de:	4b32      	ldr	r3, [pc, #200]	@ (80067a8 <xPortStartScheduler+0xd0>)
 80066e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22ff      	movs	r2, #255	@ 0xff
 80066ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4b2a      	ldr	r3, [pc, #168]	@ (80067ac <xPortStartScheduler+0xd4>)
 8006704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006706:	4b2a      	ldr	r3, [pc, #168]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006708:	2207      	movs	r2, #7
 800670a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800670c:	e009      	b.n	8006722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800670e:	4b28      	ldr	r3, [pc, #160]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	4a26      	ldr	r2, [pc, #152]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b80      	cmp	r3, #128	@ 0x80
 800672c:	d0ef      	beq.n	800670e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800672e:	4b20      	ldr	r3, [pc, #128]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f1c3 0307 	rsb	r3, r3, #7
 8006736:	2b04      	cmp	r3, #4
 8006738:	d00b      	beq.n	8006752 <xPortStartScheduler+0x7a>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	60bb      	str	r3, [r7, #8]
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	e7fd      	b.n	800674e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	4a15      	ldr	r2, [pc, #84]	@ (80067b0 <xPortStartScheduler+0xd8>)
 800675a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800675c:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <xPortStartScheduler+0xd8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006764:	4a12      	ldr	r2, [pc, #72]	@ (80067b0 <xPortStartScheduler+0xd8>)
 8006766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <xPortStartScheduler+0xdc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0f      	ldr	r2, [pc, #60]	@ (80067b4 <xPortStartScheduler+0xdc>)
 8006776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800677a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800677c:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <xPortStartScheduler+0xdc>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0c      	ldr	r2, [pc, #48]	@ (80067b4 <xPortStartScheduler+0xdc>)
 8006782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006788:	f000 f8b8 	bl	80068fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <xPortStartScheduler+0xe0>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006792:	f7ff ff91 	bl	80066b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006796:	f7ff fbc5 	bl	8005f24 <vTaskSwitchContext>
	prvTaskExitError();
 800679a:	f7ff ff49 	bl	8006630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000e400 	.word	0xe000e400
 80067ac:	200006dc 	.word	0x200006dc
 80067b0:	200006e0 	.word	0x200006e0
 80067b4:	e000ed20 	.word	0xe000ed20
 80067b8:	20000010 	.word	0x20000010

080067bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006814 <vPortEnterCritical+0x58>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006814 <vPortEnterCritical+0x58>)
 80067de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <vPortEnterCritical+0x58>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d110      	bne.n	800680a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <vPortEnterCritical+0x5c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <vPortEnterCritical+0x4e>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	603b      	str	r3, [r7, #0]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <vPortEnterCritical+0x4a>
	}
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	20000010 	.word	0x20000010
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <vPortExitCritical+0x50>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <vPortExitCritical+0x26>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	607b      	str	r3, [r7, #4]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006842:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <vPortExitCritical+0x50>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3b01      	subs	r3, #1
 8006848:	4a08      	ldr	r2, [pc, #32]	@ (800686c <vPortExitCritical+0x50>)
 800684a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800684c:	4b07      	ldr	r3, [pc, #28]	@ (800686c <vPortExitCritical+0x50>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <vPortExitCritical+0x44>
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000010 	.word	0x20000010

08006870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006870:	f3ef 8009 	mrs	r0, PSP
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <pxCurrentTCBConst>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006880:	6010      	str	r0, [r2, #0]
 8006882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006886:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800688a:	f380 8811 	msr	BASEPRI, r0
 800688e:	f7ff fb49 	bl	8005f24 <vTaskSwitchContext>
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8811 	msr	BASEPRI, r0
 800689a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	6808      	ldr	r0, [r1, #0]
 80068a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068a6:	f380 8809 	msr	PSP, r0
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	4770      	bx	lr

080068b0 <pxCurrentTCBConst>:
 80068b0:	200005b0 	.word	0x200005b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f7ff fa6d 	bl	8005db0 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <SysTick_Handler+0x40>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
}
 80068ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <vPortSetupTimerInterrupt+0x30>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006906:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <vPortSetupTimerInterrupt+0x38>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <vPortSetupTimerInterrupt+0x3c>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	4a08      	ldr	r2, [pc, #32]	@ (800693c <vPortSetupTimerInterrupt+0x40>)
 800691a:	3b01      	subs	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691e:	4b03      	ldr	r3, [pc, #12]	@ (800692c <vPortSetupTimerInterrupt+0x30>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	e000e010 	.word	0xe000e010
 8006930:	e000e018 	.word	0xe000e018
 8006934:	20000004 	.word	0x20000004
 8006938:	10624dd3 	.word	0x10624dd3
 800693c:	e000e014 	.word	0xe000e014

08006940 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006946:	f3ef 8305 	mrs	r3, IPSR
 800694a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b0f      	cmp	r3, #15
 8006950:	d915      	bls.n	800697e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006952:	4a17      	ldr	r2, [pc, #92]	@ (80069b0 <vPortValidateInterruptPriority+0x70>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800695c:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <vPortValidateInterruptPriority+0x74>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	7afa      	ldrb	r2, [r7, #11]
 8006962:	429a      	cmp	r2, r3
 8006964:	d20b      	bcs.n	800697e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	607b      	str	r3, [r7, #4]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800697e:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <vPortValidateInterruptPriority+0x78>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006986:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <vPortValidateInterruptPriority+0x7c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d90b      	bls.n	80069a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	603b      	str	r3, [r7, #0]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vPortValidateInterruptPriority+0x62>
	}
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	e000e3f0 	.word	0xe000e3f0
 80069b4:	200006dc 	.word	0x200006dc
 80069b8:	e000ed0c 	.word	0xe000ed0c
 80069bc:	200006e0 	.word	0x200006e0

080069c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	@ 0x28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069cc:	f7ff f944 	bl	8005c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b44 <pvPortMalloc+0x184>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069d8:	f000 f924 	bl	8006c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006b48 <pvPortMalloc+0x188>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 8095 	bne.w	8006b14 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01e      	beq.n	8006a2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069f0:	2208      	movs	r2, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d015      	beq.n	8006a2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	3308      	adds	r3, #8
 8006a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <pvPortMalloc+0x6e>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d06f      	beq.n	8006b14 <pvPortMalloc+0x154>
 8006a34:	4b45      	ldr	r3, [pc, #276]	@ (8006b4c <pvPortMalloc+0x18c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d86a      	bhi.n	8006b14 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a3e:	4b44      	ldr	r3, [pc, #272]	@ (8006b50 <pvPortMalloc+0x190>)
 8006a40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a42:	4b43      	ldr	r3, [pc, #268]	@ (8006b50 <pvPortMalloc+0x190>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a48:	e004      	b.n	8006a54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d903      	bls.n	8006a66 <pvPortMalloc+0xa6>
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f1      	bne.n	8006a4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a66:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <pvPortMalloc+0x184>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d051      	beq.n	8006b14 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	4413      	add	r3, r2
 8006a78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	1ad2      	subs	r2, r2, r3
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d920      	bls.n	8006ad4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <pvPortMalloc+0xfc>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	613b      	str	r3, [r7, #16]
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	e7fd      	b.n	8006ab8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	1ad2      	subs	r2, r2, r3
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f000 f90a 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b4c <pvPortMalloc+0x18c>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <pvPortMalloc+0x18c>)
 8006ae0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b4c <pvPortMalloc+0x18c>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <pvPortMalloc+0x194>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d203      	bcs.n	8006af6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aee:	4b17      	ldr	r3, [pc, #92]	@ (8006b4c <pvPortMalloc+0x18c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a18      	ldr	r2, [pc, #96]	@ (8006b54 <pvPortMalloc+0x194>)
 8006af4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <pvPortMalloc+0x188>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	@ (8006b58 <pvPortMalloc+0x198>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	4a11      	ldr	r2, [pc, #68]	@ (8006b58 <pvPortMalloc+0x198>)
 8006b12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b14:	f7ff f8ae 	bl	8005c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <pvPortMalloc+0x17a>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60fb      	str	r3, [r7, #12]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <pvPortMalloc+0x176>
	return pvReturn;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3728      	adds	r7, #40	@ 0x28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20002eec 	.word	0x20002eec
 8006b48:	20002f00 	.word	0x20002f00
 8006b4c:	20002ef0 	.word	0x20002ef0
 8006b50:	20002ee4 	.word	0x20002ee4
 8006b54:	20002ef4 	.word	0x20002ef4
 8006b58:	20002ef8 	.word	0x20002ef8

08006b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d04f      	beq.n	8006c0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b6e:	2308      	movs	r3, #8
 8006b70:	425b      	negs	r3, r3
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4b25      	ldr	r3, [pc, #148]	@ (8006c18 <vPortFree+0xbc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <vPortFree+0x46>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60fb      	str	r3, [r7, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <vPortFree+0x66>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b14      	ldr	r3, [pc, #80]	@ (8006c18 <vPortFree+0xbc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11a      	bne.n	8006c0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <vPortFree+0xbc>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006be8:	f7ff f836 	bl	8005c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c1c <vPortFree+0xc0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4a09      	ldr	r2, [pc, #36]	@ (8006c1c <vPortFree+0xc0>)
 8006bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f874 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <vPortFree+0xc4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a06      	ldr	r2, [pc, #24]	@ (8006c20 <vPortFree+0xc4>)
 8006c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c0a:	f7ff f833 	bl	8005c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20002f00 	.word	0x20002f00
 8006c1c:	20002ef0 	.word	0x20002ef0
 8006c20:	20002efc 	.word	0x20002efc

08006c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c2a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c30:	4b27      	ldr	r3, [pc, #156]	@ (8006cd0 <prvHeapInit+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd0 <prvHeapInit+0xac>)
 8006c54:	4413      	add	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd4 <prvHeapInit+0xb0>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c62:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd4 <prvHeapInit+0xb0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c70:	2208      	movs	r2, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a15      	ldr	r2, [pc, #84]	@ (8006cd8 <prvHeapInit+0xb4>)
 8006c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c86:	4b14      	ldr	r3, [pc, #80]	@ (8006cd8 <prvHeapInit+0xb4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c8e:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <prvHeapInit+0xb4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <prvHeapInit+0xb4>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <prvHeapInit+0xb8>)
 8006cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <prvHeapInit+0xbc>)
 8006cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cbc:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <prvHeapInit+0xc0>)
 8006cbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200006e4 	.word	0x200006e4
 8006cd4:	20002ee4 	.word	0x20002ee4
 8006cd8:	20002eec 	.word	0x20002eec
 8006cdc:	20002ef4 	.word	0x20002ef4
 8006ce0:	20002ef0 	.word	0x20002ef0
 8006ce4:	20002f00 	.word	0x20002f00

08006ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cf0:	4b27      	ldr	r3, [pc, #156]	@ (8006d90 <prvInsertBlockIntoFreeList+0xa8>)
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e002      	b.n	8006cfc <prvInsertBlockIntoFreeList+0x14>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d8f7      	bhi.n	8006cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d108      	bne.n	8006d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d118      	bne.n	8006d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <prvInsertBlockIntoFreeList+0xac>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d00d      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e008      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d66:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <prvInsertBlockIntoFreeList+0xac>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e003      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d002      	beq.n	8006d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	20002ee4 	.word	0x20002ee4
 8006d94:	20002eec 	.word	0x20002eec

08006d98 <__cvt>:
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9e:	461d      	mov	r5, r3
 8006da0:	bfbb      	ittet	lt
 8006da2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006da6:	461d      	movlt	r5, r3
 8006da8:	2300      	movge	r3, #0
 8006daa:	232d      	movlt	r3, #45	@ 0x2d
 8006dac:	b088      	sub	sp, #32
 8006dae:	4614      	mov	r4, r2
 8006db0:	bfb8      	it	lt
 8006db2:	4614      	movlt	r4, r2
 8006db4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006db6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006db8:	7013      	strb	r3, [r2, #0]
 8006dba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006dc0:	f023 0820 	bic.w	r8, r3, #32
 8006dc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dc8:	d005      	beq.n	8006dd6 <__cvt+0x3e>
 8006dca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dce:	d100      	bne.n	8006dd2 <__cvt+0x3a>
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e000      	b.n	8006dd8 <__cvt+0x40>
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	aa07      	add	r2, sp, #28
 8006dda:	9204      	str	r2, [sp, #16]
 8006ddc:	aa06      	add	r2, sp, #24
 8006dde:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006de2:	e9cd 3600 	strd	r3, r6, [sp]
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	f001 f919 	bl	8008020 <_dtoa_r>
 8006dee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006df2:	4607      	mov	r7, r0
 8006df4:	d119      	bne.n	8006e2a <__cvt+0x92>
 8006df6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006df8:	07db      	lsls	r3, r3, #31
 8006dfa:	d50e      	bpl.n	8006e1a <__cvt+0x82>
 8006dfc:	eb00 0906 	add.w	r9, r0, r6
 8006e00:	2200      	movs	r2, #0
 8006e02:	2300      	movs	r3, #0
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8006e0c:	b108      	cbz	r0, 8006e12 <__cvt+0x7a>
 8006e0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e12:	2230      	movs	r2, #48	@ 0x30
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	454b      	cmp	r3, r9
 8006e18:	d31e      	bcc.n	8006e58 <__cvt+0xc0>
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e20:	1bdb      	subs	r3, r3, r7
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	b008      	add	sp, #32
 8006e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e2e:	eb00 0906 	add.w	r9, r0, r6
 8006e32:	d1e5      	bne.n	8006e00 <__cvt+0x68>
 8006e34:	7803      	ldrb	r3, [r0, #0]
 8006e36:	2b30      	cmp	r3, #48	@ 0x30
 8006e38:	d10a      	bne.n	8006e50 <__cvt+0xb8>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006e46:	b918      	cbnz	r0, 8006e50 <__cvt+0xb8>
 8006e48:	f1c6 0601 	rsb	r6, r6, #1
 8006e4c:	f8ca 6000 	str.w	r6, [sl]
 8006e50:	f8da 3000 	ldr.w	r3, [sl]
 8006e54:	4499      	add	r9, r3
 8006e56:	e7d3      	b.n	8006e00 <__cvt+0x68>
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	9107      	str	r1, [sp, #28]
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e7d9      	b.n	8006e14 <__cvt+0x7c>

08006e60 <__exponent>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	2900      	cmp	r1, #0
 8006e64:	bfb6      	itet	lt
 8006e66:	232d      	movlt	r3, #45	@ 0x2d
 8006e68:	232b      	movge	r3, #43	@ 0x2b
 8006e6a:	4249      	neglt	r1, r1
 8006e6c:	2909      	cmp	r1, #9
 8006e6e:	7002      	strb	r2, [r0, #0]
 8006e70:	7043      	strb	r3, [r0, #1]
 8006e72:	dd29      	ble.n	8006ec8 <__exponent+0x68>
 8006e74:	f10d 0307 	add.w	r3, sp, #7
 8006e78:	461d      	mov	r5, r3
 8006e7a:	270a      	movs	r7, #10
 8006e7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e80:	461a      	mov	r2, r3
 8006e82:	fb07 1416 	mls	r4, r7, r6, r1
 8006e86:	3430      	adds	r4, #48	@ 0x30
 8006e88:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	2c63      	cmp	r4, #99	@ 0x63
 8006e90:	4631      	mov	r1, r6
 8006e92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e96:	dcf1      	bgt.n	8006e7c <__exponent+0x1c>
 8006e98:	3130      	adds	r1, #48	@ 0x30
 8006e9a:	1e94      	subs	r4, r2, #2
 8006e9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ea0:	4623      	mov	r3, r4
 8006ea2:	1c41      	adds	r1, r0, #1
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	d30a      	bcc.n	8006ebe <__exponent+0x5e>
 8006ea8:	f10d 0309 	add.w	r3, sp, #9
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	42ac      	cmp	r4, r5
 8006eb0:	bf88      	it	hi
 8006eb2:	2300      	movhi	r3, #0
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	1a18      	subs	r0, r3, r0
 8006eba:	b003      	add	sp, #12
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ec2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ec6:	e7ed      	b.n	8006ea4 <__exponent+0x44>
 8006ec8:	2330      	movs	r3, #48	@ 0x30
 8006eca:	3130      	adds	r1, #48	@ 0x30
 8006ecc:	7083      	strb	r3, [r0, #2]
 8006ece:	70c1      	strb	r1, [r0, #3]
 8006ed0:	1d03      	adds	r3, r0, #4
 8006ed2:	e7f1      	b.n	8006eb8 <__exponent+0x58>

08006ed4 <_printf_float>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	b091      	sub	sp, #68	@ 0x44
 8006eda:	460c      	mov	r4, r1
 8006edc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	461f      	mov	r7, r3
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	f000 ff25 	bl	8007d34 <_localeconv_r>
 8006eea:	6803      	ldr	r3, [r0, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	9308      	str	r3, [sp, #32]
 8006ef0:	f7f9 f92e 	bl	8000150 <strlen>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	9009      	str	r0, [sp, #36]	@ 0x24
 8006efe:	3307      	adds	r3, #7
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	f103 0208 	add.w	r2, r3, #8
 8006f08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f0c:	f8d4 b000 	ldr.w	fp, [r4]
 8006f10:	f8c8 2000 	str.w	r2, [r8]
 8006f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f2e:	4b9c      	ldr	r3, [pc, #624]	@ (80071a0 <_printf_float+0x2cc>)
 8006f30:	f7f9 fd6c 	bl	8000a0c <__aeabi_dcmpun>
 8006f34:	bb70      	cbnz	r0, 8006f94 <_printf_float+0xc0>
 8006f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	4b98      	ldr	r3, [pc, #608]	@ (80071a0 <_printf_float+0x2cc>)
 8006f40:	f7f9 fd46 	bl	80009d0 <__aeabi_dcmple>
 8006f44:	bb30      	cbnz	r0, 8006f94 <_printf_float+0xc0>
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fd35 	bl	80009bc <__aeabi_dcmplt>
 8006f52:	b110      	cbz	r0, 8006f5a <_printf_float+0x86>
 8006f54:	232d      	movs	r3, #45	@ 0x2d
 8006f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f5a:	4a92      	ldr	r2, [pc, #584]	@ (80071a4 <_printf_float+0x2d0>)
 8006f5c:	4b92      	ldr	r3, [pc, #584]	@ (80071a8 <_printf_float+0x2d4>)
 8006f5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f62:	bf94      	ite	ls
 8006f64:	4690      	movls	r8, r2
 8006f66:	4698      	movhi	r8, r3
 8006f68:	2303      	movs	r3, #3
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	f02b 0304 	bic.w	r3, fp, #4
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	4633      	mov	r3, r6
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	9700      	str	r7, [sp, #0]
 8006f7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006f80:	f000 f9d4 	bl	800732c <_printf_common>
 8006f84:	3001      	adds	r0, #1
 8006f86:	f040 8090 	bne.w	80070aa <_printf_float+0x1d6>
 8006f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8e:	b011      	add	sp, #68	@ 0x44
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 fd36 	bl	8000a0c <__aeabi_dcmpun>
 8006fa0:	b148      	cbz	r0, 8006fb6 <_printf_float+0xe2>
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfb8      	it	lt
 8006fa8:	232d      	movlt	r3, #45	@ 0x2d
 8006faa:	4a80      	ldr	r2, [pc, #512]	@ (80071ac <_printf_float+0x2d8>)
 8006fac:	bfb8      	it	lt
 8006fae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80071b0 <_printf_float+0x2dc>)
 8006fb4:	e7d3      	b.n	8006f5e <_printf_float+0x8a>
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	d13f      	bne.n	8007040 <_printf_float+0x16c>
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	6063      	str	r3, [r4, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	9206      	str	r2, [sp, #24]
 8006fce:	aa0e      	add	r2, sp, #56	@ 0x38
 8006fd0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006fd4:	aa0d      	add	r2, sp, #52	@ 0x34
 8006fd6:	9203      	str	r2, [sp, #12]
 8006fd8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006fdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	464b      	mov	r3, r9
 8006fea:	910a      	str	r1, [sp, #40]	@ 0x28
 8006fec:	f7ff fed4 	bl	8006d98 <__cvt>
 8006ff0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	2947      	cmp	r1, #71	@ 0x47
 8006ff6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ff8:	d128      	bne.n	800704c <_printf_float+0x178>
 8006ffa:	1cc8      	adds	r0, r1, #3
 8006ffc:	db02      	blt.n	8007004 <_printf_float+0x130>
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	4299      	cmp	r1, r3
 8007002:	dd40      	ble.n	8007086 <_printf_float+0x1b2>
 8007004:	f1aa 0a02 	sub.w	sl, sl, #2
 8007008:	fa5f fa8a 	uxtb.w	sl, sl
 800700c:	4652      	mov	r2, sl
 800700e:	3901      	subs	r1, #1
 8007010:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007014:	910d      	str	r1, [sp, #52]	@ 0x34
 8007016:	f7ff ff23 	bl	8006e60 <__exponent>
 800701a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800701c:	4681      	mov	r9, r0
 800701e:	1813      	adds	r3, r2, r0
 8007020:	2a01      	cmp	r2, #1
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	dc02      	bgt.n	800702c <_printf_float+0x158>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	07d2      	lsls	r2, r2, #31
 800702a:	d501      	bpl.n	8007030 <_printf_float+0x15c>
 800702c:	3301      	adds	r3, #1
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007034:	2b00      	cmp	r3, #0
 8007036:	d09e      	beq.n	8006f76 <_printf_float+0xa2>
 8007038:	232d      	movs	r3, #45	@ 0x2d
 800703a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800703e:	e79a      	b.n	8006f76 <_printf_float+0xa2>
 8007040:	2947      	cmp	r1, #71	@ 0x47
 8007042:	d1bf      	bne.n	8006fc4 <_printf_float+0xf0>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1bd      	bne.n	8006fc4 <_printf_float+0xf0>
 8007048:	2301      	movs	r3, #1
 800704a:	e7ba      	b.n	8006fc2 <_printf_float+0xee>
 800704c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007050:	d9dc      	bls.n	800700c <_printf_float+0x138>
 8007052:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007056:	d118      	bne.n	800708a <_printf_float+0x1b6>
 8007058:	2900      	cmp	r1, #0
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	dd0b      	ble.n	8007076 <_printf_float+0x1a2>
 800705e:	6121      	str	r1, [r4, #16]
 8007060:	b913      	cbnz	r3, 8007068 <_printf_float+0x194>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	07d0      	lsls	r0, r2, #31
 8007066:	d502      	bpl.n	800706e <_printf_float+0x19a>
 8007068:	3301      	adds	r3, #1
 800706a:	440b      	add	r3, r1
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	f04f 0900 	mov.w	r9, #0
 8007072:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007074:	e7dc      	b.n	8007030 <_printf_float+0x15c>
 8007076:	b913      	cbnz	r3, 800707e <_printf_float+0x1aa>
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	07d2      	lsls	r2, r2, #31
 800707c:	d501      	bpl.n	8007082 <_printf_float+0x1ae>
 800707e:	3302      	adds	r3, #2
 8007080:	e7f4      	b.n	800706c <_printf_float+0x198>
 8007082:	2301      	movs	r3, #1
 8007084:	e7f2      	b.n	800706c <_printf_float+0x198>
 8007086:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800708a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708c:	4299      	cmp	r1, r3
 800708e:	db05      	blt.n	800709c <_printf_float+0x1c8>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	6121      	str	r1, [r4, #16]
 8007094:	07d8      	lsls	r0, r3, #31
 8007096:	d5ea      	bpl.n	800706e <_printf_float+0x19a>
 8007098:	1c4b      	adds	r3, r1, #1
 800709a:	e7e7      	b.n	800706c <_printf_float+0x198>
 800709c:	2900      	cmp	r1, #0
 800709e:	bfcc      	ite	gt
 80070a0:	2201      	movgt	r2, #1
 80070a2:	f1c1 0202 	rsble	r2, r1, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	e7e0      	b.n	800706c <_printf_float+0x198>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	055a      	lsls	r2, r3, #21
 80070ae:	d407      	bmi.n	80070c0 <_printf_float+0x1ec>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	4642      	mov	r2, r8
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b8      	blx	r7
 80070ba:	3001      	adds	r0, #1
 80070bc:	d12b      	bne.n	8007116 <_printf_float+0x242>
 80070be:	e764      	b.n	8006f8a <_printf_float+0xb6>
 80070c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070c4:	f240 80dc 	bls.w	8007280 <_printf_float+0x3ac>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fc6a 	bl	80009a8 <__aeabi_dcmpeq>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d033      	beq.n	8007140 <_printf_float+0x26c>
 80070d8:	2301      	movs	r3, #1
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	4a35      	ldr	r2, [pc, #212]	@ (80071b4 <_printf_float+0x2e0>)
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	f43f af51 	beq.w	8006f8a <_printf_float+0xb6>
 80070e8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80070ec:	4543      	cmp	r3, r8
 80070ee:	db02      	blt.n	80070f6 <_printf_float+0x222>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	07d8      	lsls	r0, r3, #31
 80070f4:	d50f      	bpl.n	8007116 <_printf_float+0x242>
 80070f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f af42 	beq.w	8006f8a <_printf_float+0xb6>
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	f108 38ff 	add.w	r8, r8, #4294967295
 800710e:	f104 0a1a 	add.w	sl, r4, #26
 8007112:	45c8      	cmp	r8, r9
 8007114:	dc09      	bgt.n	800712a <_printf_float+0x256>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	079b      	lsls	r3, r3, #30
 800711a:	f100 8102 	bmi.w	8007322 <_printf_float+0x44e>
 800711e:	68e0      	ldr	r0, [r4, #12]
 8007120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007122:	4298      	cmp	r0, r3
 8007124:	bfb8      	it	lt
 8007126:	4618      	movlt	r0, r3
 8007128:	e731      	b.n	8006f8e <_printf_float+0xba>
 800712a:	2301      	movs	r3, #1
 800712c:	4652      	mov	r2, sl
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f af28 	beq.w	8006f8a <_printf_float+0xb6>
 800713a:	f109 0901 	add.w	r9, r9, #1
 800713e:	e7e8      	b.n	8007112 <_printf_float+0x23e>
 8007140:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc38      	bgt.n	80071b8 <_printf_float+0x2e4>
 8007146:	2301      	movs	r3, #1
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	4a19      	ldr	r2, [pc, #100]	@ (80071b4 <_printf_float+0x2e0>)
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f af1a 	beq.w	8006f8a <_printf_float+0xb6>
 8007156:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800715a:	ea59 0303 	orrs.w	r3, r9, r3
 800715e:	d102      	bne.n	8007166 <_printf_float+0x292>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07d9      	lsls	r1, r3, #31
 8007164:	d5d7      	bpl.n	8007116 <_printf_float+0x242>
 8007166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f af0a 	beq.w	8006f8a <_printf_float+0xb6>
 8007176:	f04f 0a00 	mov.w	sl, #0
 800717a:	f104 0b1a 	add.w	fp, r4, #26
 800717e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007180:	425b      	negs	r3, r3
 8007182:	4553      	cmp	r3, sl
 8007184:	dc01      	bgt.n	800718a <_printf_float+0x2b6>
 8007186:	464b      	mov	r3, r9
 8007188:	e793      	b.n	80070b2 <_printf_float+0x1de>
 800718a:	2301      	movs	r3, #1
 800718c:	465a      	mov	r2, fp
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	47b8      	blx	r7
 8007194:	3001      	adds	r0, #1
 8007196:	f43f aef8 	beq.w	8006f8a <_printf_float+0xb6>
 800719a:	f10a 0a01 	add.w	sl, sl, #1
 800719e:	e7ee      	b.n	800717e <_printf_float+0x2aa>
 80071a0:	7fefffff 	.word	0x7fefffff
 80071a4:	0800b6ae 	.word	0x0800b6ae
 80071a8:	0800b6b2 	.word	0x0800b6b2
 80071ac:	0800b6b6 	.word	0x0800b6b6
 80071b0:	0800b6ba 	.word	0x0800b6ba
 80071b4:	0800b6be 	.word	0x0800b6be
 80071b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071ba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80071be:	4553      	cmp	r3, sl
 80071c0:	bfa8      	it	ge
 80071c2:	4653      	movge	r3, sl
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	4699      	mov	r9, r3
 80071c8:	dc36      	bgt.n	8007238 <_printf_float+0x364>
 80071ca:	f04f 0b00 	mov.w	fp, #0
 80071ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d2:	f104 021a 	add.w	r2, r4, #26
 80071d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071da:	eba3 0309 	sub.w	r3, r3, r9
 80071de:	455b      	cmp	r3, fp
 80071e0:	dc31      	bgt.n	8007246 <_printf_float+0x372>
 80071e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071e4:	459a      	cmp	sl, r3
 80071e6:	dc3a      	bgt.n	800725e <_printf_float+0x38a>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	07da      	lsls	r2, r3, #31
 80071ec:	d437      	bmi.n	800725e <_printf_float+0x38a>
 80071ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071f0:	ebaa 0903 	sub.w	r9, sl, r3
 80071f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f6:	ebaa 0303 	sub.w	r3, sl, r3
 80071fa:	4599      	cmp	r9, r3
 80071fc:	bfa8      	it	ge
 80071fe:	4699      	movge	r9, r3
 8007200:	f1b9 0f00 	cmp.w	r9, #0
 8007204:	dc33      	bgt.n	800726e <_printf_float+0x39a>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720e:	f104 0b1a 	add.w	fp, r4, #26
 8007212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007214:	ebaa 0303 	sub.w	r3, sl, r3
 8007218:	eba3 0309 	sub.w	r3, r3, r9
 800721c:	4543      	cmp	r3, r8
 800721e:	f77f af7a 	ble.w	8007116 <_printf_float+0x242>
 8007222:	2301      	movs	r3, #1
 8007224:	465a      	mov	r2, fp
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	f43f aeac 	beq.w	8006f8a <_printf_float+0xb6>
 8007232:	f108 0801 	add.w	r8, r8, #1
 8007236:	e7ec      	b.n	8007212 <_printf_float+0x33e>
 8007238:	4642      	mov	r2, r8
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	d1c2      	bne.n	80071ca <_printf_float+0x2f6>
 8007244:	e6a1      	b.n	8006f8a <_printf_float+0xb6>
 8007246:	2301      	movs	r3, #1
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	920a      	str	r2, [sp, #40]	@ 0x28
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	f43f ae9a 	beq.w	8006f8a <_printf_float+0xb6>
 8007256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007258:	f10b 0b01 	add.w	fp, fp, #1
 800725c:	e7bb      	b.n	80071d6 <_printf_float+0x302>
 800725e:	4631      	mov	r1, r6
 8007260:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	d1c0      	bne.n	80071ee <_printf_float+0x31a>
 800726c:	e68d      	b.n	8006f8a <_printf_float+0xb6>
 800726e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007270:	464b      	mov	r3, r9
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	4442      	add	r2, r8
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	d1c3      	bne.n	8007206 <_printf_float+0x332>
 800727e:	e684      	b.n	8006f8a <_printf_float+0xb6>
 8007280:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007284:	f1ba 0f01 	cmp.w	sl, #1
 8007288:	dc01      	bgt.n	800728e <_printf_float+0x3ba>
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d536      	bpl.n	80072fc <_printf_float+0x428>
 800728e:	2301      	movs	r3, #1
 8007290:	4642      	mov	r2, r8
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	f43f ae76 	beq.w	8006f8a <_printf_float+0xb6>
 800729e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f ae6e 	beq.w	8006f8a <_printf_float+0xb6>
 80072ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ba:	f7f9 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80072be:	b9c0      	cbnz	r0, 80072f2 <_printf_float+0x41e>
 80072c0:	4653      	mov	r3, sl
 80072c2:	f108 0201 	add.w	r2, r8, #1
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b8      	blx	r7
 80072cc:	3001      	adds	r0, #1
 80072ce:	d10c      	bne.n	80072ea <_printf_float+0x416>
 80072d0:	e65b      	b.n	8006f8a <_printf_float+0xb6>
 80072d2:	2301      	movs	r3, #1
 80072d4:	465a      	mov	r2, fp
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	f43f ae54 	beq.w	8006f8a <_printf_float+0xb6>
 80072e2:	f108 0801 	add.w	r8, r8, #1
 80072e6:	45d0      	cmp	r8, sl
 80072e8:	dbf3      	blt.n	80072d2 <_printf_float+0x3fe>
 80072ea:	464b      	mov	r3, r9
 80072ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072f0:	e6e0      	b.n	80070b4 <_printf_float+0x1e0>
 80072f2:	f04f 0800 	mov.w	r8, #0
 80072f6:	f104 0b1a 	add.w	fp, r4, #26
 80072fa:	e7f4      	b.n	80072e6 <_printf_float+0x412>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4642      	mov	r2, r8
 8007300:	e7e1      	b.n	80072c6 <_printf_float+0x3f2>
 8007302:	2301      	movs	r3, #1
 8007304:	464a      	mov	r2, r9
 8007306:	4631      	mov	r1, r6
 8007308:	4628      	mov	r0, r5
 800730a:	47b8      	blx	r7
 800730c:	3001      	adds	r0, #1
 800730e:	f43f ae3c 	beq.w	8006f8a <_printf_float+0xb6>
 8007312:	f108 0801 	add.w	r8, r8, #1
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800731a:	1a5b      	subs	r3, r3, r1
 800731c:	4543      	cmp	r3, r8
 800731e:	dcf0      	bgt.n	8007302 <_printf_float+0x42e>
 8007320:	e6fd      	b.n	800711e <_printf_float+0x24a>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	f104 0919 	add.w	r9, r4, #25
 800732a:	e7f4      	b.n	8007316 <_printf_float+0x442>

0800732c <_printf_common>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	4616      	mov	r6, r2
 8007332:	4698      	mov	r8, r3
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	690b      	ldr	r3, [r1, #16]
 8007338:	4607      	mov	r7, r0
 800733a:	4293      	cmp	r3, r2
 800733c:	bfb8      	it	lt
 800733e:	4613      	movlt	r3, r2
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007346:	460c      	mov	r4, r1
 8007348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800734c:	b10a      	cbz	r2, 8007352 <_printf_common+0x26>
 800734e:	3301      	adds	r3, #1
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	0699      	lsls	r1, r3, #26
 8007356:	bf42      	ittt	mi
 8007358:	6833      	ldrmi	r3, [r6, #0]
 800735a:	3302      	addmi	r3, #2
 800735c:	6033      	strmi	r3, [r6, #0]
 800735e:	6825      	ldr	r5, [r4, #0]
 8007360:	f015 0506 	ands.w	r5, r5, #6
 8007364:	d106      	bne.n	8007374 <_printf_common+0x48>
 8007366:	f104 0a19 	add.w	sl, r4, #25
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	6832      	ldr	r2, [r6, #0]
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dc2b      	bgt.n	80073cc <_printf_common+0xa0>
 8007374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007378:	6822      	ldr	r2, [r4, #0]
 800737a:	3b00      	subs	r3, #0
 800737c:	bf18      	it	ne
 800737e:	2301      	movne	r3, #1
 8007380:	0692      	lsls	r2, r2, #26
 8007382:	d430      	bmi.n	80073e6 <_printf_common+0xba>
 8007384:	4641      	mov	r1, r8
 8007386:	4638      	mov	r0, r7
 8007388:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800738c:	47c8      	blx	r9
 800738e:	3001      	adds	r0, #1
 8007390:	d023      	beq.n	80073da <_printf_common+0xae>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	6922      	ldr	r2, [r4, #16]
 8007396:	f003 0306 	and.w	r3, r3, #6
 800739a:	2b04      	cmp	r3, #4
 800739c:	bf14      	ite	ne
 800739e:	2500      	movne	r5, #0
 80073a0:	6833      	ldreq	r3, [r6, #0]
 80073a2:	f04f 0600 	mov.w	r6, #0
 80073a6:	bf08      	it	eq
 80073a8:	68e5      	ldreq	r5, [r4, #12]
 80073aa:	f104 041a 	add.w	r4, r4, #26
 80073ae:	bf08      	it	eq
 80073b0:	1aed      	subeq	r5, r5, r3
 80073b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073b6:	bf08      	it	eq
 80073b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073bc:	4293      	cmp	r3, r2
 80073be:	bfc4      	itt	gt
 80073c0:	1a9b      	subgt	r3, r3, r2
 80073c2:	18ed      	addgt	r5, r5, r3
 80073c4:	42b5      	cmp	r5, r6
 80073c6:	d11a      	bne.n	80073fe <_printf_common+0xd2>
 80073c8:	2000      	movs	r0, #0
 80073ca:	e008      	b.n	80073de <_printf_common+0xb2>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4652      	mov	r2, sl
 80073d0:	4641      	mov	r1, r8
 80073d2:	4638      	mov	r0, r7
 80073d4:	47c8      	blx	r9
 80073d6:	3001      	adds	r0, #1
 80073d8:	d103      	bne.n	80073e2 <_printf_common+0xb6>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e2:	3501      	adds	r5, #1
 80073e4:	e7c1      	b.n	800736a <_printf_common+0x3e>
 80073e6:	2030      	movs	r0, #48	@ 0x30
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073f4:	4422      	add	r2, r4
 80073f6:	3302      	adds	r3, #2
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073fc:	e7c2      	b.n	8007384 <_printf_common+0x58>
 80073fe:	2301      	movs	r3, #1
 8007400:	4622      	mov	r2, r4
 8007402:	4641      	mov	r1, r8
 8007404:	4638      	mov	r0, r7
 8007406:	47c8      	blx	r9
 8007408:	3001      	adds	r0, #1
 800740a:	d0e6      	beq.n	80073da <_printf_common+0xae>
 800740c:	3601      	adds	r6, #1
 800740e:	e7d9      	b.n	80073c4 <_printf_common+0x98>

08007410 <_printf_i>:
 8007410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	7e0f      	ldrb	r7, [r1, #24]
 8007416:	4691      	mov	r9, r2
 8007418:	2f78      	cmp	r7, #120	@ 0x78
 800741a:	4680      	mov	r8, r0
 800741c:	460c      	mov	r4, r1
 800741e:	469a      	mov	sl, r3
 8007420:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007426:	d807      	bhi.n	8007438 <_printf_i+0x28>
 8007428:	2f62      	cmp	r7, #98	@ 0x62
 800742a:	d80a      	bhi.n	8007442 <_printf_i+0x32>
 800742c:	2f00      	cmp	r7, #0
 800742e:	f000 80d3 	beq.w	80075d8 <_printf_i+0x1c8>
 8007432:	2f58      	cmp	r7, #88	@ 0x58
 8007434:	f000 80ba 	beq.w	80075ac <_printf_i+0x19c>
 8007438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800743c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007440:	e03a      	b.n	80074b8 <_printf_i+0xa8>
 8007442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007446:	2b15      	cmp	r3, #21
 8007448:	d8f6      	bhi.n	8007438 <_printf_i+0x28>
 800744a:	a101      	add	r1, pc, #4	@ (adr r1, 8007450 <_printf_i+0x40>)
 800744c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007450:	080074a9 	.word	0x080074a9
 8007454:	080074bd 	.word	0x080074bd
 8007458:	08007439 	.word	0x08007439
 800745c:	08007439 	.word	0x08007439
 8007460:	08007439 	.word	0x08007439
 8007464:	08007439 	.word	0x08007439
 8007468:	080074bd 	.word	0x080074bd
 800746c:	08007439 	.word	0x08007439
 8007470:	08007439 	.word	0x08007439
 8007474:	08007439 	.word	0x08007439
 8007478:	08007439 	.word	0x08007439
 800747c:	080075bf 	.word	0x080075bf
 8007480:	080074e7 	.word	0x080074e7
 8007484:	08007579 	.word	0x08007579
 8007488:	08007439 	.word	0x08007439
 800748c:	08007439 	.word	0x08007439
 8007490:	080075e1 	.word	0x080075e1
 8007494:	08007439 	.word	0x08007439
 8007498:	080074e7 	.word	0x080074e7
 800749c:	08007439 	.word	0x08007439
 80074a0:	08007439 	.word	0x08007439
 80074a4:	08007581 	.word	0x08007581
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6032      	str	r2, [r6, #0]
 80074b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074b8:	2301      	movs	r3, #1
 80074ba:	e09e      	b.n	80075fa <_printf_i+0x1ea>
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	6820      	ldr	r0, [r4, #0]
 80074c0:	1d19      	adds	r1, r3, #4
 80074c2:	6031      	str	r1, [r6, #0]
 80074c4:	0606      	lsls	r6, r0, #24
 80074c6:	d501      	bpl.n	80074cc <_printf_i+0xbc>
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	e003      	b.n	80074d4 <_printf_i+0xc4>
 80074cc:	0645      	lsls	r5, r0, #25
 80074ce:	d5fb      	bpl.n	80074c8 <_printf_i+0xb8>
 80074d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	da03      	bge.n	80074e0 <_printf_i+0xd0>
 80074d8:	232d      	movs	r3, #45	@ 0x2d
 80074da:	426d      	negs	r5, r5
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e0:	230a      	movs	r3, #10
 80074e2:	4859      	ldr	r0, [pc, #356]	@ (8007648 <_printf_i+0x238>)
 80074e4:	e011      	b.n	800750a <_printf_i+0xfa>
 80074e6:	6821      	ldr	r1, [r4, #0]
 80074e8:	6833      	ldr	r3, [r6, #0]
 80074ea:	0608      	lsls	r0, r1, #24
 80074ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80074f0:	d402      	bmi.n	80074f8 <_printf_i+0xe8>
 80074f2:	0649      	lsls	r1, r1, #25
 80074f4:	bf48      	it	mi
 80074f6:	b2ad      	uxthmi	r5, r5
 80074f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	bf14      	ite	ne
 80074fe:	230a      	movne	r3, #10
 8007500:	2308      	moveq	r3, #8
 8007502:	4851      	ldr	r0, [pc, #324]	@ (8007648 <_printf_i+0x238>)
 8007504:	2100      	movs	r1, #0
 8007506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800750a:	6866      	ldr	r6, [r4, #4]
 800750c:	2e00      	cmp	r6, #0
 800750e:	bfa8      	it	ge
 8007510:	6821      	ldrge	r1, [r4, #0]
 8007512:	60a6      	str	r6, [r4, #8]
 8007514:	bfa4      	itt	ge
 8007516:	f021 0104 	bicge.w	r1, r1, #4
 800751a:	6021      	strge	r1, [r4, #0]
 800751c:	b90d      	cbnz	r5, 8007522 <_printf_i+0x112>
 800751e:	2e00      	cmp	r6, #0
 8007520:	d04b      	beq.n	80075ba <_printf_i+0x1aa>
 8007522:	4616      	mov	r6, r2
 8007524:	fbb5 f1f3 	udiv	r1, r5, r3
 8007528:	fb03 5711 	mls	r7, r3, r1, r5
 800752c:	5dc7      	ldrb	r7, [r0, r7]
 800752e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007532:	462f      	mov	r7, r5
 8007534:	42bb      	cmp	r3, r7
 8007536:	460d      	mov	r5, r1
 8007538:	d9f4      	bls.n	8007524 <_printf_i+0x114>
 800753a:	2b08      	cmp	r3, #8
 800753c:	d10b      	bne.n	8007556 <_printf_i+0x146>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	07df      	lsls	r7, r3, #31
 8007542:	d508      	bpl.n	8007556 <_printf_i+0x146>
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	6861      	ldr	r1, [r4, #4]
 8007548:	4299      	cmp	r1, r3
 800754a:	bfde      	ittt	le
 800754c:	2330      	movle	r3, #48	@ 0x30
 800754e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007552:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007556:	1b92      	subs	r2, r2, r6
 8007558:	6122      	str	r2, [r4, #16]
 800755a:	464b      	mov	r3, r9
 800755c:	4621      	mov	r1, r4
 800755e:	4640      	mov	r0, r8
 8007560:	f8cd a000 	str.w	sl, [sp]
 8007564:	aa03      	add	r2, sp, #12
 8007566:	f7ff fee1 	bl	800732c <_printf_common>
 800756a:	3001      	adds	r0, #1
 800756c:	d14a      	bne.n	8007604 <_printf_i+0x1f4>
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	b004      	add	sp, #16
 8007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	f043 0320 	orr.w	r3, r3, #32
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	2778      	movs	r7, #120	@ 0x78
 8007582:	4832      	ldr	r0, [pc, #200]	@ (800764c <_printf_i+0x23c>)
 8007584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	6831      	ldr	r1, [r6, #0]
 800758c:	061f      	lsls	r7, r3, #24
 800758e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007592:	d402      	bmi.n	800759a <_printf_i+0x18a>
 8007594:	065f      	lsls	r7, r3, #25
 8007596:	bf48      	it	mi
 8007598:	b2ad      	uxthmi	r5, r5
 800759a:	6031      	str	r1, [r6, #0]
 800759c:	07d9      	lsls	r1, r3, #31
 800759e:	bf44      	itt	mi
 80075a0:	f043 0320 	orrmi.w	r3, r3, #32
 80075a4:	6023      	strmi	r3, [r4, #0]
 80075a6:	b11d      	cbz	r5, 80075b0 <_printf_i+0x1a0>
 80075a8:	2310      	movs	r3, #16
 80075aa:	e7ab      	b.n	8007504 <_printf_i+0xf4>
 80075ac:	4826      	ldr	r0, [pc, #152]	@ (8007648 <_printf_i+0x238>)
 80075ae:	e7e9      	b.n	8007584 <_printf_i+0x174>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f023 0320 	bic.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	e7f6      	b.n	80075a8 <_printf_i+0x198>
 80075ba:	4616      	mov	r6, r2
 80075bc:	e7bd      	b.n	800753a <_printf_i+0x12a>
 80075be:	6833      	ldr	r3, [r6, #0]
 80075c0:	6825      	ldr	r5, [r4, #0]
 80075c2:	1d18      	adds	r0, r3, #4
 80075c4:	6961      	ldr	r1, [r4, #20]
 80075c6:	6030      	str	r0, [r6, #0]
 80075c8:	062e      	lsls	r6, r5, #24
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	d501      	bpl.n	80075d2 <_printf_i+0x1c2>
 80075ce:	6019      	str	r1, [r3, #0]
 80075d0:	e002      	b.n	80075d8 <_printf_i+0x1c8>
 80075d2:	0668      	lsls	r0, r5, #25
 80075d4:	d5fb      	bpl.n	80075ce <_printf_i+0x1be>
 80075d6:	8019      	strh	r1, [r3, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	4616      	mov	r6, r2
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	e7bc      	b.n	800755a <_printf_i+0x14a>
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	2100      	movs	r1, #0
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	6032      	str	r2, [r6, #0]
 80075e8:	681e      	ldr	r6, [r3, #0]
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	4630      	mov	r0, r6
 80075ee:	f000 fc6e 	bl	8007ece <memchr>
 80075f2:	b108      	cbz	r0, 80075f8 <_printf_i+0x1e8>
 80075f4:	1b80      	subs	r0, r0, r6
 80075f6:	6060      	str	r0, [r4, #4]
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	2300      	movs	r3, #0
 80075fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007602:	e7aa      	b.n	800755a <_printf_i+0x14a>
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	47d0      	blx	sl
 800760e:	3001      	adds	r0, #1
 8007610:	d0ad      	beq.n	800756e <_printf_i+0x15e>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	079b      	lsls	r3, r3, #30
 8007616:	d413      	bmi.n	8007640 <_printf_i+0x230>
 8007618:	68e0      	ldr	r0, [r4, #12]
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	4298      	cmp	r0, r3
 800761e:	bfb8      	it	lt
 8007620:	4618      	movlt	r0, r3
 8007622:	e7a6      	b.n	8007572 <_printf_i+0x162>
 8007624:	2301      	movs	r3, #1
 8007626:	4632      	mov	r2, r6
 8007628:	4649      	mov	r1, r9
 800762a:	4640      	mov	r0, r8
 800762c:	47d0      	blx	sl
 800762e:	3001      	adds	r0, #1
 8007630:	d09d      	beq.n	800756e <_printf_i+0x15e>
 8007632:	3501      	adds	r5, #1
 8007634:	68e3      	ldr	r3, [r4, #12]
 8007636:	9903      	ldr	r1, [sp, #12]
 8007638:	1a5b      	subs	r3, r3, r1
 800763a:	42ab      	cmp	r3, r5
 800763c:	dcf2      	bgt.n	8007624 <_printf_i+0x214>
 800763e:	e7eb      	b.n	8007618 <_printf_i+0x208>
 8007640:	2500      	movs	r5, #0
 8007642:	f104 0619 	add.w	r6, r4, #25
 8007646:	e7f5      	b.n	8007634 <_printf_i+0x224>
 8007648:	0800b6c0 	.word	0x0800b6c0
 800764c:	0800b6d1 	.word	0x0800b6d1

08007650 <_scanf_float>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	b087      	sub	sp, #28
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	688b      	ldr	r3, [r1, #8]
 800765a:	4617      	mov	r7, r2
 800765c:	1e5a      	subs	r2, r3, #1
 800765e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007662:	bf82      	ittt	hi
 8007664:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007668:	eb03 0b05 	addhi.w	fp, r3, r5
 800766c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007670:	460a      	mov	r2, r1
 8007672:	f04f 0500 	mov.w	r5, #0
 8007676:	bf88      	it	hi
 8007678:	608b      	strhi	r3, [r1, #8]
 800767a:	680b      	ldr	r3, [r1, #0]
 800767c:	4680      	mov	r8, r0
 800767e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007682:	f842 3b1c 	str.w	r3, [r2], #28
 8007686:	460c      	mov	r4, r1
 8007688:	bf98      	it	ls
 800768a:	f04f 0b00 	movls.w	fp, #0
 800768e:	4616      	mov	r6, r2
 8007690:	46aa      	mov	sl, r5
 8007692:	46a9      	mov	r9, r5
 8007694:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007698:	9201      	str	r2, [sp, #4]
 800769a:	9502      	str	r5, [sp, #8]
 800769c:	68a2      	ldr	r2, [r4, #8]
 800769e:	b152      	cbz	r2, 80076b6 <_scanf_float+0x66>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80076a6:	d865      	bhi.n	8007774 <_scanf_float+0x124>
 80076a8:	2b40      	cmp	r3, #64	@ 0x40
 80076aa:	d83d      	bhi.n	8007728 <_scanf_float+0xd8>
 80076ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80076b0:	b2c8      	uxtb	r0, r1
 80076b2:	280e      	cmp	r0, #14
 80076b4:	d93b      	bls.n	800772e <_scanf_float+0xde>
 80076b6:	f1b9 0f00 	cmp.w	r9, #0
 80076ba:	d003      	beq.n	80076c4 <_scanf_float+0x74>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c8:	f1ba 0f01 	cmp.w	sl, #1
 80076cc:	f200 8118 	bhi.w	8007900 <_scanf_float+0x2b0>
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	429e      	cmp	r6, r3
 80076d4:	f200 8109 	bhi.w	80078ea <_scanf_float+0x29a>
 80076d8:	2001      	movs	r0, #1
 80076da:	b007      	add	sp, #28
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80076e4:	2a0d      	cmp	r2, #13
 80076e6:	d8e6      	bhi.n	80076b6 <_scanf_float+0x66>
 80076e8:	a101      	add	r1, pc, #4	@ (adr r1, 80076f0 <_scanf_float+0xa0>)
 80076ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007837 	.word	0x08007837
 80076f4:	080076b7 	.word	0x080076b7
 80076f8:	080076b7 	.word	0x080076b7
 80076fc:	080076b7 	.word	0x080076b7
 8007700:	08007897 	.word	0x08007897
 8007704:	0800786f 	.word	0x0800786f
 8007708:	080076b7 	.word	0x080076b7
 800770c:	080076b7 	.word	0x080076b7
 8007710:	08007845 	.word	0x08007845
 8007714:	080076b7 	.word	0x080076b7
 8007718:	080076b7 	.word	0x080076b7
 800771c:	080076b7 	.word	0x080076b7
 8007720:	080076b7 	.word	0x080076b7
 8007724:	080077fd 	.word	0x080077fd
 8007728:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800772c:	e7da      	b.n	80076e4 <_scanf_float+0x94>
 800772e:	290e      	cmp	r1, #14
 8007730:	d8c1      	bhi.n	80076b6 <_scanf_float+0x66>
 8007732:	a001      	add	r0, pc, #4	@ (adr r0, 8007738 <_scanf_float+0xe8>)
 8007734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007738:	080077ed 	.word	0x080077ed
 800773c:	080076b7 	.word	0x080076b7
 8007740:	080077ed 	.word	0x080077ed
 8007744:	08007883 	.word	0x08007883
 8007748:	080076b7 	.word	0x080076b7
 800774c:	08007795 	.word	0x08007795
 8007750:	080077d3 	.word	0x080077d3
 8007754:	080077d3 	.word	0x080077d3
 8007758:	080077d3 	.word	0x080077d3
 800775c:	080077d3 	.word	0x080077d3
 8007760:	080077d3 	.word	0x080077d3
 8007764:	080077d3 	.word	0x080077d3
 8007768:	080077d3 	.word	0x080077d3
 800776c:	080077d3 	.word	0x080077d3
 8007770:	080077d3 	.word	0x080077d3
 8007774:	2b6e      	cmp	r3, #110	@ 0x6e
 8007776:	d809      	bhi.n	800778c <_scanf_float+0x13c>
 8007778:	2b60      	cmp	r3, #96	@ 0x60
 800777a:	d8b1      	bhi.n	80076e0 <_scanf_float+0x90>
 800777c:	2b54      	cmp	r3, #84	@ 0x54
 800777e:	d07b      	beq.n	8007878 <_scanf_float+0x228>
 8007780:	2b59      	cmp	r3, #89	@ 0x59
 8007782:	d198      	bne.n	80076b6 <_scanf_float+0x66>
 8007784:	2d07      	cmp	r5, #7
 8007786:	d196      	bne.n	80076b6 <_scanf_float+0x66>
 8007788:	2508      	movs	r5, #8
 800778a:	e02c      	b.n	80077e6 <_scanf_float+0x196>
 800778c:	2b74      	cmp	r3, #116	@ 0x74
 800778e:	d073      	beq.n	8007878 <_scanf_float+0x228>
 8007790:	2b79      	cmp	r3, #121	@ 0x79
 8007792:	e7f6      	b.n	8007782 <_scanf_float+0x132>
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	05c8      	lsls	r0, r1, #23
 8007798:	d51b      	bpl.n	80077d2 <_scanf_float+0x182>
 800779a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800779e:	6021      	str	r1, [r4, #0]
 80077a0:	f109 0901 	add.w	r9, r9, #1
 80077a4:	f1bb 0f00 	cmp.w	fp, #0
 80077a8:	d003      	beq.n	80077b2 <_scanf_float+0x162>
 80077aa:	3201      	adds	r2, #1
 80077ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077b0:	60a2      	str	r2, [r4, #8]
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60a3      	str	r3, [r4, #8]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	f340 8087 	ble.w	80078d8 <_scanf_float+0x288>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	e764      	b.n	800769c <_scanf_float+0x4c>
 80077d2:	eb1a 0105 	adds.w	r1, sl, r5
 80077d6:	f47f af6e 	bne.w	80076b6 <_scanf_float+0x66>
 80077da:	460d      	mov	r5, r1
 80077dc:	468a      	mov	sl, r1
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	f806 3b01 	strb.w	r3, [r6], #1
 80077ea:	e7e2      	b.n	80077b2 <_scanf_float+0x162>
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	0610      	lsls	r0, r2, #24
 80077f0:	f57f af61 	bpl.w	80076b6 <_scanf_float+0x66>
 80077f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077f8:	6022      	str	r2, [r4, #0]
 80077fa:	e7f4      	b.n	80077e6 <_scanf_float+0x196>
 80077fc:	f1ba 0f00 	cmp.w	sl, #0
 8007800:	d10e      	bne.n	8007820 <_scanf_float+0x1d0>
 8007802:	f1b9 0f00 	cmp.w	r9, #0
 8007806:	d10e      	bne.n	8007826 <_scanf_float+0x1d6>
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800780e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007812:	d108      	bne.n	8007826 <_scanf_float+0x1d6>
 8007814:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007818:	f04f 0a01 	mov.w	sl, #1
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	e7e2      	b.n	80077e6 <_scanf_float+0x196>
 8007820:	f1ba 0f02 	cmp.w	sl, #2
 8007824:	d055      	beq.n	80078d2 <_scanf_float+0x282>
 8007826:	2d01      	cmp	r5, #1
 8007828:	d002      	beq.n	8007830 <_scanf_float+0x1e0>
 800782a:	2d04      	cmp	r5, #4
 800782c:	f47f af43 	bne.w	80076b6 <_scanf_float+0x66>
 8007830:	3501      	adds	r5, #1
 8007832:	b2ed      	uxtb	r5, r5
 8007834:	e7d7      	b.n	80077e6 <_scanf_float+0x196>
 8007836:	f1ba 0f01 	cmp.w	sl, #1
 800783a:	f47f af3c 	bne.w	80076b6 <_scanf_float+0x66>
 800783e:	f04f 0a02 	mov.w	sl, #2
 8007842:	e7d0      	b.n	80077e6 <_scanf_float+0x196>
 8007844:	b97d      	cbnz	r5, 8007866 <_scanf_float+0x216>
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	f47f af37 	bne.w	80076bc <_scanf_float+0x6c>
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007854:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007858:	f040 8103 	bne.w	8007a62 <_scanf_float+0x412>
 800785c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007860:	2501      	movs	r5, #1
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	e7bf      	b.n	80077e6 <_scanf_float+0x196>
 8007866:	2d03      	cmp	r5, #3
 8007868:	d0e2      	beq.n	8007830 <_scanf_float+0x1e0>
 800786a:	2d05      	cmp	r5, #5
 800786c:	e7de      	b.n	800782c <_scanf_float+0x1dc>
 800786e:	2d02      	cmp	r5, #2
 8007870:	f47f af21 	bne.w	80076b6 <_scanf_float+0x66>
 8007874:	2503      	movs	r5, #3
 8007876:	e7b6      	b.n	80077e6 <_scanf_float+0x196>
 8007878:	2d06      	cmp	r5, #6
 800787a:	f47f af1c 	bne.w	80076b6 <_scanf_float+0x66>
 800787e:	2507      	movs	r5, #7
 8007880:	e7b1      	b.n	80077e6 <_scanf_float+0x196>
 8007882:	6822      	ldr	r2, [r4, #0]
 8007884:	0591      	lsls	r1, r2, #22
 8007886:	f57f af16 	bpl.w	80076b6 <_scanf_float+0x66>
 800788a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800788e:	6022      	str	r2, [r4, #0]
 8007890:	f8cd 9008 	str.w	r9, [sp, #8]
 8007894:	e7a7      	b.n	80077e6 <_scanf_float+0x196>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800789c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078a0:	d006      	beq.n	80078b0 <_scanf_float+0x260>
 80078a2:	0550      	lsls	r0, r2, #21
 80078a4:	f57f af07 	bpl.w	80076b6 <_scanf_float+0x66>
 80078a8:	f1b9 0f00 	cmp.w	r9, #0
 80078ac:	f000 80d9 	beq.w	8007a62 <_scanf_float+0x412>
 80078b0:	0591      	lsls	r1, r2, #22
 80078b2:	bf58      	it	pl
 80078b4:	9902      	ldrpl	r1, [sp, #8]
 80078b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078ba:	bf58      	it	pl
 80078bc:	eba9 0101 	subpl.w	r1, r9, r1
 80078c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80078c4:	f04f 0900 	mov.w	r9, #0
 80078c8:	bf58      	it	pl
 80078ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078ce:	6022      	str	r2, [r4, #0]
 80078d0:	e789      	b.n	80077e6 <_scanf_float+0x196>
 80078d2:	f04f 0a03 	mov.w	sl, #3
 80078d6:	e786      	b.n	80077e6 <_scanf_float+0x196>
 80078d8:	4639      	mov	r1, r7
 80078da:	4640      	mov	r0, r8
 80078dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80078e0:	4798      	blx	r3
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f43f aeda 	beq.w	800769c <_scanf_float+0x4c>
 80078e8:	e6e5      	b.n	80076b6 <_scanf_float+0x66>
 80078ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078ee:	463a      	mov	r2, r7
 80078f0:	4640      	mov	r0, r8
 80078f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078f6:	4798      	blx	r3
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	e6e7      	b.n	80076d0 <_scanf_float+0x80>
 8007900:	1e6b      	subs	r3, r5, #1
 8007902:	2b06      	cmp	r3, #6
 8007904:	d824      	bhi.n	8007950 <_scanf_float+0x300>
 8007906:	2d02      	cmp	r5, #2
 8007908:	d836      	bhi.n	8007978 <_scanf_float+0x328>
 800790a:	9b01      	ldr	r3, [sp, #4]
 800790c:	429e      	cmp	r6, r3
 800790e:	f67f aee3 	bls.w	80076d8 <_scanf_float+0x88>
 8007912:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007916:	463a      	mov	r2, r7
 8007918:	4640      	mov	r0, r8
 800791a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800791e:	4798      	blx	r3
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	3b01      	subs	r3, #1
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	e7f0      	b.n	800790a <_scanf_float+0x2ba>
 8007928:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800792c:	463a      	mov	r2, r7
 800792e:	4640      	mov	r0, r8
 8007930:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007934:	4798      	blx	r3
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007940:	fa5f fa8a 	uxtb.w	sl, sl
 8007944:	f1ba 0f02 	cmp.w	sl, #2
 8007948:	d1ee      	bne.n	8007928 <_scanf_float+0x2d8>
 800794a:	3d03      	subs	r5, #3
 800794c:	b2ed      	uxtb	r5, r5
 800794e:	1b76      	subs	r6, r6, r5
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	05da      	lsls	r2, r3, #23
 8007954:	d530      	bpl.n	80079b8 <_scanf_float+0x368>
 8007956:	055b      	lsls	r3, r3, #21
 8007958:	d511      	bpl.n	800797e <_scanf_float+0x32e>
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	429e      	cmp	r6, r3
 800795e:	f67f aebb 	bls.w	80076d8 <_scanf_float+0x88>
 8007962:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007966:	463a      	mov	r2, r7
 8007968:	4640      	mov	r0, r8
 800796a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800796e:	4798      	blx	r3
 8007970:	6923      	ldr	r3, [r4, #16]
 8007972:	3b01      	subs	r3, #1
 8007974:	6123      	str	r3, [r4, #16]
 8007976:	e7f0      	b.n	800795a <_scanf_float+0x30a>
 8007978:	46aa      	mov	sl, r5
 800797a:	46b3      	mov	fp, r6
 800797c:	e7de      	b.n	800793c <_scanf_float+0x2ec>
 800797e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	2965      	cmp	r1, #101	@ 0x65
 8007986:	f103 33ff 	add.w	r3, r3, #4294967295
 800798a:	f106 35ff 	add.w	r5, r6, #4294967295
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	d00c      	beq.n	80079ac <_scanf_float+0x35c>
 8007992:	2945      	cmp	r1, #69	@ 0x45
 8007994:	d00a      	beq.n	80079ac <_scanf_float+0x35c>
 8007996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800799a:	463a      	mov	r2, r7
 800799c:	4640      	mov	r0, r8
 800799e:	4798      	blx	r3
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	1eb5      	subs	r5, r6, #2
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	463a      	mov	r2, r7
 80079ae:	4640      	mov	r0, r8
 80079b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079b4:	4798      	blx	r3
 80079b6:	462e      	mov	r6, r5
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	f012 0210 	ands.w	r2, r2, #16
 80079be:	d001      	beq.n	80079c4 <_scanf_float+0x374>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e68a      	b.n	80076da <_scanf_float+0x8a>
 80079c4:	7032      	strb	r2, [r6, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d0:	d11c      	bne.n	8007a0c <_scanf_float+0x3bc>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	454b      	cmp	r3, r9
 80079d6:	eba3 0209 	sub.w	r2, r3, r9
 80079da:	d123      	bne.n	8007a24 <_scanf_float+0x3d4>
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	9901      	ldr	r1, [sp, #4]
 80079e2:	f002 fc85 	bl	800a2f0 <_strtod_r>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	6825      	ldr	r5, [r4, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f015 0f02 	tst.w	r5, #2
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	f103 0204 	add.w	r2, r3, #4
 80079f8:	d01f      	beq.n	8007a3a <_scanf_float+0x3ea>
 80079fa:	9903      	ldr	r1, [sp, #12]
 80079fc:	600a      	str	r2, [r1, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	e9c3 6700 	strd	r6, r7, [r3]
 8007a04:	68e3      	ldr	r3, [r4, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60e3      	str	r3, [r4, #12]
 8007a0a:	e7d9      	b.n	80079c0 <_scanf_float+0x370>
 8007a0c:	9b04      	ldr	r3, [sp, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0e4      	beq.n	80079dc <_scanf_float+0x38c>
 8007a12:	9905      	ldr	r1, [sp, #20]
 8007a14:	230a      	movs	r3, #10
 8007a16:	4640      	mov	r0, r8
 8007a18:	3101      	adds	r1, #1
 8007a1a:	f002 fce9 	bl	800a3f0 <_strtol_r>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	9e05      	ldr	r6, [sp, #20]
 8007a22:	1ac2      	subs	r2, r0, r3
 8007a24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a28:	429e      	cmp	r6, r3
 8007a2a:	bf28      	it	cs
 8007a2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a30:	4630      	mov	r0, r6
 8007a32:	490d      	ldr	r1, [pc, #52]	@ (8007a68 <_scanf_float+0x418>)
 8007a34:	f000 f912 	bl	8007c5c <siprintf>
 8007a38:	e7d0      	b.n	80079dc <_scanf_float+0x38c>
 8007a3a:	076d      	lsls	r5, r5, #29
 8007a3c:	d4dd      	bmi.n	80079fa <_scanf_float+0x3aa>
 8007a3e:	9d03      	ldr	r5, [sp, #12]
 8007a40:	602a      	str	r2, [r5, #0]
 8007a42:	681d      	ldr	r5, [r3, #0]
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	f7f8 ffe0 	bl	8000a0c <__aeabi_dcmpun>
 8007a4c:	b120      	cbz	r0, 8007a58 <_scanf_float+0x408>
 8007a4e:	4807      	ldr	r0, [pc, #28]	@ (8007a6c <_scanf_float+0x41c>)
 8007a50:	f000 fa5a 	bl	8007f08 <nanf>
 8007a54:	6028      	str	r0, [r5, #0]
 8007a56:	e7d5      	b.n	8007a04 <_scanf_float+0x3b4>
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f9 f834 	bl	8000ac8 <__aeabi_d2f>
 8007a60:	e7f8      	b.n	8007a54 <_scanf_float+0x404>
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	e62d      	b.n	80076c4 <_scanf_float+0x74>
 8007a68:	0800b6e2 	.word	0x0800b6e2
 8007a6c:	0800ba7d 	.word	0x0800ba7d

08007a70 <std>:
 8007a70:	2300      	movs	r3, #0
 8007a72:	b510      	push	{r4, lr}
 8007a74:	4604      	mov	r4, r0
 8007a76:	e9c0 3300 	strd	r3, r3, [r0]
 8007a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a7e:	6083      	str	r3, [r0, #8]
 8007a80:	8181      	strh	r1, [r0, #12]
 8007a82:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a84:	81c2      	strh	r2, [r0, #14]
 8007a86:	6183      	str	r3, [r0, #24]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	305c      	adds	r0, #92	@ 0x5c
 8007a8e:	f000 f948 	bl	8007d22 <memset>
 8007a92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <std+0x58>)
 8007a94:	6224      	str	r4, [r4, #32]
 8007a96:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a98:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <std+0x5c>)
 8007a9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad0 <std+0x60>)
 8007a9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <std+0x64>)
 8007aa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <std+0x68>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	d006      	beq.n	8007ab8 <std+0x48>
 8007aaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007aae:	4294      	cmp	r4, r2
 8007ab0:	d002      	beq.n	8007ab8 <std+0x48>
 8007ab2:	33d0      	adds	r3, #208	@ 0xd0
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d105      	bne.n	8007ac4 <std+0x54>
 8007ab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	f000 ba02 	b.w	8007ec8 <__retarget_lock_init_recursive>
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	bf00      	nop
 8007ac8:	08007c9d 	.word	0x08007c9d
 8007acc:	08007cbf 	.word	0x08007cbf
 8007ad0:	08007cf7 	.word	0x08007cf7
 8007ad4:	08007d1b 	.word	0x08007d1b
 8007ad8:	20002f04 	.word	0x20002f04

08007adc <stdio_exit_handler>:
 8007adc:	4a02      	ldr	r2, [pc, #8]	@ (8007ae8 <stdio_exit_handler+0xc>)
 8007ade:	4903      	ldr	r1, [pc, #12]	@ (8007aec <stdio_exit_handler+0x10>)
 8007ae0:	4803      	ldr	r0, [pc, #12]	@ (8007af0 <stdio_exit_handler+0x14>)
 8007ae2:	f000 b869 	b.w	8007bb8 <_fwalk_sglue>
 8007ae6:	bf00      	nop
 8007ae8:	20000014 	.word	0x20000014
 8007aec:	0800a7a5 	.word	0x0800a7a5
 8007af0:	20000024 	.word	0x20000024

08007af4 <cleanup_stdio>:
 8007af4:	6841      	ldr	r1, [r0, #4]
 8007af6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <cleanup_stdio+0x34>)
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4299      	cmp	r1, r3
 8007afc:	4604      	mov	r4, r0
 8007afe:	d001      	beq.n	8007b04 <cleanup_stdio+0x10>
 8007b00:	f002 fe50 	bl	800a7a4 <_fflush_r>
 8007b04:	68a1      	ldr	r1, [r4, #8]
 8007b06:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <cleanup_stdio+0x38>)
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	d002      	beq.n	8007b12 <cleanup_stdio+0x1e>
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f002 fe49 	bl	800a7a4 <_fflush_r>
 8007b12:	68e1      	ldr	r1, [r4, #12]
 8007b14:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <cleanup_stdio+0x3c>)
 8007b16:	4299      	cmp	r1, r3
 8007b18:	d004      	beq.n	8007b24 <cleanup_stdio+0x30>
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b20:	f002 be40 	b.w	800a7a4 <_fflush_r>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	bf00      	nop
 8007b28:	20002f04 	.word	0x20002f04
 8007b2c:	20002f6c 	.word	0x20002f6c
 8007b30:	20002fd4 	.word	0x20002fd4

08007b34 <global_stdio_init.part.0>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4b0b      	ldr	r3, [pc, #44]	@ (8007b64 <global_stdio_init.part.0+0x30>)
 8007b38:	4c0b      	ldr	r4, [pc, #44]	@ (8007b68 <global_stdio_init.part.0+0x34>)
 8007b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b6c <global_stdio_init.part.0+0x38>)
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	2104      	movs	r1, #4
 8007b42:	2200      	movs	r2, #0
 8007b44:	f7ff ff94 	bl	8007a70 <std>
 8007b48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2109      	movs	r1, #9
 8007b50:	f7ff ff8e 	bl	8007a70 <std>
 8007b54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b58:	2202      	movs	r2, #2
 8007b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b5e:	2112      	movs	r1, #18
 8007b60:	f7ff bf86 	b.w	8007a70 <std>
 8007b64:	2000303c 	.word	0x2000303c
 8007b68:	20002f04 	.word	0x20002f04
 8007b6c:	08007add 	.word	0x08007add

08007b70 <__sfp_lock_acquire>:
 8007b70:	4801      	ldr	r0, [pc, #4]	@ (8007b78 <__sfp_lock_acquire+0x8>)
 8007b72:	f000 b9aa 	b.w	8007eca <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	20003045 	.word	0x20003045

08007b7c <__sfp_lock_release>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	@ (8007b84 <__sfp_lock_release+0x8>)
 8007b7e:	f000 b9a5 	b.w	8007ecc <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	20003045 	.word	0x20003045

08007b88 <__sinit>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	f7ff fff0 	bl	8007b70 <__sfp_lock_acquire>
 8007b90:	6a23      	ldr	r3, [r4, #32]
 8007b92:	b11b      	cbz	r3, 8007b9c <__sinit+0x14>
 8007b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b98:	f7ff bff0 	b.w	8007b7c <__sfp_lock_release>
 8007b9c:	4b04      	ldr	r3, [pc, #16]	@ (8007bb0 <__sinit+0x28>)
 8007b9e:	6223      	str	r3, [r4, #32]
 8007ba0:	4b04      	ldr	r3, [pc, #16]	@ (8007bb4 <__sinit+0x2c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f5      	bne.n	8007b94 <__sinit+0xc>
 8007ba8:	f7ff ffc4 	bl	8007b34 <global_stdio_init.part.0>
 8007bac:	e7f2      	b.n	8007b94 <__sinit+0xc>
 8007bae:	bf00      	nop
 8007bb0:	08007af5 	.word	0x08007af5
 8007bb4:	2000303c 	.word	0x2000303c

08007bb8 <_fwalk_sglue>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	4688      	mov	r8, r1
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8007bcc:	d505      	bpl.n	8007bda <_fwalk_sglue+0x22>
 8007bce:	6824      	ldr	r4, [r4, #0]
 8007bd0:	2c00      	cmp	r4, #0
 8007bd2:	d1f7      	bne.n	8007bc4 <_fwalk_sglue+0xc>
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d907      	bls.n	8007bf0 <_fwalk_sglue+0x38>
 8007be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007be4:	3301      	adds	r3, #1
 8007be6:	d003      	beq.n	8007bf0 <_fwalk_sglue+0x38>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4638      	mov	r0, r7
 8007bec:	47c0      	blx	r8
 8007bee:	4306      	orrs	r6, r0
 8007bf0:	3568      	adds	r5, #104	@ 0x68
 8007bf2:	e7e9      	b.n	8007bc8 <_fwalk_sglue+0x10>

08007bf4 <sniprintf>:
 8007bf4:	b40c      	push	{r2, r3}
 8007bf6:	b530      	push	{r4, r5, lr}
 8007bf8:	4b17      	ldr	r3, [pc, #92]	@ (8007c58 <sniprintf+0x64>)
 8007bfa:	1e0c      	subs	r4, r1, #0
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	b09d      	sub	sp, #116	@ 0x74
 8007c00:	da08      	bge.n	8007c14 <sniprintf+0x20>
 8007c02:	238b      	movs	r3, #139	@ 0x8b
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	b01d      	add	sp, #116	@ 0x74
 8007c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c10:	b002      	add	sp, #8
 8007c12:	4770      	bx	lr
 8007c14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c1c:	bf0c      	ite	eq
 8007c1e:	4623      	moveq	r3, r4
 8007c20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c2c:	9002      	str	r0, [sp, #8]
 8007c2e:	9006      	str	r0, [sp, #24]
 8007c30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c34:	4628      	mov	r0, r5
 8007c36:	ab21      	add	r3, sp, #132	@ 0x84
 8007c38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c3a:	a902      	add	r1, sp, #8
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	f002 fc35 	bl	800a4ac <_svfiprintf_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	bfbc      	itt	lt
 8007c46:	238b      	movlt	r3, #139	@ 0x8b
 8007c48:	602b      	strlt	r3, [r5, #0]
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	d0dd      	beq.n	8007c0a <sniprintf+0x16>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	9b02      	ldr	r3, [sp, #8]
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e7d9      	b.n	8007c0a <sniprintf+0x16>
 8007c56:	bf00      	nop
 8007c58:	20000020 	.word	0x20000020

08007c5c <siprintf>:
 8007c5c:	b40e      	push	{r1, r2, r3}
 8007c5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c62:	b500      	push	{lr}
 8007c64:	b09c      	sub	sp, #112	@ 0x70
 8007c66:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	9006      	str	r0, [sp, #24]
 8007c6c:	9107      	str	r1, [sp, #28]
 8007c6e:	9104      	str	r1, [sp, #16]
 8007c70:	4808      	ldr	r0, [pc, #32]	@ (8007c94 <siprintf+0x38>)
 8007c72:	4909      	ldr	r1, [pc, #36]	@ (8007c98 <siprintf+0x3c>)
 8007c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	a902      	add	r1, sp, #8
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	f002 fc14 	bl	800a4ac <_svfiprintf_r>
 8007c84:	2200      	movs	r2, #0
 8007c86:	9b02      	ldr	r3, [sp, #8]
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	b01c      	add	sp, #112	@ 0x70
 8007c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c90:	b003      	add	sp, #12
 8007c92:	4770      	bx	lr
 8007c94:	20000020 	.word	0x20000020
 8007c98:	ffff0208 	.word	0xffff0208

08007c9c <__sread>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	f000 f8c2 	bl	8007e2c <_read_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bfab      	itete	ge
 8007cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cae:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb0:	181b      	addge	r3, r3, r0
 8007cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007cb6:	bfac      	ite	ge
 8007cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007cba:	81a3      	strhlt	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__swrite>:
 8007cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	898b      	ldrh	r3, [r1, #12]
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	05db      	lsls	r3, r3, #23
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4616      	mov	r6, r2
 8007cce:	d505      	bpl.n	8007cdc <__swrite+0x1e>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	f000 f896 	bl	8007e08 <_lseek_r>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	f000 b8ad 	b.w	8007e50 <_write_r>

08007cf6 <__sseek>:
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfe:	f000 f883 	bl	8007e08 <_lseek_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	bf15      	itete	ne
 8007d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d12:	81a3      	strheq	r3, [r4, #12]
 8007d14:	bf18      	it	ne
 8007d16:	81a3      	strhne	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__sclose>:
 8007d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1e:	f000 b80d 	b.w	8007d3c <_close_r>

08007d22 <memset>:
 8007d22:	4603      	mov	r3, r0
 8007d24:	4402      	add	r2, r0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d100      	bne.n	8007d2c <memset+0xa>
 8007d2a:	4770      	bx	lr
 8007d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8007d30:	e7f9      	b.n	8007d26 <memset+0x4>
	...

08007d34 <_localeconv_r>:
 8007d34:	4800      	ldr	r0, [pc, #0]	@ (8007d38 <_localeconv_r+0x4>)
 8007d36:	4770      	bx	lr
 8007d38:	20000160 	.word	0x20000160

08007d3c <_close_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4d05      	ldr	r5, [pc, #20]	@ (8007d58 <_close_r+0x1c>)
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	f7f9 fee7 	bl	8001b1a <_close>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_close_r+0x1a>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_close_r+0x1a>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20003040 	.word	0x20003040

08007d5c <_reclaim_reent>:
 8007d5c:	4b29      	ldr	r3, [pc, #164]	@ (8007e04 <_reclaim_reent+0xa8>)
 8007d5e:	b570      	push	{r4, r5, r6, lr}
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4604      	mov	r4, r0
 8007d64:	4283      	cmp	r3, r0
 8007d66:	d04b      	beq.n	8007e00 <_reclaim_reent+0xa4>
 8007d68:	69c3      	ldr	r3, [r0, #28]
 8007d6a:	b1ab      	cbz	r3, 8007d98 <_reclaim_reent+0x3c>
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	b16b      	cbz	r3, 8007d8c <_reclaim_reent+0x30>
 8007d70:	2500      	movs	r5, #0
 8007d72:	69e3      	ldr	r3, [r4, #28]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	5959      	ldr	r1, [r3, r5]
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	d13b      	bne.n	8007df4 <_reclaim_reent+0x98>
 8007d7c:	3504      	adds	r5, #4
 8007d7e:	2d80      	cmp	r5, #128	@ 0x80
 8007d80:	d1f7      	bne.n	8007d72 <_reclaim_reent+0x16>
 8007d82:	69e3      	ldr	r3, [r4, #28]
 8007d84:	4620      	mov	r0, r4
 8007d86:	68d9      	ldr	r1, [r3, #12]
 8007d88:	f000 ff12 	bl	8008bb0 <_free_r>
 8007d8c:	69e3      	ldr	r3, [r4, #28]
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	b111      	cbz	r1, 8007d98 <_reclaim_reent+0x3c>
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 ff0c 	bl	8008bb0 <_free_r>
 8007d98:	6961      	ldr	r1, [r4, #20]
 8007d9a:	b111      	cbz	r1, 8007da2 <_reclaim_reent+0x46>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 ff07 	bl	8008bb0 <_free_r>
 8007da2:	69e1      	ldr	r1, [r4, #28]
 8007da4:	b111      	cbz	r1, 8007dac <_reclaim_reent+0x50>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 ff02 	bl	8008bb0 <_free_r>
 8007dac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007dae:	b111      	cbz	r1, 8007db6 <_reclaim_reent+0x5a>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 fefd 	bl	8008bb0 <_free_r>
 8007db6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007db8:	b111      	cbz	r1, 8007dc0 <_reclaim_reent+0x64>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 fef8 	bl	8008bb0 <_free_r>
 8007dc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007dc2:	b111      	cbz	r1, 8007dca <_reclaim_reent+0x6e>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 fef3 	bl	8008bb0 <_free_r>
 8007dca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007dcc:	b111      	cbz	r1, 8007dd4 <_reclaim_reent+0x78>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 feee 	bl	8008bb0 <_free_r>
 8007dd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x82>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fee9 	bl	8008bb0 <_free_r>
 8007dde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007de0:	b111      	cbz	r1, 8007de8 <_reclaim_reent+0x8c>
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 fee4 	bl	8008bb0 <_free_r>
 8007de8:	6a23      	ldr	r3, [r4, #32]
 8007dea:	b14b      	cbz	r3, 8007e00 <_reclaim_reent+0xa4>
 8007dec:	4620      	mov	r0, r4
 8007dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007df2:	4718      	bx	r3
 8007df4:	680e      	ldr	r6, [r1, #0]
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 feda 	bl	8008bb0 <_free_r>
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	e7bb      	b.n	8007d78 <_reclaim_reent+0x1c>
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	bf00      	nop
 8007e04:	20000020 	.word	0x20000020

08007e08 <_lseek_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	2200      	movs	r2, #0
 8007e12:	4d05      	ldr	r5, [pc, #20]	@ (8007e28 <_lseek_r+0x20>)
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 fea3 	bl	8001b62 <_lseek>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_lseek_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_lseek_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20003040 	.word	0x20003040

08007e2c <_read_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	2200      	movs	r2, #0
 8007e36:	4d05      	ldr	r5, [pc, #20]	@ (8007e4c <_read_r+0x20>)
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7f9 fe34 	bl	8001aa8 <_read>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_read_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_read_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20003040 	.word	0x20003040

08007e50 <_write_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	4611      	mov	r1, r2
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4d05      	ldr	r5, [pc, #20]	@ (8007e70 <_write_r+0x20>)
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7f9 fe3f 	bl	8001ae2 <_write>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_write_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_write_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20003040 	.word	0x20003040

08007e74 <__errno>:
 8007e74:	4b01      	ldr	r3, [pc, #4]	@ (8007e7c <__errno+0x8>)
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000020 	.word	0x20000020

08007e80 <__libc_init_array>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	2600      	movs	r6, #0
 8007e84:	4d0c      	ldr	r5, [pc, #48]	@ (8007eb8 <__libc_init_array+0x38>)
 8007e86:	4c0d      	ldr	r4, [pc, #52]	@ (8007ebc <__libc_init_array+0x3c>)
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	d109      	bne.n	8007ea4 <__libc_init_array+0x24>
 8007e90:	f003 fb66 	bl	800b560 <_init>
 8007e94:	2600      	movs	r6, #0
 8007e96:	4d0a      	ldr	r5, [pc, #40]	@ (8007ec0 <__libc_init_array+0x40>)
 8007e98:	4c0a      	ldr	r4, [pc, #40]	@ (8007ec4 <__libc_init_array+0x44>)
 8007e9a:	1b64      	subs	r4, r4, r5
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	42a6      	cmp	r6, r4
 8007ea0:	d105      	bne.n	8007eae <__libc_init_array+0x2e>
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
 8007ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea8:	4798      	blx	r3
 8007eaa:	3601      	adds	r6, #1
 8007eac:	e7ee      	b.n	8007e8c <__libc_init_array+0xc>
 8007eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb2:	4798      	blx	r3
 8007eb4:	3601      	adds	r6, #1
 8007eb6:	e7f2      	b.n	8007e9e <__libc_init_array+0x1e>
 8007eb8:	0800bae8 	.word	0x0800bae8
 8007ebc:	0800bae8 	.word	0x0800bae8
 8007ec0:	0800bae8 	.word	0x0800bae8
 8007ec4:	0800baec 	.word	0x0800baec

08007ec8 <__retarget_lock_init_recursive>:
 8007ec8:	4770      	bx	lr

08007eca <__retarget_lock_acquire_recursive>:
 8007eca:	4770      	bx	lr

08007ecc <__retarget_lock_release_recursive>:
 8007ecc:	4770      	bx	lr

08007ece <memchr>:
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	b2c9      	uxtb	r1, r1
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	d101      	bne.n	8007ee0 <memchr+0x12>
 8007edc:	2000      	movs	r0, #0
 8007ede:	e003      	b.n	8007ee8 <memchr+0x1a>
 8007ee0:	7804      	ldrb	r4, [r0, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	428c      	cmp	r4, r1
 8007ee6:	d1f6      	bne.n	8007ed6 <memchr+0x8>
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <memcpy>:
 8007eea:	440a      	add	r2, r1
 8007eec:	4291      	cmp	r1, r2
 8007eee:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef2:	d100      	bne.n	8007ef6 <memcpy+0xc>
 8007ef4:	4770      	bx	lr
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efc:	4291      	cmp	r1, r2
 8007efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f02:	d1f9      	bne.n	8007ef8 <memcpy+0xe>
 8007f04:	bd10      	pop	{r4, pc}
	...

08007f08 <nanf>:
 8007f08:	4800      	ldr	r0, [pc, #0]	@ (8007f0c <nanf+0x4>)
 8007f0a:	4770      	bx	lr
 8007f0c:	7fc00000 	.word	0x7fc00000

08007f10 <quorem>:
 8007f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	6903      	ldr	r3, [r0, #16]
 8007f16:	690c      	ldr	r4, [r1, #16]
 8007f18:	4607      	mov	r7, r0
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	db7e      	blt.n	800801c <quorem+0x10c>
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	00a3      	lsls	r3, r4, #2
 8007f22:	f100 0514 	add.w	r5, r0, #20
 8007f26:	f101 0814 	add.w	r8, r1, #20
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f46:	d32e      	bcc.n	8007fa6 <quorem+0x96>
 8007f48:	f04f 0a00 	mov.w	sl, #0
 8007f4c:	46c4      	mov	ip, r8
 8007f4e:	46ae      	mov	lr, r5
 8007f50:	46d3      	mov	fp, sl
 8007f52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f56:	b298      	uxth	r0, r3
 8007f58:	fb06 a000 	mla	r0, r6, r0, sl
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	0c02      	lsrs	r2, r0, #16
 8007f60:	fb06 2303 	mla	r3, r6, r3, r2
 8007f64:	f8de 2000 	ldr.w	r2, [lr]
 8007f68:	b280      	uxth	r0, r0
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	1a12      	subs	r2, r2, r0
 8007f6e:	445a      	add	r2, fp
 8007f70:	f8de 0000 	ldr.w	r0, [lr]
 8007f74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f82:	b292      	uxth	r2, r2
 8007f84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f88:	45e1      	cmp	r9, ip
 8007f8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f8e:	f84e 2b04 	str.w	r2, [lr], #4
 8007f92:	d2de      	bcs.n	8007f52 <quorem+0x42>
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	58eb      	ldr	r3, [r5, r3]
 8007f98:	b92b      	cbnz	r3, 8007fa6 <quorem+0x96>
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	d32f      	bcc.n	8008004 <quorem+0xf4>
 8007fa4:	613c      	str	r4, [r7, #16]
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f001 f9c2 	bl	8009330 <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	db25      	blt.n	8007ffc <quorem+0xec>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fb8:	f8d1 c000 	ldr.w	ip, [r1]
 8007fbc:	fa1f fe82 	uxth.w	lr, r2
 8007fc0:	fa1f f38c 	uxth.w	r3, ip
 8007fc4:	eba3 030e 	sub.w	r3, r3, lr
 8007fc8:	4403      	add	r3, r0
 8007fca:	0c12      	lsrs	r2, r2, #16
 8007fcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fda:	45c1      	cmp	r9, r8
 8007fdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fe0:	f841 3b04 	str.w	r3, [r1], #4
 8007fe4:	d2e6      	bcs.n	8007fb4 <quorem+0xa4>
 8007fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fee:	b922      	cbnz	r2, 8007ffa <quorem+0xea>
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	429d      	cmp	r5, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	d30b      	bcc.n	8008010 <quorem+0x100>
 8007ff8:	613c      	str	r4, [r7, #16]
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	b003      	add	sp, #12
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	6812      	ldr	r2, [r2, #0]
 8008006:	3b04      	subs	r3, #4
 8008008:	2a00      	cmp	r2, #0
 800800a:	d1cb      	bne.n	8007fa4 <quorem+0x94>
 800800c:	3c01      	subs	r4, #1
 800800e:	e7c6      	b.n	8007f9e <quorem+0x8e>
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	3b04      	subs	r3, #4
 8008014:	2a00      	cmp	r2, #0
 8008016:	d1ef      	bne.n	8007ff8 <quorem+0xe8>
 8008018:	3c01      	subs	r4, #1
 800801a:	e7ea      	b.n	8007ff2 <quorem+0xe2>
 800801c:	2000      	movs	r0, #0
 800801e:	e7ee      	b.n	8007ffe <quorem+0xee>

08008020 <_dtoa_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	69c7      	ldr	r7, [r0, #28]
 800802a:	b097      	sub	sp, #92	@ 0x5c
 800802c:	4683      	mov	fp, r0
 800802e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008032:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008034:	b97f      	cbnz	r7, 8008056 <_dtoa_r+0x36>
 8008036:	2010      	movs	r0, #16
 8008038:	f000 fe02 	bl	8008c40 <malloc>
 800803c:	4602      	mov	r2, r0
 800803e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008042:	b920      	cbnz	r0, 800804e <_dtoa_r+0x2e>
 8008044:	21ef      	movs	r1, #239	@ 0xef
 8008046:	4ba8      	ldr	r3, [pc, #672]	@ (80082e8 <_dtoa_r+0x2c8>)
 8008048:	48a8      	ldr	r0, [pc, #672]	@ (80082ec <_dtoa_r+0x2cc>)
 800804a:	f002 fc15 	bl	800a878 <__assert_func>
 800804e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008052:	6007      	str	r7, [r0, #0]
 8008054:	60c7      	str	r7, [r0, #12]
 8008056:	f8db 301c 	ldr.w	r3, [fp, #28]
 800805a:	6819      	ldr	r1, [r3, #0]
 800805c:	b159      	cbz	r1, 8008076 <_dtoa_r+0x56>
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	2301      	movs	r3, #1
 8008062:	4093      	lsls	r3, r2
 8008064:	604a      	str	r2, [r1, #4]
 8008066:	608b      	str	r3, [r1, #8]
 8008068:	4658      	mov	r0, fp
 800806a:	f000 fedf 	bl	8008e2c <_Bfree>
 800806e:	2200      	movs	r2, #0
 8008070:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	1e2b      	subs	r3, r5, #0
 8008078:	bfaf      	iteee	ge
 800807a:	2300      	movge	r3, #0
 800807c:	2201      	movlt	r2, #1
 800807e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008082:	9303      	strlt	r3, [sp, #12]
 8008084:	bfa8      	it	ge
 8008086:	6033      	strge	r3, [r6, #0]
 8008088:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800808c:	4b98      	ldr	r3, [pc, #608]	@ (80082f0 <_dtoa_r+0x2d0>)
 800808e:	bfb8      	it	lt
 8008090:	6032      	strlt	r2, [r6, #0]
 8008092:	ea33 0308 	bics.w	r3, r3, r8
 8008096:	d112      	bne.n	80080be <_dtoa_r+0x9e>
 8008098:	f242 730f 	movw	r3, #9999	@ 0x270f
 800809c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080a4:	4323      	orrs	r3, r4
 80080a6:	f000 8550 	beq.w	8008b4a <_dtoa_r+0xb2a>
 80080aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80082f4 <_dtoa_r+0x2d4>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8552 	beq.w	8008b5a <_dtoa_r+0xb3a>
 80080b6:	f10a 0303 	add.w	r3, sl, #3
 80080ba:	f000 bd4c 	b.w	8008b56 <_dtoa_r+0xb36>
 80080be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ca:	2200      	movs	r2, #0
 80080cc:	2300      	movs	r3, #0
 80080ce:	f7f8 fc6b 	bl	80009a8 <__aeabi_dcmpeq>
 80080d2:	4607      	mov	r7, r0
 80080d4:	b158      	cbz	r0, 80080ee <_dtoa_r+0xce>
 80080d6:	2301      	movs	r3, #1
 80080d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080de:	b113      	cbz	r3, 80080e6 <_dtoa_r+0xc6>
 80080e0:	4b85      	ldr	r3, [pc, #532]	@ (80082f8 <_dtoa_r+0x2d8>)
 80080e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80082fc <_dtoa_r+0x2dc>
 80080ea:	f000 bd36 	b.w	8008b5a <_dtoa_r+0xb3a>
 80080ee:	ab14      	add	r3, sp, #80	@ 0x50
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	ab15      	add	r3, sp, #84	@ 0x54
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4658      	mov	r0, fp
 80080f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080fc:	f001 fa30 	bl	8009560 <__d2b>
 8008100:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008104:	4681      	mov	r9, r0
 8008106:	2e00      	cmp	r6, #0
 8008108:	d077      	beq.n	80081fa <_dtoa_r+0x1da>
 800810a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800810e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008110:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008118:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800811c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008120:	9712      	str	r7, [sp, #72]	@ 0x48
 8008122:	4619      	mov	r1, r3
 8008124:	2200      	movs	r2, #0
 8008126:	4b76      	ldr	r3, [pc, #472]	@ (8008300 <_dtoa_r+0x2e0>)
 8008128:	f7f8 f81e 	bl	8000168 <__aeabi_dsub>
 800812c:	a368      	add	r3, pc, #416	@ (adr r3, 80082d0 <_dtoa_r+0x2b0>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f9d1 	bl	80004d8 <__aeabi_dmul>
 8008136:	a368      	add	r3, pc, #416	@ (adr r3, 80082d8 <_dtoa_r+0x2b8>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f816 	bl	800016c <__adddf3>
 8008140:	4604      	mov	r4, r0
 8008142:	4630      	mov	r0, r6
 8008144:	460d      	mov	r5, r1
 8008146:	f7f8 f95d 	bl	8000404 <__aeabi_i2d>
 800814a:	a365      	add	r3, pc, #404	@ (adr r3, 80082e0 <_dtoa_r+0x2c0>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f9c2 	bl	80004d8 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4620      	mov	r0, r4
 800815a:	4629      	mov	r1, r5
 800815c:	f7f8 f806 	bl	800016c <__adddf3>
 8008160:	4604      	mov	r4, r0
 8008162:	460d      	mov	r5, r1
 8008164:	f7f8 fc68 	bl	8000a38 <__aeabi_d2iz>
 8008168:	2200      	movs	r2, #0
 800816a:	4607      	mov	r7, r0
 800816c:	2300      	movs	r3, #0
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f8 fc23 	bl	80009bc <__aeabi_dcmplt>
 8008176:	b140      	cbz	r0, 800818a <_dtoa_r+0x16a>
 8008178:	4638      	mov	r0, r7
 800817a:	f7f8 f943 	bl	8000404 <__aeabi_i2d>
 800817e:	4622      	mov	r2, r4
 8008180:	462b      	mov	r3, r5
 8008182:	f7f8 fc11 	bl	80009a8 <__aeabi_dcmpeq>
 8008186:	b900      	cbnz	r0, 800818a <_dtoa_r+0x16a>
 8008188:	3f01      	subs	r7, #1
 800818a:	2f16      	cmp	r7, #22
 800818c:	d853      	bhi.n	8008236 <_dtoa_r+0x216>
 800818e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008192:	4b5c      	ldr	r3, [pc, #368]	@ (8008304 <_dtoa_r+0x2e4>)
 8008194:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 fc0e 	bl	80009bc <__aeabi_dcmplt>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d04a      	beq.n	800823a <_dtoa_r+0x21a>
 80081a4:	2300      	movs	r3, #0
 80081a6:	3f01      	subs	r7, #1
 80081a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081ac:	1b9b      	subs	r3, r3, r6
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	bf46      	itte	mi
 80081b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80081b6:	2300      	movmi	r3, #0
 80081b8:	f04f 0800 	movpl.w	r8, #0
 80081bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081be:	bf48      	it	mi
 80081c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	db3b      	blt.n	800823e <_dtoa_r+0x21e>
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80081ca:	443b      	add	r3, r7
 80081cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ce:	2300      	movs	r3, #0
 80081d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d866      	bhi.n	80082a6 <_dtoa_r+0x286>
 80081d8:	2b05      	cmp	r3, #5
 80081da:	bfc4      	itt	gt
 80081dc:	3b04      	subgt	r3, #4
 80081de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80081e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081e2:	bfc8      	it	gt
 80081e4:	2400      	movgt	r4, #0
 80081e6:	f1a3 0302 	sub.w	r3, r3, #2
 80081ea:	bfd8      	it	le
 80081ec:	2401      	movle	r4, #1
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d864      	bhi.n	80082bc <_dtoa_r+0x29c>
 80081f2:	e8df f003 	tbb	[pc, r3]
 80081f6:	382b      	.short	0x382b
 80081f8:	5636      	.short	0x5636
 80081fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80081fe:	441e      	add	r6, r3
 8008200:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008204:	2b20      	cmp	r3, #32
 8008206:	bfc1      	itttt	gt
 8008208:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800820c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008210:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008214:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008218:	bfd6      	itet	le
 800821a:	f1c3 0320 	rsble	r3, r3, #32
 800821e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008222:	fa04 f003 	lslle.w	r0, r4, r3
 8008226:	f7f8 f8dd 	bl	80003e4 <__aeabi_ui2d>
 800822a:	2201      	movs	r2, #1
 800822c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008230:	3e01      	subs	r6, #1
 8008232:	9212      	str	r2, [sp, #72]	@ 0x48
 8008234:	e775      	b.n	8008122 <_dtoa_r+0x102>
 8008236:	2301      	movs	r3, #1
 8008238:	e7b6      	b.n	80081a8 <_dtoa_r+0x188>
 800823a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800823c:	e7b5      	b.n	80081aa <_dtoa_r+0x18a>
 800823e:	427b      	negs	r3, r7
 8008240:	930a      	str	r3, [sp, #40]	@ 0x28
 8008242:	2300      	movs	r3, #0
 8008244:	eba8 0807 	sub.w	r8, r8, r7
 8008248:	930e      	str	r3, [sp, #56]	@ 0x38
 800824a:	e7c2      	b.n	80081d2 <_dtoa_r+0x1b2>
 800824c:	2300      	movs	r3, #0
 800824e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008250:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008252:	2b00      	cmp	r3, #0
 8008254:	dc35      	bgt.n	80082c2 <_dtoa_r+0x2a2>
 8008256:	2301      	movs	r3, #1
 8008258:	461a      	mov	r2, r3
 800825a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800825e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008260:	e00b      	b.n	800827a <_dtoa_r+0x25a>
 8008262:	2301      	movs	r3, #1
 8008264:	e7f3      	b.n	800824e <_dtoa_r+0x22e>
 8008266:	2300      	movs	r3, #0
 8008268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800826a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	3301      	adds	r3, #1
 8008272:	2b01      	cmp	r3, #1
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	bfb8      	it	lt
 8008278:	2301      	movlt	r3, #1
 800827a:	2100      	movs	r1, #0
 800827c:	2204      	movs	r2, #4
 800827e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008282:	f102 0514 	add.w	r5, r2, #20
 8008286:	429d      	cmp	r5, r3
 8008288:	d91f      	bls.n	80082ca <_dtoa_r+0x2aa>
 800828a:	6041      	str	r1, [r0, #4]
 800828c:	4658      	mov	r0, fp
 800828e:	f000 fd8d 	bl	8008dac <_Balloc>
 8008292:	4682      	mov	sl, r0
 8008294:	2800      	cmp	r0, #0
 8008296:	d139      	bne.n	800830c <_dtoa_r+0x2ec>
 8008298:	4602      	mov	r2, r0
 800829a:	f240 11af 	movw	r1, #431	@ 0x1af
 800829e:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <_dtoa_r+0x2e8>)
 80082a0:	e6d2      	b.n	8008048 <_dtoa_r+0x28>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7e0      	b.n	8008268 <_dtoa_r+0x248>
 80082a6:	2401      	movs	r4, #1
 80082a8:	2300      	movs	r3, #0
 80082aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295
 80082b2:	2200      	movs	r2, #0
 80082b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082b8:	2312      	movs	r3, #18
 80082ba:	e7d0      	b.n	800825e <_dtoa_r+0x23e>
 80082bc:	2301      	movs	r3, #1
 80082be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082c0:	e7f5      	b.n	80082ae <_dtoa_r+0x28e>
 80082c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082c8:	e7d7      	b.n	800827a <_dtoa_r+0x25a>
 80082ca:	3101      	adds	r1, #1
 80082cc:	0052      	lsls	r2, r2, #1
 80082ce:	e7d8      	b.n	8008282 <_dtoa_r+0x262>
 80082d0:	636f4361 	.word	0x636f4361
 80082d4:	3fd287a7 	.word	0x3fd287a7
 80082d8:	8b60c8b3 	.word	0x8b60c8b3
 80082dc:	3fc68a28 	.word	0x3fc68a28
 80082e0:	509f79fb 	.word	0x509f79fb
 80082e4:	3fd34413 	.word	0x3fd34413
 80082e8:	0800b6f4 	.word	0x0800b6f4
 80082ec:	0800b70b 	.word	0x0800b70b
 80082f0:	7ff00000 	.word	0x7ff00000
 80082f4:	0800b6f0 	.word	0x0800b6f0
 80082f8:	0800b6bf 	.word	0x0800b6bf
 80082fc:	0800b6be 	.word	0x0800b6be
 8008300:	3ff80000 	.word	0x3ff80000
 8008304:	0800b808 	.word	0x0800b808
 8008308:	0800b763 	.word	0x0800b763
 800830c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008310:	6018      	str	r0, [r3, #0]
 8008312:	9b07      	ldr	r3, [sp, #28]
 8008314:	2b0e      	cmp	r3, #14
 8008316:	f200 80a4 	bhi.w	8008462 <_dtoa_r+0x442>
 800831a:	2c00      	cmp	r4, #0
 800831c:	f000 80a1 	beq.w	8008462 <_dtoa_r+0x442>
 8008320:	2f00      	cmp	r7, #0
 8008322:	dd33      	ble.n	800838c <_dtoa_r+0x36c>
 8008324:	4b86      	ldr	r3, [pc, #536]	@ (8008540 <_dtoa_r+0x520>)
 8008326:	f007 020f 	and.w	r2, r7, #15
 800832a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800832e:	05f8      	lsls	r0, r7, #23
 8008330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008334:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008338:	ea4f 1427 	mov.w	r4, r7, asr #4
 800833c:	d516      	bpl.n	800836c <_dtoa_r+0x34c>
 800833e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008342:	4b80      	ldr	r3, [pc, #512]	@ (8008544 <_dtoa_r+0x524>)
 8008344:	2603      	movs	r6, #3
 8008346:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800834a:	f7f8 f9ef 	bl	800072c <__aeabi_ddiv>
 800834e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008352:	f004 040f 	and.w	r4, r4, #15
 8008356:	4d7b      	ldr	r5, [pc, #492]	@ (8008544 <_dtoa_r+0x524>)
 8008358:	b954      	cbnz	r4, 8008370 <_dtoa_r+0x350>
 800835a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008362:	f7f8 f9e3 	bl	800072c <__aeabi_ddiv>
 8008366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836a:	e028      	b.n	80083be <_dtoa_r+0x39e>
 800836c:	2602      	movs	r6, #2
 800836e:	e7f2      	b.n	8008356 <_dtoa_r+0x336>
 8008370:	07e1      	lsls	r1, r4, #31
 8008372:	d508      	bpl.n	8008386 <_dtoa_r+0x366>
 8008374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008378:	e9d5 2300 	ldrd	r2, r3, [r5]
 800837c:	f7f8 f8ac 	bl	80004d8 <__aeabi_dmul>
 8008380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008384:	3601      	adds	r6, #1
 8008386:	1064      	asrs	r4, r4, #1
 8008388:	3508      	adds	r5, #8
 800838a:	e7e5      	b.n	8008358 <_dtoa_r+0x338>
 800838c:	f000 80d2 	beq.w	8008534 <_dtoa_r+0x514>
 8008390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008394:	427c      	negs	r4, r7
 8008396:	4b6a      	ldr	r3, [pc, #424]	@ (8008540 <_dtoa_r+0x520>)
 8008398:	f004 020f 	and.w	r2, r4, #15
 800839c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f8 f898 	bl	80004d8 <__aeabi_dmul>
 80083a8:	2602      	movs	r6, #2
 80083aa:	2300      	movs	r3, #0
 80083ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b0:	4d64      	ldr	r5, [pc, #400]	@ (8008544 <_dtoa_r+0x524>)
 80083b2:	1124      	asrs	r4, r4, #4
 80083b4:	2c00      	cmp	r4, #0
 80083b6:	f040 80b2 	bne.w	800851e <_dtoa_r+0x4fe>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1d3      	bne.n	8008366 <_dtoa_r+0x346>
 80083be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80b7 	beq.w	8008538 <_dtoa_r+0x518>
 80083ca:	2200      	movs	r2, #0
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	4b5d      	ldr	r3, [pc, #372]	@ (8008548 <_dtoa_r+0x528>)
 80083d2:	f7f8 faf3 	bl	80009bc <__aeabi_dcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f000 80ae 	beq.w	8008538 <_dtoa_r+0x518>
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80aa 	beq.w	8008538 <_dtoa_r+0x518>
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd37      	ble.n	800845a <_dtoa_r+0x43a>
 80083ea:	1e7b      	subs	r3, r7, #1
 80083ec:	4620      	mov	r0, r4
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	2200      	movs	r2, #0
 80083f2:	4629      	mov	r1, r5
 80083f4:	4b55      	ldr	r3, [pc, #340]	@ (800854c <_dtoa_r+0x52c>)
 80083f6:	f7f8 f86f 	bl	80004d8 <__aeabi_dmul>
 80083fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083fe:	9c08      	ldr	r4, [sp, #32]
 8008400:	3601      	adds	r6, #1
 8008402:	4630      	mov	r0, r6
 8008404:	f7f7 fffe 	bl	8000404 <__aeabi_i2d>
 8008408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800840c:	f7f8 f864 	bl	80004d8 <__aeabi_dmul>
 8008410:	2200      	movs	r2, #0
 8008412:	4b4f      	ldr	r3, [pc, #316]	@ (8008550 <_dtoa_r+0x530>)
 8008414:	f7f7 feaa 	bl	800016c <__adddf3>
 8008418:	4605      	mov	r5, r0
 800841a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800841e:	2c00      	cmp	r4, #0
 8008420:	f040 809a 	bne.w	8008558 <_dtoa_r+0x538>
 8008424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008428:	2200      	movs	r2, #0
 800842a:	4b4a      	ldr	r3, [pc, #296]	@ (8008554 <_dtoa_r+0x534>)
 800842c:	f7f7 fe9c 	bl	8000168 <__aeabi_dsub>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008438:	462a      	mov	r2, r5
 800843a:	4633      	mov	r3, r6
 800843c:	f7f8 fadc 	bl	80009f8 <__aeabi_dcmpgt>
 8008440:	2800      	cmp	r0, #0
 8008442:	f040 828e 	bne.w	8008962 <_dtoa_r+0x942>
 8008446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800844a:	462a      	mov	r2, r5
 800844c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008450:	f7f8 fab4 	bl	80009bc <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	f040 8127 	bne.w	80086a8 <_dtoa_r+0x688>
 800845a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800845e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008462:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008464:	2b00      	cmp	r3, #0
 8008466:	f2c0 8163 	blt.w	8008730 <_dtoa_r+0x710>
 800846a:	2f0e      	cmp	r7, #14
 800846c:	f300 8160 	bgt.w	8008730 <_dtoa_r+0x710>
 8008470:	4b33      	ldr	r3, [pc, #204]	@ (8008540 <_dtoa_r+0x520>)
 8008472:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800847a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800847e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008480:	2b00      	cmp	r3, #0
 8008482:	da03      	bge.n	800848c <_dtoa_r+0x46c>
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f340 8100 	ble.w	800868c <_dtoa_r+0x66c>
 800848c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008490:	4656      	mov	r6, sl
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	f7f8 f947 	bl	800072c <__aeabi_ddiv>
 800849e:	f7f8 facb 	bl	8000a38 <__aeabi_d2iz>
 80084a2:	4680      	mov	r8, r0
 80084a4:	f7f7 ffae 	bl	8000404 <__aeabi_i2d>
 80084a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ac:	f7f8 f814 	bl	80004d8 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4620      	mov	r0, r4
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7f7 fe56 	bl	8000168 <__aeabi_dsub>
 80084bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084c0:	9d07      	ldr	r5, [sp, #28]
 80084c2:	f806 4b01 	strb.w	r4, [r6], #1
 80084c6:	eba6 040a 	sub.w	r4, r6, sl
 80084ca:	42a5      	cmp	r5, r4
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	f040 8116 	bne.w	8008700 <_dtoa_r+0x6e0>
 80084d4:	f7f7 fe4a 	bl	800016c <__adddf3>
 80084d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084dc:	4604      	mov	r4, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	f7f8 fa8a 	bl	80009f8 <__aeabi_dcmpgt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f040 80f8 	bne.w	80086da <_dtoa_r+0x6ba>
 80084ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ee:	4620      	mov	r0, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f8 fa59 	bl	80009a8 <__aeabi_dcmpeq>
 80084f6:	b118      	cbz	r0, 8008500 <_dtoa_r+0x4e0>
 80084f8:	f018 0f01 	tst.w	r8, #1
 80084fc:	f040 80ed 	bne.w	80086da <_dtoa_r+0x6ba>
 8008500:	4649      	mov	r1, r9
 8008502:	4658      	mov	r0, fp
 8008504:	f000 fc92 	bl	8008e2c <_Bfree>
 8008508:	2300      	movs	r3, #0
 800850a:	7033      	strb	r3, [r6, #0]
 800850c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800850e:	3701      	adds	r7, #1
 8008510:	601f      	str	r7, [r3, #0]
 8008512:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8320 	beq.w	8008b5a <_dtoa_r+0xb3a>
 800851a:	601e      	str	r6, [r3, #0]
 800851c:	e31d      	b.n	8008b5a <_dtoa_r+0xb3a>
 800851e:	07e2      	lsls	r2, r4, #31
 8008520:	d505      	bpl.n	800852e <_dtoa_r+0x50e>
 8008522:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008526:	f7f7 ffd7 	bl	80004d8 <__aeabi_dmul>
 800852a:	2301      	movs	r3, #1
 800852c:	3601      	adds	r6, #1
 800852e:	1064      	asrs	r4, r4, #1
 8008530:	3508      	adds	r5, #8
 8008532:	e73f      	b.n	80083b4 <_dtoa_r+0x394>
 8008534:	2602      	movs	r6, #2
 8008536:	e742      	b.n	80083be <_dtoa_r+0x39e>
 8008538:	9c07      	ldr	r4, [sp, #28]
 800853a:	9704      	str	r7, [sp, #16]
 800853c:	e761      	b.n	8008402 <_dtoa_r+0x3e2>
 800853e:	bf00      	nop
 8008540:	0800b808 	.word	0x0800b808
 8008544:	0800b7e0 	.word	0x0800b7e0
 8008548:	3ff00000 	.word	0x3ff00000
 800854c:	40240000 	.word	0x40240000
 8008550:	401c0000 	.word	0x401c0000
 8008554:	40140000 	.word	0x40140000
 8008558:	4b70      	ldr	r3, [pc, #448]	@ (800871c <_dtoa_r+0x6fc>)
 800855a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800855c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008560:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008564:	4454      	add	r4, sl
 8008566:	2900      	cmp	r1, #0
 8008568:	d045      	beq.n	80085f6 <_dtoa_r+0x5d6>
 800856a:	2000      	movs	r0, #0
 800856c:	496c      	ldr	r1, [pc, #432]	@ (8008720 <_dtoa_r+0x700>)
 800856e:	f7f8 f8dd 	bl	800072c <__aeabi_ddiv>
 8008572:	4633      	mov	r3, r6
 8008574:	462a      	mov	r2, r5
 8008576:	f7f7 fdf7 	bl	8000168 <__aeabi_dsub>
 800857a:	4656      	mov	r6, sl
 800857c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008584:	f7f8 fa58 	bl	8000a38 <__aeabi_d2iz>
 8008588:	4605      	mov	r5, r0
 800858a:	f7f7 ff3b 	bl	8000404 <__aeabi_i2d>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008596:	f7f7 fde7 	bl	8000168 <__aeabi_dsub>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	3530      	adds	r5, #48	@ 0x30
 80085a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085a8:	f806 5b01 	strb.w	r5, [r6], #1
 80085ac:	f7f8 fa06 	bl	80009bc <__aeabi_dcmplt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d163      	bne.n	800867c <_dtoa_r+0x65c>
 80085b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b8:	2000      	movs	r0, #0
 80085ba:	495a      	ldr	r1, [pc, #360]	@ (8008724 <_dtoa_r+0x704>)
 80085bc:	f7f7 fdd4 	bl	8000168 <__aeabi_dsub>
 80085c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085c4:	f7f8 f9fa 	bl	80009bc <__aeabi_dcmplt>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 8087 	bne.w	80086dc <_dtoa_r+0x6bc>
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	f43f af43 	beq.w	800845a <_dtoa_r+0x43a>
 80085d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085d8:	2200      	movs	r2, #0
 80085da:	4b53      	ldr	r3, [pc, #332]	@ (8008728 <_dtoa_r+0x708>)
 80085dc:	f7f7 ff7c 	bl	80004d8 <__aeabi_dmul>
 80085e0:	2200      	movs	r2, #0
 80085e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008728 <_dtoa_r+0x708>)
 80085ec:	f7f7 ff74 	bl	80004d8 <__aeabi_dmul>
 80085f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f4:	e7c4      	b.n	8008580 <_dtoa_r+0x560>
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	4656      	mov	r6, sl
 8008600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008604:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860a:	f7f8 fa15 	bl	8000a38 <__aeabi_d2iz>
 800860e:	4605      	mov	r5, r0
 8008610:	f7f7 fef8 	bl	8000404 <__aeabi_i2d>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861c:	f7f7 fda4 	bl	8000168 <__aeabi_dsub>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	3530      	adds	r5, #48	@ 0x30
 8008626:	f806 5b01 	strb.w	r5, [r6], #1
 800862a:	42a6      	cmp	r6, r4
 800862c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	d124      	bne.n	8008680 <_dtoa_r+0x660>
 8008636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800863a:	4b39      	ldr	r3, [pc, #228]	@ (8008720 <_dtoa_r+0x700>)
 800863c:	f7f7 fd96 	bl	800016c <__adddf3>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008648:	f7f8 f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800864c:	2800      	cmp	r0, #0
 800864e:	d145      	bne.n	80086dc <_dtoa_r+0x6bc>
 8008650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008654:	2000      	movs	r0, #0
 8008656:	4932      	ldr	r1, [pc, #200]	@ (8008720 <_dtoa_r+0x700>)
 8008658:	f7f7 fd86 	bl	8000168 <__aeabi_dsub>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008664:	f7f8 f9aa 	bl	80009bc <__aeabi_dcmplt>
 8008668:	2800      	cmp	r0, #0
 800866a:	f43f aef6 	beq.w	800845a <_dtoa_r+0x43a>
 800866e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008670:	1e73      	subs	r3, r6, #1
 8008672:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008674:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008678:	2b30      	cmp	r3, #48	@ 0x30
 800867a:	d0f8      	beq.n	800866e <_dtoa_r+0x64e>
 800867c:	9f04      	ldr	r7, [sp, #16]
 800867e:	e73f      	b.n	8008500 <_dtoa_r+0x4e0>
 8008680:	4b29      	ldr	r3, [pc, #164]	@ (8008728 <_dtoa_r+0x708>)
 8008682:	f7f7 ff29 	bl	80004d8 <__aeabi_dmul>
 8008686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868a:	e7bc      	b.n	8008606 <_dtoa_r+0x5e6>
 800868c:	d10c      	bne.n	80086a8 <_dtoa_r+0x688>
 800868e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008692:	2200      	movs	r2, #0
 8008694:	4b25      	ldr	r3, [pc, #148]	@ (800872c <_dtoa_r+0x70c>)
 8008696:	f7f7 ff1f 	bl	80004d8 <__aeabi_dmul>
 800869a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800869e:	f7f8 f9a1 	bl	80009e4 <__aeabi_dcmpge>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f000 815b 	beq.w	800895e <_dtoa_r+0x93e>
 80086a8:	2400      	movs	r4, #0
 80086aa:	4625      	mov	r5, r4
 80086ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086ae:	4656      	mov	r6, sl
 80086b0:	43db      	mvns	r3, r3
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	2700      	movs	r7, #0
 80086b6:	4621      	mov	r1, r4
 80086b8:	4658      	mov	r0, fp
 80086ba:	f000 fbb7 	bl	8008e2c <_Bfree>
 80086be:	2d00      	cmp	r5, #0
 80086c0:	d0dc      	beq.n	800867c <_dtoa_r+0x65c>
 80086c2:	b12f      	cbz	r7, 80086d0 <_dtoa_r+0x6b0>
 80086c4:	42af      	cmp	r7, r5
 80086c6:	d003      	beq.n	80086d0 <_dtoa_r+0x6b0>
 80086c8:	4639      	mov	r1, r7
 80086ca:	4658      	mov	r0, fp
 80086cc:	f000 fbae 	bl	8008e2c <_Bfree>
 80086d0:	4629      	mov	r1, r5
 80086d2:	4658      	mov	r0, fp
 80086d4:	f000 fbaa 	bl	8008e2c <_Bfree>
 80086d8:	e7d0      	b.n	800867c <_dtoa_r+0x65c>
 80086da:	9704      	str	r7, [sp, #16]
 80086dc:	4633      	mov	r3, r6
 80086de:	461e      	mov	r6, r3
 80086e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e4:	2a39      	cmp	r2, #57	@ 0x39
 80086e6:	d107      	bne.n	80086f8 <_dtoa_r+0x6d8>
 80086e8:	459a      	cmp	sl, r3
 80086ea:	d1f8      	bne.n	80086de <_dtoa_r+0x6be>
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	3201      	adds	r2, #1
 80086f0:	9204      	str	r2, [sp, #16]
 80086f2:	2230      	movs	r2, #48	@ 0x30
 80086f4:	f88a 2000 	strb.w	r2, [sl]
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	3201      	adds	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e7bd      	b.n	800867c <_dtoa_r+0x65c>
 8008700:	2200      	movs	r2, #0
 8008702:	4b09      	ldr	r3, [pc, #36]	@ (8008728 <_dtoa_r+0x708>)
 8008704:	f7f7 fee8 	bl	80004d8 <__aeabi_dmul>
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	f7f8 f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	f43f aebc 	beq.w	8008492 <_dtoa_r+0x472>
 800871a:	e6f1      	b.n	8008500 <_dtoa_r+0x4e0>
 800871c:	0800b808 	.word	0x0800b808
 8008720:	3fe00000 	.word	0x3fe00000
 8008724:	3ff00000 	.word	0x3ff00000
 8008728:	40240000 	.word	0x40240000
 800872c:	40140000 	.word	0x40140000
 8008730:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008732:	2a00      	cmp	r2, #0
 8008734:	f000 80db 	beq.w	80088ee <_dtoa_r+0x8ce>
 8008738:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800873a:	2a01      	cmp	r2, #1
 800873c:	f300 80bf 	bgt.w	80088be <_dtoa_r+0x89e>
 8008740:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008742:	2a00      	cmp	r2, #0
 8008744:	f000 80b7 	beq.w	80088b6 <_dtoa_r+0x896>
 8008748:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800874c:	4646      	mov	r6, r8
 800874e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008752:	2101      	movs	r1, #1
 8008754:	441a      	add	r2, r3
 8008756:	4658      	mov	r0, fp
 8008758:	4498      	add	r8, r3
 800875a:	9209      	str	r2, [sp, #36]	@ 0x24
 800875c:	f000 fc64 	bl	8009028 <__i2b>
 8008760:	4605      	mov	r5, r0
 8008762:	b15e      	cbz	r6, 800877c <_dtoa_r+0x75c>
 8008764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd08      	ble.n	800877c <_dtoa_r+0x75c>
 800876a:	42b3      	cmp	r3, r6
 800876c:	bfa8      	it	ge
 800876e:	4633      	movge	r3, r6
 8008770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008772:	eba8 0803 	sub.w	r8, r8, r3
 8008776:	1af6      	subs	r6, r6, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	9309      	str	r3, [sp, #36]	@ 0x24
 800877c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800877e:	b1f3      	cbz	r3, 80087be <_dtoa_r+0x79e>
 8008780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80b7 	beq.w	80088f6 <_dtoa_r+0x8d6>
 8008788:	b18c      	cbz	r4, 80087ae <_dtoa_r+0x78e>
 800878a:	4629      	mov	r1, r5
 800878c:	4622      	mov	r2, r4
 800878e:	4658      	mov	r0, fp
 8008790:	f000 fd08 	bl	80091a4 <__pow5mult>
 8008794:	464a      	mov	r2, r9
 8008796:	4601      	mov	r1, r0
 8008798:	4605      	mov	r5, r0
 800879a:	4658      	mov	r0, fp
 800879c:	f000 fc5a 	bl	8009054 <__multiply>
 80087a0:	4649      	mov	r1, r9
 80087a2:	9004      	str	r0, [sp, #16]
 80087a4:	4658      	mov	r0, fp
 80087a6:	f000 fb41 	bl	8008e2c <_Bfree>
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	4699      	mov	r9, r3
 80087ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087b0:	1b1a      	subs	r2, r3, r4
 80087b2:	d004      	beq.n	80087be <_dtoa_r+0x79e>
 80087b4:	4649      	mov	r1, r9
 80087b6:	4658      	mov	r0, fp
 80087b8:	f000 fcf4 	bl	80091a4 <__pow5mult>
 80087bc:	4681      	mov	r9, r0
 80087be:	2101      	movs	r1, #1
 80087c0:	4658      	mov	r0, fp
 80087c2:	f000 fc31 	bl	8009028 <__i2b>
 80087c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087c8:	4604      	mov	r4, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 81c9 	beq.w	8008b62 <_dtoa_r+0xb42>
 80087d0:	461a      	mov	r2, r3
 80087d2:	4601      	mov	r1, r0
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 fce5 	bl	80091a4 <__pow5mult>
 80087da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087dc:	4604      	mov	r4, r0
 80087de:	2b01      	cmp	r3, #1
 80087e0:	f300 808f 	bgt.w	8008902 <_dtoa_r+0x8e2>
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f040 8087 	bne.w	80088fa <_dtoa_r+0x8da>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 8083 	bne.w	80088fe <_dtoa_r+0x8de>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087fe:	0d1b      	lsrs	r3, r3, #20
 8008800:	051b      	lsls	r3, r3, #20
 8008802:	b12b      	cbz	r3, 8008810 <_dtoa_r+0x7f0>
 8008804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008806:	f108 0801 	add.w	r8, r8, #1
 800880a:	3301      	adds	r3, #1
 800880c:	9309      	str	r3, [sp, #36]	@ 0x24
 800880e:	2301      	movs	r3, #1
 8008810:	930a      	str	r3, [sp, #40]	@ 0x28
 8008812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 81aa 	beq.w	8008b6e <_dtoa_r+0xb4e>
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008820:	6918      	ldr	r0, [r3, #16]
 8008822:	f000 fbb5 	bl	8008f90 <__hi0bits>
 8008826:	f1c0 0020 	rsb	r0, r0, #32
 800882a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882c:	4418      	add	r0, r3
 800882e:	f010 001f 	ands.w	r0, r0, #31
 8008832:	d071      	beq.n	8008918 <_dtoa_r+0x8f8>
 8008834:	f1c0 0320 	rsb	r3, r0, #32
 8008838:	2b04      	cmp	r3, #4
 800883a:	dd65      	ble.n	8008908 <_dtoa_r+0x8e8>
 800883c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883e:	f1c0 001c 	rsb	r0, r0, #28
 8008842:	4403      	add	r3, r0
 8008844:	4480      	add	r8, r0
 8008846:	4406      	add	r6, r0
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	f1b8 0f00 	cmp.w	r8, #0
 800884e:	dd05      	ble.n	800885c <_dtoa_r+0x83c>
 8008850:	4649      	mov	r1, r9
 8008852:	4642      	mov	r2, r8
 8008854:	4658      	mov	r0, fp
 8008856:	f000 fcff 	bl	8009258 <__lshift>
 800885a:	4681      	mov	r9, r0
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd05      	ble.n	800886e <_dtoa_r+0x84e>
 8008862:	4621      	mov	r1, r4
 8008864:	461a      	mov	r2, r3
 8008866:	4658      	mov	r0, fp
 8008868:	f000 fcf6 	bl	8009258 <__lshift>
 800886c:	4604      	mov	r4, r0
 800886e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d053      	beq.n	800891c <_dtoa_r+0x8fc>
 8008874:	4621      	mov	r1, r4
 8008876:	4648      	mov	r0, r9
 8008878:	f000 fd5a 	bl	8009330 <__mcmp>
 800887c:	2800      	cmp	r0, #0
 800887e:	da4d      	bge.n	800891c <_dtoa_r+0x8fc>
 8008880:	1e7b      	subs	r3, r7, #1
 8008882:	4649      	mov	r1, r9
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	220a      	movs	r2, #10
 8008888:	2300      	movs	r3, #0
 800888a:	4658      	mov	r0, fp
 800888c:	f000 faf0 	bl	8008e70 <__multadd>
 8008890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008892:	4681      	mov	r9, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 816c 	beq.w	8008b72 <_dtoa_r+0xb52>
 800889a:	2300      	movs	r3, #0
 800889c:	4629      	mov	r1, r5
 800889e:	220a      	movs	r2, #10
 80088a0:	4658      	mov	r0, fp
 80088a2:	f000 fae5 	bl	8008e70 <__multadd>
 80088a6:	9b08      	ldr	r3, [sp, #32]
 80088a8:	4605      	mov	r5, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dc61      	bgt.n	8008972 <_dtoa_r+0x952>
 80088ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	dc3b      	bgt.n	800892c <_dtoa_r+0x90c>
 80088b4:	e05d      	b.n	8008972 <_dtoa_r+0x952>
 80088b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088bc:	e746      	b.n	800874c <_dtoa_r+0x72c>
 80088be:	9b07      	ldr	r3, [sp, #28]
 80088c0:	1e5c      	subs	r4, r3, #1
 80088c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	bfbf      	itttt	lt
 80088c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80088cc:	1ae3      	sublt	r3, r4, r3
 80088ce:	18d2      	addlt	r2, r2, r3
 80088d0:	bfa8      	it	ge
 80088d2:	1b1c      	subge	r4, r3, r4
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	bfbe      	ittt	lt
 80088d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80088dc:	2400      	movlt	r4, #0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb5      	itete	lt
 80088e2:	eba8 0603 	sublt.w	r6, r8, r3
 80088e6:	4646      	movge	r6, r8
 80088e8:	2300      	movlt	r3, #0
 80088ea:	9b07      	ldrge	r3, [sp, #28]
 80088ec:	e730      	b.n	8008750 <_dtoa_r+0x730>
 80088ee:	4646      	mov	r6, r8
 80088f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80088f4:	e735      	b.n	8008762 <_dtoa_r+0x742>
 80088f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088f8:	e75c      	b.n	80087b4 <_dtoa_r+0x794>
 80088fa:	2300      	movs	r3, #0
 80088fc:	e788      	b.n	8008810 <_dtoa_r+0x7f0>
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	e786      	b.n	8008810 <_dtoa_r+0x7f0>
 8008902:	2300      	movs	r3, #0
 8008904:	930a      	str	r3, [sp, #40]	@ 0x28
 8008906:	e788      	b.n	800881a <_dtoa_r+0x7fa>
 8008908:	d09f      	beq.n	800884a <_dtoa_r+0x82a>
 800890a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800890c:	331c      	adds	r3, #28
 800890e:	441a      	add	r2, r3
 8008910:	4498      	add	r8, r3
 8008912:	441e      	add	r6, r3
 8008914:	9209      	str	r2, [sp, #36]	@ 0x24
 8008916:	e798      	b.n	800884a <_dtoa_r+0x82a>
 8008918:	4603      	mov	r3, r0
 800891a:	e7f6      	b.n	800890a <_dtoa_r+0x8ea>
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	9704      	str	r7, [sp, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	dc20      	bgt.n	8008966 <_dtoa_r+0x946>
 8008924:	9308      	str	r3, [sp, #32]
 8008926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008928:	2b02      	cmp	r3, #2
 800892a:	dd1e      	ble.n	800896a <_dtoa_r+0x94a>
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f47f aebc 	bne.w	80086ac <_dtoa_r+0x68c>
 8008934:	4621      	mov	r1, r4
 8008936:	2205      	movs	r2, #5
 8008938:	4658      	mov	r0, fp
 800893a:	f000 fa99 	bl	8008e70 <__multadd>
 800893e:	4601      	mov	r1, r0
 8008940:	4604      	mov	r4, r0
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fcf4 	bl	8009330 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	f77f aeaf 	ble.w	80086ac <_dtoa_r+0x68c>
 800894e:	2331      	movs	r3, #49	@ 0x31
 8008950:	4656      	mov	r6, sl
 8008952:	f806 3b01 	strb.w	r3, [r6], #1
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	3301      	adds	r3, #1
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	e6aa      	b.n	80086b4 <_dtoa_r+0x694>
 800895e:	9c07      	ldr	r4, [sp, #28]
 8008960:	9704      	str	r7, [sp, #16]
 8008962:	4625      	mov	r5, r4
 8008964:	e7f3      	b.n	800894e <_dtoa_r+0x92e>
 8008966:	9b07      	ldr	r3, [sp, #28]
 8008968:	9308      	str	r3, [sp, #32]
 800896a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8104 	beq.w	8008b7a <_dtoa_r+0xb5a>
 8008972:	2e00      	cmp	r6, #0
 8008974:	dd05      	ble.n	8008982 <_dtoa_r+0x962>
 8008976:	4629      	mov	r1, r5
 8008978:	4632      	mov	r2, r6
 800897a:	4658      	mov	r0, fp
 800897c:	f000 fc6c 	bl	8009258 <__lshift>
 8008980:	4605      	mov	r5, r0
 8008982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d05a      	beq.n	8008a3e <_dtoa_r+0xa1e>
 8008988:	4658      	mov	r0, fp
 800898a:	6869      	ldr	r1, [r5, #4]
 800898c:	f000 fa0e 	bl	8008dac <_Balloc>
 8008990:	4606      	mov	r6, r0
 8008992:	b928      	cbnz	r0, 80089a0 <_dtoa_r+0x980>
 8008994:	4602      	mov	r2, r0
 8008996:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800899a:	4b83      	ldr	r3, [pc, #524]	@ (8008ba8 <_dtoa_r+0xb88>)
 800899c:	f7ff bb54 	b.w	8008048 <_dtoa_r+0x28>
 80089a0:	692a      	ldr	r2, [r5, #16]
 80089a2:	f105 010c 	add.w	r1, r5, #12
 80089a6:	3202      	adds	r2, #2
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	300c      	adds	r0, #12
 80089ac:	f7ff fa9d 	bl	8007eea <memcpy>
 80089b0:	2201      	movs	r2, #1
 80089b2:	4631      	mov	r1, r6
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fc4f 	bl	8009258 <__lshift>
 80089ba:	462f      	mov	r7, r5
 80089bc:	4605      	mov	r5, r0
 80089be:	f10a 0301 	add.w	r3, sl, #1
 80089c2:	9307      	str	r3, [sp, #28]
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	4453      	add	r3, sl
 80089c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d2:	9b07      	ldr	r3, [sp, #28]
 80089d4:	4621      	mov	r1, r4
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4648      	mov	r0, r9
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	f7ff fa98 	bl	8007f10 <quorem>
 80089e0:	4639      	mov	r1, r7
 80089e2:	9008      	str	r0, [sp, #32]
 80089e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089e8:	4648      	mov	r0, r9
 80089ea:	f000 fca1 	bl	8009330 <__mcmp>
 80089ee:	462a      	mov	r2, r5
 80089f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80089f2:	4621      	mov	r1, r4
 80089f4:	4658      	mov	r0, fp
 80089f6:	f000 fcb7 	bl	8009368 <__mdiff>
 80089fa:	68c2      	ldr	r2, [r0, #12]
 80089fc:	4606      	mov	r6, r0
 80089fe:	bb02      	cbnz	r2, 8008a42 <_dtoa_r+0xa22>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4648      	mov	r0, r9
 8008a04:	f000 fc94 	bl	8009330 <__mcmp>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a10:	f000 fa0c 	bl	8008e2c <_Bfree>
 8008a14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a18:	9e07      	ldr	r6, [sp, #28]
 8008a1a:	ea43 0102 	orr.w	r1, r3, r2
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a20:	4319      	orrs	r1, r3
 8008a22:	d110      	bne.n	8008a46 <_dtoa_r+0xa26>
 8008a24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a28:	d029      	beq.n	8008a7e <_dtoa_r+0xa5e>
 8008a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd02      	ble.n	8008a36 <_dtoa_r+0xa16>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a36:	9b02      	ldr	r3, [sp, #8]
 8008a38:	f883 8000 	strb.w	r8, [r3]
 8008a3c:	e63b      	b.n	80086b6 <_dtoa_r+0x696>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	e7bb      	b.n	80089ba <_dtoa_r+0x99a>
 8008a42:	2201      	movs	r2, #1
 8008a44:	e7e1      	b.n	8008a0a <_dtoa_r+0x9ea>
 8008a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db04      	blt.n	8008a56 <_dtoa_r+0xa36>
 8008a4c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a52:	430b      	orrs	r3, r1
 8008a54:	d120      	bne.n	8008a98 <_dtoa_r+0xa78>
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	dded      	ble.n	8008a36 <_dtoa_r+0xa16>
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	4658      	mov	r0, fp
 8008a60:	f000 fbfa 	bl	8009258 <__lshift>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4681      	mov	r9, r0
 8008a68:	f000 fc62 	bl	8009330 <__mcmp>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	dc03      	bgt.n	8008a78 <_dtoa_r+0xa58>
 8008a70:	d1e1      	bne.n	8008a36 <_dtoa_r+0xa16>
 8008a72:	f018 0f01 	tst.w	r8, #1
 8008a76:	d0de      	beq.n	8008a36 <_dtoa_r+0xa16>
 8008a78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a7c:	d1d8      	bne.n	8008a30 <_dtoa_r+0xa10>
 8008a7e:	2339      	movs	r3, #57	@ 0x39
 8008a80:	9a02      	ldr	r2, [sp, #8]
 8008a82:	7013      	strb	r3, [r2, #0]
 8008a84:	4633      	mov	r3, r6
 8008a86:	461e      	mov	r6, r3
 8008a88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	2a39      	cmp	r2, #57	@ 0x39
 8008a90:	d052      	beq.n	8008b38 <_dtoa_r+0xb18>
 8008a92:	3201      	adds	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e60e      	b.n	80086b6 <_dtoa_r+0x696>
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	dd07      	ble.n	8008aac <_dtoa_r+0xa8c>
 8008a9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aa0:	d0ed      	beq.n	8008a7e <_dtoa_r+0xa5e>
 8008aa2:	9a02      	ldr	r2, [sp, #8]
 8008aa4:	f108 0301 	add.w	r3, r8, #1
 8008aa8:	7013      	strb	r3, [r2, #0]
 8008aaa:	e604      	b.n	80086b6 <_dtoa_r+0x696>
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	9a07      	ldr	r2, [sp, #28]
 8008ab0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d028      	beq.n	8008b0c <_dtoa_r+0xaec>
 8008aba:	4649      	mov	r1, r9
 8008abc:	2300      	movs	r3, #0
 8008abe:	220a      	movs	r2, #10
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	f000 f9d5 	bl	8008e70 <__multadd>
 8008ac6:	42af      	cmp	r7, r5
 8008ac8:	4681      	mov	r9, r0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	f04f 020a 	mov.w	r2, #10
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	d107      	bne.n	8008ae8 <_dtoa_r+0xac8>
 8008ad8:	f000 f9ca 	bl	8008e70 <__multadd>
 8008adc:	4607      	mov	r7, r0
 8008ade:	4605      	mov	r5, r0
 8008ae0:	9b07      	ldr	r3, [sp, #28]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9307      	str	r3, [sp, #28]
 8008ae6:	e774      	b.n	80089d2 <_dtoa_r+0x9b2>
 8008ae8:	f000 f9c2 	bl	8008e70 <__multadd>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4607      	mov	r7, r0
 8008af0:	2300      	movs	r3, #0
 8008af2:	220a      	movs	r2, #10
 8008af4:	4658      	mov	r0, fp
 8008af6:	f000 f9bb 	bl	8008e70 <__multadd>
 8008afa:	4605      	mov	r5, r0
 8008afc:	e7f0      	b.n	8008ae0 <_dtoa_r+0xac0>
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	2700      	movs	r7, #0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfcc      	ite	gt
 8008b06:	461e      	movgt	r6, r3
 8008b08:	2601      	movle	r6, #1
 8008b0a:	4456      	add	r6, sl
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4658      	mov	r0, fp
 8008b12:	f000 fba1 	bl	8009258 <__lshift>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4681      	mov	r9, r0
 8008b1a:	f000 fc09 	bl	8009330 <__mcmp>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	dcb0      	bgt.n	8008a84 <_dtoa_r+0xa64>
 8008b22:	d102      	bne.n	8008b2a <_dtoa_r+0xb0a>
 8008b24:	f018 0f01 	tst.w	r8, #1
 8008b28:	d1ac      	bne.n	8008a84 <_dtoa_r+0xa64>
 8008b2a:	4633      	mov	r3, r6
 8008b2c:	461e      	mov	r6, r3
 8008b2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b32:	2a30      	cmp	r2, #48	@ 0x30
 8008b34:	d0fa      	beq.n	8008b2c <_dtoa_r+0xb0c>
 8008b36:	e5be      	b.n	80086b6 <_dtoa_r+0x696>
 8008b38:	459a      	cmp	sl, r3
 8008b3a:	d1a4      	bne.n	8008a86 <_dtoa_r+0xa66>
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	2331      	movs	r3, #49	@ 0x31
 8008b44:	f88a 3000 	strb.w	r3, [sl]
 8008b48:	e5b5      	b.n	80086b6 <_dtoa_r+0x696>
 8008b4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bac <_dtoa_r+0xb8c>
 8008b50:	b11b      	cbz	r3, 8008b5a <_dtoa_r+0xb3a>
 8008b52:	f10a 0308 	add.w	r3, sl, #8
 8008b56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	b017      	add	sp, #92	@ 0x5c
 8008b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f77f ae3d 	ble.w	80087e4 <_dtoa_r+0x7c4>
 8008b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b6e:	2001      	movs	r0, #1
 8008b70:	e65b      	b.n	800882a <_dtoa_r+0x80a>
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f77f aed6 	ble.w	8008926 <_dtoa_r+0x906>
 8008b7a:	4656      	mov	r6, sl
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f7ff f9c6 	bl	8007f10 <quorem>
 8008b84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	f806 8b01 	strb.w	r8, [r6], #1
 8008b8e:	eba6 020a 	sub.w	r2, r6, sl
 8008b92:	4293      	cmp	r3, r2
 8008b94:	ddb3      	ble.n	8008afe <_dtoa_r+0xade>
 8008b96:	4649      	mov	r1, r9
 8008b98:	2300      	movs	r3, #0
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	4658      	mov	r0, fp
 8008b9e:	f000 f967 	bl	8008e70 <__multadd>
 8008ba2:	4681      	mov	r9, r0
 8008ba4:	e7ea      	b.n	8008b7c <_dtoa_r+0xb5c>
 8008ba6:	bf00      	nop
 8008ba8:	0800b763 	.word	0x0800b763
 8008bac:	0800b6e7 	.word	0x0800b6e7

08008bb0 <_free_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d040      	beq.n	8008c3a <_free_r+0x8a>
 8008bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bbc:	1f0c      	subs	r4, r1, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfb8      	it	lt
 8008bc2:	18e4      	addlt	r4, r4, r3
 8008bc4:	f000 f8e6 	bl	8008d94 <__malloc_lock>
 8008bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008c3c <_free_r+0x8c>)
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	b933      	cbnz	r3, 8008bdc <_free_r+0x2c>
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	6014      	str	r4, [r2, #0]
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd8:	f000 b8e2 	b.w	8008da0 <__malloc_unlock>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d908      	bls.n	8008bf2 <_free_r+0x42>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	1821      	adds	r1, r4, r0
 8008be4:	428b      	cmp	r3, r1
 8008be6:	bf01      	itttt	eq
 8008be8:	6819      	ldreq	r1, [r3, #0]
 8008bea:	685b      	ldreq	r3, [r3, #4]
 8008bec:	1809      	addeq	r1, r1, r0
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	e7ed      	b.n	8008bce <_free_r+0x1e>
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	b10b      	cbz	r3, 8008bfc <_free_r+0x4c>
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d9fa      	bls.n	8008bf2 <_free_r+0x42>
 8008bfc:	6811      	ldr	r1, [r2, #0]
 8008bfe:	1850      	adds	r0, r2, r1
 8008c00:	42a0      	cmp	r0, r4
 8008c02:	d10b      	bne.n	8008c1c <_free_r+0x6c>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	4401      	add	r1, r0
 8008c08:	1850      	adds	r0, r2, r1
 8008c0a:	4283      	cmp	r3, r0
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	d1e0      	bne.n	8008bd2 <_free_r+0x22>
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4408      	add	r0, r1
 8008c16:	6010      	str	r0, [r2, #0]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	e7da      	b.n	8008bd2 <_free_r+0x22>
 8008c1c:	d902      	bls.n	8008c24 <_free_r+0x74>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	e7d6      	b.n	8008bd2 <_free_r+0x22>
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	1821      	adds	r1, r4, r0
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf01      	itttt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	1809      	addeq	r1, r1, r0
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	6054      	str	r4, [r2, #4]
 8008c38:	e7cb      	b.n	8008bd2 <_free_r+0x22>
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	2000304c 	.word	0x2000304c

08008c40 <malloc>:
 8008c40:	4b02      	ldr	r3, [pc, #8]	@ (8008c4c <malloc+0xc>)
 8008c42:	4601      	mov	r1, r0
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f000 b825 	b.w	8008c94 <_malloc_r>
 8008c4a:	bf00      	nop
 8008c4c:	20000020 	.word	0x20000020

08008c50 <sbrk_aligned>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4e0f      	ldr	r6, [pc, #60]	@ (8008c90 <sbrk_aligned+0x40>)
 8008c54:	460c      	mov	r4, r1
 8008c56:	6831      	ldr	r1, [r6, #0]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	b911      	cbnz	r1, 8008c62 <sbrk_aligned+0x12>
 8008c5c:	f001 fdf6 	bl	800a84c <_sbrk_r>
 8008c60:	6030      	str	r0, [r6, #0]
 8008c62:	4621      	mov	r1, r4
 8008c64:	4628      	mov	r0, r5
 8008c66:	f001 fdf1 	bl	800a84c <_sbrk_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d103      	bne.n	8008c76 <sbrk_aligned+0x26>
 8008c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008c72:	4620      	mov	r0, r4
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	1cc4      	adds	r4, r0, #3
 8008c78:	f024 0403 	bic.w	r4, r4, #3
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d0f8      	beq.n	8008c72 <sbrk_aligned+0x22>
 8008c80:	1a21      	subs	r1, r4, r0
 8008c82:	4628      	mov	r0, r5
 8008c84:	f001 fde2 	bl	800a84c <_sbrk_r>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d1f2      	bne.n	8008c72 <sbrk_aligned+0x22>
 8008c8c:	e7ef      	b.n	8008c6e <sbrk_aligned+0x1e>
 8008c8e:	bf00      	nop
 8008c90:	20003048 	.word	0x20003048

08008c94 <_malloc_r>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	1ccd      	adds	r5, r1, #3
 8008c9a:	f025 0503 	bic.w	r5, r5, #3
 8008c9e:	3508      	adds	r5, #8
 8008ca0:	2d0c      	cmp	r5, #12
 8008ca2:	bf38      	it	cc
 8008ca4:	250c      	movcc	r5, #12
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	4606      	mov	r6, r0
 8008caa:	db01      	blt.n	8008cb0 <_malloc_r+0x1c>
 8008cac:	42a9      	cmp	r1, r5
 8008cae:	d904      	bls.n	8008cba <_malloc_r+0x26>
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	6033      	str	r3, [r6, #0]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d90 <_malloc_r+0xfc>
 8008cbe:	f000 f869 	bl	8008d94 <__malloc_lock>
 8008cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc6:	461c      	mov	r4, r3
 8008cc8:	bb44      	cbnz	r4, 8008d1c <_malloc_r+0x88>
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff ffbf 	bl	8008c50 <sbrk_aligned>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	d158      	bne.n	8008d8a <_malloc_r+0xf6>
 8008cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8008cdc:	4627      	mov	r7, r4
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	d143      	bne.n	8008d6a <_malloc_r+0xd6>
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	d04b      	beq.n	8008d7e <_malloc_r+0xea>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	4639      	mov	r1, r7
 8008cea:	4630      	mov	r0, r6
 8008cec:	eb04 0903 	add.w	r9, r4, r3
 8008cf0:	f001 fdac 	bl	800a84c <_sbrk_r>
 8008cf4:	4581      	cmp	r9, r0
 8008cf6:	d142      	bne.n	8008d7e <_malloc_r+0xea>
 8008cf8:	6821      	ldr	r1, [r4, #0]
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	1a6d      	subs	r5, r5, r1
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7ff ffa6 	bl	8008c50 <sbrk_aligned>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d03a      	beq.n	8008d7e <_malloc_r+0xea>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	442b      	add	r3, r5
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	bb62      	cbnz	r2, 8008d70 <_malloc_r+0xdc>
 8008d16:	f8c8 7000 	str.w	r7, [r8]
 8008d1a:	e00f      	b.n	8008d3c <_malloc_r+0xa8>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	1b52      	subs	r2, r2, r5
 8008d20:	d420      	bmi.n	8008d64 <_malloc_r+0xd0>
 8008d22:	2a0b      	cmp	r2, #11
 8008d24:	d917      	bls.n	8008d56 <_malloc_r+0xc2>
 8008d26:	1961      	adds	r1, r4, r5
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	6025      	str	r5, [r4, #0]
 8008d2c:	bf18      	it	ne
 8008d2e:	6059      	strne	r1, [r3, #4]
 8008d30:	6863      	ldr	r3, [r4, #4]
 8008d32:	bf08      	it	eq
 8008d34:	f8c8 1000 	streq.w	r1, [r8]
 8008d38:	5162      	str	r2, [r4, r5]
 8008d3a:	604b      	str	r3, [r1, #4]
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f000 f82f 	bl	8008da0 <__malloc_unlock>
 8008d42:	f104 000b 	add.w	r0, r4, #11
 8008d46:	1d23      	adds	r3, r4, #4
 8008d48:	f020 0007 	bic.w	r0, r0, #7
 8008d4c:	1ac2      	subs	r2, r0, r3
 8008d4e:	bf1c      	itt	ne
 8008d50:	1a1b      	subne	r3, r3, r0
 8008d52:	50a3      	strne	r3, [r4, r2]
 8008d54:	e7af      	b.n	8008cb6 <_malloc_r+0x22>
 8008d56:	6862      	ldr	r2, [r4, #4]
 8008d58:	42a3      	cmp	r3, r4
 8008d5a:	bf0c      	ite	eq
 8008d5c:	f8c8 2000 	streq.w	r2, [r8]
 8008d60:	605a      	strne	r2, [r3, #4]
 8008d62:	e7eb      	b.n	8008d3c <_malloc_r+0xa8>
 8008d64:	4623      	mov	r3, r4
 8008d66:	6864      	ldr	r4, [r4, #4]
 8008d68:	e7ae      	b.n	8008cc8 <_malloc_r+0x34>
 8008d6a:	463c      	mov	r4, r7
 8008d6c:	687f      	ldr	r7, [r7, #4]
 8008d6e:	e7b6      	b.n	8008cde <_malloc_r+0x4a>
 8008d70:	461a      	mov	r2, r3
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d1fb      	bne.n	8008d70 <_malloc_r+0xdc>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6053      	str	r3, [r2, #4]
 8008d7c:	e7de      	b.n	8008d3c <_malloc_r+0xa8>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	4630      	mov	r0, r6
 8008d82:	6033      	str	r3, [r6, #0]
 8008d84:	f000 f80c 	bl	8008da0 <__malloc_unlock>
 8008d88:	e794      	b.n	8008cb4 <_malloc_r+0x20>
 8008d8a:	6005      	str	r5, [r0, #0]
 8008d8c:	e7d6      	b.n	8008d3c <_malloc_r+0xa8>
 8008d8e:	bf00      	nop
 8008d90:	2000304c 	.word	0x2000304c

08008d94 <__malloc_lock>:
 8008d94:	4801      	ldr	r0, [pc, #4]	@ (8008d9c <__malloc_lock+0x8>)
 8008d96:	f7ff b898 	b.w	8007eca <__retarget_lock_acquire_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	20003044 	.word	0x20003044

08008da0 <__malloc_unlock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	@ (8008da8 <__malloc_unlock+0x8>)
 8008da2:	f7ff b893 	b.w	8007ecc <__retarget_lock_release_recursive>
 8008da6:	bf00      	nop
 8008da8:	20003044 	.word	0x20003044

08008dac <_Balloc>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	69c6      	ldr	r6, [r0, #28]
 8008db0:	4604      	mov	r4, r0
 8008db2:	460d      	mov	r5, r1
 8008db4:	b976      	cbnz	r6, 8008dd4 <_Balloc+0x28>
 8008db6:	2010      	movs	r0, #16
 8008db8:	f7ff ff42 	bl	8008c40 <malloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	61e0      	str	r0, [r4, #28]
 8008dc0:	b920      	cbnz	r0, 8008dcc <_Balloc+0x20>
 8008dc2:	216b      	movs	r1, #107	@ 0x6b
 8008dc4:	4b17      	ldr	r3, [pc, #92]	@ (8008e24 <_Balloc+0x78>)
 8008dc6:	4818      	ldr	r0, [pc, #96]	@ (8008e28 <_Balloc+0x7c>)
 8008dc8:	f001 fd56 	bl	800a878 <__assert_func>
 8008dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd0:	6006      	str	r6, [r0, #0]
 8008dd2:	60c6      	str	r6, [r0, #12]
 8008dd4:	69e6      	ldr	r6, [r4, #28]
 8008dd6:	68f3      	ldr	r3, [r6, #12]
 8008dd8:	b183      	cbz	r3, 8008dfc <_Balloc+0x50>
 8008dda:	69e3      	ldr	r3, [r4, #28]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008de2:	b9b8      	cbnz	r0, 8008e14 <_Balloc+0x68>
 8008de4:	2101      	movs	r1, #1
 8008de6:	fa01 f605 	lsl.w	r6, r1, r5
 8008dea:	1d72      	adds	r2, r6, #5
 8008dec:	4620      	mov	r0, r4
 8008dee:	0092      	lsls	r2, r2, #2
 8008df0:	f001 fd60 	bl	800a8b4 <_calloc_r>
 8008df4:	b160      	cbz	r0, 8008e10 <_Balloc+0x64>
 8008df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dfa:	e00e      	b.n	8008e1a <_Balloc+0x6e>
 8008dfc:	2221      	movs	r2, #33	@ 0x21
 8008dfe:	2104      	movs	r1, #4
 8008e00:	4620      	mov	r0, r4
 8008e02:	f001 fd57 	bl	800a8b4 <_calloc_r>
 8008e06:	69e3      	ldr	r3, [r4, #28]
 8008e08:	60f0      	str	r0, [r6, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e4      	bne.n	8008dda <_Balloc+0x2e>
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	6802      	ldr	r2, [r0, #0]
 8008e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e20:	e7f7      	b.n	8008e12 <_Balloc+0x66>
 8008e22:	bf00      	nop
 8008e24:	0800b6f4 	.word	0x0800b6f4
 8008e28:	0800b774 	.word	0x0800b774

08008e2c <_Bfree>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	69c6      	ldr	r6, [r0, #28]
 8008e30:	4605      	mov	r5, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	b976      	cbnz	r6, 8008e54 <_Bfree+0x28>
 8008e36:	2010      	movs	r0, #16
 8008e38:	f7ff ff02 	bl	8008c40 <malloc>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	61e8      	str	r0, [r5, #28]
 8008e40:	b920      	cbnz	r0, 8008e4c <_Bfree+0x20>
 8008e42:	218f      	movs	r1, #143	@ 0x8f
 8008e44:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <_Bfree+0x3c>)
 8008e46:	4809      	ldr	r0, [pc, #36]	@ (8008e6c <_Bfree+0x40>)
 8008e48:	f001 fd16 	bl	800a878 <__assert_func>
 8008e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e50:	6006      	str	r6, [r0, #0]
 8008e52:	60c6      	str	r6, [r0, #12]
 8008e54:	b13c      	cbz	r4, 8008e66 <_Bfree+0x3a>
 8008e56:	69eb      	ldr	r3, [r5, #28]
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e60:	6021      	str	r1, [r4, #0]
 8008e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	0800b6f4 	.word	0x0800b6f4
 8008e6c:	0800b774 	.word	0x0800b774

08008e70 <__multadd>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4607      	mov	r7, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	461e      	mov	r6, r3
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	690d      	ldr	r5, [r1, #16]
 8008e7e:	f101 0c14 	add.w	ip, r1, #20
 8008e82:	f8dc 3000 	ldr.w	r3, [ip]
 8008e86:	3001      	adds	r0, #1
 8008e88:	b299      	uxth	r1, r3
 8008e8a:	fb02 6101 	mla	r1, r2, r1, r6
 8008e8e:	0c1e      	lsrs	r6, r3, #16
 8008e90:	0c0b      	lsrs	r3, r1, #16
 8008e92:	fb02 3306 	mla	r3, r2, r6, r3
 8008e96:	b289      	uxth	r1, r1
 8008e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e9c:	4285      	cmp	r5, r0
 8008e9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ea6:	dcec      	bgt.n	8008e82 <__multadd+0x12>
 8008ea8:	b30e      	cbz	r6, 8008eee <__multadd+0x7e>
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	42ab      	cmp	r3, r5
 8008eae:	dc19      	bgt.n	8008ee4 <__multadd+0x74>
 8008eb0:	6861      	ldr	r1, [r4, #4]
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	f7ff ff79 	bl	8008dac <_Balloc>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	b928      	cbnz	r0, 8008eca <__multadd+0x5a>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	21ba      	movs	r1, #186	@ 0xba
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef4 <__multadd+0x84>)
 8008ec4:	480c      	ldr	r0, [pc, #48]	@ (8008ef8 <__multadd+0x88>)
 8008ec6:	f001 fcd7 	bl	800a878 <__assert_func>
 8008eca:	6922      	ldr	r2, [r4, #16]
 8008ecc:	f104 010c 	add.w	r1, r4, #12
 8008ed0:	3202      	adds	r2, #2
 8008ed2:	0092      	lsls	r2, r2, #2
 8008ed4:	300c      	adds	r0, #12
 8008ed6:	f7ff f808 	bl	8007eea <memcpy>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff ffa5 	bl	8008e2c <_Bfree>
 8008ee2:	4644      	mov	r4, r8
 8008ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ee8:	3501      	adds	r5, #1
 8008eea:	615e      	str	r6, [r3, #20]
 8008eec:	6125      	str	r5, [r4, #16]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	0800b763 	.word	0x0800b763
 8008ef8:	0800b774 	.word	0x0800b774

08008efc <__s2b>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4615      	mov	r5, r2
 8008f02:	2209      	movs	r2, #9
 8008f04:	461f      	mov	r7, r3
 8008f06:	3308      	adds	r3, #8
 8008f08:	460c      	mov	r4, r1
 8008f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f0e:	4606      	mov	r6, r0
 8008f10:	2201      	movs	r2, #1
 8008f12:	2100      	movs	r1, #0
 8008f14:	429a      	cmp	r2, r3
 8008f16:	db09      	blt.n	8008f2c <__s2b+0x30>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff ff47 	bl	8008dac <_Balloc>
 8008f1e:	b940      	cbnz	r0, 8008f32 <__s2b+0x36>
 8008f20:	4602      	mov	r2, r0
 8008f22:	21d3      	movs	r1, #211	@ 0xd3
 8008f24:	4b18      	ldr	r3, [pc, #96]	@ (8008f88 <__s2b+0x8c>)
 8008f26:	4819      	ldr	r0, [pc, #100]	@ (8008f8c <__s2b+0x90>)
 8008f28:	f001 fca6 	bl	800a878 <__assert_func>
 8008f2c:	0052      	lsls	r2, r2, #1
 8008f2e:	3101      	adds	r1, #1
 8008f30:	e7f0      	b.n	8008f14 <__s2b+0x18>
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	2d09      	cmp	r5, #9
 8008f36:	6143      	str	r3, [r0, #20]
 8008f38:	f04f 0301 	mov.w	r3, #1
 8008f3c:	6103      	str	r3, [r0, #16]
 8008f3e:	dd16      	ble.n	8008f6e <__s2b+0x72>
 8008f40:	f104 0909 	add.w	r9, r4, #9
 8008f44:	46c8      	mov	r8, r9
 8008f46:	442c      	add	r4, r5
 8008f48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	220a      	movs	r2, #10
 8008f50:	4630      	mov	r0, r6
 8008f52:	3b30      	subs	r3, #48	@ 0x30
 8008f54:	f7ff ff8c 	bl	8008e70 <__multadd>
 8008f58:	45a0      	cmp	r8, r4
 8008f5a:	d1f5      	bne.n	8008f48 <__s2b+0x4c>
 8008f5c:	f1a5 0408 	sub.w	r4, r5, #8
 8008f60:	444c      	add	r4, r9
 8008f62:	1b2d      	subs	r5, r5, r4
 8008f64:	1963      	adds	r3, r4, r5
 8008f66:	42bb      	cmp	r3, r7
 8008f68:	db04      	blt.n	8008f74 <__s2b+0x78>
 8008f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6e:	2509      	movs	r5, #9
 8008f70:	340a      	adds	r4, #10
 8008f72:	e7f6      	b.n	8008f62 <__s2b+0x66>
 8008f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f78:	4601      	mov	r1, r0
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	3b30      	subs	r3, #48	@ 0x30
 8008f80:	f7ff ff76 	bl	8008e70 <__multadd>
 8008f84:	e7ee      	b.n	8008f64 <__s2b+0x68>
 8008f86:	bf00      	nop
 8008f88:	0800b763 	.word	0x0800b763
 8008f8c:	0800b774 	.word	0x0800b774

08008f90 <__hi0bits>:
 8008f90:	4603      	mov	r3, r0
 8008f92:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f96:	bf3a      	itte	cc
 8008f98:	0403      	lslcc	r3, r0, #16
 8008f9a:	2010      	movcc	r0, #16
 8008f9c:	2000      	movcs	r0, #0
 8008f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fa2:	bf3c      	itt	cc
 8008fa4:	021b      	lslcc	r3, r3, #8
 8008fa6:	3008      	addcc	r0, #8
 8008fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fac:	bf3c      	itt	cc
 8008fae:	011b      	lslcc	r3, r3, #4
 8008fb0:	3004      	addcc	r0, #4
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb6:	bf3c      	itt	cc
 8008fb8:	009b      	lslcc	r3, r3, #2
 8008fba:	3002      	addcc	r0, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	db05      	blt.n	8008fcc <__hi0bits+0x3c>
 8008fc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fc4:	f100 0001 	add.w	r0, r0, #1
 8008fc8:	bf08      	it	eq
 8008fca:	2020      	moveq	r0, #32
 8008fcc:	4770      	bx	lr

08008fce <__lo0bits>:
 8008fce:	6803      	ldr	r3, [r0, #0]
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	f013 0007 	ands.w	r0, r3, #7
 8008fd6:	d00b      	beq.n	8008ff0 <__lo0bits+0x22>
 8008fd8:	07d9      	lsls	r1, r3, #31
 8008fda:	d421      	bmi.n	8009020 <__lo0bits+0x52>
 8008fdc:	0798      	lsls	r0, r3, #30
 8008fde:	bf49      	itett	mi
 8008fe0:	085b      	lsrmi	r3, r3, #1
 8008fe2:	089b      	lsrpl	r3, r3, #2
 8008fe4:	2001      	movmi	r0, #1
 8008fe6:	6013      	strmi	r3, [r2, #0]
 8008fe8:	bf5c      	itt	pl
 8008fea:	2002      	movpl	r0, #2
 8008fec:	6013      	strpl	r3, [r2, #0]
 8008fee:	4770      	bx	lr
 8008ff0:	b299      	uxth	r1, r3
 8008ff2:	b909      	cbnz	r1, 8008ff8 <__lo0bits+0x2a>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	0c1b      	lsrs	r3, r3, #16
 8008ff8:	b2d9      	uxtb	r1, r3
 8008ffa:	b909      	cbnz	r1, 8009000 <__lo0bits+0x32>
 8008ffc:	3008      	adds	r0, #8
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	0719      	lsls	r1, r3, #28
 8009002:	bf04      	itt	eq
 8009004:	091b      	lsreq	r3, r3, #4
 8009006:	3004      	addeq	r0, #4
 8009008:	0799      	lsls	r1, r3, #30
 800900a:	bf04      	itt	eq
 800900c:	089b      	lsreq	r3, r3, #2
 800900e:	3002      	addeq	r0, #2
 8009010:	07d9      	lsls	r1, r3, #31
 8009012:	d403      	bmi.n	800901c <__lo0bits+0x4e>
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	f100 0001 	add.w	r0, r0, #1
 800901a:	d003      	beq.n	8009024 <__lo0bits+0x56>
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4770      	bx	lr
 8009020:	2000      	movs	r0, #0
 8009022:	4770      	bx	lr
 8009024:	2020      	movs	r0, #32
 8009026:	4770      	bx	lr

08009028 <__i2b>:
 8009028:	b510      	push	{r4, lr}
 800902a:	460c      	mov	r4, r1
 800902c:	2101      	movs	r1, #1
 800902e:	f7ff febd 	bl	8008dac <_Balloc>
 8009032:	4602      	mov	r2, r0
 8009034:	b928      	cbnz	r0, 8009042 <__i2b+0x1a>
 8009036:	f240 1145 	movw	r1, #325	@ 0x145
 800903a:	4b04      	ldr	r3, [pc, #16]	@ (800904c <__i2b+0x24>)
 800903c:	4804      	ldr	r0, [pc, #16]	@ (8009050 <__i2b+0x28>)
 800903e:	f001 fc1b 	bl	800a878 <__assert_func>
 8009042:	2301      	movs	r3, #1
 8009044:	6144      	str	r4, [r0, #20]
 8009046:	6103      	str	r3, [r0, #16]
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	0800b763 	.word	0x0800b763
 8009050:	0800b774 	.word	0x0800b774

08009054 <__multiply>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4614      	mov	r4, r2
 800905a:	690a      	ldr	r2, [r1, #16]
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	460f      	mov	r7, r1
 8009060:	429a      	cmp	r2, r3
 8009062:	bfa2      	ittt	ge
 8009064:	4623      	movge	r3, r4
 8009066:	460c      	movge	r4, r1
 8009068:	461f      	movge	r7, r3
 800906a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800906e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	eb0a 0609 	add.w	r6, sl, r9
 800907a:	42b3      	cmp	r3, r6
 800907c:	b085      	sub	sp, #20
 800907e:	bfb8      	it	lt
 8009080:	3101      	addlt	r1, #1
 8009082:	f7ff fe93 	bl	8008dac <_Balloc>
 8009086:	b930      	cbnz	r0, 8009096 <__multiply+0x42>
 8009088:	4602      	mov	r2, r0
 800908a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800908e:	4b43      	ldr	r3, [pc, #268]	@ (800919c <__multiply+0x148>)
 8009090:	4843      	ldr	r0, [pc, #268]	@ (80091a0 <__multiply+0x14c>)
 8009092:	f001 fbf1 	bl	800a878 <__assert_func>
 8009096:	f100 0514 	add.w	r5, r0, #20
 800909a:	462b      	mov	r3, r5
 800909c:	2200      	movs	r2, #0
 800909e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090a2:	4543      	cmp	r3, r8
 80090a4:	d321      	bcc.n	80090ea <__multiply+0x96>
 80090a6:	f107 0114 	add.w	r1, r7, #20
 80090aa:	f104 0214 	add.w	r2, r4, #20
 80090ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090b6:	9302      	str	r3, [sp, #8]
 80090b8:	1b13      	subs	r3, r2, r4
 80090ba:	3b15      	subs	r3, #21
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3304      	adds	r3, #4
 80090c2:	f104 0715 	add.w	r7, r4, #21
 80090c6:	42ba      	cmp	r2, r7
 80090c8:	bf38      	it	cc
 80090ca:	2304      	movcc	r3, #4
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	9b02      	ldr	r3, [sp, #8]
 80090d0:	9103      	str	r1, [sp, #12]
 80090d2:	428b      	cmp	r3, r1
 80090d4:	d80c      	bhi.n	80090f0 <__multiply+0x9c>
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	dd03      	ble.n	80090e2 <__multiply+0x8e>
 80090da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d05a      	beq.n	8009198 <__multiply+0x144>
 80090e2:	6106      	str	r6, [r0, #16]
 80090e4:	b005      	add	sp, #20
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	f843 2b04 	str.w	r2, [r3], #4
 80090ee:	e7d8      	b.n	80090a2 <__multiply+0x4e>
 80090f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80090f4:	f1ba 0f00 	cmp.w	sl, #0
 80090f8:	d023      	beq.n	8009142 <__multiply+0xee>
 80090fa:	46a9      	mov	r9, r5
 80090fc:	f04f 0c00 	mov.w	ip, #0
 8009100:	f104 0e14 	add.w	lr, r4, #20
 8009104:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009108:	f8d9 3000 	ldr.w	r3, [r9]
 800910c:	fa1f fb87 	uxth.w	fp, r7
 8009110:	b29b      	uxth	r3, r3
 8009112:	fb0a 330b 	mla	r3, sl, fp, r3
 8009116:	4463      	add	r3, ip
 8009118:	f8d9 c000 	ldr.w	ip, [r9]
 800911c:	0c3f      	lsrs	r7, r7, #16
 800911e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009122:	fb0a c707 	mla	r7, sl, r7, ip
 8009126:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800912a:	b29b      	uxth	r3, r3
 800912c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009130:	4572      	cmp	r2, lr
 8009132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009136:	f849 3b04 	str.w	r3, [r9], #4
 800913a:	d8e3      	bhi.n	8009104 <__multiply+0xb0>
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	f845 c003 	str.w	ip, [r5, r3]
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	3104      	adds	r1, #4
 8009146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	d021      	beq.n	8009194 <__multiply+0x140>
 8009150:	46ae      	mov	lr, r5
 8009152:	f04f 0a00 	mov.w	sl, #0
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	f104 0c14 	add.w	ip, r4, #20
 800915c:	f8bc b000 	ldrh.w	fp, [ip]
 8009160:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009164:	b29b      	uxth	r3, r3
 8009166:	fb09 770b 	mla	r7, r9, fp, r7
 800916a:	4457      	add	r7, sl
 800916c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009170:	f84e 3b04 	str.w	r3, [lr], #4
 8009174:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800917c:	f8be 3000 	ldrh.w	r3, [lr]
 8009180:	4562      	cmp	r2, ip
 8009182:	fb09 330a 	mla	r3, r9, sl, r3
 8009186:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800918a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800918e:	d8e5      	bhi.n	800915c <__multiply+0x108>
 8009190:	9f01      	ldr	r7, [sp, #4]
 8009192:	51eb      	str	r3, [r5, r7]
 8009194:	3504      	adds	r5, #4
 8009196:	e79a      	b.n	80090ce <__multiply+0x7a>
 8009198:	3e01      	subs	r6, #1
 800919a:	e79c      	b.n	80090d6 <__multiply+0x82>
 800919c:	0800b763 	.word	0x0800b763
 80091a0:	0800b774 	.word	0x0800b774

080091a4 <__pow5mult>:
 80091a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	4615      	mov	r5, r2
 80091aa:	f012 0203 	ands.w	r2, r2, #3
 80091ae:	4607      	mov	r7, r0
 80091b0:	460e      	mov	r6, r1
 80091b2:	d007      	beq.n	80091c4 <__pow5mult+0x20>
 80091b4:	4c25      	ldr	r4, [pc, #148]	@ (800924c <__pow5mult+0xa8>)
 80091b6:	3a01      	subs	r2, #1
 80091b8:	2300      	movs	r3, #0
 80091ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091be:	f7ff fe57 	bl	8008e70 <__multadd>
 80091c2:	4606      	mov	r6, r0
 80091c4:	10ad      	asrs	r5, r5, #2
 80091c6:	d03d      	beq.n	8009244 <__pow5mult+0xa0>
 80091c8:	69fc      	ldr	r4, [r7, #28]
 80091ca:	b97c      	cbnz	r4, 80091ec <__pow5mult+0x48>
 80091cc:	2010      	movs	r0, #16
 80091ce:	f7ff fd37 	bl	8008c40 <malloc>
 80091d2:	4602      	mov	r2, r0
 80091d4:	61f8      	str	r0, [r7, #28]
 80091d6:	b928      	cbnz	r0, 80091e4 <__pow5mult+0x40>
 80091d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009250 <__pow5mult+0xac>)
 80091de:	481d      	ldr	r0, [pc, #116]	@ (8009254 <__pow5mult+0xb0>)
 80091e0:	f001 fb4a 	bl	800a878 <__assert_func>
 80091e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091e8:	6004      	str	r4, [r0, #0]
 80091ea:	60c4      	str	r4, [r0, #12]
 80091ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091f4:	b94c      	cbnz	r4, 800920a <__pow5mult+0x66>
 80091f6:	f240 2171 	movw	r1, #625	@ 0x271
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7ff ff14 	bl	8009028 <__i2b>
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	f8c8 0008 	str.w	r0, [r8, #8]
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	07eb      	lsls	r3, r5, #31
 8009210:	d50a      	bpl.n	8009228 <__pow5mult+0x84>
 8009212:	4631      	mov	r1, r6
 8009214:	4622      	mov	r2, r4
 8009216:	4638      	mov	r0, r7
 8009218:	f7ff ff1c 	bl	8009054 <__multiply>
 800921c:	4680      	mov	r8, r0
 800921e:	4631      	mov	r1, r6
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff fe03 	bl	8008e2c <_Bfree>
 8009226:	4646      	mov	r6, r8
 8009228:	106d      	asrs	r5, r5, #1
 800922a:	d00b      	beq.n	8009244 <__pow5mult+0xa0>
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	b938      	cbnz	r0, 8009240 <__pow5mult+0x9c>
 8009230:	4622      	mov	r2, r4
 8009232:	4621      	mov	r1, r4
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ff0d 	bl	8009054 <__multiply>
 800923a:	6020      	str	r0, [r4, #0]
 800923c:	f8c0 9000 	str.w	r9, [r0]
 8009240:	4604      	mov	r4, r0
 8009242:	e7e4      	b.n	800920e <__pow5mult+0x6a>
 8009244:	4630      	mov	r0, r6
 8009246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924a:	bf00      	nop
 800924c:	0800b7d0 	.word	0x0800b7d0
 8009250:	0800b6f4 	.word	0x0800b6f4
 8009254:	0800b774 	.word	0x0800b774

08009258 <__lshift>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	460c      	mov	r4, r1
 800925e:	4607      	mov	r7, r0
 8009260:	4691      	mov	r9, r2
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	6849      	ldr	r1, [r1, #4]
 8009266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800926a:	68a3      	ldr	r3, [r4, #8]
 800926c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009270:	f108 0601 	add.w	r6, r8, #1
 8009274:	42b3      	cmp	r3, r6
 8009276:	db0b      	blt.n	8009290 <__lshift+0x38>
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff fd97 	bl	8008dac <_Balloc>
 800927e:	4605      	mov	r5, r0
 8009280:	b948      	cbnz	r0, 8009296 <__lshift+0x3e>
 8009282:	4602      	mov	r2, r0
 8009284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009288:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <__lshift+0xd0>)
 800928a:	4828      	ldr	r0, [pc, #160]	@ (800932c <__lshift+0xd4>)
 800928c:	f001 faf4 	bl	800a878 <__assert_func>
 8009290:	3101      	adds	r1, #1
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	e7ee      	b.n	8009274 <__lshift+0x1c>
 8009296:	2300      	movs	r3, #0
 8009298:	f100 0114 	add.w	r1, r0, #20
 800929c:	f100 0210 	add.w	r2, r0, #16
 80092a0:	4618      	mov	r0, r3
 80092a2:	4553      	cmp	r3, sl
 80092a4:	db33      	blt.n	800930e <__lshift+0xb6>
 80092a6:	6920      	ldr	r0, [r4, #16]
 80092a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092ac:	f104 0314 	add.w	r3, r4, #20
 80092b0:	f019 091f 	ands.w	r9, r9, #31
 80092b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092bc:	d02b      	beq.n	8009316 <__lshift+0xbe>
 80092be:	468a      	mov	sl, r1
 80092c0:	2200      	movs	r2, #0
 80092c2:	f1c9 0e20 	rsb	lr, r9, #32
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	fa00 f009 	lsl.w	r0, r0, r9
 80092cc:	4310      	orrs	r0, r2
 80092ce:	f84a 0b04 	str.w	r0, [sl], #4
 80092d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d6:	459c      	cmp	ip, r3
 80092d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092dc:	d8f3      	bhi.n	80092c6 <__lshift+0x6e>
 80092de:	ebac 0304 	sub.w	r3, ip, r4
 80092e2:	3b15      	subs	r3, #21
 80092e4:	f023 0303 	bic.w	r3, r3, #3
 80092e8:	3304      	adds	r3, #4
 80092ea:	f104 0015 	add.w	r0, r4, #21
 80092ee:	4584      	cmp	ip, r0
 80092f0:	bf38      	it	cc
 80092f2:	2304      	movcc	r3, #4
 80092f4:	50ca      	str	r2, [r1, r3]
 80092f6:	b10a      	cbz	r2, 80092fc <__lshift+0xa4>
 80092f8:	f108 0602 	add.w	r6, r8, #2
 80092fc:	3e01      	subs	r6, #1
 80092fe:	4638      	mov	r0, r7
 8009300:	4621      	mov	r1, r4
 8009302:	612e      	str	r6, [r5, #16]
 8009304:	f7ff fd92 	bl	8008e2c <_Bfree>
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009312:	3301      	adds	r3, #1
 8009314:	e7c5      	b.n	80092a2 <__lshift+0x4a>
 8009316:	3904      	subs	r1, #4
 8009318:	f853 2b04 	ldr.w	r2, [r3], #4
 800931c:	459c      	cmp	ip, r3
 800931e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009322:	d8f9      	bhi.n	8009318 <__lshift+0xc0>
 8009324:	e7ea      	b.n	80092fc <__lshift+0xa4>
 8009326:	bf00      	nop
 8009328:	0800b763 	.word	0x0800b763
 800932c:	0800b774 	.word	0x0800b774

08009330 <__mcmp>:
 8009330:	4603      	mov	r3, r0
 8009332:	690a      	ldr	r2, [r1, #16]
 8009334:	6900      	ldr	r0, [r0, #16]
 8009336:	b530      	push	{r4, r5, lr}
 8009338:	1a80      	subs	r0, r0, r2
 800933a:	d10e      	bne.n	800935a <__mcmp+0x2a>
 800933c:	3314      	adds	r3, #20
 800933e:	3114      	adds	r1, #20
 8009340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800934c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009350:	4295      	cmp	r5, r2
 8009352:	d003      	beq.n	800935c <__mcmp+0x2c>
 8009354:	d205      	bcs.n	8009362 <__mcmp+0x32>
 8009356:	f04f 30ff 	mov.w	r0, #4294967295
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	42a3      	cmp	r3, r4
 800935e:	d3f3      	bcc.n	8009348 <__mcmp+0x18>
 8009360:	e7fb      	b.n	800935a <__mcmp+0x2a>
 8009362:	2001      	movs	r0, #1
 8009364:	e7f9      	b.n	800935a <__mcmp+0x2a>
	...

08009368 <__mdiff>:
 8009368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	4689      	mov	r9, r1
 800936e:	4606      	mov	r6, r0
 8009370:	4611      	mov	r1, r2
 8009372:	4648      	mov	r0, r9
 8009374:	4614      	mov	r4, r2
 8009376:	f7ff ffdb 	bl	8009330 <__mcmp>
 800937a:	1e05      	subs	r5, r0, #0
 800937c:	d112      	bne.n	80093a4 <__mdiff+0x3c>
 800937e:	4629      	mov	r1, r5
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff fd13 	bl	8008dac <_Balloc>
 8009386:	4602      	mov	r2, r0
 8009388:	b928      	cbnz	r0, 8009396 <__mdiff+0x2e>
 800938a:	f240 2137 	movw	r1, #567	@ 0x237
 800938e:	4b3e      	ldr	r3, [pc, #248]	@ (8009488 <__mdiff+0x120>)
 8009390:	483e      	ldr	r0, [pc, #248]	@ (800948c <__mdiff+0x124>)
 8009392:	f001 fa71 	bl	800a878 <__assert_func>
 8009396:	2301      	movs	r3, #1
 8009398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800939c:	4610      	mov	r0, r2
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	bfbc      	itt	lt
 80093a6:	464b      	movlt	r3, r9
 80093a8:	46a1      	movlt	r9, r4
 80093aa:	4630      	mov	r0, r6
 80093ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093b0:	bfba      	itte	lt
 80093b2:	461c      	movlt	r4, r3
 80093b4:	2501      	movlt	r5, #1
 80093b6:	2500      	movge	r5, #0
 80093b8:	f7ff fcf8 	bl	8008dac <_Balloc>
 80093bc:	4602      	mov	r2, r0
 80093be:	b918      	cbnz	r0, 80093c8 <__mdiff+0x60>
 80093c0:	f240 2145 	movw	r1, #581	@ 0x245
 80093c4:	4b30      	ldr	r3, [pc, #192]	@ (8009488 <__mdiff+0x120>)
 80093c6:	e7e3      	b.n	8009390 <__mdiff+0x28>
 80093c8:	f100 0b14 	add.w	fp, r0, #20
 80093cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093d0:	f109 0310 	add.w	r3, r9, #16
 80093d4:	60c5      	str	r5, [r0, #12]
 80093d6:	f04f 0c00 	mov.w	ip, #0
 80093da:	f109 0514 	add.w	r5, r9, #20
 80093de:	46d9      	mov	r9, fp
 80093e0:	6926      	ldr	r6, [r4, #16]
 80093e2:	f104 0e14 	add.w	lr, r4, #20
 80093e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093fa:	b281      	uxth	r1, r0
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	fa1f f38a 	uxth.w	r3, sl
 8009402:	1a5b      	subs	r3, r3, r1
 8009404:	0c00      	lsrs	r0, r0, #16
 8009406:	4463      	add	r3, ip
 8009408:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800940c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009410:	b29b      	uxth	r3, r3
 8009412:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009416:	4576      	cmp	r6, lr
 8009418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800941c:	f849 3b04 	str.w	r3, [r9], #4
 8009420:	d8e6      	bhi.n	80093f0 <__mdiff+0x88>
 8009422:	1b33      	subs	r3, r6, r4
 8009424:	3b15      	subs	r3, #21
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	3415      	adds	r4, #21
 800942c:	3304      	adds	r3, #4
 800942e:	42a6      	cmp	r6, r4
 8009430:	bf38      	it	cc
 8009432:	2304      	movcc	r3, #4
 8009434:	441d      	add	r5, r3
 8009436:	445b      	add	r3, fp
 8009438:	461e      	mov	r6, r3
 800943a:	462c      	mov	r4, r5
 800943c:	4544      	cmp	r4, r8
 800943e:	d30e      	bcc.n	800945e <__mdiff+0xf6>
 8009440:	f108 0103 	add.w	r1, r8, #3
 8009444:	1b49      	subs	r1, r1, r5
 8009446:	f021 0103 	bic.w	r1, r1, #3
 800944a:	3d03      	subs	r5, #3
 800944c:	45a8      	cmp	r8, r5
 800944e:	bf38      	it	cc
 8009450:	2100      	movcc	r1, #0
 8009452:	440b      	add	r3, r1
 8009454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009458:	b199      	cbz	r1, 8009482 <__mdiff+0x11a>
 800945a:	6117      	str	r7, [r2, #16]
 800945c:	e79e      	b.n	800939c <__mdiff+0x34>
 800945e:	46e6      	mov	lr, ip
 8009460:	f854 1b04 	ldr.w	r1, [r4], #4
 8009464:	fa1f fc81 	uxth.w	ip, r1
 8009468:	44f4      	add	ip, lr
 800946a:	0c08      	lsrs	r0, r1, #16
 800946c:	4471      	add	r1, lr
 800946e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009472:	b289      	uxth	r1, r1
 8009474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800947c:	f846 1b04 	str.w	r1, [r6], #4
 8009480:	e7dc      	b.n	800943c <__mdiff+0xd4>
 8009482:	3f01      	subs	r7, #1
 8009484:	e7e6      	b.n	8009454 <__mdiff+0xec>
 8009486:	bf00      	nop
 8009488:	0800b763 	.word	0x0800b763
 800948c:	0800b774 	.word	0x0800b774

08009490 <__ulp>:
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <__ulp+0x3c>)
 8009492:	400b      	ands	r3, r1
 8009494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009498:	2b00      	cmp	r3, #0
 800949a:	dc08      	bgt.n	80094ae <__ulp+0x1e>
 800949c:	425b      	negs	r3, r3
 800949e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094a6:	da04      	bge.n	80094b2 <__ulp+0x22>
 80094a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094ac:	4113      	asrs	r3, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	e008      	b.n	80094c4 <__ulp+0x34>
 80094b2:	f1a2 0314 	sub.w	r3, r2, #20
 80094b6:	2b1e      	cmp	r3, #30
 80094b8:	bfd6      	itet	le
 80094ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094be:	2201      	movgt	r2, #1
 80094c0:	40da      	lsrle	r2, r3
 80094c2:	2300      	movs	r3, #0
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	7ff00000 	.word	0x7ff00000

080094d0 <__b2d>:
 80094d0:	6902      	ldr	r2, [r0, #16]
 80094d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d4:	f100 0614 	add.w	r6, r0, #20
 80094d8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80094dc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80094e0:	4f1e      	ldr	r7, [pc, #120]	@ (800955c <__b2d+0x8c>)
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7ff fd54 	bl	8008f90 <__hi0bits>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f1c0 0020 	rsb	r0, r0, #32
 80094ee:	2b0a      	cmp	r3, #10
 80094f0:	f1a2 0504 	sub.w	r5, r2, #4
 80094f4:	6008      	str	r0, [r1, #0]
 80094f6:	dc12      	bgt.n	800951e <__b2d+0x4e>
 80094f8:	42ae      	cmp	r6, r5
 80094fa:	bf2c      	ite	cs
 80094fc:	2200      	movcs	r2, #0
 80094fe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009502:	f1c3 0c0b 	rsb	ip, r3, #11
 8009506:	3315      	adds	r3, #21
 8009508:	fa24 fe0c 	lsr.w	lr, r4, ip
 800950c:	fa04 f303 	lsl.w	r3, r4, r3
 8009510:	fa22 f20c 	lsr.w	r2, r2, ip
 8009514:	ea4e 0107 	orr.w	r1, lr, r7
 8009518:	431a      	orrs	r2, r3
 800951a:	4610      	mov	r0, r2
 800951c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951e:	42ae      	cmp	r6, r5
 8009520:	bf36      	itet	cc
 8009522:	f1a2 0508 	subcc.w	r5, r2, #8
 8009526:	2200      	movcs	r2, #0
 8009528:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800952c:	3b0b      	subs	r3, #11
 800952e:	d012      	beq.n	8009556 <__b2d+0x86>
 8009530:	f1c3 0720 	rsb	r7, r3, #32
 8009534:	fa22 f107 	lsr.w	r1, r2, r7
 8009538:	409c      	lsls	r4, r3
 800953a:	430c      	orrs	r4, r1
 800953c:	42b5      	cmp	r5, r6
 800953e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009542:	bf94      	ite	ls
 8009544:	2400      	movls	r4, #0
 8009546:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800954a:	409a      	lsls	r2, r3
 800954c:	40fc      	lsrs	r4, r7
 800954e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009552:	4322      	orrs	r2, r4
 8009554:	e7e1      	b.n	800951a <__b2d+0x4a>
 8009556:	ea44 0107 	orr.w	r1, r4, r7
 800955a:	e7de      	b.n	800951a <__b2d+0x4a>
 800955c:	3ff00000 	.word	0x3ff00000

08009560 <__d2b>:
 8009560:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009564:	2101      	movs	r1, #1
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	9e08      	ldr	r6, [sp, #32]
 800956c:	f7ff fc1e 	bl	8008dac <_Balloc>
 8009570:	4604      	mov	r4, r0
 8009572:	b930      	cbnz	r0, 8009582 <__d2b+0x22>
 8009574:	4602      	mov	r2, r0
 8009576:	f240 310f 	movw	r1, #783	@ 0x30f
 800957a:	4b23      	ldr	r3, [pc, #140]	@ (8009608 <__d2b+0xa8>)
 800957c:	4823      	ldr	r0, [pc, #140]	@ (800960c <__d2b+0xac>)
 800957e:	f001 f97b 	bl	800a878 <__assert_func>
 8009582:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800958a:	b10d      	cbz	r5, 8009590 <__d2b+0x30>
 800958c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	f1b8 0300 	subs.w	r3, r8, #0
 8009596:	d024      	beq.n	80095e2 <__d2b+0x82>
 8009598:	4668      	mov	r0, sp
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	f7ff fd17 	bl	8008fce <__lo0bits>
 80095a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095a4:	b1d8      	cbz	r0, 80095de <__d2b+0x7e>
 80095a6:	f1c0 0320 	rsb	r3, r0, #32
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	430b      	orrs	r3, r1
 80095b0:	40c2      	lsrs	r2, r0
 80095b2:	6163      	str	r3, [r4, #20]
 80095b4:	9201      	str	r2, [sp, #4]
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bf0c      	ite	eq
 80095bc:	2201      	moveq	r2, #1
 80095be:	2202      	movne	r2, #2
 80095c0:	61a3      	str	r3, [r4, #24]
 80095c2:	6122      	str	r2, [r4, #16]
 80095c4:	b1ad      	cbz	r5, 80095f2 <__d2b+0x92>
 80095c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095ca:	4405      	add	r5, r0
 80095cc:	6035      	str	r5, [r6, #0]
 80095ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d4:	6018      	str	r0, [r3, #0]
 80095d6:	4620      	mov	r0, r4
 80095d8:	b002      	add	sp, #8
 80095da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80095de:	6161      	str	r1, [r4, #20]
 80095e0:	e7e9      	b.n	80095b6 <__d2b+0x56>
 80095e2:	a801      	add	r0, sp, #4
 80095e4:	f7ff fcf3 	bl	8008fce <__lo0bits>
 80095e8:	9b01      	ldr	r3, [sp, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	3020      	adds	r0, #32
 80095f0:	e7e7      	b.n	80095c2 <__d2b+0x62>
 80095f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095fa:	6030      	str	r0, [r6, #0]
 80095fc:	6918      	ldr	r0, [r3, #16]
 80095fe:	f7ff fcc7 	bl	8008f90 <__hi0bits>
 8009602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009606:	e7e4      	b.n	80095d2 <__d2b+0x72>
 8009608:	0800b763 	.word	0x0800b763
 800960c:	0800b774 	.word	0x0800b774

08009610 <__ratio>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b085      	sub	sp, #20
 8009616:	e9cd 1000 	strd	r1, r0, [sp]
 800961a:	a902      	add	r1, sp, #8
 800961c:	f7ff ff58 	bl	80094d0 <__b2d>
 8009620:	468b      	mov	fp, r1
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	9800      	ldr	r0, [sp, #0]
 8009628:	a903      	add	r1, sp, #12
 800962a:	f7ff ff51 	bl	80094d0 <__b2d>
 800962e:	460d      	mov	r5, r1
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	4689      	mov	r9, r1
 8009634:	6919      	ldr	r1, [r3, #16]
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	4604      	mov	r4, r0
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4630      	mov	r0, r6
 800963e:	1ac9      	subs	r1, r1, r3
 8009640:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfcd      	iteet	gt
 800964e:	463a      	movgt	r2, r7
 8009650:	462a      	movle	r2, r5
 8009652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009656:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800965a:	bfd8      	it	le
 800965c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009660:	464b      	mov	r3, r9
 8009662:	4622      	mov	r2, r4
 8009664:	4659      	mov	r1, fp
 8009666:	f7f7 f861 	bl	800072c <__aeabi_ddiv>
 800966a:	b005      	add	sp, #20
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009670 <__copybits>:
 8009670:	3901      	subs	r1, #1
 8009672:	b570      	push	{r4, r5, r6, lr}
 8009674:	1149      	asrs	r1, r1, #5
 8009676:	6914      	ldr	r4, [r2, #16]
 8009678:	3101      	adds	r1, #1
 800967a:	f102 0314 	add.w	r3, r2, #20
 800967e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009682:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009686:	1f05      	subs	r5, r0, #4
 8009688:	42a3      	cmp	r3, r4
 800968a:	d30c      	bcc.n	80096a6 <__copybits+0x36>
 800968c:	1aa3      	subs	r3, r4, r2
 800968e:	3b11      	subs	r3, #17
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	3211      	adds	r2, #17
 8009696:	42a2      	cmp	r2, r4
 8009698:	bf88      	it	hi
 800969a:	2300      	movhi	r3, #0
 800969c:	4418      	add	r0, r3
 800969e:	2300      	movs	r3, #0
 80096a0:	4288      	cmp	r0, r1
 80096a2:	d305      	bcc.n	80096b0 <__copybits+0x40>
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80096aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80096ae:	e7eb      	b.n	8009688 <__copybits+0x18>
 80096b0:	f840 3b04 	str.w	r3, [r0], #4
 80096b4:	e7f4      	b.n	80096a0 <__copybits+0x30>

080096b6 <__any_on>:
 80096b6:	f100 0214 	add.w	r2, r0, #20
 80096ba:	6900      	ldr	r0, [r0, #16]
 80096bc:	114b      	asrs	r3, r1, #5
 80096be:	4298      	cmp	r0, r3
 80096c0:	b510      	push	{r4, lr}
 80096c2:	db11      	blt.n	80096e8 <__any_on+0x32>
 80096c4:	dd0a      	ble.n	80096dc <__any_on+0x26>
 80096c6:	f011 011f 	ands.w	r1, r1, #31
 80096ca:	d007      	beq.n	80096dc <__any_on+0x26>
 80096cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096d0:	fa24 f001 	lsr.w	r0, r4, r1
 80096d4:	fa00 f101 	lsl.w	r1, r0, r1
 80096d8:	428c      	cmp	r4, r1
 80096da:	d10b      	bne.n	80096f4 <__any_on+0x3e>
 80096dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d803      	bhi.n	80096ec <__any_on+0x36>
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd10      	pop	{r4, pc}
 80096e8:	4603      	mov	r3, r0
 80096ea:	e7f7      	b.n	80096dc <__any_on+0x26>
 80096ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d0f5      	beq.n	80096e0 <__any_on+0x2a>
 80096f4:	2001      	movs	r0, #1
 80096f6:	e7f6      	b.n	80096e6 <__any_on+0x30>

080096f8 <sulp>:
 80096f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	460f      	mov	r7, r1
 80096fe:	4690      	mov	r8, r2
 8009700:	f7ff fec6 	bl	8009490 <__ulp>
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	d011      	beq.n	8009732 <sulp+0x3a>
 800970e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009712:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009716:	2b00      	cmp	r3, #0
 8009718:	dd0b      	ble.n	8009732 <sulp+0x3a>
 800971a:	2400      	movs	r4, #0
 800971c:	051b      	lsls	r3, r3, #20
 800971e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009722:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	4604      	mov	r4, r0
 8009730:	460d      	mov	r5, r1
 8009732:	4620      	mov	r0, r4
 8009734:	4629      	mov	r1, r5
 8009736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973a:	0000      	movs	r0, r0
 800973c:	0000      	movs	r0, r0
	...

08009740 <_strtod_l>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	b09f      	sub	sp, #124	@ 0x7c
 8009746:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009748:	2200      	movs	r2, #0
 800974a:	460c      	mov	r4, r1
 800974c:	921a      	str	r2, [sp, #104]	@ 0x68
 800974e:	f04f 0a00 	mov.w	sl, #0
 8009752:	f04f 0b00 	mov.w	fp, #0
 8009756:	460a      	mov	r2, r1
 8009758:	9005      	str	r0, [sp, #20]
 800975a:	9219      	str	r2, [sp, #100]	@ 0x64
 800975c:	7811      	ldrb	r1, [r2, #0]
 800975e:	292b      	cmp	r1, #43	@ 0x2b
 8009760:	d048      	beq.n	80097f4 <_strtod_l+0xb4>
 8009762:	d836      	bhi.n	80097d2 <_strtod_l+0x92>
 8009764:	290d      	cmp	r1, #13
 8009766:	d830      	bhi.n	80097ca <_strtod_l+0x8a>
 8009768:	2908      	cmp	r1, #8
 800976a:	d830      	bhi.n	80097ce <_strtod_l+0x8e>
 800976c:	2900      	cmp	r1, #0
 800976e:	d039      	beq.n	80097e4 <_strtod_l+0xa4>
 8009770:	2200      	movs	r2, #0
 8009772:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009774:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009776:	782a      	ldrb	r2, [r5, #0]
 8009778:	2a30      	cmp	r2, #48	@ 0x30
 800977a:	f040 80b1 	bne.w	80098e0 <_strtod_l+0x1a0>
 800977e:	786a      	ldrb	r2, [r5, #1]
 8009780:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009784:	2a58      	cmp	r2, #88	@ 0x58
 8009786:	d16c      	bne.n	8009862 <_strtod_l+0x122>
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800978c:	4a8e      	ldr	r2, [pc, #568]	@ (80099c8 <_strtod_l+0x288>)
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	ab1a      	add	r3, sp, #104	@ 0x68
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	9805      	ldr	r0, [sp, #20]
 8009796:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009798:	a919      	add	r1, sp, #100	@ 0x64
 800979a:	f001 f907 	bl	800a9ac <__gethex>
 800979e:	f010 060f 	ands.w	r6, r0, #15
 80097a2:	4604      	mov	r4, r0
 80097a4:	d005      	beq.n	80097b2 <_strtod_l+0x72>
 80097a6:	2e06      	cmp	r6, #6
 80097a8:	d126      	bne.n	80097f8 <_strtod_l+0xb8>
 80097aa:	2300      	movs	r3, #0
 80097ac:	3501      	adds	r5, #1
 80097ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80097b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f040 8584 	bne.w	800a2c2 <_strtod_l+0xb82>
 80097ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097bc:	b1bb      	cbz	r3, 80097ee <_strtod_l+0xae>
 80097be:	4650      	mov	r0, sl
 80097c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80097c4:	b01f      	add	sp, #124	@ 0x7c
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	2920      	cmp	r1, #32
 80097cc:	d1d0      	bne.n	8009770 <_strtod_l+0x30>
 80097ce:	3201      	adds	r2, #1
 80097d0:	e7c3      	b.n	800975a <_strtod_l+0x1a>
 80097d2:	292d      	cmp	r1, #45	@ 0x2d
 80097d4:	d1cc      	bne.n	8009770 <_strtod_l+0x30>
 80097d6:	2101      	movs	r1, #1
 80097d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80097da:	1c51      	adds	r1, r2, #1
 80097dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80097de:	7852      	ldrb	r2, [r2, #1]
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d1c7      	bne.n	8009774 <_strtod_l+0x34>
 80097e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 8568 	bne.w	800a2be <_strtod_l+0xb7e>
 80097ee:	4650      	mov	r0, sl
 80097f0:	4659      	mov	r1, fp
 80097f2:	e7e7      	b.n	80097c4 <_strtod_l+0x84>
 80097f4:	2100      	movs	r1, #0
 80097f6:	e7ef      	b.n	80097d8 <_strtod_l+0x98>
 80097f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097fa:	b13a      	cbz	r2, 800980c <_strtod_l+0xcc>
 80097fc:	2135      	movs	r1, #53	@ 0x35
 80097fe:	a81c      	add	r0, sp, #112	@ 0x70
 8009800:	f7ff ff36 	bl	8009670 <__copybits>
 8009804:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	f7ff fb10 	bl	8008e2c <_Bfree>
 800980c:	3e01      	subs	r6, #1
 800980e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009810:	2e04      	cmp	r6, #4
 8009812:	d806      	bhi.n	8009822 <_strtod_l+0xe2>
 8009814:	e8df f006 	tbb	[pc, r6]
 8009818:	201d0314 	.word	0x201d0314
 800981c:	14          	.byte	0x14
 800981d:	00          	.byte	0x00
 800981e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009822:	05e1      	lsls	r1, r4, #23
 8009824:	bf48      	it	mi
 8009826:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800982a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800982e:	0d1b      	lsrs	r3, r3, #20
 8009830:	051b      	lsls	r3, r3, #20
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1bd      	bne.n	80097b2 <_strtod_l+0x72>
 8009836:	f7fe fb1d 	bl	8007e74 <__errno>
 800983a:	2322      	movs	r3, #34	@ 0x22
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	e7b8      	b.n	80097b2 <_strtod_l+0x72>
 8009840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009844:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009848:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800984c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009850:	e7e7      	b.n	8009822 <_strtod_l+0xe2>
 8009852:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80099cc <_strtod_l+0x28c>
 8009856:	e7e4      	b.n	8009822 <_strtod_l+0xe2>
 8009858:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800985c:	f04f 3aff 	mov.w	sl, #4294967295
 8009860:	e7df      	b.n	8009822 <_strtod_l+0xe2>
 8009862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	9219      	str	r2, [sp, #100]	@ 0x64
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	2b30      	cmp	r3, #48	@ 0x30
 800986c:	d0f9      	beq.n	8009862 <_strtod_l+0x122>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d09f      	beq.n	80097b2 <_strtod_l+0x72>
 8009872:	2301      	movs	r3, #1
 8009874:	9309      	str	r3, [sp, #36]	@ 0x24
 8009876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009878:	220a      	movs	r2, #10
 800987a:	930c      	str	r3, [sp, #48]	@ 0x30
 800987c:	2300      	movs	r3, #0
 800987e:	461f      	mov	r7, r3
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	930a      	str	r3, [sp, #40]	@ 0x28
 8009884:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009886:	7805      	ldrb	r5, [r0, #0]
 8009888:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800988c:	b2d9      	uxtb	r1, r3
 800988e:	2909      	cmp	r1, #9
 8009890:	d928      	bls.n	80098e4 <_strtod_l+0x1a4>
 8009892:	2201      	movs	r2, #1
 8009894:	494e      	ldr	r1, [pc, #312]	@ (80099d0 <_strtod_l+0x290>)
 8009896:	f000 ffc7 	bl	800a828 <strncmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	d032      	beq.n	8009904 <_strtod_l+0x1c4>
 800989e:	2000      	movs	r0, #0
 80098a0:	462a      	mov	r2, r5
 80098a2:	4681      	mov	r9, r0
 80098a4:	463d      	mov	r5, r7
 80098a6:	4603      	mov	r3, r0
 80098a8:	2a65      	cmp	r2, #101	@ 0x65
 80098aa:	d001      	beq.n	80098b0 <_strtod_l+0x170>
 80098ac:	2a45      	cmp	r2, #69	@ 0x45
 80098ae:	d114      	bne.n	80098da <_strtod_l+0x19a>
 80098b0:	b91d      	cbnz	r5, 80098ba <_strtod_l+0x17a>
 80098b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098b4:	4302      	orrs	r2, r0
 80098b6:	d095      	beq.n	80097e4 <_strtod_l+0xa4>
 80098b8:	2500      	movs	r5, #0
 80098ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80098bc:	1c62      	adds	r2, r4, #1
 80098be:	9219      	str	r2, [sp, #100]	@ 0x64
 80098c0:	7862      	ldrb	r2, [r4, #1]
 80098c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80098c4:	d077      	beq.n	80099b6 <_strtod_l+0x276>
 80098c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80098c8:	d07b      	beq.n	80099c2 <_strtod_l+0x282>
 80098ca:	f04f 0c00 	mov.w	ip, #0
 80098ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80098d2:	2909      	cmp	r1, #9
 80098d4:	f240 8082 	bls.w	80099dc <_strtod_l+0x29c>
 80098d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	e0a2      	b.n	8009a26 <_strtod_l+0x2e6>
 80098e0:	2300      	movs	r3, #0
 80098e2:	e7c7      	b.n	8009874 <_strtod_l+0x134>
 80098e4:	2f08      	cmp	r7, #8
 80098e6:	bfd5      	itete	le
 80098e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80098ea:	9908      	ldrgt	r1, [sp, #32]
 80098ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80098f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80098f4:	f100 0001 	add.w	r0, r0, #1
 80098f8:	bfd4      	ite	le
 80098fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80098fc:	9308      	strgt	r3, [sp, #32]
 80098fe:	3701      	adds	r7, #1
 8009900:	9019      	str	r0, [sp, #100]	@ 0x64
 8009902:	e7bf      	b.n	8009884 <_strtod_l+0x144>
 8009904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	9219      	str	r2, [sp, #100]	@ 0x64
 800990a:	785a      	ldrb	r2, [r3, #1]
 800990c:	b37f      	cbz	r7, 800996e <_strtod_l+0x22e>
 800990e:	4681      	mov	r9, r0
 8009910:	463d      	mov	r5, r7
 8009912:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009916:	2b09      	cmp	r3, #9
 8009918:	d912      	bls.n	8009940 <_strtod_l+0x200>
 800991a:	2301      	movs	r3, #1
 800991c:	e7c4      	b.n	80098a8 <_strtod_l+0x168>
 800991e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009920:	3001      	adds	r0, #1
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	9219      	str	r2, [sp, #100]	@ 0x64
 8009926:	785a      	ldrb	r2, [r3, #1]
 8009928:	2a30      	cmp	r2, #48	@ 0x30
 800992a:	d0f8      	beq.n	800991e <_strtod_l+0x1de>
 800992c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009930:	2b08      	cmp	r3, #8
 8009932:	f200 84cb 	bhi.w	800a2cc <_strtod_l+0xb8c>
 8009936:	4681      	mov	r9, r0
 8009938:	2000      	movs	r0, #0
 800993a:	4605      	mov	r5, r0
 800993c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800993e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009940:	3a30      	subs	r2, #48	@ 0x30
 8009942:	f100 0301 	add.w	r3, r0, #1
 8009946:	d02a      	beq.n	800999e <_strtod_l+0x25e>
 8009948:	4499      	add	r9, r3
 800994a:	210a      	movs	r1, #10
 800994c:	462b      	mov	r3, r5
 800994e:	eb00 0c05 	add.w	ip, r0, r5
 8009952:	4563      	cmp	r3, ip
 8009954:	d10d      	bne.n	8009972 <_strtod_l+0x232>
 8009956:	1c69      	adds	r1, r5, #1
 8009958:	4401      	add	r1, r0
 800995a:	4428      	add	r0, r5
 800995c:	2808      	cmp	r0, #8
 800995e:	dc16      	bgt.n	800998e <_strtod_l+0x24e>
 8009960:	230a      	movs	r3, #10
 8009962:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009964:	fb03 2300 	mla	r3, r3, r0, r2
 8009968:	930a      	str	r3, [sp, #40]	@ 0x28
 800996a:	2300      	movs	r3, #0
 800996c:	e018      	b.n	80099a0 <_strtod_l+0x260>
 800996e:	4638      	mov	r0, r7
 8009970:	e7da      	b.n	8009928 <_strtod_l+0x1e8>
 8009972:	2b08      	cmp	r3, #8
 8009974:	f103 0301 	add.w	r3, r3, #1
 8009978:	dc03      	bgt.n	8009982 <_strtod_l+0x242>
 800997a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800997c:	434e      	muls	r6, r1
 800997e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009980:	e7e7      	b.n	8009952 <_strtod_l+0x212>
 8009982:	2b10      	cmp	r3, #16
 8009984:	bfde      	ittt	le
 8009986:	9e08      	ldrle	r6, [sp, #32]
 8009988:	434e      	mulle	r6, r1
 800998a:	9608      	strle	r6, [sp, #32]
 800998c:	e7e1      	b.n	8009952 <_strtod_l+0x212>
 800998e:	280f      	cmp	r0, #15
 8009990:	dceb      	bgt.n	800996a <_strtod_l+0x22a>
 8009992:	230a      	movs	r3, #10
 8009994:	9808      	ldr	r0, [sp, #32]
 8009996:	fb03 2300 	mla	r3, r3, r0, r2
 800999a:	9308      	str	r3, [sp, #32]
 800999c:	e7e5      	b.n	800996a <_strtod_l+0x22a>
 800999e:	4629      	mov	r1, r5
 80099a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099a2:	460d      	mov	r5, r1
 80099a4:	1c50      	adds	r0, r2, #1
 80099a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80099a8:	7852      	ldrb	r2, [r2, #1]
 80099aa:	4618      	mov	r0, r3
 80099ac:	e7b1      	b.n	8009912 <_strtod_l+0x1d2>
 80099ae:	f04f 0900 	mov.w	r9, #0
 80099b2:	2301      	movs	r3, #1
 80099b4:	e77d      	b.n	80098b2 <_strtod_l+0x172>
 80099b6:	f04f 0c00 	mov.w	ip, #0
 80099ba:	1ca2      	adds	r2, r4, #2
 80099bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80099be:	78a2      	ldrb	r2, [r4, #2]
 80099c0:	e785      	b.n	80098ce <_strtod_l+0x18e>
 80099c2:	f04f 0c01 	mov.w	ip, #1
 80099c6:	e7f8      	b.n	80099ba <_strtod_l+0x27a>
 80099c8:	0800b8e8 	.word	0x0800b8e8
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	0800b8d0 	.word	0x0800b8d0
 80099d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099d6:	1c51      	adds	r1, r2, #1
 80099d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80099da:	7852      	ldrb	r2, [r2, #1]
 80099dc:	2a30      	cmp	r2, #48	@ 0x30
 80099de:	d0f9      	beq.n	80099d4 <_strtod_l+0x294>
 80099e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80099e4:	2908      	cmp	r1, #8
 80099e6:	f63f af78 	bhi.w	80098da <_strtod_l+0x19a>
 80099ea:	f04f 080a 	mov.w	r8, #10
 80099ee:	3a30      	subs	r2, #48	@ 0x30
 80099f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80099f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80099f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099f8:	1c56      	adds	r6, r2, #1
 80099fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80099fc:	7852      	ldrb	r2, [r2, #1]
 80099fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a02:	f1be 0f09 	cmp.w	lr, #9
 8009a06:	d939      	bls.n	8009a7c <_strtod_l+0x33c>
 8009a08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a0e:	1a76      	subs	r6, r6, r1
 8009a10:	2e08      	cmp	r6, #8
 8009a12:	dc03      	bgt.n	8009a1c <_strtod_l+0x2dc>
 8009a14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a16:	4588      	cmp	r8, r1
 8009a18:	bfa8      	it	ge
 8009a1a:	4688      	movge	r8, r1
 8009a1c:	f1bc 0f00 	cmp.w	ip, #0
 8009a20:	d001      	beq.n	8009a26 <_strtod_l+0x2e6>
 8009a22:	f1c8 0800 	rsb	r8, r8, #0
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d14e      	bne.n	8009ac8 <_strtod_l+0x388>
 8009a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a2c:	4308      	orrs	r0, r1
 8009a2e:	f47f aec0 	bne.w	80097b2 <_strtod_l+0x72>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f47f aed6 	bne.w	80097e4 <_strtod_l+0xa4>
 8009a38:	2a69      	cmp	r2, #105	@ 0x69
 8009a3a:	d028      	beq.n	8009a8e <_strtod_l+0x34e>
 8009a3c:	dc25      	bgt.n	8009a8a <_strtod_l+0x34a>
 8009a3e:	2a49      	cmp	r2, #73	@ 0x49
 8009a40:	d025      	beq.n	8009a8e <_strtod_l+0x34e>
 8009a42:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a44:	f47f aece 	bne.w	80097e4 <_strtod_l+0xa4>
 8009a48:	499a      	ldr	r1, [pc, #616]	@ (8009cb4 <_strtod_l+0x574>)
 8009a4a:	a819      	add	r0, sp, #100	@ 0x64
 8009a4c:	f001 f9d0 	bl	800adf0 <__match>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f43f aec7 	beq.w	80097e4 <_strtod_l+0xa4>
 8009a56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b28      	cmp	r3, #40	@ 0x28
 8009a5c:	d12e      	bne.n	8009abc <_strtod_l+0x37c>
 8009a5e:	4996      	ldr	r1, [pc, #600]	@ (8009cb8 <_strtod_l+0x578>)
 8009a60:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a62:	a819      	add	r0, sp, #100	@ 0x64
 8009a64:	f001 f9d8 	bl	800ae18 <__hexnan>
 8009a68:	2805      	cmp	r0, #5
 8009a6a:	d127      	bne.n	8009abc <_strtod_l+0x37c>
 8009a6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a6e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009a72:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009a76:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009a7a:	e69a      	b.n	80097b2 <_strtod_l+0x72>
 8009a7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a7e:	fb08 2101 	mla	r1, r8, r1, r2
 8009a82:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009a86:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a88:	e7b5      	b.n	80099f6 <_strtod_l+0x2b6>
 8009a8a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009a8c:	e7da      	b.n	8009a44 <_strtod_l+0x304>
 8009a8e:	498b      	ldr	r1, [pc, #556]	@ (8009cbc <_strtod_l+0x57c>)
 8009a90:	a819      	add	r0, sp, #100	@ 0x64
 8009a92:	f001 f9ad 	bl	800adf0 <__match>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f aea4 	beq.w	80097e4 <_strtod_l+0xa4>
 8009a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9e:	4988      	ldr	r1, [pc, #544]	@ (8009cc0 <_strtod_l+0x580>)
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	a819      	add	r0, sp, #100	@ 0x64
 8009aa4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009aa6:	f001 f9a3 	bl	800adf0 <__match>
 8009aaa:	b910      	cbnz	r0, 8009ab2 <_strtod_l+0x372>
 8009aac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aae:	3301      	adds	r3, #1
 8009ab0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ab2:	f04f 0a00 	mov.w	sl, #0
 8009ab6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009cc4 <_strtod_l+0x584>
 8009aba:	e67a      	b.n	80097b2 <_strtod_l+0x72>
 8009abc:	4882      	ldr	r0, [pc, #520]	@ (8009cc8 <_strtod_l+0x588>)
 8009abe:	f000 fed5 	bl	800a86c <nan>
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	468b      	mov	fp, r1
 8009ac6:	e674      	b.n	80097b2 <_strtod_l+0x72>
 8009ac8:	eba8 0309 	sub.w	r3, r8, r9
 8009acc:	2f00      	cmp	r7, #0
 8009ace:	bf08      	it	eq
 8009ad0:	462f      	moveq	r7, r5
 8009ad2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ad4:	2d10      	cmp	r5, #16
 8009ad6:	462c      	mov	r4, r5
 8009ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ada:	bfa8      	it	ge
 8009adc:	2410      	movge	r4, #16
 8009ade:	f7f6 fc81 	bl	80003e4 <__aeabi_ui2d>
 8009ae2:	2d09      	cmp	r5, #9
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	468b      	mov	fp, r1
 8009ae8:	dc11      	bgt.n	8009b0e <_strtod_l+0x3ce>
 8009aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f43f ae60 	beq.w	80097b2 <_strtod_l+0x72>
 8009af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af4:	dd76      	ble.n	8009be4 <_strtod_l+0x4a4>
 8009af6:	2b16      	cmp	r3, #22
 8009af8:	dc5d      	bgt.n	8009bb6 <_strtod_l+0x476>
 8009afa:	4974      	ldr	r1, [pc, #464]	@ (8009ccc <_strtod_l+0x58c>)
 8009afc:	4652      	mov	r2, sl
 8009afe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b02:	465b      	mov	r3, fp
 8009b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b08:	f7f6 fce6 	bl	80004d8 <__aeabi_dmul>
 8009b0c:	e7d9      	b.n	8009ac2 <_strtod_l+0x382>
 8009b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8009ccc <_strtod_l+0x58c>)
 8009b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b18:	f7f6 fcde 	bl	80004d8 <__aeabi_dmul>
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	9808      	ldr	r0, [sp, #32]
 8009b20:	468b      	mov	fp, r1
 8009b22:	f7f6 fc5f 	bl	80003e4 <__aeabi_ui2d>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	f7f6 fb1d 	bl	800016c <__adddf3>
 8009b32:	2d0f      	cmp	r5, #15
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	ddd7      	ble.n	8009aea <_strtod_l+0x3aa>
 8009b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3c:	1b2c      	subs	r4, r5, r4
 8009b3e:	441c      	add	r4, r3
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	f340 8096 	ble.w	8009c72 <_strtod_l+0x532>
 8009b46:	f014 030f 	ands.w	r3, r4, #15
 8009b4a:	d00a      	beq.n	8009b62 <_strtod_l+0x422>
 8009b4c:	495f      	ldr	r1, [pc, #380]	@ (8009ccc <_strtod_l+0x58c>)
 8009b4e:	4652      	mov	r2, sl
 8009b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b58:	465b      	mov	r3, fp
 8009b5a:	f7f6 fcbd 	bl	80004d8 <__aeabi_dmul>
 8009b5e:	4682      	mov	sl, r0
 8009b60:	468b      	mov	fp, r1
 8009b62:	f034 040f 	bics.w	r4, r4, #15
 8009b66:	d073      	beq.n	8009c50 <_strtod_l+0x510>
 8009b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009b6c:	dd48      	ble.n	8009c00 <_strtod_l+0x4c0>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	46a0      	mov	r8, r4
 8009b72:	46a1      	mov	r9, r4
 8009b74:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b76:	2322      	movs	r3, #34	@ 0x22
 8009b78:	f04f 0a00 	mov.w	sl, #0
 8009b7c:	9a05      	ldr	r2, [sp, #20]
 8009b7e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009cc4 <_strtod_l+0x584>
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f43f ae13 	beq.w	80097b2 <_strtod_l+0x72>
 8009b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b8e:	9805      	ldr	r0, [sp, #20]
 8009b90:	f7ff f94c 	bl	8008e2c <_Bfree>
 8009b94:	4649      	mov	r1, r9
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	f7ff f948 	bl	8008e2c <_Bfree>
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	9805      	ldr	r0, [sp, #20]
 8009ba0:	f7ff f944 	bl	8008e2c <_Bfree>
 8009ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ba6:	9805      	ldr	r0, [sp, #20]
 8009ba8:	f7ff f940 	bl	8008e2c <_Bfree>
 8009bac:	4621      	mov	r1, r4
 8009bae:	9805      	ldr	r0, [sp, #20]
 8009bb0:	f7ff f93c 	bl	8008e2c <_Bfree>
 8009bb4:	e5fd      	b.n	80097b2 <_strtod_l+0x72>
 8009bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	dbbc      	blt.n	8009b3a <_strtod_l+0x3fa>
 8009bc0:	4c42      	ldr	r4, [pc, #264]	@ (8009ccc <_strtod_l+0x58c>)
 8009bc2:	f1c5 050f 	rsb	r5, r5, #15
 8009bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009bca:	4652      	mov	r2, sl
 8009bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd0:	465b      	mov	r3, fp
 8009bd2:	f7f6 fc81 	bl	80004d8 <__aeabi_dmul>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd8:	1b5d      	subs	r5, r3, r5
 8009bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009be2:	e791      	b.n	8009b08 <_strtod_l+0x3c8>
 8009be4:	3316      	adds	r3, #22
 8009be6:	dba8      	blt.n	8009b3a <_strtod_l+0x3fa>
 8009be8:	4b38      	ldr	r3, [pc, #224]	@ (8009ccc <_strtod_l+0x58c>)
 8009bea:	eba9 0808 	sub.w	r8, r9, r8
 8009bee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009bf2:	4650      	mov	r0, sl
 8009bf4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	f7f6 fd97 	bl	800072c <__aeabi_ddiv>
 8009bfe:	e760      	b.n	8009ac2 <_strtod_l+0x382>
 8009c00:	4b33      	ldr	r3, [pc, #204]	@ (8009cd0 <_strtod_l+0x590>)
 8009c02:	4650      	mov	r0, sl
 8009c04:	9308      	str	r3, [sp, #32]
 8009c06:	2300      	movs	r3, #0
 8009c08:	4659      	mov	r1, fp
 8009c0a:	461e      	mov	r6, r3
 8009c0c:	1124      	asrs	r4, r4, #4
 8009c0e:	2c01      	cmp	r4, #1
 8009c10:	dc21      	bgt.n	8009c56 <_strtod_l+0x516>
 8009c12:	b10b      	cbz	r3, 8009c18 <_strtod_l+0x4d8>
 8009c14:	4682      	mov	sl, r0
 8009c16:	468b      	mov	fp, r1
 8009c18:	492d      	ldr	r1, [pc, #180]	@ (8009cd0 <_strtod_l+0x590>)
 8009c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c22:	4652      	mov	r2, sl
 8009c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c28:	465b      	mov	r3, fp
 8009c2a:	f7f6 fc55 	bl	80004d8 <__aeabi_dmul>
 8009c2e:	4b25      	ldr	r3, [pc, #148]	@ (8009cc4 <_strtod_l+0x584>)
 8009c30:	460a      	mov	r2, r1
 8009c32:	400b      	ands	r3, r1
 8009c34:	4927      	ldr	r1, [pc, #156]	@ (8009cd4 <_strtod_l+0x594>)
 8009c36:	4682      	mov	sl, r0
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	d898      	bhi.n	8009b6e <_strtod_l+0x42e>
 8009c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf86      	itte	hi
 8009c44:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c48:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009cd8 <_strtod_l+0x598>
 8009c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c50:	2300      	movs	r3, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	e07a      	b.n	8009d4c <_strtod_l+0x60c>
 8009c56:	07e2      	lsls	r2, r4, #31
 8009c58:	d505      	bpl.n	8009c66 <_strtod_l+0x526>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fc3a 	bl	80004d8 <__aeabi_dmul>
 8009c64:	2301      	movs	r3, #1
 8009c66:	9a08      	ldr	r2, [sp, #32]
 8009c68:	3601      	adds	r6, #1
 8009c6a:	3208      	adds	r2, #8
 8009c6c:	1064      	asrs	r4, r4, #1
 8009c6e:	9208      	str	r2, [sp, #32]
 8009c70:	e7cd      	b.n	8009c0e <_strtod_l+0x4ce>
 8009c72:	d0ed      	beq.n	8009c50 <_strtod_l+0x510>
 8009c74:	4264      	negs	r4, r4
 8009c76:	f014 020f 	ands.w	r2, r4, #15
 8009c7a:	d00a      	beq.n	8009c92 <_strtod_l+0x552>
 8009c7c:	4b13      	ldr	r3, [pc, #76]	@ (8009ccc <_strtod_l+0x58c>)
 8009c7e:	4650      	mov	r0, sl
 8009c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c84:	4659      	mov	r1, fp
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fd4f 	bl	800072c <__aeabi_ddiv>
 8009c8e:	4682      	mov	sl, r0
 8009c90:	468b      	mov	fp, r1
 8009c92:	1124      	asrs	r4, r4, #4
 8009c94:	d0dc      	beq.n	8009c50 <_strtod_l+0x510>
 8009c96:	2c1f      	cmp	r4, #31
 8009c98:	dd20      	ble.n	8009cdc <_strtod_l+0x59c>
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	46a0      	mov	r8, r4
 8009c9e:	46a1      	mov	r9, r4
 8009ca0:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ca2:	2322      	movs	r3, #34	@ 0x22
 8009ca4:	9a05      	ldr	r2, [sp, #20]
 8009ca6:	f04f 0a00 	mov.w	sl, #0
 8009caa:	f04f 0b00 	mov.w	fp, #0
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	e768      	b.n	8009b84 <_strtod_l+0x444>
 8009cb2:	bf00      	nop
 8009cb4:	0800b6bb 	.word	0x0800b6bb
 8009cb8:	0800b8d4 	.word	0x0800b8d4
 8009cbc:	0800b6b3 	.word	0x0800b6b3
 8009cc0:	0800b6ea 	.word	0x0800b6ea
 8009cc4:	7ff00000 	.word	0x7ff00000
 8009cc8:	0800ba7d 	.word	0x0800ba7d
 8009ccc:	0800b808 	.word	0x0800b808
 8009cd0:	0800b7e0 	.word	0x0800b7e0
 8009cd4:	7ca00000 	.word	0x7ca00000
 8009cd8:	7fefffff 	.word	0x7fefffff
 8009cdc:	f014 0310 	ands.w	r3, r4, #16
 8009ce0:	bf18      	it	ne
 8009ce2:	236a      	movne	r3, #106	@ 0x6a
 8009ce4:	4650      	mov	r0, sl
 8009ce6:	9308      	str	r3, [sp, #32]
 8009ce8:	4659      	mov	r1, fp
 8009cea:	2300      	movs	r3, #0
 8009cec:	4ea9      	ldr	r6, [pc, #676]	@ (8009f94 <_strtod_l+0x854>)
 8009cee:	07e2      	lsls	r2, r4, #31
 8009cf0:	d504      	bpl.n	8009cfc <_strtod_l+0x5bc>
 8009cf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	1064      	asrs	r4, r4, #1
 8009cfe:	f106 0608 	add.w	r6, r6, #8
 8009d02:	d1f4      	bne.n	8009cee <_strtod_l+0x5ae>
 8009d04:	b10b      	cbz	r3, 8009d0a <_strtod_l+0x5ca>
 8009d06:	4682      	mov	sl, r0
 8009d08:	468b      	mov	fp, r1
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	b1b3      	cbz	r3, 8009d3c <_strtod_l+0x5fc>
 8009d0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	4659      	mov	r1, fp
 8009d1a:	dd0f      	ble.n	8009d3c <_strtod_l+0x5fc>
 8009d1c:	2b1f      	cmp	r3, #31
 8009d1e:	dd57      	ble.n	8009dd0 <_strtod_l+0x690>
 8009d20:	2b34      	cmp	r3, #52	@ 0x34
 8009d22:	bfd8      	it	le
 8009d24:	f04f 33ff 	movle.w	r3, #4294967295
 8009d28:	f04f 0a00 	mov.w	sl, #0
 8009d2c:	bfcf      	iteee	gt
 8009d2e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d32:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d36:	4093      	lslle	r3, r2
 8009d38:	ea03 0b01 	andle.w	fp, r3, r1
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4650      	mov	r0, sl
 8009d42:	4659      	mov	r1, fp
 8009d44:	f7f6 fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1a6      	bne.n	8009c9a <_strtod_l+0x55a>
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	463a      	mov	r2, r7
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d54:	462b      	mov	r3, r5
 8009d56:	9805      	ldr	r0, [sp, #20]
 8009d58:	f7ff f8d0 	bl	8008efc <__s2b>
 8009d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f af05 	beq.w	8009b6e <_strtod_l+0x42e>
 8009d64:	2400      	movs	r4, #0
 8009d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d68:	eba9 0308 	sub.w	r3, r9, r8
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	bfa8      	it	ge
 8009d70:	2300      	movge	r3, #0
 8009d72:	46a0      	mov	r8, r4
 8009d74:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d7e:	9805      	ldr	r0, [sp, #20]
 8009d80:	6859      	ldr	r1, [r3, #4]
 8009d82:	f7ff f813 	bl	8008dac <_Balloc>
 8009d86:	4681      	mov	r9, r0
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f43f aef4 	beq.w	8009b76 <_strtod_l+0x436>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d90:	300c      	adds	r0, #12
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	f103 010c 	add.w	r1, r3, #12
 8009d98:	3202      	adds	r2, #2
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	f7fe f8a5 	bl	8007eea <memcpy>
 8009da0:	ab1c      	add	r3, sp, #112	@ 0x70
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	4652      	mov	r2, sl
 8009daa:	465b      	mov	r3, fp
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009db2:	f7ff fbd5 	bl	8009560 <__d2b>
 8009db6:	901a      	str	r0, [sp, #104]	@ 0x68
 8009db8:	2800      	cmp	r0, #0
 8009dba:	f43f aedc 	beq.w	8009b76 <_strtod_l+0x436>
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	9805      	ldr	r0, [sp, #20]
 8009dc2:	f7ff f931 	bl	8009028 <__i2b>
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	b948      	cbnz	r0, 8009dde <_strtod_l+0x69e>
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	e6d2      	b.n	8009b76 <_strtod_l+0x436>
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	ea03 0a0a 	and.w	sl, r3, sl
 8009ddc:	e7ae      	b.n	8009d3c <_strtod_l+0x5fc>
 8009dde:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009de0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	bfab      	itete	ge
 8009de6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009de8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009dea:	18ef      	addge	r7, r5, r3
 8009dec:	1b5e      	sublt	r6, r3, r5
 8009dee:	9b08      	ldr	r3, [sp, #32]
 8009df0:	bfa8      	it	ge
 8009df2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009df4:	eba5 0503 	sub.w	r5, r5, r3
 8009df8:	4415      	add	r5, r2
 8009dfa:	4b67      	ldr	r3, [pc, #412]	@ (8009f98 <_strtod_l+0x858>)
 8009dfc:	f105 35ff 	add.w	r5, r5, #4294967295
 8009e00:	bfb8      	it	lt
 8009e02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e04:	429d      	cmp	r5, r3
 8009e06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e0a:	da50      	bge.n	8009eae <_strtod_l+0x76e>
 8009e0c:	1b5b      	subs	r3, r3, r5
 8009e0e:	2b1f      	cmp	r3, #31
 8009e10:	f04f 0101 	mov.w	r1, #1
 8009e14:	eba2 0203 	sub.w	r2, r2, r3
 8009e18:	dc3d      	bgt.n	8009e96 <_strtod_l+0x756>
 8009e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e20:	2300      	movs	r3, #0
 8009e22:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e24:	18bd      	adds	r5, r7, r2
 8009e26:	9b08      	ldr	r3, [sp, #32]
 8009e28:	42af      	cmp	r7, r5
 8009e2a:	4416      	add	r6, r2
 8009e2c:	441e      	add	r6, r3
 8009e2e:	463b      	mov	r3, r7
 8009e30:	bfa8      	it	ge
 8009e32:	462b      	movge	r3, r5
 8009e34:	42b3      	cmp	r3, r6
 8009e36:	bfa8      	it	ge
 8009e38:	4633      	movge	r3, r6
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bfc2      	ittt	gt
 8009e3e:	1aed      	subgt	r5, r5, r3
 8009e40:	1af6      	subgt	r6, r6, r3
 8009e42:	1aff      	subgt	r7, r7, r3
 8009e44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	dd16      	ble.n	8009e78 <_strtod_l+0x738>
 8009e4a:	4641      	mov	r1, r8
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	9805      	ldr	r0, [sp, #20]
 8009e50:	f7ff f9a8 	bl	80091a4 <__pow5mult>
 8009e54:	4680      	mov	r8, r0
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0b7      	beq.n	8009dca <_strtod_l+0x68a>
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e5e:	9805      	ldr	r0, [sp, #20]
 8009e60:	f7ff f8f8 	bl	8009054 <__multiply>
 8009e64:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f43f ae85 	beq.w	8009b76 <_strtod_l+0x436>
 8009e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e6e:	9805      	ldr	r0, [sp, #20]
 8009e70:	f7fe ffdc 	bl	8008e2c <_Bfree>
 8009e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	dc1d      	bgt.n	8009eb8 <_strtod_l+0x778>
 8009e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dd23      	ble.n	8009eca <_strtod_l+0x78a>
 8009e82:	4649      	mov	r1, r9
 8009e84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e86:	9805      	ldr	r0, [sp, #20]
 8009e88:	f7ff f98c 	bl	80091a4 <__pow5mult>
 8009e8c:	4681      	mov	r9, r0
 8009e8e:	b9e0      	cbnz	r0, 8009eca <_strtod_l+0x78a>
 8009e90:	f04f 0900 	mov.w	r9, #0
 8009e94:	e66f      	b.n	8009b76 <_strtod_l+0x436>
 8009e96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ea2:	35e2      	adds	r5, #226	@ 0xe2
 8009ea4:	fa01 f305 	lsl.w	r3, r1, r5
 8009ea8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009eac:	e7ba      	b.n	8009e24 <_strtod_l+0x6e4>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eb6:	e7b5      	b.n	8009e24 <_strtod_l+0x6e4>
 8009eb8:	462a      	mov	r2, r5
 8009eba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	f7ff f9cb 	bl	8009258 <__lshift>
 8009ec2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d1d9      	bne.n	8009e7c <_strtod_l+0x73c>
 8009ec8:	e655      	b.n	8009b76 <_strtod_l+0x436>
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	dd07      	ble.n	8009ede <_strtod_l+0x79e>
 8009ece:	4649      	mov	r1, r9
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	9805      	ldr	r0, [sp, #20]
 8009ed4:	f7ff f9c0 	bl	8009258 <__lshift>
 8009ed8:	4681      	mov	r9, r0
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d0d8      	beq.n	8009e90 <_strtod_l+0x750>
 8009ede:	2f00      	cmp	r7, #0
 8009ee0:	dd08      	ble.n	8009ef4 <_strtod_l+0x7b4>
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	9805      	ldr	r0, [sp, #20]
 8009ee8:	f7ff f9b6 	bl	8009258 <__lshift>
 8009eec:	4680      	mov	r8, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f43f ae41 	beq.w	8009b76 <_strtod_l+0x436>
 8009ef4:	464a      	mov	r2, r9
 8009ef6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ef8:	9805      	ldr	r0, [sp, #20]
 8009efa:	f7ff fa35 	bl	8009368 <__mdiff>
 8009efe:	4604      	mov	r4, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	f43f ae38 	beq.w	8009b76 <_strtod_l+0x436>
 8009f06:	68c3      	ldr	r3, [r0, #12]
 8009f08:	4641      	mov	r1, r8
 8009f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60c3      	str	r3, [r0, #12]
 8009f10:	f7ff fa0e 	bl	8009330 <__mcmp>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	da45      	bge.n	8009fa4 <_strtod_l+0x864>
 8009f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f1e:	d16b      	bne.n	8009ff8 <_strtod_l+0x8b8>
 8009f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d167      	bne.n	8009ff8 <_strtod_l+0x8b8>
 8009f28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f2c:	0d1b      	lsrs	r3, r3, #20
 8009f2e:	051b      	lsls	r3, r3, #20
 8009f30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f34:	d960      	bls.n	8009ff8 <_strtod_l+0x8b8>
 8009f36:	6963      	ldr	r3, [r4, #20]
 8009f38:	b913      	cbnz	r3, 8009f40 <_strtod_l+0x800>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	dd5b      	ble.n	8009ff8 <_strtod_l+0x8b8>
 8009f40:	4621      	mov	r1, r4
 8009f42:	2201      	movs	r2, #1
 8009f44:	9805      	ldr	r0, [sp, #20]
 8009f46:	f7ff f987 	bl	8009258 <__lshift>
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	f7ff f9ef 	bl	8009330 <__mcmp>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	dd50      	ble.n	8009ff8 <_strtod_l+0x8b8>
 8009f56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f5a:	9a08      	ldr	r2, [sp, #32]
 8009f5c:	0d1b      	lsrs	r3, r3, #20
 8009f5e:	051b      	lsls	r3, r3, #20
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d06a      	beq.n	800a03a <_strtod_l+0x8fa>
 8009f64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f68:	d867      	bhi.n	800a03a <_strtod_l+0x8fa>
 8009f6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f6e:	f67f ae98 	bls.w	8009ca2 <_strtod_l+0x562>
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	4b09      	ldr	r3, [pc, #36]	@ (8009f9c <_strtod_l+0x85c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f7f6 faad 	bl	80004d8 <__aeabi_dmul>
 8009f7e:	4b08      	ldr	r3, [pc, #32]	@ (8009fa0 <_strtod_l+0x860>)
 8009f80:	4682      	mov	sl, r0
 8009f82:	400b      	ands	r3, r1
 8009f84:	468b      	mov	fp, r1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f47f ae00 	bne.w	8009b8c <_strtod_l+0x44c>
 8009f8c:	2322      	movs	r3, #34	@ 0x22
 8009f8e:	9a05      	ldr	r2, [sp, #20]
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	e5fb      	b.n	8009b8c <_strtod_l+0x44c>
 8009f94:	0800b900 	.word	0x0800b900
 8009f98:	fffffc02 	.word	0xfffffc02
 8009f9c:	39500000 	.word	0x39500000
 8009fa0:	7ff00000 	.word	0x7ff00000
 8009fa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fa8:	d165      	bne.n	800a076 <_strtod_l+0x936>
 8009faa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fb0:	b35a      	cbz	r2, 800a00a <_strtod_l+0x8ca>
 8009fb2:	4a99      	ldr	r2, [pc, #612]	@ (800a218 <_strtod_l+0xad8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d12b      	bne.n	800a010 <_strtod_l+0x8d0>
 8009fb8:	9b08      	ldr	r3, [sp, #32]
 8009fba:	4651      	mov	r1, sl
 8009fbc:	b303      	cbz	r3, 800a000 <_strtod_l+0x8c0>
 8009fbe:	465a      	mov	r2, fp
 8009fc0:	4b96      	ldr	r3, [pc, #600]	@ (800a21c <_strtod_l+0xadc>)
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	d81b      	bhi.n	800a006 <_strtod_l+0x8c6>
 8009fce:	0d1b      	lsrs	r3, r3, #20
 8009fd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d119      	bne.n	800a010 <_strtod_l+0x8d0>
 8009fdc:	4b90      	ldr	r3, [pc, #576]	@ (800a220 <_strtod_l+0xae0>)
 8009fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d102      	bne.n	8009fea <_strtod_l+0x8aa>
 8009fe4:	3101      	adds	r1, #1
 8009fe6:	f43f adc6 	beq.w	8009b76 <_strtod_l+0x436>
 8009fea:	f04f 0a00 	mov.w	sl, #0
 8009fee:	4b8b      	ldr	r3, [pc, #556]	@ (800a21c <_strtod_l+0xadc>)
 8009ff0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ff2:	401a      	ands	r2, r3
 8009ff4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1b9      	bne.n	8009f72 <_strtod_l+0x832>
 8009ffe:	e5c5      	b.n	8009b8c <_strtod_l+0x44c>
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
 800a004:	e7e8      	b.n	8009fd8 <_strtod_l+0x898>
 800a006:	4613      	mov	r3, r2
 800a008:	e7e6      	b.n	8009fd8 <_strtod_l+0x898>
 800a00a:	ea53 030a 	orrs.w	r3, r3, sl
 800a00e:	d0a2      	beq.n	8009f56 <_strtod_l+0x816>
 800a010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a012:	b1db      	cbz	r3, 800a04c <_strtod_l+0x90c>
 800a014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a016:	4213      	tst	r3, r2
 800a018:	d0ee      	beq.n	8009ff8 <_strtod_l+0x8b8>
 800a01a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a01c:	4650      	mov	r0, sl
 800a01e:	4659      	mov	r1, fp
 800a020:	9a08      	ldr	r2, [sp, #32]
 800a022:	b1bb      	cbz	r3, 800a054 <_strtod_l+0x914>
 800a024:	f7ff fb68 	bl	80096f8 <sulp>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a030:	f7f6 f89c 	bl	800016c <__adddf3>
 800a034:	4682      	mov	sl, r0
 800a036:	468b      	mov	fp, r1
 800a038:	e7de      	b.n	8009ff8 <_strtod_l+0x8b8>
 800a03a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a03e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a042:	f04f 3aff 	mov.w	sl, #4294967295
 800a046:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a04a:	e7d5      	b.n	8009ff8 <_strtod_l+0x8b8>
 800a04c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a04e:	ea13 0f0a 	tst.w	r3, sl
 800a052:	e7e1      	b.n	800a018 <_strtod_l+0x8d8>
 800a054:	f7ff fb50 	bl	80096f8 <sulp>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a060:	f7f6 f882 	bl	8000168 <__aeabi_dsub>
 800a064:	2200      	movs	r2, #0
 800a066:	2300      	movs	r3, #0
 800a068:	4682      	mov	sl, r0
 800a06a:	468b      	mov	fp, r1
 800a06c:	f7f6 fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 800a070:	2800      	cmp	r0, #0
 800a072:	d0c1      	beq.n	8009ff8 <_strtod_l+0x8b8>
 800a074:	e615      	b.n	8009ca2 <_strtod_l+0x562>
 800a076:	4641      	mov	r1, r8
 800a078:	4620      	mov	r0, r4
 800a07a:	f7ff fac9 	bl	8009610 <__ratio>
 800a07e:	2200      	movs	r2, #0
 800a080:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a084:	4606      	mov	r6, r0
 800a086:	460f      	mov	r7, r1
 800a088:	f7f6 fca2 	bl	80009d0 <__aeabi_dcmple>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d06d      	beq.n	800a16c <_strtod_l+0xa2c>
 800a090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d178      	bne.n	800a188 <_strtod_l+0xa48>
 800a096:	f1ba 0f00 	cmp.w	sl, #0
 800a09a:	d156      	bne.n	800a14a <_strtod_l+0xa0a>
 800a09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a09e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d158      	bne.n	800a158 <_strtod_l+0xa18>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	4b5d      	ldr	r3, [pc, #372]	@ (800a224 <_strtod_l+0xae4>)
 800a0ae:	f7f6 fc85 	bl	80009bc <__aeabi_dcmplt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d157      	bne.n	800a166 <_strtod_l+0xa26>
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a228 <_strtod_l+0xae8>)
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a0ca:	9606      	str	r6, [sp, #24]
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0d2:	4d52      	ldr	r5, [pc, #328]	@ (800a21c <_strtod_l+0xadc>)
 800a0d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0da:	401d      	ands	r5, r3
 800a0dc:	4b53      	ldr	r3, [pc, #332]	@ (800a22c <_strtod_l+0xaec>)
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	f040 80aa 	bne.w	800a238 <_strtod_l+0xaf8>
 800a0e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a0ec:	4659      	mov	r1, fp
 800a0ee:	f7ff f9cf 	bl	8009490 <__ulp>
 800a0f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0f6:	f7f6 f9ef 	bl	80004d8 <__aeabi_dmul>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	f7f6 f835 	bl	800016c <__adddf3>
 800a102:	460b      	mov	r3, r1
 800a104:	4945      	ldr	r1, [pc, #276]	@ (800a21c <_strtod_l+0xadc>)
 800a106:	4a4a      	ldr	r2, [pc, #296]	@ (800a230 <_strtod_l+0xaf0>)
 800a108:	4019      	ands	r1, r3
 800a10a:	4291      	cmp	r1, r2
 800a10c:	4682      	mov	sl, r0
 800a10e:	d942      	bls.n	800a196 <_strtod_l+0xa56>
 800a110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a112:	4b43      	ldr	r3, [pc, #268]	@ (800a220 <_strtod_l+0xae0>)
 800a114:	429a      	cmp	r2, r3
 800a116:	d103      	bne.n	800a120 <_strtod_l+0x9e0>
 800a118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a11a:	3301      	adds	r3, #1
 800a11c:	f43f ad2b 	beq.w	8009b76 <_strtod_l+0x436>
 800a120:	f04f 3aff 	mov.w	sl, #4294967295
 800a124:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a220 <_strtod_l+0xae0>
 800a128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a12a:	9805      	ldr	r0, [sp, #20]
 800a12c:	f7fe fe7e 	bl	8008e2c <_Bfree>
 800a130:	4649      	mov	r1, r9
 800a132:	9805      	ldr	r0, [sp, #20]
 800a134:	f7fe fe7a 	bl	8008e2c <_Bfree>
 800a138:	4641      	mov	r1, r8
 800a13a:	9805      	ldr	r0, [sp, #20]
 800a13c:	f7fe fe76 	bl	8008e2c <_Bfree>
 800a140:	4621      	mov	r1, r4
 800a142:	9805      	ldr	r0, [sp, #20]
 800a144:	f7fe fe72 	bl	8008e2c <_Bfree>
 800a148:	e618      	b.n	8009d7c <_strtod_l+0x63c>
 800a14a:	f1ba 0f01 	cmp.w	sl, #1
 800a14e:	d103      	bne.n	800a158 <_strtod_l+0xa18>
 800a150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a152:	2b00      	cmp	r3, #0
 800a154:	f43f ada5 	beq.w	8009ca2 <_strtod_l+0x562>
 800a158:	2200      	movs	r2, #0
 800a15a:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <_strtod_l+0xaf4>)
 800a15c:	2600      	movs	r6, #0
 800a15e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a162:	4f30      	ldr	r7, [pc, #192]	@ (800a224 <_strtod_l+0xae4>)
 800a164:	e7b3      	b.n	800a0ce <_strtod_l+0x98e>
 800a166:	2600      	movs	r6, #0
 800a168:	4f2f      	ldr	r7, [pc, #188]	@ (800a228 <_strtod_l+0xae8>)
 800a16a:	e7ac      	b.n	800a0c6 <_strtod_l+0x986>
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	4b2d      	ldr	r3, [pc, #180]	@ (800a228 <_strtod_l+0xae8>)
 800a172:	2200      	movs	r2, #0
 800a174:	f7f6 f9b0 	bl	80004d8 <__aeabi_dmul>
 800a178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0a1      	beq.n	800a0c6 <_strtod_l+0x986>
 800a182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a186:	e7a2      	b.n	800a0ce <_strtod_l+0x98e>
 800a188:	2200      	movs	r2, #0
 800a18a:	4b26      	ldr	r3, [pc, #152]	@ (800a224 <_strtod_l+0xae4>)
 800a18c:	4616      	mov	r6, r2
 800a18e:	461f      	mov	r7, r3
 800a190:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a194:	e79b      	b.n	800a0ce <_strtod_l+0x98e>
 800a196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1c1      	bne.n	800a128 <_strtod_l+0x9e8>
 800a1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1a8:	0d1b      	lsrs	r3, r3, #20
 800a1aa:	051b      	lsls	r3, r3, #20
 800a1ac:	429d      	cmp	r5, r3
 800a1ae:	d1bb      	bne.n	800a128 <_strtod_l+0x9e8>
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fde6 	bl	8000d84 <__aeabi_d2lz>
 800a1b8:	f7f6 f960 	bl	800047c <__aeabi_l2d>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a1d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1d6:	ea46 060a 	orr.w	r6, r6, sl
 800a1da:	431e      	orrs	r6, r3
 800a1dc:	d069      	beq.n	800a2b2 <_strtod_l+0xb72>
 800a1de:	a30a      	add	r3, pc, #40	@ (adr r3, 800a208 <_strtod_l+0xac8>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 fbea 	bl	80009bc <__aeabi_dcmplt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f47f accf 	bne.w	8009b8c <_strtod_l+0x44c>
 800a1ee:	a308      	add	r3, pc, #32	@ (adr r3, 800a210 <_strtod_l+0xad0>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1f8:	f7f6 fbfe 	bl	80009f8 <__aeabi_dcmpgt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d093      	beq.n	800a128 <_strtod_l+0x9e8>
 800a200:	e4c4      	b.n	8009b8c <_strtod_l+0x44c>
 800a202:	bf00      	nop
 800a204:	f3af 8000 	nop.w
 800a208:	94a03595 	.word	0x94a03595
 800a20c:	3fdfffff 	.word	0x3fdfffff
 800a210:	35afe535 	.word	0x35afe535
 800a214:	3fe00000 	.word	0x3fe00000
 800a218:	000fffff 	.word	0x000fffff
 800a21c:	7ff00000 	.word	0x7ff00000
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	3ff00000 	.word	0x3ff00000
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	7fe00000 	.word	0x7fe00000
 800a230:	7c9fffff 	.word	0x7c9fffff
 800a234:	bff00000 	.word	0xbff00000
 800a238:	9b08      	ldr	r3, [sp, #32]
 800a23a:	b323      	cbz	r3, 800a286 <_strtod_l+0xb46>
 800a23c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a240:	d821      	bhi.n	800a286 <_strtod_l+0xb46>
 800a242:	a327      	add	r3, pc, #156	@ (adr r3, 800a2e0 <_strtod_l+0xba0>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 fbc0 	bl	80009d0 <__aeabi_dcmple>
 800a250:	b1a0      	cbz	r0, 800a27c <_strtod_l+0xb3c>
 800a252:	4639      	mov	r1, r7
 800a254:	4630      	mov	r0, r6
 800a256:	f7f6 fc17 	bl	8000a88 <__aeabi_d2uiz>
 800a25a:	2801      	cmp	r0, #1
 800a25c:	bf38      	it	cc
 800a25e:	2001      	movcc	r0, #1
 800a260:	f7f6 f8c0 	bl	80003e4 <__aeabi_ui2d>
 800a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	b9fb      	cbnz	r3, 800a2ac <_strtod_l+0xb6c>
 800a26c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a270:	9014      	str	r0, [sp, #80]	@ 0x50
 800a272:	9315      	str	r3, [sp, #84]	@ 0x54
 800a274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a27c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a27e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a282:	1b5b      	subs	r3, r3, r5
 800a284:	9311      	str	r3, [sp, #68]	@ 0x44
 800a286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a28e:	f7ff f8ff 	bl	8009490 <__ulp>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4650      	mov	r0, sl
 800a298:	4659      	mov	r1, fp
 800a29a:	f7f6 f91d 	bl	80004d8 <__aeabi_dmul>
 800a29e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2a2:	f7f5 ff63 	bl	800016c <__adddf3>
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	468b      	mov	fp, r1
 800a2aa:	e776      	b.n	800a19a <_strtod_l+0xa5a>
 800a2ac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a2b0:	e7e0      	b.n	800a274 <_strtod_l+0xb34>
 800a2b2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a2e8 <_strtod_l+0xba8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 fb80 	bl	80009bc <__aeabi_dcmplt>
 800a2bc:	e79e      	b.n	800a1fc <_strtod_l+0xabc>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	f7ff ba77 	b.w	80097ba <_strtod_l+0x7a>
 800a2cc:	2a65      	cmp	r2, #101	@ 0x65
 800a2ce:	f43f ab6e 	beq.w	80099ae <_strtod_l+0x26e>
 800a2d2:	2a45      	cmp	r2, #69	@ 0x45
 800a2d4:	f43f ab6b 	beq.w	80099ae <_strtod_l+0x26e>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f7ff bba6 	b.w	8009a2a <_strtod_l+0x2ea>
 800a2de:	bf00      	nop
 800a2e0:	ffc00000 	.word	0xffc00000
 800a2e4:	41dfffff 	.word	0x41dfffff
 800a2e8:	94a03595 	.word	0x94a03595
 800a2ec:	3fcfffff 	.word	0x3fcfffff

0800a2f0 <_strtod_r>:
 800a2f0:	4b01      	ldr	r3, [pc, #4]	@ (800a2f8 <_strtod_r+0x8>)
 800a2f2:	f7ff ba25 	b.w	8009740 <_strtod_l>
 800a2f6:	bf00      	nop
 800a2f8:	20000070 	.word	0x20000070

0800a2fc <_strtol_l.constprop.0>:
 800a2fc:	2b24      	cmp	r3, #36	@ 0x24
 800a2fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a302:	4686      	mov	lr, r0
 800a304:	4690      	mov	r8, r2
 800a306:	d801      	bhi.n	800a30c <_strtol_l.constprop.0+0x10>
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d106      	bne.n	800a31a <_strtol_l.constprop.0+0x1e>
 800a30c:	f7fd fdb2 	bl	8007e74 <__errno>
 800a310:	2316      	movs	r3, #22
 800a312:	6003      	str	r3, [r0, #0]
 800a314:	2000      	movs	r0, #0
 800a316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31a:	460d      	mov	r5, r1
 800a31c:	4833      	ldr	r0, [pc, #204]	@ (800a3ec <_strtol_l.constprop.0+0xf0>)
 800a31e:	462a      	mov	r2, r5
 800a320:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a324:	5d06      	ldrb	r6, [r0, r4]
 800a326:	f016 0608 	ands.w	r6, r6, #8
 800a32a:	d1f8      	bne.n	800a31e <_strtol_l.constprop.0+0x22>
 800a32c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a32e:	d12d      	bne.n	800a38c <_strtol_l.constprop.0+0x90>
 800a330:	2601      	movs	r6, #1
 800a332:	782c      	ldrb	r4, [r5, #0]
 800a334:	1c95      	adds	r5, r2, #2
 800a336:	f033 0210 	bics.w	r2, r3, #16
 800a33a:	d109      	bne.n	800a350 <_strtol_l.constprop.0+0x54>
 800a33c:	2c30      	cmp	r4, #48	@ 0x30
 800a33e:	d12a      	bne.n	800a396 <_strtol_l.constprop.0+0x9a>
 800a340:	782a      	ldrb	r2, [r5, #0]
 800a342:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a346:	2a58      	cmp	r2, #88	@ 0x58
 800a348:	d125      	bne.n	800a396 <_strtol_l.constprop.0+0x9a>
 800a34a:	2310      	movs	r3, #16
 800a34c:	786c      	ldrb	r4, [r5, #1]
 800a34e:	3502      	adds	r5, #2
 800a350:	2200      	movs	r2, #0
 800a352:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a356:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a35a:	fbbc f9f3 	udiv	r9, ip, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	fb03 ca19 	mls	sl, r3, r9, ip
 800a364:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a368:	2f09      	cmp	r7, #9
 800a36a:	d81b      	bhi.n	800a3a4 <_strtol_l.constprop.0+0xa8>
 800a36c:	463c      	mov	r4, r7
 800a36e:	42a3      	cmp	r3, r4
 800a370:	dd27      	ble.n	800a3c2 <_strtol_l.constprop.0+0xc6>
 800a372:	1c57      	adds	r7, r2, #1
 800a374:	d007      	beq.n	800a386 <_strtol_l.constprop.0+0x8a>
 800a376:	4581      	cmp	r9, r0
 800a378:	d320      	bcc.n	800a3bc <_strtol_l.constprop.0+0xc0>
 800a37a:	d101      	bne.n	800a380 <_strtol_l.constprop.0+0x84>
 800a37c:	45a2      	cmp	sl, r4
 800a37e:	db1d      	blt.n	800a3bc <_strtol_l.constprop.0+0xc0>
 800a380:	2201      	movs	r2, #1
 800a382:	fb00 4003 	mla	r0, r0, r3, r4
 800a386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a38a:	e7eb      	b.n	800a364 <_strtol_l.constprop.0+0x68>
 800a38c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a38e:	bf04      	itt	eq
 800a390:	782c      	ldrbeq	r4, [r5, #0]
 800a392:	1c95      	addeq	r5, r2, #2
 800a394:	e7cf      	b.n	800a336 <_strtol_l.constprop.0+0x3a>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1da      	bne.n	800a350 <_strtol_l.constprop.0+0x54>
 800a39a:	2c30      	cmp	r4, #48	@ 0x30
 800a39c:	bf0c      	ite	eq
 800a39e:	2308      	moveq	r3, #8
 800a3a0:	230a      	movne	r3, #10
 800a3a2:	e7d5      	b.n	800a350 <_strtol_l.constprop.0+0x54>
 800a3a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3a8:	2f19      	cmp	r7, #25
 800a3aa:	d801      	bhi.n	800a3b0 <_strtol_l.constprop.0+0xb4>
 800a3ac:	3c37      	subs	r4, #55	@ 0x37
 800a3ae:	e7de      	b.n	800a36e <_strtol_l.constprop.0+0x72>
 800a3b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3b4:	2f19      	cmp	r7, #25
 800a3b6:	d804      	bhi.n	800a3c2 <_strtol_l.constprop.0+0xc6>
 800a3b8:	3c57      	subs	r4, #87	@ 0x57
 800a3ba:	e7d8      	b.n	800a36e <_strtol_l.constprop.0+0x72>
 800a3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c0:	e7e1      	b.n	800a386 <_strtol_l.constprop.0+0x8a>
 800a3c2:	1c53      	adds	r3, r2, #1
 800a3c4:	d108      	bne.n	800a3d8 <_strtol_l.constprop.0+0xdc>
 800a3c6:	2322      	movs	r3, #34	@ 0x22
 800a3c8:	4660      	mov	r0, ip
 800a3ca:	f8ce 3000 	str.w	r3, [lr]
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	d0a0      	beq.n	800a316 <_strtol_l.constprop.0+0x1a>
 800a3d4:	1e69      	subs	r1, r5, #1
 800a3d6:	e006      	b.n	800a3e6 <_strtol_l.constprop.0+0xea>
 800a3d8:	b106      	cbz	r6, 800a3dc <_strtol_l.constprop.0+0xe0>
 800a3da:	4240      	negs	r0, r0
 800a3dc:	f1b8 0f00 	cmp.w	r8, #0
 800a3e0:	d099      	beq.n	800a316 <_strtol_l.constprop.0+0x1a>
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	d1f6      	bne.n	800a3d4 <_strtol_l.constprop.0+0xd8>
 800a3e6:	f8c8 1000 	str.w	r1, [r8]
 800a3ea:	e794      	b.n	800a316 <_strtol_l.constprop.0+0x1a>
 800a3ec:	0800b929 	.word	0x0800b929

0800a3f0 <_strtol_r>:
 800a3f0:	f7ff bf84 	b.w	800a2fc <_strtol_l.constprop.0>

0800a3f4 <__ssputs_r>:
 800a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	461f      	mov	r7, r3
 800a3fa:	688e      	ldr	r6, [r1, #8]
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	42be      	cmp	r6, r7
 800a400:	460c      	mov	r4, r1
 800a402:	4690      	mov	r8, r2
 800a404:	680b      	ldr	r3, [r1, #0]
 800a406:	d82d      	bhi.n	800a464 <__ssputs_r+0x70>
 800a408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a40c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a410:	d026      	beq.n	800a460 <__ssputs_r+0x6c>
 800a412:	6965      	ldr	r5, [r4, #20]
 800a414:	6909      	ldr	r1, [r1, #16]
 800a416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a41a:	eba3 0901 	sub.w	r9, r3, r1
 800a41e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a422:	1c7b      	adds	r3, r7, #1
 800a424:	444b      	add	r3, r9
 800a426:	106d      	asrs	r5, r5, #1
 800a428:	429d      	cmp	r5, r3
 800a42a:	bf38      	it	cc
 800a42c:	461d      	movcc	r5, r3
 800a42e:	0553      	lsls	r3, r2, #21
 800a430:	d527      	bpl.n	800a482 <__ssputs_r+0x8e>
 800a432:	4629      	mov	r1, r5
 800a434:	f7fe fc2e 	bl	8008c94 <_malloc_r>
 800a438:	4606      	mov	r6, r0
 800a43a:	b360      	cbz	r0, 800a496 <__ssputs_r+0xa2>
 800a43c:	464a      	mov	r2, r9
 800a43e:	6921      	ldr	r1, [r4, #16]
 800a440:	f7fd fd53 	bl	8007eea <memcpy>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	6126      	str	r6, [r4, #16]
 800a452:	444e      	add	r6, r9
 800a454:	6026      	str	r6, [r4, #0]
 800a456:	463e      	mov	r6, r7
 800a458:	6165      	str	r5, [r4, #20]
 800a45a:	eba5 0509 	sub.w	r5, r5, r9
 800a45e:	60a5      	str	r5, [r4, #8]
 800a460:	42be      	cmp	r6, r7
 800a462:	d900      	bls.n	800a466 <__ssputs_r+0x72>
 800a464:	463e      	mov	r6, r7
 800a466:	4632      	mov	r2, r6
 800a468:	4641      	mov	r1, r8
 800a46a:	6820      	ldr	r0, [r4, #0]
 800a46c:	f000 f9c2 	bl	800a7f4 <memmove>
 800a470:	2000      	movs	r0, #0
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	1b9b      	subs	r3, r3, r6
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	4433      	add	r3, r6
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	462a      	mov	r2, r5
 800a484:	f000 fd75 	bl	800af72 <_realloc_r>
 800a488:	4606      	mov	r6, r0
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d1e0      	bne.n	800a450 <__ssputs_r+0x5c>
 800a48e:	4650      	mov	r0, sl
 800a490:	6921      	ldr	r1, [r4, #16]
 800a492:	f7fe fb8d 	bl	8008bb0 <_free_r>
 800a496:	230c      	movs	r3, #12
 800a498:	f8ca 3000 	str.w	r3, [sl]
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	e7e9      	b.n	800a47e <__ssputs_r+0x8a>
	...

0800a4ac <_svfiprintf_r>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	4698      	mov	r8, r3
 800a4b2:	898b      	ldrh	r3, [r1, #12]
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	061b      	lsls	r3, r3, #24
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	4614      	mov	r4, r2
 800a4bc:	b09d      	sub	sp, #116	@ 0x74
 800a4be:	d510      	bpl.n	800a4e2 <_svfiprintf_r+0x36>
 800a4c0:	690b      	ldr	r3, [r1, #16]
 800a4c2:	b973      	cbnz	r3, 800a4e2 <_svfiprintf_r+0x36>
 800a4c4:	2140      	movs	r1, #64	@ 0x40
 800a4c6:	f7fe fbe5 	bl	8008c94 <_malloc_r>
 800a4ca:	6028      	str	r0, [r5, #0]
 800a4cc:	6128      	str	r0, [r5, #16]
 800a4ce:	b930      	cbnz	r0, 800a4de <_svfiprintf_r+0x32>
 800a4d0:	230c      	movs	r3, #12
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	b01d      	add	sp, #116	@ 0x74
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	2340      	movs	r3, #64	@ 0x40
 800a4e0:	616b      	str	r3, [r5, #20]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e6:	2320      	movs	r3, #32
 800a4e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4ec:	2330      	movs	r3, #48	@ 0x30
 800a4ee:	f04f 0901 	mov.w	r9, #1
 800a4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a690 <_svfiprintf_r+0x1e4>
 800a4fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4fe:	4623      	mov	r3, r4
 800a500:	469a      	mov	sl, r3
 800a502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a506:	b10a      	cbz	r2, 800a50c <_svfiprintf_r+0x60>
 800a508:	2a25      	cmp	r2, #37	@ 0x25
 800a50a:	d1f9      	bne.n	800a500 <_svfiprintf_r+0x54>
 800a50c:	ebba 0b04 	subs.w	fp, sl, r4
 800a510:	d00b      	beq.n	800a52a <_svfiprintf_r+0x7e>
 800a512:	465b      	mov	r3, fp
 800a514:	4622      	mov	r2, r4
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	f7ff ff6b 	bl	800a3f4 <__ssputs_r>
 800a51e:	3001      	adds	r0, #1
 800a520:	f000 80a7 	beq.w	800a672 <_svfiprintf_r+0x1c6>
 800a524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a526:	445a      	add	r2, fp
 800a528:	9209      	str	r2, [sp, #36]	@ 0x24
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 809f 	beq.w	800a672 <_svfiprintf_r+0x1c6>
 800a534:	2300      	movs	r3, #0
 800a536:	f04f 32ff 	mov.w	r2, #4294967295
 800a53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53e:	f10a 0a01 	add.w	sl, sl, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	9307      	str	r3, [sp, #28]
 800a546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a54a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a54c:	4654      	mov	r4, sl
 800a54e:	2205      	movs	r2, #5
 800a550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a554:	484e      	ldr	r0, [pc, #312]	@ (800a690 <_svfiprintf_r+0x1e4>)
 800a556:	f7fd fcba 	bl	8007ece <memchr>
 800a55a:	9a04      	ldr	r2, [sp, #16]
 800a55c:	b9d8      	cbnz	r0, 800a596 <_svfiprintf_r+0xea>
 800a55e:	06d0      	lsls	r0, r2, #27
 800a560:	bf44      	itt	mi
 800a562:	2320      	movmi	r3, #32
 800a564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a568:	0711      	lsls	r1, r2, #28
 800a56a:	bf44      	itt	mi
 800a56c:	232b      	movmi	r3, #43	@ 0x2b
 800a56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b2a      	cmp	r3, #42	@ 0x2a
 800a578:	d015      	beq.n	800a5a6 <_svfiprintf_r+0xfa>
 800a57a:	4654      	mov	r4, sl
 800a57c:	2000      	movs	r0, #0
 800a57e:	f04f 0c0a 	mov.w	ip, #10
 800a582:	9a07      	ldr	r2, [sp, #28]
 800a584:	4621      	mov	r1, r4
 800a586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58a:	3b30      	subs	r3, #48	@ 0x30
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d94b      	bls.n	800a628 <_svfiprintf_r+0x17c>
 800a590:	b1b0      	cbz	r0, 800a5c0 <_svfiprintf_r+0x114>
 800a592:	9207      	str	r2, [sp, #28]
 800a594:	e014      	b.n	800a5c0 <_svfiprintf_r+0x114>
 800a596:	eba0 0308 	sub.w	r3, r0, r8
 800a59a:	fa09 f303 	lsl.w	r3, r9, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	46a2      	mov	sl, r4
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	e7d2      	b.n	800a54c <_svfiprintf_r+0xa0>
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	1d19      	adds	r1, r3, #4
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	9103      	str	r1, [sp, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	425b      	neglt	r3, r3
 800a5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b8:	9307      	strge	r3, [sp, #28]
 800a5ba:	9307      	strlt	r3, [sp, #28]
 800a5bc:	bfb8      	it	lt
 800a5be:	9204      	strlt	r2, [sp, #16]
 800a5c0:	7823      	ldrb	r3, [r4, #0]
 800a5c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5c4:	d10a      	bne.n	800a5dc <_svfiprintf_r+0x130>
 800a5c6:	7863      	ldrb	r3, [r4, #1]
 800a5c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5ca:	d132      	bne.n	800a632 <_svfiprintf_r+0x186>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	3402      	adds	r4, #2
 800a5d0:	1d1a      	adds	r2, r3, #4
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	9203      	str	r2, [sp, #12]
 800a5d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a694 <_svfiprintf_r+0x1e8>
 800a5e0:	2203      	movs	r2, #3
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	7821      	ldrb	r1, [r4, #0]
 800a5e6:	f7fd fc72 	bl	8007ece <memchr>
 800a5ea:	b138      	cbz	r0, 800a5fc <_svfiprintf_r+0x150>
 800a5ec:	2240      	movs	r2, #64	@ 0x40
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	eba0 000a 	sub.w	r0, r0, sl
 800a5f4:	4082      	lsls	r2, r0
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a600:	2206      	movs	r2, #6
 800a602:	4825      	ldr	r0, [pc, #148]	@ (800a698 <_svfiprintf_r+0x1ec>)
 800a604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a608:	f7fd fc61 	bl	8007ece <memchr>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d036      	beq.n	800a67e <_svfiprintf_r+0x1d2>
 800a610:	4b22      	ldr	r3, [pc, #136]	@ (800a69c <_svfiprintf_r+0x1f0>)
 800a612:	bb1b      	cbnz	r3, 800a65c <_svfiprintf_r+0x1b0>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	3307      	adds	r3, #7
 800a618:	f023 0307 	bic.w	r3, r3, #7
 800a61c:	3308      	adds	r3, #8
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a622:	4433      	add	r3, r6
 800a624:	9309      	str	r3, [sp, #36]	@ 0x24
 800a626:	e76a      	b.n	800a4fe <_svfiprintf_r+0x52>
 800a628:	460c      	mov	r4, r1
 800a62a:	2001      	movs	r0, #1
 800a62c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a630:	e7a8      	b.n	800a584 <_svfiprintf_r+0xd8>
 800a632:	2300      	movs	r3, #0
 800a634:	f04f 0c0a 	mov.w	ip, #10
 800a638:	4619      	mov	r1, r3
 800a63a:	3401      	adds	r4, #1
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	4620      	mov	r0, r4
 800a640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a644:	3a30      	subs	r2, #48	@ 0x30
 800a646:	2a09      	cmp	r2, #9
 800a648:	d903      	bls.n	800a652 <_svfiprintf_r+0x1a6>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0c6      	beq.n	800a5dc <_svfiprintf_r+0x130>
 800a64e:	9105      	str	r1, [sp, #20]
 800a650:	e7c4      	b.n	800a5dc <_svfiprintf_r+0x130>
 800a652:	4604      	mov	r4, r0
 800a654:	2301      	movs	r3, #1
 800a656:	fb0c 2101 	mla	r1, ip, r1, r2
 800a65a:	e7f0      	b.n	800a63e <_svfiprintf_r+0x192>
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	462a      	mov	r2, r5
 800a662:	4638      	mov	r0, r7
 800a664:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a0 <_svfiprintf_r+0x1f4>)
 800a666:	a904      	add	r1, sp, #16
 800a668:	f7fc fc34 	bl	8006ed4 <_printf_float>
 800a66c:	1c42      	adds	r2, r0, #1
 800a66e:	4606      	mov	r6, r0
 800a670:	d1d6      	bne.n	800a620 <_svfiprintf_r+0x174>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	065b      	lsls	r3, r3, #25
 800a676:	f53f af2d 	bmi.w	800a4d4 <_svfiprintf_r+0x28>
 800a67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a67c:	e72c      	b.n	800a4d8 <_svfiprintf_r+0x2c>
 800a67e:	ab03      	add	r3, sp, #12
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	462a      	mov	r2, r5
 800a684:	4638      	mov	r0, r7
 800a686:	4b06      	ldr	r3, [pc, #24]	@ (800a6a0 <_svfiprintf_r+0x1f4>)
 800a688:	a904      	add	r1, sp, #16
 800a68a:	f7fc fec1 	bl	8007410 <_printf_i>
 800a68e:	e7ed      	b.n	800a66c <_svfiprintf_r+0x1c0>
 800a690:	0800ba29 	.word	0x0800ba29
 800a694:	0800ba2f 	.word	0x0800ba2f
 800a698:	0800ba33 	.word	0x0800ba33
 800a69c:	08006ed5 	.word	0x08006ed5
 800a6a0:	0800a3f5 	.word	0x0800a3f5

0800a6a4 <__sflush_r>:
 800a6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	0716      	lsls	r6, r2, #28
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	d454      	bmi.n	800a75c <__sflush_r+0xb8>
 800a6b2:	684b      	ldr	r3, [r1, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dc02      	bgt.n	800a6be <__sflush_r+0x1a>
 800a6b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd48      	ble.n	800a750 <__sflush_r+0xac>
 800a6be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	d045      	beq.n	800a750 <__sflush_r+0xac>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6ca:	682f      	ldr	r7, [r5, #0]
 800a6cc:	6a21      	ldr	r1, [r4, #32]
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	d030      	beq.n	800a734 <__sflush_r+0x90>
 800a6d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	0759      	lsls	r1, r3, #29
 800a6d8:	d505      	bpl.n	800a6e6 <__sflush_r+0x42>
 800a6da:	6863      	ldr	r3, [r4, #4]
 800a6dc:	1ad2      	subs	r2, r2, r3
 800a6de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6e0:	b10b      	cbz	r3, 800a6e6 <__sflush_r+0x42>
 800a6e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6e4:	1ad2      	subs	r2, r2, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6ec:	6a21      	ldr	r1, [r4, #32]
 800a6ee:	47b0      	blx	r6
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	d106      	bne.n	800a704 <__sflush_r+0x60>
 800a6f6:	6829      	ldr	r1, [r5, #0]
 800a6f8:	291d      	cmp	r1, #29
 800a6fa:	d82b      	bhi.n	800a754 <__sflush_r+0xb0>
 800a6fc:	4a28      	ldr	r2, [pc, #160]	@ (800a7a0 <__sflush_r+0xfc>)
 800a6fe:	410a      	asrs	r2, r1
 800a700:	07d6      	lsls	r6, r2, #31
 800a702:	d427      	bmi.n	800a754 <__sflush_r+0xb0>
 800a704:	2200      	movs	r2, #0
 800a706:	6062      	str	r2, [r4, #4]
 800a708:	6922      	ldr	r2, [r4, #16]
 800a70a:	04d9      	lsls	r1, r3, #19
 800a70c:	6022      	str	r2, [r4, #0]
 800a70e:	d504      	bpl.n	800a71a <__sflush_r+0x76>
 800a710:	1c42      	adds	r2, r0, #1
 800a712:	d101      	bne.n	800a718 <__sflush_r+0x74>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b903      	cbnz	r3, 800a71a <__sflush_r+0x76>
 800a718:	6560      	str	r0, [r4, #84]	@ 0x54
 800a71a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a71c:	602f      	str	r7, [r5, #0]
 800a71e:	b1b9      	cbz	r1, 800a750 <__sflush_r+0xac>
 800a720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a724:	4299      	cmp	r1, r3
 800a726:	d002      	beq.n	800a72e <__sflush_r+0x8a>
 800a728:	4628      	mov	r0, r5
 800a72a:	f7fe fa41 	bl	8008bb0 <_free_r>
 800a72e:	2300      	movs	r3, #0
 800a730:	6363      	str	r3, [r4, #52]	@ 0x34
 800a732:	e00d      	b.n	800a750 <__sflush_r+0xac>
 800a734:	2301      	movs	r3, #1
 800a736:	4628      	mov	r0, r5
 800a738:	47b0      	blx	r6
 800a73a:	4602      	mov	r2, r0
 800a73c:	1c50      	adds	r0, r2, #1
 800a73e:	d1c9      	bne.n	800a6d4 <__sflush_r+0x30>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0c6      	beq.n	800a6d4 <__sflush_r+0x30>
 800a746:	2b1d      	cmp	r3, #29
 800a748:	d001      	beq.n	800a74e <__sflush_r+0xaa>
 800a74a:	2b16      	cmp	r3, #22
 800a74c:	d11d      	bne.n	800a78a <__sflush_r+0xe6>
 800a74e:	602f      	str	r7, [r5, #0]
 800a750:	2000      	movs	r0, #0
 800a752:	e021      	b.n	800a798 <__sflush_r+0xf4>
 800a754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a758:	b21b      	sxth	r3, r3
 800a75a:	e01a      	b.n	800a792 <__sflush_r+0xee>
 800a75c:	690f      	ldr	r7, [r1, #16]
 800a75e:	2f00      	cmp	r7, #0
 800a760:	d0f6      	beq.n	800a750 <__sflush_r+0xac>
 800a762:	0793      	lsls	r3, r2, #30
 800a764:	bf18      	it	ne
 800a766:	2300      	movne	r3, #0
 800a768:	680e      	ldr	r6, [r1, #0]
 800a76a:	bf08      	it	eq
 800a76c:	694b      	ldreq	r3, [r1, #20]
 800a76e:	1bf6      	subs	r6, r6, r7
 800a770:	600f      	str	r7, [r1, #0]
 800a772:	608b      	str	r3, [r1, #8]
 800a774:	2e00      	cmp	r6, #0
 800a776:	ddeb      	ble.n	800a750 <__sflush_r+0xac>
 800a778:	4633      	mov	r3, r6
 800a77a:	463a      	mov	r2, r7
 800a77c:	4628      	mov	r0, r5
 800a77e:	6a21      	ldr	r1, [r4, #32]
 800a780:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a784:	47e0      	blx	ip
 800a786:	2800      	cmp	r0, #0
 800a788:	dc07      	bgt.n	800a79a <__sflush_r+0xf6>
 800a78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a79a:	4407      	add	r7, r0
 800a79c:	1a36      	subs	r6, r6, r0
 800a79e:	e7e9      	b.n	800a774 <__sflush_r+0xd0>
 800a7a0:	dfbffffe 	.word	0xdfbffffe

0800a7a4 <_fflush_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	690b      	ldr	r3, [r1, #16]
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	b913      	cbnz	r3, 800a7b4 <_fflush_r+0x10>
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	b118      	cbz	r0, 800a7be <_fflush_r+0x1a>
 800a7b6:	6a03      	ldr	r3, [r0, #32]
 800a7b8:	b90b      	cbnz	r3, 800a7be <_fflush_r+0x1a>
 800a7ba:	f7fd f9e5 	bl	8007b88 <__sinit>
 800a7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0f3      	beq.n	800a7ae <_fflush_r+0xa>
 800a7c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7c8:	07d0      	lsls	r0, r2, #31
 800a7ca:	d404      	bmi.n	800a7d6 <_fflush_r+0x32>
 800a7cc:	0599      	lsls	r1, r3, #22
 800a7ce:	d402      	bmi.n	800a7d6 <_fflush_r+0x32>
 800a7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7d2:	f7fd fb7a 	bl	8007eca <__retarget_lock_acquire_recursive>
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f7ff ff63 	bl	800a6a4 <__sflush_r>
 800a7de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	07da      	lsls	r2, r3, #31
 800a7e4:	d4e4      	bmi.n	800a7b0 <_fflush_r+0xc>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	059b      	lsls	r3, r3, #22
 800a7ea:	d4e1      	bmi.n	800a7b0 <_fflush_r+0xc>
 800a7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7ee:	f7fd fb6d 	bl	8007ecc <__retarget_lock_release_recursive>
 800a7f2:	e7dd      	b.n	800a7b0 <_fflush_r+0xc>

0800a7f4 <memmove>:
 800a7f4:	4288      	cmp	r0, r1
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	eb01 0402 	add.w	r4, r1, r2
 800a7fc:	d902      	bls.n	800a804 <memmove+0x10>
 800a7fe:	4284      	cmp	r4, r0
 800a800:	4623      	mov	r3, r4
 800a802:	d807      	bhi.n	800a814 <memmove+0x20>
 800a804:	1e43      	subs	r3, r0, #1
 800a806:	42a1      	cmp	r1, r4
 800a808:	d008      	beq.n	800a81c <memmove+0x28>
 800a80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a812:	e7f8      	b.n	800a806 <memmove+0x12>
 800a814:	4601      	mov	r1, r0
 800a816:	4402      	add	r2, r0
 800a818:	428a      	cmp	r2, r1
 800a81a:	d100      	bne.n	800a81e <memmove+0x2a>
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a826:	e7f7      	b.n	800a818 <memmove+0x24>

0800a828 <strncmp>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	b16a      	cbz	r2, 800a848 <strncmp+0x20>
 800a82c:	3901      	subs	r1, #1
 800a82e:	1884      	adds	r4, r0, r2
 800a830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a838:	429a      	cmp	r2, r3
 800a83a:	d103      	bne.n	800a844 <strncmp+0x1c>
 800a83c:	42a0      	cmp	r0, r4
 800a83e:	d001      	beq.n	800a844 <strncmp+0x1c>
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1f5      	bne.n	800a830 <strncmp+0x8>
 800a844:	1ad0      	subs	r0, r2, r3
 800a846:	bd10      	pop	{r4, pc}
 800a848:	4610      	mov	r0, r2
 800a84a:	e7fc      	b.n	800a846 <strncmp+0x1e>

0800a84c <_sbrk_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	2300      	movs	r3, #0
 800a850:	4d05      	ldr	r5, [pc, #20]	@ (800a868 <_sbrk_r+0x1c>)
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	f7f7 f990 	bl	8001b7c <_sbrk>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_sbrk_r+0x1a>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_sbrk_r+0x1a>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20003040 	.word	0x20003040

0800a86c <nan>:
 800a86c:	2000      	movs	r0, #0
 800a86e:	4901      	ldr	r1, [pc, #4]	@ (800a874 <nan+0x8>)
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	7ff80000 	.word	0x7ff80000

0800a878 <__assert_func>:
 800a878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a87a:	4614      	mov	r4, r2
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b09      	ldr	r3, [pc, #36]	@ (800a8a4 <__assert_func+0x2c>)
 800a880:	4605      	mov	r5, r0
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68d8      	ldr	r0, [r3, #12]
 800a886:	b954      	cbnz	r4, 800a89e <__assert_func+0x26>
 800a888:	4b07      	ldr	r3, [pc, #28]	@ (800a8a8 <__assert_func+0x30>)
 800a88a:	461c      	mov	r4, r3
 800a88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a890:	9100      	str	r1, [sp, #0]
 800a892:	462b      	mov	r3, r5
 800a894:	4905      	ldr	r1, [pc, #20]	@ (800a8ac <__assert_func+0x34>)
 800a896:	f000 fba7 	bl	800afe8 <fiprintf>
 800a89a:	f000 fbb7 	bl	800b00c <abort>
 800a89e:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <__assert_func+0x38>)
 800a8a0:	e7f4      	b.n	800a88c <__assert_func+0x14>
 800a8a2:	bf00      	nop
 800a8a4:	20000020 	.word	0x20000020
 800a8a8:	0800ba7d 	.word	0x0800ba7d
 800a8ac:	0800ba4f 	.word	0x0800ba4f
 800a8b0:	0800ba42 	.word	0x0800ba42

0800a8b4 <_calloc_r>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a8ba:	b93c      	cbnz	r4, 800a8cc <_calloc_r+0x18>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7fe f9e9 	bl	8008c94 <_malloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	b928      	cbnz	r0, 800a8d2 <_calloc_r+0x1e>
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	220c      	movs	r2, #12
 800a8ce:	6002      	str	r2, [r0, #0]
 800a8d0:	e7f9      	b.n	800a8c6 <_calloc_r+0x12>
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	f7fd fa24 	bl	8007d22 <memset>
 800a8da:	e7f5      	b.n	800a8c8 <_calloc_r+0x14>

0800a8dc <rshift>:
 800a8dc:	6903      	ldr	r3, [r0, #16]
 800a8de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a8e6:	f100 0414 	add.w	r4, r0, #20
 800a8ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8ee:	dd46      	ble.n	800a97e <rshift+0xa2>
 800a8f0:	f011 011f 	ands.w	r1, r1, #31
 800a8f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8fc:	d10c      	bne.n	800a918 <rshift+0x3c>
 800a8fe:	4629      	mov	r1, r5
 800a900:	f100 0710 	add.w	r7, r0, #16
 800a904:	42b1      	cmp	r1, r6
 800a906:	d335      	bcc.n	800a974 <rshift+0x98>
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	1eea      	subs	r2, r5, #3
 800a90e:	4296      	cmp	r6, r2
 800a910:	bf38      	it	cc
 800a912:	2300      	movcc	r3, #0
 800a914:	4423      	add	r3, r4
 800a916:	e015      	b.n	800a944 <rshift+0x68>
 800a918:	46a1      	mov	r9, r4
 800a91a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a91e:	f1c1 0820 	rsb	r8, r1, #32
 800a922:	40cf      	lsrs	r7, r1
 800a924:	f105 0e04 	add.w	lr, r5, #4
 800a928:	4576      	cmp	r6, lr
 800a92a:	46f4      	mov	ip, lr
 800a92c:	d816      	bhi.n	800a95c <rshift+0x80>
 800a92e:	1a9a      	subs	r2, r3, r2
 800a930:	0092      	lsls	r2, r2, #2
 800a932:	3a04      	subs	r2, #4
 800a934:	3501      	adds	r5, #1
 800a936:	42ae      	cmp	r6, r5
 800a938:	bf38      	it	cc
 800a93a:	2200      	movcc	r2, #0
 800a93c:	18a3      	adds	r3, r4, r2
 800a93e:	50a7      	str	r7, [r4, r2]
 800a940:	b107      	cbz	r7, 800a944 <rshift+0x68>
 800a942:	3304      	adds	r3, #4
 800a944:	42a3      	cmp	r3, r4
 800a946:	eba3 0204 	sub.w	r2, r3, r4
 800a94a:	bf08      	it	eq
 800a94c:	2300      	moveq	r3, #0
 800a94e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a952:	6102      	str	r2, [r0, #16]
 800a954:	bf08      	it	eq
 800a956:	6143      	streq	r3, [r0, #20]
 800a958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a95c:	f8dc c000 	ldr.w	ip, [ip]
 800a960:	fa0c fc08 	lsl.w	ip, ip, r8
 800a964:	ea4c 0707 	orr.w	r7, ip, r7
 800a968:	f849 7b04 	str.w	r7, [r9], #4
 800a96c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a970:	40cf      	lsrs	r7, r1
 800a972:	e7d9      	b.n	800a928 <rshift+0x4c>
 800a974:	f851 cb04 	ldr.w	ip, [r1], #4
 800a978:	f847 cf04 	str.w	ip, [r7, #4]!
 800a97c:	e7c2      	b.n	800a904 <rshift+0x28>
 800a97e:	4623      	mov	r3, r4
 800a980:	e7e0      	b.n	800a944 <rshift+0x68>

0800a982 <__hexdig_fun>:
 800a982:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a986:	2b09      	cmp	r3, #9
 800a988:	d802      	bhi.n	800a990 <__hexdig_fun+0xe>
 800a98a:	3820      	subs	r0, #32
 800a98c:	b2c0      	uxtb	r0, r0
 800a98e:	4770      	bx	lr
 800a990:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a994:	2b05      	cmp	r3, #5
 800a996:	d801      	bhi.n	800a99c <__hexdig_fun+0x1a>
 800a998:	3847      	subs	r0, #71	@ 0x47
 800a99a:	e7f7      	b.n	800a98c <__hexdig_fun+0xa>
 800a99c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d801      	bhi.n	800a9a8 <__hexdig_fun+0x26>
 800a9a4:	3827      	subs	r0, #39	@ 0x27
 800a9a6:	e7f1      	b.n	800a98c <__hexdig_fun+0xa>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4770      	bx	lr

0800a9ac <__gethex>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	468a      	mov	sl, r1
 800a9b2:	4690      	mov	r8, r2
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	9302      	str	r3, [sp, #8]
 800a9b8:	680b      	ldr	r3, [r1, #0]
 800a9ba:	9001      	str	r0, [sp, #4]
 800a9bc:	1c9c      	adds	r4, r3, #2
 800a9be:	46a1      	mov	r9, r4
 800a9c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9c4:	2830      	cmp	r0, #48	@ 0x30
 800a9c6:	d0fa      	beq.n	800a9be <__gethex+0x12>
 800a9c8:	eba9 0303 	sub.w	r3, r9, r3
 800a9cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a9d0:	f7ff ffd7 	bl	800a982 <__hexdig_fun>
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d168      	bne.n	800aaac <__gethex+0x100>
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4648      	mov	r0, r9
 800a9de:	499f      	ldr	r1, [pc, #636]	@ (800ac5c <__gethex+0x2b0>)
 800a9e0:	f7ff ff22 	bl	800a828 <strncmp>
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d167      	bne.n	800aaba <__gethex+0x10e>
 800a9ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a9ee:	4626      	mov	r6, r4
 800a9f0:	f7ff ffc7 	bl	800a982 <__hexdig_fun>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d062      	beq.n	800aabe <__gethex+0x112>
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	7818      	ldrb	r0, [r3, #0]
 800a9fc:	4699      	mov	r9, r3
 800a9fe:	2830      	cmp	r0, #48	@ 0x30
 800aa00:	f103 0301 	add.w	r3, r3, #1
 800aa04:	d0f9      	beq.n	800a9fa <__gethex+0x4e>
 800aa06:	f7ff ffbc 	bl	800a982 <__hexdig_fun>
 800aa0a:	fab0 f580 	clz	r5, r0
 800aa0e:	f04f 0b01 	mov.w	fp, #1
 800aa12:	096d      	lsrs	r5, r5, #5
 800aa14:	464a      	mov	r2, r9
 800aa16:	4616      	mov	r6, r2
 800aa18:	7830      	ldrb	r0, [r6, #0]
 800aa1a:	3201      	adds	r2, #1
 800aa1c:	f7ff ffb1 	bl	800a982 <__hexdig_fun>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d1f8      	bne.n	800aa16 <__gethex+0x6a>
 800aa24:	2201      	movs	r2, #1
 800aa26:	4630      	mov	r0, r6
 800aa28:	498c      	ldr	r1, [pc, #560]	@ (800ac5c <__gethex+0x2b0>)
 800aa2a:	f7ff fefd 	bl	800a828 <strncmp>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d13f      	bne.n	800aab2 <__gethex+0x106>
 800aa32:	b944      	cbnz	r4, 800aa46 <__gethex+0x9a>
 800aa34:	1c74      	adds	r4, r6, #1
 800aa36:	4622      	mov	r2, r4
 800aa38:	4616      	mov	r6, r2
 800aa3a:	7830      	ldrb	r0, [r6, #0]
 800aa3c:	3201      	adds	r2, #1
 800aa3e:	f7ff ffa0 	bl	800a982 <__hexdig_fun>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1f8      	bne.n	800aa38 <__gethex+0x8c>
 800aa46:	1ba4      	subs	r4, r4, r6
 800aa48:	00a7      	lsls	r7, r4, #2
 800aa4a:	7833      	ldrb	r3, [r6, #0]
 800aa4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa50:	2b50      	cmp	r3, #80	@ 0x50
 800aa52:	d13e      	bne.n	800aad2 <__gethex+0x126>
 800aa54:	7873      	ldrb	r3, [r6, #1]
 800aa56:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa58:	d033      	beq.n	800aac2 <__gethex+0x116>
 800aa5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa5c:	d034      	beq.n	800aac8 <__gethex+0x11c>
 800aa5e:	2400      	movs	r4, #0
 800aa60:	1c71      	adds	r1, r6, #1
 800aa62:	7808      	ldrb	r0, [r1, #0]
 800aa64:	f7ff ff8d 	bl	800a982 <__hexdig_fun>
 800aa68:	1e43      	subs	r3, r0, #1
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b18      	cmp	r3, #24
 800aa6e:	d830      	bhi.n	800aad2 <__gethex+0x126>
 800aa70:	f1a0 0210 	sub.w	r2, r0, #16
 800aa74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa78:	f7ff ff83 	bl	800a982 <__hexdig_fun>
 800aa7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa80:	fa5f fc8c 	uxtb.w	ip, ip
 800aa84:	f1bc 0f18 	cmp.w	ip, #24
 800aa88:	f04f 030a 	mov.w	r3, #10
 800aa8c:	d91e      	bls.n	800aacc <__gethex+0x120>
 800aa8e:	b104      	cbz	r4, 800aa92 <__gethex+0xe6>
 800aa90:	4252      	negs	r2, r2
 800aa92:	4417      	add	r7, r2
 800aa94:	f8ca 1000 	str.w	r1, [sl]
 800aa98:	b1ed      	cbz	r5, 800aad6 <__gethex+0x12a>
 800aa9a:	f1bb 0f00 	cmp.w	fp, #0
 800aa9e:	bf0c      	ite	eq
 800aaa0:	2506      	moveq	r5, #6
 800aaa2:	2500      	movne	r5, #0
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	b005      	add	sp, #20
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	2500      	movs	r5, #0
 800aaae:	462c      	mov	r4, r5
 800aab0:	e7b0      	b.n	800aa14 <__gethex+0x68>
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	d1c7      	bne.n	800aa46 <__gethex+0x9a>
 800aab6:	4627      	mov	r7, r4
 800aab8:	e7c7      	b.n	800aa4a <__gethex+0x9e>
 800aaba:	464e      	mov	r6, r9
 800aabc:	462f      	mov	r7, r5
 800aabe:	2501      	movs	r5, #1
 800aac0:	e7c3      	b.n	800aa4a <__gethex+0x9e>
 800aac2:	2400      	movs	r4, #0
 800aac4:	1cb1      	adds	r1, r6, #2
 800aac6:	e7cc      	b.n	800aa62 <__gethex+0xb6>
 800aac8:	2401      	movs	r4, #1
 800aaca:	e7fb      	b.n	800aac4 <__gethex+0x118>
 800aacc:	fb03 0002 	mla	r0, r3, r2, r0
 800aad0:	e7ce      	b.n	800aa70 <__gethex+0xc4>
 800aad2:	4631      	mov	r1, r6
 800aad4:	e7de      	b.n	800aa94 <__gethex+0xe8>
 800aad6:	4629      	mov	r1, r5
 800aad8:	eba6 0309 	sub.w	r3, r6, r9
 800aadc:	3b01      	subs	r3, #1
 800aade:	2b07      	cmp	r3, #7
 800aae0:	dc0a      	bgt.n	800aaf8 <__gethex+0x14c>
 800aae2:	9801      	ldr	r0, [sp, #4]
 800aae4:	f7fe f962 	bl	8008dac <_Balloc>
 800aae8:	4604      	mov	r4, r0
 800aaea:	b940      	cbnz	r0, 800aafe <__gethex+0x152>
 800aaec:	4602      	mov	r2, r0
 800aaee:	21e4      	movs	r1, #228	@ 0xe4
 800aaf0:	4b5b      	ldr	r3, [pc, #364]	@ (800ac60 <__gethex+0x2b4>)
 800aaf2:	485c      	ldr	r0, [pc, #368]	@ (800ac64 <__gethex+0x2b8>)
 800aaf4:	f7ff fec0 	bl	800a878 <__assert_func>
 800aaf8:	3101      	adds	r1, #1
 800aafa:	105b      	asrs	r3, r3, #1
 800aafc:	e7ef      	b.n	800aade <__gethex+0x132>
 800aafe:	2300      	movs	r3, #0
 800ab00:	f100 0a14 	add.w	sl, r0, #20
 800ab04:	4655      	mov	r5, sl
 800ab06:	469b      	mov	fp, r3
 800ab08:	45b1      	cmp	r9, r6
 800ab0a:	d337      	bcc.n	800ab7c <__gethex+0x1d0>
 800ab0c:	f845 bb04 	str.w	fp, [r5], #4
 800ab10:	eba5 050a 	sub.w	r5, r5, sl
 800ab14:	10ad      	asrs	r5, r5, #2
 800ab16:	6125      	str	r5, [r4, #16]
 800ab18:	4658      	mov	r0, fp
 800ab1a:	f7fe fa39 	bl	8008f90 <__hi0bits>
 800ab1e:	016d      	lsls	r5, r5, #5
 800ab20:	f8d8 6000 	ldr.w	r6, [r8]
 800ab24:	1a2d      	subs	r5, r5, r0
 800ab26:	42b5      	cmp	r5, r6
 800ab28:	dd54      	ble.n	800abd4 <__gethex+0x228>
 800ab2a:	1bad      	subs	r5, r5, r6
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7fe fdc1 	bl	80096b6 <__any_on>
 800ab34:	4681      	mov	r9, r0
 800ab36:	b178      	cbz	r0, 800ab58 <__gethex+0x1ac>
 800ab38:	f04f 0901 	mov.w	r9, #1
 800ab3c:	1e6b      	subs	r3, r5, #1
 800ab3e:	1159      	asrs	r1, r3, #5
 800ab40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab44:	f003 021f 	and.w	r2, r3, #31
 800ab48:	fa09 f202 	lsl.w	r2, r9, r2
 800ab4c:	420a      	tst	r2, r1
 800ab4e:	d003      	beq.n	800ab58 <__gethex+0x1ac>
 800ab50:	454b      	cmp	r3, r9
 800ab52:	dc36      	bgt.n	800abc2 <__gethex+0x216>
 800ab54:	f04f 0902 	mov.w	r9, #2
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff febe 	bl	800a8dc <rshift>
 800ab60:	442f      	add	r7, r5
 800ab62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab66:	42bb      	cmp	r3, r7
 800ab68:	da42      	bge.n	800abf0 <__gethex+0x244>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	9801      	ldr	r0, [sp, #4]
 800ab6e:	f7fe f95d 	bl	8008e2c <_Bfree>
 800ab72:	2300      	movs	r3, #0
 800ab74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab76:	25a3      	movs	r5, #163	@ 0xa3
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	e793      	b.n	800aaa4 <__gethex+0xf8>
 800ab7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ab80:	2a2e      	cmp	r2, #46	@ 0x2e
 800ab82:	d012      	beq.n	800abaa <__gethex+0x1fe>
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d104      	bne.n	800ab92 <__gethex+0x1e6>
 800ab88:	f845 bb04 	str.w	fp, [r5], #4
 800ab8c:	f04f 0b00 	mov.w	fp, #0
 800ab90:	465b      	mov	r3, fp
 800ab92:	7830      	ldrb	r0, [r6, #0]
 800ab94:	9303      	str	r3, [sp, #12]
 800ab96:	f7ff fef4 	bl	800a982 <__hexdig_fun>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	f000 000f 	and.w	r0, r0, #15
 800aba0:	4098      	lsls	r0, r3
 800aba2:	ea4b 0b00 	orr.w	fp, fp, r0
 800aba6:	3304      	adds	r3, #4
 800aba8:	e7ae      	b.n	800ab08 <__gethex+0x15c>
 800abaa:	45b1      	cmp	r9, r6
 800abac:	d8ea      	bhi.n	800ab84 <__gethex+0x1d8>
 800abae:	2201      	movs	r2, #1
 800abb0:	4630      	mov	r0, r6
 800abb2:	492a      	ldr	r1, [pc, #168]	@ (800ac5c <__gethex+0x2b0>)
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	f7ff fe37 	bl	800a828 <strncmp>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1e1      	bne.n	800ab84 <__gethex+0x1d8>
 800abc0:	e7a2      	b.n	800ab08 <__gethex+0x15c>
 800abc2:	4620      	mov	r0, r4
 800abc4:	1ea9      	subs	r1, r5, #2
 800abc6:	f7fe fd76 	bl	80096b6 <__any_on>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d0c2      	beq.n	800ab54 <__gethex+0x1a8>
 800abce:	f04f 0903 	mov.w	r9, #3
 800abd2:	e7c1      	b.n	800ab58 <__gethex+0x1ac>
 800abd4:	da09      	bge.n	800abea <__gethex+0x23e>
 800abd6:	1b75      	subs	r5, r6, r5
 800abd8:	4621      	mov	r1, r4
 800abda:	462a      	mov	r2, r5
 800abdc:	9801      	ldr	r0, [sp, #4]
 800abde:	f7fe fb3b 	bl	8009258 <__lshift>
 800abe2:	4604      	mov	r4, r0
 800abe4:	1b7f      	subs	r7, r7, r5
 800abe6:	f100 0a14 	add.w	sl, r0, #20
 800abea:	f04f 0900 	mov.w	r9, #0
 800abee:	e7b8      	b.n	800ab62 <__gethex+0x1b6>
 800abf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abf4:	42bd      	cmp	r5, r7
 800abf6:	dd6f      	ble.n	800acd8 <__gethex+0x32c>
 800abf8:	1bed      	subs	r5, r5, r7
 800abfa:	42ae      	cmp	r6, r5
 800abfc:	dc34      	bgt.n	800ac68 <__gethex+0x2bc>
 800abfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d022      	beq.n	800ac4c <__gethex+0x2a0>
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d024      	beq.n	800ac54 <__gethex+0x2a8>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d115      	bne.n	800ac3a <__gethex+0x28e>
 800ac0e:	42ae      	cmp	r6, r5
 800ac10:	d113      	bne.n	800ac3a <__gethex+0x28e>
 800ac12:	2e01      	cmp	r6, #1
 800ac14:	d10b      	bne.n	800ac2e <__gethex+0x282>
 800ac16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac1a:	9a02      	ldr	r2, [sp, #8]
 800ac1c:	2562      	movs	r5, #98	@ 0x62
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	2301      	movs	r3, #1
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	f8ca 3000 	str.w	r3, [sl]
 800ac28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac2a:	601c      	str	r4, [r3, #0]
 800ac2c:	e73a      	b.n	800aaa4 <__gethex+0xf8>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	1e71      	subs	r1, r6, #1
 800ac32:	f7fe fd40 	bl	80096b6 <__any_on>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d1ed      	bne.n	800ac16 <__gethex+0x26a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	9801      	ldr	r0, [sp, #4]
 800ac3e:	f7fe f8f5 	bl	8008e2c <_Bfree>
 800ac42:	2300      	movs	r3, #0
 800ac44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac46:	2550      	movs	r5, #80	@ 0x50
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	e72b      	b.n	800aaa4 <__gethex+0xf8>
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f3      	bne.n	800ac3a <__gethex+0x28e>
 800ac52:	e7e0      	b.n	800ac16 <__gethex+0x26a>
 800ac54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1dd      	bne.n	800ac16 <__gethex+0x26a>
 800ac5a:	e7ee      	b.n	800ac3a <__gethex+0x28e>
 800ac5c:	0800b8d0 	.word	0x0800b8d0
 800ac60:	0800b763 	.word	0x0800b763
 800ac64:	0800ba7e 	.word	0x0800ba7e
 800ac68:	1e6f      	subs	r7, r5, #1
 800ac6a:	f1b9 0f00 	cmp.w	r9, #0
 800ac6e:	d130      	bne.n	800acd2 <__gethex+0x326>
 800ac70:	b127      	cbz	r7, 800ac7c <__gethex+0x2d0>
 800ac72:	4639      	mov	r1, r7
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7fe fd1e 	bl	80096b6 <__any_on>
 800ac7a:	4681      	mov	r9, r0
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	4629      	mov	r1, r5
 800ac80:	1b76      	subs	r6, r6, r5
 800ac82:	2502      	movs	r5, #2
 800ac84:	117a      	asrs	r2, r7, #5
 800ac86:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac8a:	f007 071f 	and.w	r7, r7, #31
 800ac8e:	40bb      	lsls	r3, r7
 800ac90:	4213      	tst	r3, r2
 800ac92:	4620      	mov	r0, r4
 800ac94:	bf18      	it	ne
 800ac96:	f049 0902 	orrne.w	r9, r9, #2
 800ac9a:	f7ff fe1f 	bl	800a8dc <rshift>
 800ac9e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	d047      	beq.n	800ad38 <__gethex+0x38c>
 800aca8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acac:	2b02      	cmp	r3, #2
 800acae:	d015      	beq.n	800acdc <__gethex+0x330>
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d017      	beq.n	800ace4 <__gethex+0x338>
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d109      	bne.n	800accc <__gethex+0x320>
 800acb8:	f019 0f02 	tst.w	r9, #2
 800acbc:	d006      	beq.n	800accc <__gethex+0x320>
 800acbe:	f8da 3000 	ldr.w	r3, [sl]
 800acc2:	ea49 0903 	orr.w	r9, r9, r3
 800acc6:	f019 0f01 	tst.w	r9, #1
 800acca:	d10e      	bne.n	800acea <__gethex+0x33e>
 800accc:	f045 0510 	orr.w	r5, r5, #16
 800acd0:	e032      	b.n	800ad38 <__gethex+0x38c>
 800acd2:	f04f 0901 	mov.w	r9, #1
 800acd6:	e7d1      	b.n	800ac7c <__gethex+0x2d0>
 800acd8:	2501      	movs	r5, #1
 800acda:	e7e2      	b.n	800aca2 <__gethex+0x2f6>
 800acdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acde:	f1c3 0301 	rsb	r3, r3, #1
 800ace2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ace4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0f0      	beq.n	800accc <__gethex+0x320>
 800acea:	f04f 0c00 	mov.w	ip, #0
 800acee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acf2:	f104 0314 	add.w	r3, r4, #20
 800acf6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acfa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad08:	d01b      	beq.n	800ad42 <__gethex+0x396>
 800ad0a:	3201      	adds	r2, #1
 800ad0c:	6002      	str	r2, [r0, #0]
 800ad0e:	2d02      	cmp	r5, #2
 800ad10:	f104 0314 	add.w	r3, r4, #20
 800ad14:	d13c      	bne.n	800ad90 <__gethex+0x3e4>
 800ad16:	f8d8 2000 	ldr.w	r2, [r8]
 800ad1a:	3a01      	subs	r2, #1
 800ad1c:	42b2      	cmp	r2, r6
 800ad1e:	d109      	bne.n	800ad34 <__gethex+0x388>
 800ad20:	2201      	movs	r2, #1
 800ad22:	1171      	asrs	r1, r6, #5
 800ad24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad28:	f006 061f 	and.w	r6, r6, #31
 800ad2c:	fa02 f606 	lsl.w	r6, r2, r6
 800ad30:	421e      	tst	r6, r3
 800ad32:	d13a      	bne.n	800adaa <__gethex+0x3fe>
 800ad34:	f045 0520 	orr.w	r5, r5, #32
 800ad38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad3a:	601c      	str	r4, [r3, #0]
 800ad3c:	9b02      	ldr	r3, [sp, #8]
 800ad3e:	601f      	str	r7, [r3, #0]
 800ad40:	e6b0      	b.n	800aaa4 <__gethex+0xf8>
 800ad42:	4299      	cmp	r1, r3
 800ad44:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad48:	d8d9      	bhi.n	800acfe <__gethex+0x352>
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	459b      	cmp	fp, r3
 800ad4e:	db17      	blt.n	800ad80 <__gethex+0x3d4>
 800ad50:	6861      	ldr	r1, [r4, #4]
 800ad52:	9801      	ldr	r0, [sp, #4]
 800ad54:	3101      	adds	r1, #1
 800ad56:	f7fe f829 	bl	8008dac <_Balloc>
 800ad5a:	4681      	mov	r9, r0
 800ad5c:	b918      	cbnz	r0, 800ad66 <__gethex+0x3ba>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	2184      	movs	r1, #132	@ 0x84
 800ad62:	4b19      	ldr	r3, [pc, #100]	@ (800adc8 <__gethex+0x41c>)
 800ad64:	e6c5      	b.n	800aaf2 <__gethex+0x146>
 800ad66:	6922      	ldr	r2, [r4, #16]
 800ad68:	f104 010c 	add.w	r1, r4, #12
 800ad6c:	3202      	adds	r2, #2
 800ad6e:	0092      	lsls	r2, r2, #2
 800ad70:	300c      	adds	r0, #12
 800ad72:	f7fd f8ba 	bl	8007eea <memcpy>
 800ad76:	4621      	mov	r1, r4
 800ad78:	9801      	ldr	r0, [sp, #4]
 800ad7a:	f7fe f857 	bl	8008e2c <_Bfree>
 800ad7e:	464c      	mov	r4, r9
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	6122      	str	r2, [r4, #16]
 800ad86:	2201      	movs	r2, #1
 800ad88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad8c:	615a      	str	r2, [r3, #20]
 800ad8e:	e7be      	b.n	800ad0e <__gethex+0x362>
 800ad90:	6922      	ldr	r2, [r4, #16]
 800ad92:	455a      	cmp	r2, fp
 800ad94:	dd0b      	ble.n	800adae <__gethex+0x402>
 800ad96:	2101      	movs	r1, #1
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff fd9f 	bl	800a8dc <rshift>
 800ad9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ada2:	3701      	adds	r7, #1
 800ada4:	42bb      	cmp	r3, r7
 800ada6:	f6ff aee0 	blt.w	800ab6a <__gethex+0x1be>
 800adaa:	2501      	movs	r5, #1
 800adac:	e7c2      	b.n	800ad34 <__gethex+0x388>
 800adae:	f016 061f 	ands.w	r6, r6, #31
 800adb2:	d0fa      	beq.n	800adaa <__gethex+0x3fe>
 800adb4:	4453      	add	r3, sl
 800adb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800adba:	f7fe f8e9 	bl	8008f90 <__hi0bits>
 800adbe:	f1c6 0620 	rsb	r6, r6, #32
 800adc2:	42b0      	cmp	r0, r6
 800adc4:	dbe7      	blt.n	800ad96 <__gethex+0x3ea>
 800adc6:	e7f0      	b.n	800adaa <__gethex+0x3fe>
 800adc8:	0800b763 	.word	0x0800b763

0800adcc <L_shift>:
 800adcc:	f1c2 0208 	rsb	r2, r2, #8
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	b570      	push	{r4, r5, r6, lr}
 800add4:	f1c2 0620 	rsb	r6, r2, #32
 800add8:	6843      	ldr	r3, [r0, #4]
 800adda:	6804      	ldr	r4, [r0, #0]
 800addc:	fa03 f506 	lsl.w	r5, r3, r6
 800ade0:	432c      	orrs	r4, r5
 800ade2:	40d3      	lsrs	r3, r2
 800ade4:	6004      	str	r4, [r0, #0]
 800ade6:	f840 3f04 	str.w	r3, [r0, #4]!
 800adea:	4288      	cmp	r0, r1
 800adec:	d3f4      	bcc.n	800add8 <L_shift+0xc>
 800adee:	bd70      	pop	{r4, r5, r6, pc}

0800adf0 <__match>:
 800adf0:	b530      	push	{r4, r5, lr}
 800adf2:	6803      	ldr	r3, [r0, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adfa:	b914      	cbnz	r4, 800ae02 <__match+0x12>
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	2001      	movs	r0, #1
 800ae00:	bd30      	pop	{r4, r5, pc}
 800ae02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae0a:	2d19      	cmp	r5, #25
 800ae0c:	bf98      	it	ls
 800ae0e:	3220      	addls	r2, #32
 800ae10:	42a2      	cmp	r2, r4
 800ae12:	d0f0      	beq.n	800adf6 <__match+0x6>
 800ae14:	2000      	movs	r0, #0
 800ae16:	e7f3      	b.n	800ae00 <__match+0x10>

0800ae18 <__hexnan>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	680b      	ldr	r3, [r1, #0]
 800ae20:	4682      	mov	sl, r0
 800ae22:	115e      	asrs	r6, r3, #5
 800ae24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae28:	f013 031f 	ands.w	r3, r3, #31
 800ae2c:	bf18      	it	ne
 800ae2e:	3604      	addne	r6, #4
 800ae30:	1f37      	subs	r7, r6, #4
 800ae32:	4690      	mov	r8, r2
 800ae34:	46b9      	mov	r9, r7
 800ae36:	463c      	mov	r4, r7
 800ae38:	46ab      	mov	fp, r5
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	6801      	ldr	r1, [r0, #0]
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae44:	9502      	str	r5, [sp, #8]
 800ae46:	784a      	ldrb	r2, [r1, #1]
 800ae48:	1c4b      	adds	r3, r1, #1
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	b342      	cbz	r2, 800aea0 <__hexnan+0x88>
 800ae4e:	4610      	mov	r0, r2
 800ae50:	9105      	str	r1, [sp, #20]
 800ae52:	9204      	str	r2, [sp, #16]
 800ae54:	f7ff fd95 	bl	800a982 <__hexdig_fun>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d151      	bne.n	800af00 <__hexnan+0xe8>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	9905      	ldr	r1, [sp, #20]
 800ae60:	2a20      	cmp	r2, #32
 800ae62:	d818      	bhi.n	800ae96 <__hexnan+0x7e>
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	459b      	cmp	fp, r3
 800ae68:	dd13      	ble.n	800ae92 <__hexnan+0x7a>
 800ae6a:	454c      	cmp	r4, r9
 800ae6c:	d206      	bcs.n	800ae7c <__hexnan+0x64>
 800ae6e:	2d07      	cmp	r5, #7
 800ae70:	dc04      	bgt.n	800ae7c <__hexnan+0x64>
 800ae72:	462a      	mov	r2, r5
 800ae74:	4649      	mov	r1, r9
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff ffa8 	bl	800adcc <L_shift>
 800ae7c:	4544      	cmp	r4, r8
 800ae7e:	d952      	bls.n	800af26 <__hexnan+0x10e>
 800ae80:	2300      	movs	r3, #0
 800ae82:	f1a4 0904 	sub.w	r9, r4, #4
 800ae86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae8a:	461d      	mov	r5, r3
 800ae8c:	464c      	mov	r4, r9
 800ae8e:	f8cd b008 	str.w	fp, [sp, #8]
 800ae92:	9903      	ldr	r1, [sp, #12]
 800ae94:	e7d7      	b.n	800ae46 <__hexnan+0x2e>
 800ae96:	2a29      	cmp	r2, #41	@ 0x29
 800ae98:	d157      	bne.n	800af4a <__hexnan+0x132>
 800ae9a:	3102      	adds	r1, #2
 800ae9c:	f8ca 1000 	str.w	r1, [sl]
 800aea0:	f1bb 0f00 	cmp.w	fp, #0
 800aea4:	d051      	beq.n	800af4a <__hexnan+0x132>
 800aea6:	454c      	cmp	r4, r9
 800aea8:	d206      	bcs.n	800aeb8 <__hexnan+0xa0>
 800aeaa:	2d07      	cmp	r5, #7
 800aeac:	dc04      	bgt.n	800aeb8 <__hexnan+0xa0>
 800aeae:	462a      	mov	r2, r5
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff ff8a 	bl	800adcc <L_shift>
 800aeb8:	4544      	cmp	r4, r8
 800aeba:	d936      	bls.n	800af2a <__hexnan+0x112>
 800aebc:	4623      	mov	r3, r4
 800aebe:	f1a8 0204 	sub.w	r2, r8, #4
 800aec2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aec6:	429f      	cmp	r7, r3
 800aec8:	f842 1f04 	str.w	r1, [r2, #4]!
 800aecc:	d2f9      	bcs.n	800aec2 <__hexnan+0xaa>
 800aece:	1b3b      	subs	r3, r7, r4
 800aed0:	f023 0303 	bic.w	r3, r3, #3
 800aed4:	3304      	adds	r3, #4
 800aed6:	3401      	adds	r4, #1
 800aed8:	3e03      	subs	r6, #3
 800aeda:	42b4      	cmp	r4, r6
 800aedc:	bf88      	it	hi
 800aede:	2304      	movhi	r3, #4
 800aee0:	2200      	movs	r2, #0
 800aee2:	4443      	add	r3, r8
 800aee4:	f843 2b04 	str.w	r2, [r3], #4
 800aee8:	429f      	cmp	r7, r3
 800aeea:	d2fb      	bcs.n	800aee4 <__hexnan+0xcc>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	b91b      	cbnz	r3, 800aef8 <__hexnan+0xe0>
 800aef0:	4547      	cmp	r7, r8
 800aef2:	d128      	bne.n	800af46 <__hexnan+0x12e>
 800aef4:	2301      	movs	r3, #1
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	2005      	movs	r0, #5
 800aefa:	b007      	add	sp, #28
 800aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af00:	3501      	adds	r5, #1
 800af02:	2d08      	cmp	r5, #8
 800af04:	f10b 0b01 	add.w	fp, fp, #1
 800af08:	dd06      	ble.n	800af18 <__hexnan+0x100>
 800af0a:	4544      	cmp	r4, r8
 800af0c:	d9c1      	bls.n	800ae92 <__hexnan+0x7a>
 800af0e:	2300      	movs	r3, #0
 800af10:	2501      	movs	r5, #1
 800af12:	f844 3c04 	str.w	r3, [r4, #-4]
 800af16:	3c04      	subs	r4, #4
 800af18:	6822      	ldr	r2, [r4, #0]
 800af1a:	f000 000f 	and.w	r0, r0, #15
 800af1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	e7b5      	b.n	800ae92 <__hexnan+0x7a>
 800af26:	2508      	movs	r5, #8
 800af28:	e7b3      	b.n	800ae92 <__hexnan+0x7a>
 800af2a:	9b01      	ldr	r3, [sp, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0dd      	beq.n	800aeec <__hexnan+0xd4>
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	f1c3 0320 	rsb	r3, r3, #32
 800af38:	40da      	lsrs	r2, r3
 800af3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af3e:	4013      	ands	r3, r2
 800af40:	f846 3c04 	str.w	r3, [r6, #-4]
 800af44:	e7d2      	b.n	800aeec <__hexnan+0xd4>
 800af46:	3f04      	subs	r7, #4
 800af48:	e7d0      	b.n	800aeec <__hexnan+0xd4>
 800af4a:	2004      	movs	r0, #4
 800af4c:	e7d5      	b.n	800aefa <__hexnan+0xe2>

0800af4e <__ascii_mbtowc>:
 800af4e:	b082      	sub	sp, #8
 800af50:	b901      	cbnz	r1, 800af54 <__ascii_mbtowc+0x6>
 800af52:	a901      	add	r1, sp, #4
 800af54:	b142      	cbz	r2, 800af68 <__ascii_mbtowc+0x1a>
 800af56:	b14b      	cbz	r3, 800af6c <__ascii_mbtowc+0x1e>
 800af58:	7813      	ldrb	r3, [r2, #0]
 800af5a:	600b      	str	r3, [r1, #0]
 800af5c:	7812      	ldrb	r2, [r2, #0]
 800af5e:	1e10      	subs	r0, r2, #0
 800af60:	bf18      	it	ne
 800af62:	2001      	movne	r0, #1
 800af64:	b002      	add	sp, #8
 800af66:	4770      	bx	lr
 800af68:	4610      	mov	r0, r2
 800af6a:	e7fb      	b.n	800af64 <__ascii_mbtowc+0x16>
 800af6c:	f06f 0001 	mvn.w	r0, #1
 800af70:	e7f8      	b.n	800af64 <__ascii_mbtowc+0x16>

0800af72 <_realloc_r>:
 800af72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af76:	4680      	mov	r8, r0
 800af78:	4615      	mov	r5, r2
 800af7a:	460c      	mov	r4, r1
 800af7c:	b921      	cbnz	r1, 800af88 <_realloc_r+0x16>
 800af7e:	4611      	mov	r1, r2
 800af80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	f7fd be86 	b.w	8008c94 <_malloc_r>
 800af88:	b92a      	cbnz	r2, 800af96 <_realloc_r+0x24>
 800af8a:	f7fd fe11 	bl	8008bb0 <_free_r>
 800af8e:	2400      	movs	r4, #0
 800af90:	4620      	mov	r0, r4
 800af92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af96:	f000 f840 	bl	800b01a <_malloc_usable_size_r>
 800af9a:	4285      	cmp	r5, r0
 800af9c:	4606      	mov	r6, r0
 800af9e:	d802      	bhi.n	800afa6 <_realloc_r+0x34>
 800afa0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800afa4:	d8f4      	bhi.n	800af90 <_realloc_r+0x1e>
 800afa6:	4629      	mov	r1, r5
 800afa8:	4640      	mov	r0, r8
 800afaa:	f7fd fe73 	bl	8008c94 <_malloc_r>
 800afae:	4607      	mov	r7, r0
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0ec      	beq.n	800af8e <_realloc_r+0x1c>
 800afb4:	42b5      	cmp	r5, r6
 800afb6:	462a      	mov	r2, r5
 800afb8:	4621      	mov	r1, r4
 800afba:	bf28      	it	cs
 800afbc:	4632      	movcs	r2, r6
 800afbe:	f7fc ff94 	bl	8007eea <memcpy>
 800afc2:	4621      	mov	r1, r4
 800afc4:	4640      	mov	r0, r8
 800afc6:	f7fd fdf3 	bl	8008bb0 <_free_r>
 800afca:	463c      	mov	r4, r7
 800afcc:	e7e0      	b.n	800af90 <_realloc_r+0x1e>

0800afce <__ascii_wctomb>:
 800afce:	4603      	mov	r3, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	b141      	cbz	r1, 800afe6 <__ascii_wctomb+0x18>
 800afd4:	2aff      	cmp	r2, #255	@ 0xff
 800afd6:	d904      	bls.n	800afe2 <__ascii_wctomb+0x14>
 800afd8:	228a      	movs	r2, #138	@ 0x8a
 800afda:	f04f 30ff 	mov.w	r0, #4294967295
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	4770      	bx	lr
 800afe2:	2001      	movs	r0, #1
 800afe4:	700a      	strb	r2, [r1, #0]
 800afe6:	4770      	bx	lr

0800afe8 <fiprintf>:
 800afe8:	b40e      	push	{r1, r2, r3}
 800afea:	b503      	push	{r0, r1, lr}
 800afec:	4601      	mov	r1, r0
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	4805      	ldr	r0, [pc, #20]	@ (800b008 <fiprintf+0x20>)
 800aff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	f000 f83d 	bl	800b078 <_vfiprintf_r>
 800affe:	b002      	add	sp, #8
 800b000:	f85d eb04 	ldr.w	lr, [sp], #4
 800b004:	b003      	add	sp, #12
 800b006:	4770      	bx	lr
 800b008:	20000020 	.word	0x20000020

0800b00c <abort>:
 800b00c:	2006      	movs	r0, #6
 800b00e:	b508      	push	{r3, lr}
 800b010:	f000 fa06 	bl	800b420 <raise>
 800b014:	2001      	movs	r0, #1
 800b016:	f7f6 fd3c 	bl	8001a92 <_exit>

0800b01a <_malloc_usable_size_r>:
 800b01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b01e:	1f18      	subs	r0, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	bfbc      	itt	lt
 800b024:	580b      	ldrlt	r3, [r1, r0]
 800b026:	18c0      	addlt	r0, r0, r3
 800b028:	4770      	bx	lr

0800b02a <__sfputc_r>:
 800b02a:	6893      	ldr	r3, [r2, #8]
 800b02c:	b410      	push	{r4}
 800b02e:	3b01      	subs	r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	6093      	str	r3, [r2, #8]
 800b034:	da07      	bge.n	800b046 <__sfputc_r+0x1c>
 800b036:	6994      	ldr	r4, [r2, #24]
 800b038:	42a3      	cmp	r3, r4
 800b03a:	db01      	blt.n	800b040 <__sfputc_r+0x16>
 800b03c:	290a      	cmp	r1, #10
 800b03e:	d102      	bne.n	800b046 <__sfputc_r+0x1c>
 800b040:	bc10      	pop	{r4}
 800b042:	f000 b931 	b.w	800b2a8 <__swbuf_r>
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	1c58      	adds	r0, r3, #1
 800b04a:	6010      	str	r0, [r2, #0]
 800b04c:	7019      	strb	r1, [r3, #0]
 800b04e:	4608      	mov	r0, r1
 800b050:	bc10      	pop	{r4}
 800b052:	4770      	bx	lr

0800b054 <__sfputs_r>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	4606      	mov	r6, r0
 800b058:	460f      	mov	r7, r1
 800b05a:	4614      	mov	r4, r2
 800b05c:	18d5      	adds	r5, r2, r3
 800b05e:	42ac      	cmp	r4, r5
 800b060:	d101      	bne.n	800b066 <__sfputs_r+0x12>
 800b062:	2000      	movs	r0, #0
 800b064:	e007      	b.n	800b076 <__sfputs_r+0x22>
 800b066:	463a      	mov	r2, r7
 800b068:	4630      	mov	r0, r6
 800b06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06e:	f7ff ffdc 	bl	800b02a <__sfputc_r>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d1f3      	bne.n	800b05e <__sfputs_r+0xa>
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b078 <_vfiprintf_r>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	460d      	mov	r5, r1
 800b07e:	4614      	mov	r4, r2
 800b080:	4698      	mov	r8, r3
 800b082:	4606      	mov	r6, r0
 800b084:	b09d      	sub	sp, #116	@ 0x74
 800b086:	b118      	cbz	r0, 800b090 <_vfiprintf_r+0x18>
 800b088:	6a03      	ldr	r3, [r0, #32]
 800b08a:	b90b      	cbnz	r3, 800b090 <_vfiprintf_r+0x18>
 800b08c:	f7fc fd7c 	bl	8007b88 <__sinit>
 800b090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b092:	07d9      	lsls	r1, r3, #31
 800b094:	d405      	bmi.n	800b0a2 <_vfiprintf_r+0x2a>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	059a      	lsls	r2, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_vfiprintf_r+0x2a>
 800b09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b09e:	f7fc ff14 	bl	8007eca <__retarget_lock_acquire_recursive>
 800b0a2:	89ab      	ldrh	r3, [r5, #12]
 800b0a4:	071b      	lsls	r3, r3, #28
 800b0a6:	d501      	bpl.n	800b0ac <_vfiprintf_r+0x34>
 800b0a8:	692b      	ldr	r3, [r5, #16]
 800b0aa:	b99b      	cbnz	r3, 800b0d4 <_vfiprintf_r+0x5c>
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 f938 	bl	800b324 <__swsetup_r>
 800b0b4:	b170      	cbz	r0, 800b0d4 <_vfiprintf_r+0x5c>
 800b0b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0b8:	07dc      	lsls	r4, r3, #31
 800b0ba:	d504      	bpl.n	800b0c6 <_vfiprintf_r+0x4e>
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	b01d      	add	sp, #116	@ 0x74
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	89ab      	ldrh	r3, [r5, #12]
 800b0c8:	0598      	lsls	r0, r3, #22
 800b0ca:	d4f7      	bmi.n	800b0bc <_vfiprintf_r+0x44>
 800b0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ce:	f7fc fefd 	bl	8007ecc <__retarget_lock_release_recursive>
 800b0d2:	e7f3      	b.n	800b0bc <_vfiprintf_r+0x44>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d8:	2320      	movs	r3, #32
 800b0da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0de:	2330      	movs	r3, #48	@ 0x30
 800b0e0:	f04f 0901 	mov.w	r9, #1
 800b0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b294 <_vfiprintf_r+0x21c>
 800b0ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	469a      	mov	sl, r3
 800b0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f8:	b10a      	cbz	r2, 800b0fe <_vfiprintf_r+0x86>
 800b0fa:	2a25      	cmp	r2, #37	@ 0x25
 800b0fc:	d1f9      	bne.n	800b0f2 <_vfiprintf_r+0x7a>
 800b0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b102:	d00b      	beq.n	800b11c <_vfiprintf_r+0xa4>
 800b104:	465b      	mov	r3, fp
 800b106:	4622      	mov	r2, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7ff ffa2 	bl	800b054 <__sfputs_r>
 800b110:	3001      	adds	r0, #1
 800b112:	f000 80a7 	beq.w	800b264 <_vfiprintf_r+0x1ec>
 800b116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b118:	445a      	add	r2, fp
 800b11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b11c:	f89a 3000 	ldrb.w	r3, [sl]
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 809f 	beq.w	800b264 <_vfiprintf_r+0x1ec>
 800b126:	2300      	movs	r3, #0
 800b128:	f04f 32ff 	mov.w	r2, #4294967295
 800b12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b130:	f10a 0a01 	add.w	sl, sl, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	9307      	str	r3, [sp, #28]
 800b138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b13e:	4654      	mov	r4, sl
 800b140:	2205      	movs	r2, #5
 800b142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b146:	4853      	ldr	r0, [pc, #332]	@ (800b294 <_vfiprintf_r+0x21c>)
 800b148:	f7fc fec1 	bl	8007ece <memchr>
 800b14c:	9a04      	ldr	r2, [sp, #16]
 800b14e:	b9d8      	cbnz	r0, 800b188 <_vfiprintf_r+0x110>
 800b150:	06d1      	lsls	r1, r2, #27
 800b152:	bf44      	itt	mi
 800b154:	2320      	movmi	r3, #32
 800b156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b15a:	0713      	lsls	r3, r2, #28
 800b15c:	bf44      	itt	mi
 800b15e:	232b      	movmi	r3, #43	@ 0x2b
 800b160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b164:	f89a 3000 	ldrb.w	r3, [sl]
 800b168:	2b2a      	cmp	r3, #42	@ 0x2a
 800b16a:	d015      	beq.n	800b198 <_vfiprintf_r+0x120>
 800b16c:	4654      	mov	r4, sl
 800b16e:	2000      	movs	r0, #0
 800b170:	f04f 0c0a 	mov.w	ip, #10
 800b174:	9a07      	ldr	r2, [sp, #28]
 800b176:	4621      	mov	r1, r4
 800b178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b17c:	3b30      	subs	r3, #48	@ 0x30
 800b17e:	2b09      	cmp	r3, #9
 800b180:	d94b      	bls.n	800b21a <_vfiprintf_r+0x1a2>
 800b182:	b1b0      	cbz	r0, 800b1b2 <_vfiprintf_r+0x13a>
 800b184:	9207      	str	r2, [sp, #28]
 800b186:	e014      	b.n	800b1b2 <_vfiprintf_r+0x13a>
 800b188:	eba0 0308 	sub.w	r3, r0, r8
 800b18c:	fa09 f303 	lsl.w	r3, r9, r3
 800b190:	4313      	orrs	r3, r2
 800b192:	46a2      	mov	sl, r4
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	e7d2      	b.n	800b13e <_vfiprintf_r+0xc6>
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	1d19      	adds	r1, r3, #4
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	9103      	str	r1, [sp, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	bfbb      	ittet	lt
 800b1a4:	425b      	neglt	r3, r3
 800b1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1aa:	9307      	strge	r3, [sp, #28]
 800b1ac:	9307      	strlt	r3, [sp, #28]
 800b1ae:	bfb8      	it	lt
 800b1b0:	9204      	strlt	r2, [sp, #16]
 800b1b2:	7823      	ldrb	r3, [r4, #0]
 800b1b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1b6:	d10a      	bne.n	800b1ce <_vfiprintf_r+0x156>
 800b1b8:	7863      	ldrb	r3, [r4, #1]
 800b1ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1bc:	d132      	bne.n	800b224 <_vfiprintf_r+0x1ac>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	3402      	adds	r4, #2
 800b1c2:	1d1a      	adds	r2, r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	9203      	str	r2, [sp, #12]
 800b1c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b298 <_vfiprintf_r+0x220>
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	7821      	ldrb	r1, [r4, #0]
 800b1d8:	f7fc fe79 	bl	8007ece <memchr>
 800b1dc:	b138      	cbz	r0, 800b1ee <_vfiprintf_r+0x176>
 800b1de:	2240      	movs	r2, #64	@ 0x40
 800b1e0:	9b04      	ldr	r3, [sp, #16]
 800b1e2:	eba0 000a 	sub.w	r0, r0, sl
 800b1e6:	4082      	lsls	r2, r0
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	3401      	adds	r4, #1
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	2206      	movs	r2, #6
 800b1f4:	4829      	ldr	r0, [pc, #164]	@ (800b29c <_vfiprintf_r+0x224>)
 800b1f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1fa:	f7fc fe68 	bl	8007ece <memchr>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d03f      	beq.n	800b282 <_vfiprintf_r+0x20a>
 800b202:	4b27      	ldr	r3, [pc, #156]	@ (800b2a0 <_vfiprintf_r+0x228>)
 800b204:	bb1b      	cbnz	r3, 800b24e <_vfiprintf_r+0x1d6>
 800b206:	9b03      	ldr	r3, [sp, #12]
 800b208:	3307      	adds	r3, #7
 800b20a:	f023 0307 	bic.w	r3, r3, #7
 800b20e:	3308      	adds	r3, #8
 800b210:	9303      	str	r3, [sp, #12]
 800b212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b214:	443b      	add	r3, r7
 800b216:	9309      	str	r3, [sp, #36]	@ 0x24
 800b218:	e76a      	b.n	800b0f0 <_vfiprintf_r+0x78>
 800b21a:	460c      	mov	r4, r1
 800b21c:	2001      	movs	r0, #1
 800b21e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b222:	e7a8      	b.n	800b176 <_vfiprintf_r+0xfe>
 800b224:	2300      	movs	r3, #0
 800b226:	f04f 0c0a 	mov.w	ip, #10
 800b22a:	4619      	mov	r1, r3
 800b22c:	3401      	adds	r4, #1
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	4620      	mov	r0, r4
 800b232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b236:	3a30      	subs	r2, #48	@ 0x30
 800b238:	2a09      	cmp	r2, #9
 800b23a:	d903      	bls.n	800b244 <_vfiprintf_r+0x1cc>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0c6      	beq.n	800b1ce <_vfiprintf_r+0x156>
 800b240:	9105      	str	r1, [sp, #20]
 800b242:	e7c4      	b.n	800b1ce <_vfiprintf_r+0x156>
 800b244:	4604      	mov	r4, r0
 800b246:	2301      	movs	r3, #1
 800b248:	fb0c 2101 	mla	r1, ip, r1, r2
 800b24c:	e7f0      	b.n	800b230 <_vfiprintf_r+0x1b8>
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	462a      	mov	r2, r5
 800b254:	4630      	mov	r0, r6
 800b256:	4b13      	ldr	r3, [pc, #76]	@ (800b2a4 <_vfiprintf_r+0x22c>)
 800b258:	a904      	add	r1, sp, #16
 800b25a:	f7fb fe3b 	bl	8006ed4 <_printf_float>
 800b25e:	4607      	mov	r7, r0
 800b260:	1c78      	adds	r0, r7, #1
 800b262:	d1d6      	bne.n	800b212 <_vfiprintf_r+0x19a>
 800b264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b266:	07d9      	lsls	r1, r3, #31
 800b268:	d405      	bmi.n	800b276 <_vfiprintf_r+0x1fe>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	059a      	lsls	r2, r3, #22
 800b26e:	d402      	bmi.n	800b276 <_vfiprintf_r+0x1fe>
 800b270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b272:	f7fc fe2b 	bl	8007ecc <__retarget_lock_release_recursive>
 800b276:	89ab      	ldrh	r3, [r5, #12]
 800b278:	065b      	lsls	r3, r3, #25
 800b27a:	f53f af1f 	bmi.w	800b0bc <_vfiprintf_r+0x44>
 800b27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b280:	e71e      	b.n	800b0c0 <_vfiprintf_r+0x48>
 800b282:	ab03      	add	r3, sp, #12
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	462a      	mov	r2, r5
 800b288:	4630      	mov	r0, r6
 800b28a:	4b06      	ldr	r3, [pc, #24]	@ (800b2a4 <_vfiprintf_r+0x22c>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	f7fc f8bf 	bl	8007410 <_printf_i>
 800b292:	e7e4      	b.n	800b25e <_vfiprintf_r+0x1e6>
 800b294:	0800ba29 	.word	0x0800ba29
 800b298:	0800ba2f 	.word	0x0800ba2f
 800b29c:	0800ba33 	.word	0x0800ba33
 800b2a0:	08006ed5 	.word	0x08006ed5
 800b2a4:	0800b055 	.word	0x0800b055

0800b2a8 <__swbuf_r>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	460e      	mov	r6, r1
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b118      	cbz	r0, 800b2ba <__swbuf_r+0x12>
 800b2b2:	6a03      	ldr	r3, [r0, #32]
 800b2b4:	b90b      	cbnz	r3, 800b2ba <__swbuf_r+0x12>
 800b2b6:	f7fc fc67 	bl	8007b88 <__sinit>
 800b2ba:	69a3      	ldr	r3, [r4, #24]
 800b2bc:	60a3      	str	r3, [r4, #8]
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	071a      	lsls	r2, r3, #28
 800b2c2:	d501      	bpl.n	800b2c8 <__swbuf_r+0x20>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	b943      	cbnz	r3, 800b2da <__swbuf_r+0x32>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 f82a 	bl	800b324 <__swsetup_r>
 800b2d0:	b118      	cbz	r0, 800b2da <__swbuf_r+0x32>
 800b2d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	b2f6      	uxtb	r6, r6
 800b2e0:	1a98      	subs	r0, r3, r2
 800b2e2:	6963      	ldr	r3, [r4, #20]
 800b2e4:	4637      	mov	r7, r6
 800b2e6:	4283      	cmp	r3, r0
 800b2e8:	dc05      	bgt.n	800b2f6 <__swbuf_r+0x4e>
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f7ff fa59 	bl	800a7a4 <_fflush_r>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1ed      	bne.n	800b2d2 <__swbuf_r+0x2a>
 800b2f6:	68a3      	ldr	r3, [r4, #8]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	60a3      	str	r3, [r4, #8]
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	6022      	str	r2, [r4, #0]
 800b302:	701e      	strb	r6, [r3, #0]
 800b304:	6962      	ldr	r2, [r4, #20]
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	429a      	cmp	r2, r3
 800b30a:	d004      	beq.n	800b316 <__swbuf_r+0x6e>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	07db      	lsls	r3, r3, #31
 800b310:	d5e1      	bpl.n	800b2d6 <__swbuf_r+0x2e>
 800b312:	2e0a      	cmp	r6, #10
 800b314:	d1df      	bne.n	800b2d6 <__swbuf_r+0x2e>
 800b316:	4621      	mov	r1, r4
 800b318:	4628      	mov	r0, r5
 800b31a:	f7ff fa43 	bl	800a7a4 <_fflush_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d0d9      	beq.n	800b2d6 <__swbuf_r+0x2e>
 800b322:	e7d6      	b.n	800b2d2 <__swbuf_r+0x2a>

0800b324 <__swsetup_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4b29      	ldr	r3, [pc, #164]	@ (800b3cc <__swsetup_r+0xa8>)
 800b328:	4605      	mov	r5, r0
 800b32a:	6818      	ldr	r0, [r3, #0]
 800b32c:	460c      	mov	r4, r1
 800b32e:	b118      	cbz	r0, 800b338 <__swsetup_r+0x14>
 800b330:	6a03      	ldr	r3, [r0, #32]
 800b332:	b90b      	cbnz	r3, 800b338 <__swsetup_r+0x14>
 800b334:	f7fc fc28 	bl	8007b88 <__sinit>
 800b338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33c:	0719      	lsls	r1, r3, #28
 800b33e:	d422      	bmi.n	800b386 <__swsetup_r+0x62>
 800b340:	06da      	lsls	r2, r3, #27
 800b342:	d407      	bmi.n	800b354 <__swsetup_r+0x30>
 800b344:	2209      	movs	r2, #9
 800b346:	602a      	str	r2, [r5, #0]
 800b348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	e033      	b.n	800b3bc <__swsetup_r+0x98>
 800b354:	0758      	lsls	r0, r3, #29
 800b356:	d512      	bpl.n	800b37e <__swsetup_r+0x5a>
 800b358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b35a:	b141      	cbz	r1, 800b36e <__swsetup_r+0x4a>
 800b35c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b360:	4299      	cmp	r1, r3
 800b362:	d002      	beq.n	800b36a <__swsetup_r+0x46>
 800b364:	4628      	mov	r0, r5
 800b366:	f7fd fc23 	bl	8008bb0 <_free_r>
 800b36a:	2300      	movs	r3, #0
 800b36c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	2300      	movs	r3, #0
 800b378:	6063      	str	r3, [r4, #4]
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f043 0308 	orr.w	r3, r3, #8
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	6923      	ldr	r3, [r4, #16]
 800b388:	b94b      	cbnz	r3, 800b39e <__swsetup_r+0x7a>
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b394:	d003      	beq.n	800b39e <__swsetup_r+0x7a>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 f882 	bl	800b4a2 <__smakebuf_r>
 800b39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a2:	f013 0201 	ands.w	r2, r3, #1
 800b3a6:	d00a      	beq.n	800b3be <__swsetup_r+0x9a>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	60a2      	str	r2, [r4, #8]
 800b3ac:	6962      	ldr	r2, [r4, #20]
 800b3ae:	4252      	negs	r2, r2
 800b3b0:	61a2      	str	r2, [r4, #24]
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	b942      	cbnz	r2, 800b3c8 <__swsetup_r+0xa4>
 800b3b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b3ba:	d1c5      	bne.n	800b348 <__swsetup_r+0x24>
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	0799      	lsls	r1, r3, #30
 800b3c0:	bf58      	it	pl
 800b3c2:	6962      	ldrpl	r2, [r4, #20]
 800b3c4:	60a2      	str	r2, [r4, #8]
 800b3c6:	e7f4      	b.n	800b3b2 <__swsetup_r+0x8e>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7f7      	b.n	800b3bc <__swsetup_r+0x98>
 800b3cc:	20000020 	.word	0x20000020

0800b3d0 <_raise_r>:
 800b3d0:	291f      	cmp	r1, #31
 800b3d2:	b538      	push	{r3, r4, r5, lr}
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	d904      	bls.n	800b3e4 <_raise_r+0x14>
 800b3da:	2316      	movs	r3, #22
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3e6:	b112      	cbz	r2, 800b3ee <_raise_r+0x1e>
 800b3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3ec:	b94b      	cbnz	r3, 800b402 <_raise_r+0x32>
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f000 f830 	bl	800b454 <_getpid_r>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fe:	f000 b817 	b.w	800b430 <_kill_r>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d00a      	beq.n	800b41c <_raise_r+0x4c>
 800b406:	1c59      	adds	r1, r3, #1
 800b408:	d103      	bne.n	800b412 <_raise_r+0x42>
 800b40a:	2316      	movs	r3, #22
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	2001      	movs	r0, #1
 800b410:	e7e7      	b.n	800b3e2 <_raise_r+0x12>
 800b412:	2100      	movs	r1, #0
 800b414:	4620      	mov	r0, r4
 800b416:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b41a:	4798      	blx	r3
 800b41c:	2000      	movs	r0, #0
 800b41e:	e7e0      	b.n	800b3e2 <_raise_r+0x12>

0800b420 <raise>:
 800b420:	4b02      	ldr	r3, [pc, #8]	@ (800b42c <raise+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f7ff bfd3 	b.w	800b3d0 <_raise_r>
 800b42a:	bf00      	nop
 800b42c:	20000020 	.word	0x20000020

0800b430 <_kill_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	2300      	movs	r3, #0
 800b434:	4d06      	ldr	r5, [pc, #24]	@ (800b450 <_kill_r+0x20>)
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f6 fb18 	bl	8001a72 <_kill>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_kill_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_kill_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	20003040 	.word	0x20003040

0800b454 <_getpid_r>:
 800b454:	f7f6 bb06 	b.w	8001a64 <_getpid>

0800b458 <__swhatbuf_r>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	4615      	mov	r5, r2
 800b462:	2900      	cmp	r1, #0
 800b464:	461e      	mov	r6, r3
 800b466:	b096      	sub	sp, #88	@ 0x58
 800b468:	da0c      	bge.n	800b484 <__swhatbuf_r+0x2c>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	2100      	movs	r1, #0
 800b46e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b472:	bf14      	ite	ne
 800b474:	2340      	movne	r3, #64	@ 0x40
 800b476:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b47a:	2000      	movs	r0, #0
 800b47c:	6031      	str	r1, [r6, #0]
 800b47e:	602b      	str	r3, [r5, #0]
 800b480:	b016      	add	sp, #88	@ 0x58
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	466a      	mov	r2, sp
 800b486:	f000 f849 	bl	800b51c <_fstat_r>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	dbed      	blt.n	800b46a <__swhatbuf_r+0x12>
 800b48e:	9901      	ldr	r1, [sp, #4]
 800b490:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b494:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b498:	4259      	negs	r1, r3
 800b49a:	4159      	adcs	r1, r3
 800b49c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4a0:	e7eb      	b.n	800b47a <__swhatbuf_r+0x22>

0800b4a2 <__smakebuf_r>:
 800b4a2:	898b      	ldrh	r3, [r1, #12]
 800b4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a6:	079d      	lsls	r5, r3, #30
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	d507      	bpl.n	800b4be <__smakebuf_r+0x1c>
 800b4ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	6163      	str	r3, [r4, #20]
 800b4ba:	b003      	add	sp, #12
 800b4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4be:	466a      	mov	r2, sp
 800b4c0:	ab01      	add	r3, sp, #4
 800b4c2:	f7ff ffc9 	bl	800b458 <__swhatbuf_r>
 800b4c6:	9f00      	ldr	r7, [sp, #0]
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7fd fbe1 	bl	8008c94 <_malloc_r>
 800b4d2:	b948      	cbnz	r0, 800b4e8 <__smakebuf_r+0x46>
 800b4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d8:	059a      	lsls	r2, r3, #22
 800b4da:	d4ee      	bmi.n	800b4ba <__smakebuf_r+0x18>
 800b4dc:	f023 0303 	bic.w	r3, r3, #3
 800b4e0:	f043 0302 	orr.w	r3, r3, #2
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	e7e2      	b.n	800b4ae <__smakebuf_r+0xc>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	6020      	str	r0, [r4, #0]
 800b4f8:	b15b      	cbz	r3, 800b512 <__smakebuf_r+0x70>
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b500:	f000 f81e 	bl	800b540 <_isatty_r>
 800b504:	b128      	cbz	r0, 800b512 <__smakebuf_r+0x70>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	f023 0303 	bic.w	r3, r3, #3
 800b50c:	f043 0301 	orr.w	r3, r3, #1
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	431d      	orrs	r5, r3
 800b516:	81a5      	strh	r5, [r4, #12]
 800b518:	e7cf      	b.n	800b4ba <__smakebuf_r+0x18>
	...

0800b51c <_fstat_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	2300      	movs	r3, #0
 800b520:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_fstat_r+0x20>)
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	4611      	mov	r1, r2
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	f7f6 fb01 	bl	8001b30 <_fstat>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	d102      	bne.n	800b538 <_fstat_r+0x1c>
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	b103      	cbz	r3, 800b538 <_fstat_r+0x1c>
 800b536:	6023      	str	r3, [r4, #0]
 800b538:	bd38      	pop	{r3, r4, r5, pc}
 800b53a:	bf00      	nop
 800b53c:	20003040 	.word	0x20003040

0800b540 <_isatty_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	2300      	movs	r3, #0
 800b544:	4d05      	ldr	r5, [pc, #20]	@ (800b55c <_isatty_r+0x1c>)
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	f7f6 faff 	bl	8001b4e <_isatty>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_isatty_r+0x1a>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_isatty_r+0x1a>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20003040 	.word	0x20003040

0800b560 <_init>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr

0800b56c <_fini>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	bf00      	nop
 800b570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b572:	bc08      	pop	{r3}
 800b574:	469e      	mov	lr, r3
 800b576:	4770      	bx	lr
