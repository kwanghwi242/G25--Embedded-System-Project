
final -event by  themselves.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008720  08008720  00009720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb0  08008bb0  00009bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb8  08008bb8  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008bc0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001d8  08008d98  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08008d98  0000a5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1db  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d8  00000000  00000000  000193dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0001b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  0001c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3a  00000000  00000000  0001d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122b6  00000000  00000000  00035fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e809  00000000  00000000  000482a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  000d6af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000dc2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008704 	.word	0x08008704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008704 	.word	0x08008704

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dfe:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <DWT_Delay_Init+0x58>)
 8000e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e0a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2a:	bf00      	nop
     __ASM volatile ("NOP");
 8000e2c:	bf00      	nop
  __ASM volatile ("NOP");
 8000e2e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <DWT_Delay_Init+0x5c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e000      	b.n	8000e3e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000e3c:	2301      	movs	r3, #1
  }
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000edf0 	.word	0xe000edf0
 8000e4c:	e0001000 	.word	0xe0001000

08000e50 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <delay+0x40>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e5e:	f002 fa2d 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <delay+0x44>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e74:	bf00      	nop
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <delay+0x40>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3f8      	bcc.n	8000e76 <delay+0x26>
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e0001000 	.word	0xe0001000
 8000e94:	431bde83 	.word	0x431bde83

08000e98 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 ffe9 	bl	8001e9c <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 ffcc 	bl	8001e9c <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DHT_Start>:


void DHT_Start (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f10:	f7ff ff6e 	bl	8000df0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f14:	2120      	movs	r1, #32
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <DHT_Start+0x40>)
 8000f18:	f7ff ffbe 	bl	8000e98 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <DHT_Start+0x40>)
 8000f22:	f001 f956 	bl	80021d2 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f26:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000f2a:	f7ff ff91 	bl	8000e50 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2120      	movs	r1, #32
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <DHT_Start+0x40>)
 8000f34:	f001 f94d 	bl	80021d2 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000f38:	2014      	movs	r0, #20
 8000f3a:	f7ff ff89 	bl	8000e50 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f3e:	2120      	movs	r1, #32
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <DHT_Start+0x40>)
 8000f42:	f7ff ffc6 	bl	8000ed2 <Set_Pin_Input>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010800 	.word	0x40010800

08000f50 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f7ff ff78 	bl	8000e50 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f60:	2120      	movs	r1, #32
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f64:	f001 f91e 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000f6e:	2050      	movs	r0, #80	@ 0x50
 8000f70:	f7ff ff6e 	bl	8000e50 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f74:	2120      	movs	r1, #32
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f78:	f001 f914 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <DHT_Check_Response+0x38>
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <DHT_Check_Response+0x3c>
		else Response = -1;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <DHT_Check_Response+0x58>)
 8000f92:	f001 f907 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f8      	bne.n	8000f8e <DHT_Check_Response+0x3e>

	return Response;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	e037      	b.n	8001028 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fb8:	bf00      	nop
 8000fba:	2120      	movs	r1, #32
 8000fbc:	481e      	ldr	r0, [pc, #120]	@ (8001038 <DHT_Read+0x8c>)
 8000fbe:	f001 f8f1 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000fc8:	2028      	movs	r0, #40	@ 0x28
 8000fca:	f7ff ff41 	bl	8000e50 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <DHT_Read+0x8c>)
 8000fd2:	f001 f8e7 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10e      	bne.n	8000ffa <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e00b      	b.n	8001012 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f1c3 0307 	rsb	r3, r3, #7
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001012:	bf00      	nop
 8001014:	2120      	movs	r1, #32
 8001016:	4808      	ldr	r0, [pc, #32]	@ (8001038 <DHT_Read+0x8c>)
 8001018:	f001 f8c4 	bl	80021a4 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f8      	bne.n	8001014 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9c4      	bls.n	8000fb8 <DHT_Read+0xc>
	}
	return i;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010800 	.word	0x40010800

0800103c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001044:	f7ff ff62 	bl	8000f0c <DHT_Start>
	Presence = DHT_Check_Response ();
 8001048:	f7ff ff82 	bl	8000f50 <DHT_Check_Response>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <DHT_GetData+0xa0>)
 8001052:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001054:	f7ff ffaa 	bl	8000fac <DHT_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <DHT_GetData+0xa4>)
 800105e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001060:	f7ff ffa4 	bl	8000fac <DHT_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <DHT_GetData+0xa8>)
 800106a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800106c:	f7ff ff9e 	bl	8000fac <DHT_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <DHT_GetData+0xac>)
 8001076:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001078:	f7ff ff98 	bl	8000fac <DHT_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <DHT_GetData+0xb0>)
 8001082:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001084:	f7ff ff92 	bl	8000fac <DHT_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <DHT_GetData+0xb4>)
 800108e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <DHT_GetData+0xb4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <DHT_GetData+0xa4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <DHT_GetData+0xa8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <DHT_GetData+0xac>)
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <DHT_GetData+0xb0>)
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4299      	cmp	r1, r3
 80010b0:	d10f      	bne.n	80010d2 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <DHT_GetData+0xac>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe0c 	bl	8000cd4 <__aeabi_ui2f>
 80010bc:	4602      	mov	r2, r0
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <DHT_GetData+0xa4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe04 	bl	8000cd4 <__aeabi_ui2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001fa 	.word	0x200001fa
 80010e0:	200001f4 	.word	0x200001f4
 80010e4:	200001f5 	.word	0x200001f5
 80010e8:	200001f6 	.word	0x200001f6
 80010ec:	200001f7 	.word	0x200001f7
 80010f0:	200001f8 	.word	0x200001f8

080010f4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f023 030f 	bic.w	r3, r3, #15
 8001104:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f043 030c 	orr.w	r3, r3, #12
 8001112:	b2db      	uxtb	r3, r3
 8001114:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	f043 030c 	orr.w	r3, r3, #12
 8001126:	b2db      	uxtb	r3, r3
 8001128:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	b2db      	uxtb	r3, r3
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2304      	movs	r3, #4
 800113e:	214e      	movs	r1, #78	@ 0x4e
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <lcd_send_cmd+0x5c>)
 8001142:	f001 f9a3 	bl	800248c <HAL_I2C_Master_Transmit>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001fc 	.word	0x200001fc

08001154 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 030d 	orr.w	r3, r3, #13
 8001172:	b2db      	uxtb	r3, r3
 8001174:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 0309 	orr.w	r3, r3, #9
 800117c:	b2db      	uxtb	r3, r3
 800117e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	f043 030d 	orr.w	r3, r3, #13
 8001186:	b2db      	uxtb	r3, r3
 8001188:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f043 0309 	orr.w	r3, r3, #9
 8001190:	b2db      	uxtb	r3, r3
 8001192:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2304      	movs	r3, #4
 800119e:	214e      	movs	r1, #78	@ 0x4e
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <lcd_send_data+0x5c>)
 80011a2:	f001 f973 	bl	800248c <HAL_I2C_Master_Transmit>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001fc 	.word	0x200001fc

080011b4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    switch (row)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <lcd_put_cur+0x18>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <lcd_put_cur+0x22>
 80011ca:	e009      	b.n	80011e0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d2:	603b      	str	r3, [r7, #0]
            break;
 80011d4:	e004      	b.n	80011e0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011dc:	603b      	str	r3, [r7, #0]
            break;
 80011de:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff85 	bl	80010f4 <lcd_send_cmd>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <lcd_init>:


void lcd_init (void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011f6:	2032      	movs	r0, #50	@ 0x32
 80011f8:	f000 fd1e 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011fc:	2030      	movs	r0, #48	@ 0x30
 80011fe:	f7ff ff79 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001202:	2005      	movs	r0, #5
 8001204:	f000 fd18 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001208:	2030      	movs	r0, #48	@ 0x30
 800120a:	f7ff ff73 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fd12 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001214:	2030      	movs	r0, #48	@ 0x30
 8001216:	f7ff ff6d 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f000 fd0c 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001220:	2020      	movs	r0, #32
 8001222:	f7ff ff67 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 fd06 	bl	8001c38 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800122c:	2028      	movs	r0, #40	@ 0x28
 800122e:	f7ff ff61 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 fd00 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001238:	2008      	movs	r0, #8
 800123a:	f7ff ff5b 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fcfa 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff55 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 fcf4 	bl	8001c38 <HAL_Delay>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fcf1 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff ff4c 	bl	80010f4 <lcd_send_cmd>
	HAL_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f000 fceb 	bl	8001c38 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001262:	200c      	movs	r0, #12
 8001264:	f7ff ff46 	bl	80010f4 <lcd_send_cmd>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001274:	e006      	b.n	8001284 <lcd_send_string+0x18>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff68 	bl	8001154 <lcd_send_data>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f4      	bne.n	8001276 <lcd_send_string+0xa>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fc6a 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f820 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f900 	bl	80014a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a8:	f000 f886 	bl	80013b8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012ac:	f000 f856 	bl	800135c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012b0:	f000 f8d0 	bl	8001454 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80012b4:	f7ff ff9d 	bl	80011f2 <lcd_init>

  //HAL_TIM_Base_Start_IT(&htim1); // Bắt đầu timer với ngắt
  HAL_TIM_Base_Start_IT(&htim2);
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <main+0x40>)
 80012ba:	f002 f89f 	bl	80033fc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (event_queue_head == event_queue_tail) {
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <main+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <main+0x48>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d101      	bne.n	80012d2 <main+0x3a>
	  		             // Hàng đợi rỗng, đưa CPU vào chế độ năng lượng thấp
	  		             __WFI(); // Chờ ngắt để tiết kiệm năng lượng
 80012ce:	bf30      	wfi
 80012d0:	e7f5      	b.n	80012be <main+0x26>
	  		         } else {
	  		             // Hàng đợi không rỗng, xử lý sự kiện
	  		             process_events();
 80012d2:	f000 f9eb 	bl	80016ac <process_events>
	  if (event_queue_head == event_queue_tail) {
 80012d6:	e7f2      	b.n	80012be <main+0x26>
 80012d8:	20000250 	.word	0x20000250
 80012dc:	20000486 	.word	0x20000486
 80012e0:	20000487 	.word	0x20000487

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	@ 0x40
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2228      	movs	r2, #40	@ 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fe3b 	bl	8004f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fc0e 	bl	8002b3c <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001326:	f000 fa1b 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fe7c 	bl	8003040 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134e:	f000 fa07 	bl	8001760 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	@ 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <MX_I2C1_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_I2C1_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_I2C1_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_I2C1_Init+0x50>)
 800139a:	f000 ff33 	bl	8002204 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f9dc 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001fc 	.word	0x200001fc
 80013b0:	40005400 	.word	0x40005400
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013de:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_TIM2_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fe:	4814      	ldr	r0, [pc, #80]	@ (8001450 <MX_TIM2_Init+0x98>)
 8001400:	f001 ffac 	bl	800335c <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800140a:	f000 f9a9 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_TIM2_Init+0x98>)
 800141c:	f002 f95e 	bl	80036dc <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001426:	f000 f99b 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_TIM2_Init+0x98>)
 8001438:	f002 fb40 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001442:	f000 f98d 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000250 	.word	0x20000250

08001454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <MX_USART1_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800148c:	f002 fb86 	bl	8003b9c <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 f963 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000298 	.word	0x20000298
 80014a4:	40013800 	.word	0x40013800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <task1>:

/* USER CODE BEGIN 4 */
void task1(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	DHT_GetData(&dht);
 80014f0:	4803      	ldr	r0, [pc, #12]	@ (8001500 <task1+0x14>)
 80014f2:	f7ff fda3 	bl	800103c <DHT_GetData>
	add_event(2);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f000 f87a 	bl	80015f0 <add_event>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200002e0 	.word	0x200002e0

08001504 <task2>:

void task2(){
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
	 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
	uint8_t length = snprintf(message, sizeof(message), "Nhiet do: %f va Do am: %f", dht.Temperature, dht.Humidity);
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <task2+0x58>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff8a 	bl	8000428 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <task2+0x58>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff83 	bl	8000428 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800152a:	e9cd 4500 	strd	r4, r5, [sp]
 800152e:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <task2+0x5c>)
 8001530:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <task2+0x60>)
 8001536:	f003 fc83 	bl	8004e40 <sniprintf>
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	4907      	ldr	r1, [pc, #28]	@ (8001564 <task2+0x60>)
 8001548:	4807      	ldr	r0, [pc, #28]	@ (8001568 <task2+0x64>)
 800154a:	f002 fb77 	bl	8003c3c <HAL_UART_Transmit>
	add_event(3);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f84e 	bl	80015f0 <add_event>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	200002e0 	.word	0x200002e0
 8001560:	08008720 	.word	0x08008720
 8001564:	200002e8 	.word	0x200002e8
 8001568:	20000298 	.word	0x20000298

0800156c <task3>:

void task3(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af02      	add	r7, sp, #8
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	lcd_put_cur(0,0);
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe1d 	bl	80011b4 <lcd_put_cur>
	snprintf(temp,sizeof(temp),"Nhiet do: %f",dht.Temperature);
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <task3+0x70>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff52 	bl	8000428 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9cd 2300 	strd	r2, r3, [sp]
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <task3+0x74>)
 800158e:	2132      	movs	r1, #50	@ 0x32
 8001590:	4814      	ldr	r0, [pc, #80]	@ (80015e4 <task3+0x78>)
 8001592:	f003 fc55 	bl	8004e40 <sniprintf>
	snprintf(humid,sizeof(humid),"Do am : %f",dht.Humidity);
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <task3+0x70>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff44 	bl	8000428 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9cd 2300 	strd	r2, r3, [sp]
 80015a8:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <task3+0x7c>)
 80015aa:	2132      	movs	r1, #50	@ 0x32
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <task3+0x80>)
 80015ae:	f003 fc47 	bl	8004e40 <sniprintf>
	lcd_send_string(temp);
 80015b2:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <task3+0x78>)
 80015b4:	f7ff fe5a 	bl	800126c <lcd_send_string>
	lcd_put_cur(1,0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fdfa 	bl	80011b4 <lcd_put_cur>
	lcd_send_string(humid);
 80015c0:	480a      	ldr	r0, [pc, #40]	@ (80015ec <task3+0x80>)
 80015c2:	f7ff fe53 	bl	800126c <lcd_send_string>
	add_event(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f812 	bl	80015f0 <add_event>
	HAL_Delay(1000);
 80015cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d0:	f000 fb32 	bl	8001c38 <HAL_Delay>
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002e0 	.word	0x200002e0
 80015e0:	0800873c 	.word	0x0800873c
 80015e4:	20000414 	.word	0x20000414
 80015e8:	0800874c 	.word	0x0800874c
 80015ec:	20000448 	.word	0x20000448

080015f0 <add_event>:

void add_event(uint8_t event) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    event_queue[event_queue_tail] = event;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <add_event+0x48>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <add_event+0x4c>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	5453      	strb	r3, [r2, r1]
    event_queue_tail = (event_queue_tail + 1) % 10;
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <add_event+0x48>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <add_event+0x50>)
 8001612:	fb83 1302 	smull	r1, r3, r3, r2
 8001616:	1099      	asrs	r1, r3, #2
 8001618:	17d3      	asrs	r3, r2, #31
 800161a:	1ac9      	subs	r1, r1, r3
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	1ad1      	subs	r1, r2, r3
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <add_event+0x48>)
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000487 	.word	0x20000487
 800163c:	2000047c 	.word	0x2000047c
 8001640:	66666667 	.word	0x66666667

08001644 <get_event>:

uint8_t get_event(void) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
    if (event_queue_head == event_queue_tail) {
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <get_event+0x58>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <get_event+0x5c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	429a      	cmp	r2, r3
 8001658:	d101      	bne.n	800165e <get_event+0x1a>
        return 0xFF; // No event
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	e019      	b.n	8001692 <get_event+0x4e>
    }
    uint8_t event = event_queue[event_queue_head];
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <get_event+0x58>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <get_event+0x60>)
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	71fb      	strb	r3, [r7, #7]
    event_queue_head = (event_queue_head + 1) % 10;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <get_event+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <get_event+0x64>)
 8001676:	fb83 1302 	smull	r1, r3, r3, r2
 800167a:	1099      	asrs	r1, r3, #2
 800167c:	17d3      	asrs	r3, r2, #31
 800167e:	1ac9      	subs	r1, r1, r3
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	1ad1      	subs	r1, r2, r3
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <get_event+0x58>)
 800168e:	701a      	strb	r2, [r3, #0]
    return event;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000486 	.word	0x20000486
 80016a0:	20000487 	.word	0x20000487
 80016a4:	2000047c 	.word	0x2000047c
 80016a8:	66666667 	.word	0x66666667

080016ac <process_events>:

void process_events(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
    uint8_t event;
    do {
        event = get_event();
 80016b2:	f7ff ffc7 	bl	8001644 <get_event>
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
        if (event != 0xFF) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2bff      	cmp	r3, #255	@ 0xff
 80016be:	d013      	beq.n	80016e8 <process_events+0x3c>
            switch (event) {
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d00c      	beq.n	80016e0 <process_events+0x34>
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	dc0d      	bgt.n	80016e6 <process_events+0x3a>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d002      	beq.n	80016d4 <process_events+0x28>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d003      	beq.n	80016da <process_events+0x2e>
                    break;
                case 3:
                    task3();
                    break;
                default:
                    break;
 80016d2:	e008      	b.n	80016e6 <process_events+0x3a>
                    task1();
 80016d4:	f7ff ff0a 	bl	80014ec <task1>
                    break;
 80016d8:	e006      	b.n	80016e8 <process_events+0x3c>
                    task2();
 80016da:	f7ff ff13 	bl	8001504 <task2>
                    break;
 80016de:	e003      	b.n	80016e8 <process_events+0x3c>
                    task3();
 80016e0:	f7ff ff44 	bl	800156c <task3>
                    break;
 80016e4:	e000      	b.n	80016e8 <process_events+0x3c>
                    break;
 80016e6:	bf00      	nop
            }
        }
    } while (event != 0xFF); // Thoát khi không có sự kiện
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d1e1      	bne.n	80016b2 <process_events+0x6>
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x50>
        if (!timer_initialized) {
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d119      	bne.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x50>
            // Chỉ thêm sự kiện vào hàng đợi trong lần đầu tiên
            static uint8_t event_counter = 1;
            add_event(event_counter);
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff69 	bl	80015f0 <add_event>
            event_counter = (event_counter % 3) + 1;
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001724:	fba3 1302 	umull	r1, r3, r3, r2
 8001728:	0859      	lsrs	r1, r3, #1
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800173a:	701a      	strb	r2, [r3, #0]

            // Dừng Timer sau khi thêm sự kiện
            HAL_TIM_Base_Stop_IT(&htim2);
 800173c:	4807      	ldr	r0, [pc, #28]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800173e:	f001 feaf 	bl	80034a0 <HAL_TIM_Base_Stop_IT>
            timer_initialized = 1; // Đánh dấu Timer đã được khởi tạo
 8001742:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000488 	.word	0x20000488
 8001754:	20000000 	.word	0x20000000
 8001758:	aaaaaaab 	.word	0xaaaaaaab
 800175c:	20000250 	.word	0x20000250

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <Error_Handler+0x8>

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_MspInit+0x60>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_MspInit+0x60>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a15      	ldr	r2, [pc, #84]	@ (8001840 <HAL_I2C_MspInit+0x70>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d123      	bne.n	8001838 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001808:	23c0      	movs	r3, #192	@ 0xc0
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180c:	2312      	movs	r3, #18
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <HAL_I2C_MspInit+0x78>)
 800181c:	f000 fb3e 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 8001826:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_I2C_MspInit+0x74>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001838:	bf00      	nop
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40005400 	.word	0x40005400
 8001844:	40021000 	.word	0x40021000
 8001848:	40010c00 	.word	0x40010c00

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185c:	d113      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <HAL_TIM_Base_MspInit+0x44>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_TIM_Base_MspInit+0x44>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_TIM_Base_MspInit+0x44>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	201c      	movs	r0, #28
 800187c:	f000 fad7 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001880:	201c      	movs	r0, #28
 8001882:	f000 faf0 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <HAL_UART_MspInit+0x8c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d131      	bne.n	8001918 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_UART_MspInit+0x90>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4619      	mov	r1, r3
 80018f8:	480b      	ldr	r0, [pc, #44]	@ (8001928 <HAL_UART_MspInit+0x94>)
 80018fa:	f000 facf 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <HAL_UART_MspInit+0x94>)
 8001914:	f000 fac2 	bl	8001e9c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013800 	.word	0x40013800
 8001924:	40021000 	.word	0x40021000
 8001928:	40010800 	.word	0x40010800

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f940 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f001 fdb7 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000250 	.word	0x20000250

08001998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <_kill>:

int _kill(int pid, int sig)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019b0:	f003 fb30 	bl	8005014 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2216      	movs	r2, #22
 80019b8:	601a      	str	r2, [r3, #0]
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_exit>:

void _exit (int status)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ce:	f04f 31ff 	mov.w	r1, #4294967295
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffe7 	bl	80019a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <_exit+0x12>

080019dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e00a      	b.n	8001a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ee:	f3af 8000 	nop.w
 80019f2:	4601      	mov	r1, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	60ba      	str	r2, [r7, #8]
 80019fa:	b2ca      	uxtb	r2, r1
 80019fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf0      	blt.n	80019ee <_read+0x12>
  }

  return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e009      	b.n	8001a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf1      	blt.n	8001a28 <_write+0x12>
  }
  return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_close>:

int _close(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a74:	605a      	str	r2, [r3, #4]
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:

int _isatty(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f003 fa98 	bl	8005014 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20005000 	.word	0x20005000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000048c 	.word	0x2000048c
 8001b18:	200005e0 	.word	0x200005e0

08001b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff fff8 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b2e:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b30:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b44:	4c09      	ldr	r4, [pc, #36]	@ (8001b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f003 fa65 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b56:	f7ff fb9f 	bl	8001298 <main>
  bx lr
 8001b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b64:	08008bc0 	.word	0x08008bc0
  ldr r2, =_sbss
 8001b68:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b6c:	200005e0 	.word	0x200005e0

08001b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_2_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x28>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x28>)
 8001b7e:	f043 0310 	orr.w	r3, r3, #16
 8001b82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f947 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdec 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f95f 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f927 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000008 	.word	0x20000008

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a03      	ldr	r2, [pc, #12]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000490 	.word	0x20000490

08001c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b02      	ldr	r3, [pc, #8]	@ (8001c34 <HAL_GetTick+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000490 	.word	0x20000490

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fff0 	bl	8001c24 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffe0 	bl	8001c24 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4906      	ldr	r1, [pc, #24]	@ (8001d18 <__NVIC_EnableIRQ+0x34>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff90 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff2d 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff42 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff35 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e169      	b.n	8002184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8158 	bne.w	800217e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a9a      	ldr	r2, [pc, #616]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d05e      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a98      	ldr	r2, [pc, #608]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d875      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ede:	4a98      	ldr	r2, [pc, #608]	@ (8002140 <HAL_GPIO_Init+0x2a4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d058      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a96      	ldr	r2, [pc, #600]	@ (8002140 <HAL_GPIO_Init+0x2a4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d86f      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001eea:	4a96      	ldr	r2, [pc, #600]	@ (8002144 <HAL_GPIO_Init+0x2a8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d052      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ef0:	4a94      	ldr	r2, [pc, #592]	@ (8002144 <HAL_GPIO_Init+0x2a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d869      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ef6:	4a94      	ldr	r2, [pc, #592]	@ (8002148 <HAL_GPIO_Init+0x2ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04c      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001efc:	4a92      	ldr	r2, [pc, #584]	@ (8002148 <HAL_GPIO_Init+0x2ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d863      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f02:	4a92      	ldr	r2, [pc, #584]	@ (800214c <HAL_GPIO_Init+0x2b0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d046      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001f08:	4a90      	ldr	r2, [pc, #576]	@ (800214c <HAL_GPIO_Init+0x2b0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d85d      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d82a      	bhi.n	8001f68 <HAL_GPIO_Init+0xcc>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d859      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <HAL_GPIO_Init+0x80>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f83 	.word	0x08001f83
 8001f28:	08001fc5 	.word	0x08001fc5
 8001f2c:	08001fcb 	.word	0x08001fcb
 8001f30:	08001fcb 	.word	0x08001fcb
 8001f34:	08001fcb 	.word	0x08001fcb
 8001f38:	08001fcb 	.word	0x08001fcb
 8001f3c:	08001fcb 	.word	0x08001fcb
 8001f40:	08001fcb 	.word	0x08001fcb
 8001f44:	08001fcb 	.word	0x08001fcb
 8001f48:	08001fcb 	.word	0x08001fcb
 8001f4c:	08001fcb 	.word	0x08001fcb
 8001f50:	08001fcb 	.word	0x08001fcb
 8001f54:	08001fcb 	.word	0x08001fcb
 8001f58:	08001fcb 	.word	0x08001fcb
 8001f5c:	08001fcb 	.word	0x08001fcb
 8001f60:	08001f79 	.word	0x08001f79
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	4a79      	ldr	r2, [pc, #484]	@ (8002150 <HAL_GPIO_Init+0x2b4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6e:	e02c      	b.n	8001fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e029      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e024      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	3308      	adds	r3, #8
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e01f      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	330c      	adds	r3, #12
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	e01a      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e013      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fac:	2308      	movs	r3, #8
 8001fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	611a      	str	r2, [r3, #16]
          break;
 8001fb6:	e009      	b.n	8001fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	615a      	str	r2, [r3, #20]
          break;
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          break;
 8001fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2bff      	cmp	r3, #255	@ 0xff
 8001fd0:	d801      	bhi.n	8001fd6 <HAL_GPIO_Init+0x13a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	e001      	b.n	8001fda <HAL_GPIO_Init+0x13e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2bff      	cmp	r3, #255	@ 0xff
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_GPIO_Init+0x14c>
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x152>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	3b08      	subs	r3, #8
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	6a39      	ldr	r1, [r7, #32]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80b1 	beq.w	800217e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800201c:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002034:	4a48      	ldr	r2, [pc, #288]	@ (8002158 <HAL_GPIO_Init+0x2bc>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a40      	ldr	r2, [pc, #256]	@ (800215c <HAL_GPIO_Init+0x2c0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x1ec>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3f      	ldr	r2, [pc, #252]	@ (8002160 <HAL_GPIO_Init+0x2c4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1e8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3e      	ldr	r2, [pc, #248]	@ (8002164 <HAL_GPIO_Init+0x2c8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1e4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3d      	ldr	r2, [pc, #244]	@ (8002168 <HAL_GPIO_Init+0x2cc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1e0>
 8002078:	2303      	movs	r3, #3
 800207a:	e006      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 800207c:	2304      	movs	r3, #4
 800207e:	e004      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002080:	2302      	movs	r3, #2
 8002082:	e002      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002088:	2300      	movs	r3, #0
 800208a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208c:	f002 0203 	and.w	r2, r2, #3
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	4093      	lsls	r3, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209a:	492f      	ldr	r1, [pc, #188]	@ (8002158 <HAL_GPIO_Init+0x2bc>)
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	492c      	ldr	r1, [pc, #176]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4928      	ldr	r1, [pc, #160]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020dc:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4922      	ldr	r1, [pc, #136]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	491e      	ldr	r1, [pc, #120]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4918      	ldr	r1, [pc, #96]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	4914      	ldr	r1, [pc, #80]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d021      	beq.n	8002170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e021      	b.n	800217e <HAL_GPIO_Init+0x2e2>
 800213a:	bf00      	nop
 800213c:	10320000 	.word	0x10320000
 8002140:	10310000 	.word	0x10310000
 8002144:	10220000 	.word	0x10220000
 8002148:	10210000 	.word	0x10210000
 800214c:	10120000 	.word	0x10120000
 8002150:	10110000 	.word	0x10110000
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	4909      	ldr	r1, [pc, #36]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	3301      	adds	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f ae8e 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	372c      	adds	r7, #44	@ 0x2c
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	807b      	strh	r3, [r7, #2]
 80021de:	4613      	mov	r3, r2
 80021e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e2:	787b      	ldrb	r3, [r7, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ee:	e003      	b.n	80021f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	041a      	lsls	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e12b      	b.n	800246e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fad0 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	@ 0x24
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002268:	f001 f832 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a81      	ldr	r2, [pc, #516]	@ (8002478 <HAL_I2C_Init+0x274>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d807      	bhi.n	8002288 <HAL_I2C_Init+0x84>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a80      	ldr	r2, [pc, #512]	@ (800247c <HAL_I2C_Init+0x278>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e006      	b.n	8002296 <HAL_I2C_Init+0x92>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a7d      	ldr	r2, [pc, #500]	@ (8002480 <HAL_I2C_Init+0x27c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0e7      	b.n	800246e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a78      	ldr	r2, [pc, #480]	@ (8002484 <HAL_I2C_Init+0x280>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002478 <HAL_I2C_Init+0x274>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d802      	bhi.n	80022d8 <HAL_I2C_Init+0xd4>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3301      	adds	r3, #1
 80022d6:	e009      	b.n	80022ec <HAL_I2C_Init+0xe8>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a69      	ldr	r2, [pc, #420]	@ (8002488 <HAL_I2C_Init+0x284>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	3301      	adds	r3, #1
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	495c      	ldr	r1, [pc, #368]	@ (8002478 <HAL_I2C_Init+0x274>)
 8002308:	428b      	cmp	r3, r1
 800230a:	d819      	bhi.n	8002340 <HAL_I2C_Init+0x13c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e59      	subs	r1, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fbb1 f3f3 	udiv	r3, r1, r3
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_I2C_Init+0x138>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e59      	subs	r1, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fbb1 f3f3 	udiv	r3, r1, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	e051      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800233c:	2304      	movs	r3, #4
 800233e:	e04f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_I2C_Init+0x168>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e012      	b.n	8002392 <HAL_I2C_Init+0x18e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Init+0x196>
 8002396:	2301      	movs	r3, #1
 8002398:	e022      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10e      	bne.n	80023c0 <HAL_I2C_Init+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e58      	subs	r0, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023be:	e00f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	0099      	lsls	r1, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	6809      	ldr	r1, [r1, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800240e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6911      	ldr	r1, [r2, #16]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	000186a0 	.word	0x000186a0
 800247c:	001e847f 	.word	0x001e847f
 8002480:	003d08ff 	.word	0x003d08ff
 8002484:	431bde83 	.word	0x431bde83
 8002488:	10624dd3 	.word	0x10624dd3

0800248c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	817b      	strh	r3, [r7, #10]
 800249c:	4613      	mov	r3, r2
 800249e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff fbc0 	bl	8001c24 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 80e0 	bne.w	8002674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4970      	ldr	r1, [pc, #448]	@ (8002680 <HAL_I2C_Master_Transmit+0x1f4>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f964 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0d3      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2C_Master_Transmit+0x50>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2221      	movs	r2, #33	@ 0x21
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a50      	ldr	r2, [pc, #320]	@ (8002684 <HAL_I2C_Master_Transmit+0x1f8>)
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f89c 	bl	8002688 <I2C_MasterRequestWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e08d      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002570:	e066      	b.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa22 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x188>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	6a39      	ldr	r1, [r7, #32]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fa19 	bl	8002a50 <I2C_WaitOnBTFFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800263a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01a      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d194      	bne.n	8002572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d006      	beq.n	80026b2 <I2C_MasterRequestWrite+0x2a>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d003      	beq.n	80026b2 <I2C_MasterRequestWrite+0x2a>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026b0:	d108      	bne.n	80026c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e00b      	b.n	80026dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d107      	bne.n	80026dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f84f 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002702:	d103      	bne.n	800270c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e035      	b.n	800277c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002718:	d108      	bne.n	800272c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002728:	611a      	str	r2, [r3, #16]
 800272a:	e01b      	b.n	8002764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800272c:	897b      	ldrh	r3, [r7, #10]
 800272e:	11db      	asrs	r3, r3, #7
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 0306 	and.w	r3, r3, #6
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f063 030f 	orn	r3, r3, #15
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	490e      	ldr	r1, [pc, #56]	@ (8002784 <I2C_MasterRequestWrite+0xfc>)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f898 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e010      	b.n	800277c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4907      	ldr	r1, [pc, #28]	@ (8002788 <I2C_MasterRequestWrite+0x100>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f888 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	00010008 	.word	0x00010008
 8002788:	00010002 	.word	0x00010002

0800278c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	e048      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d044      	beq.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7ff fa3d 	bl	8001c24 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d139      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	e00c      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d116      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e023      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10d      	bne.n	8002856 <I2C_WaitOnFlagUntilTimeout+0xca>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	43da      	mvns	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4013      	ands	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	e00c      	b.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	429a      	cmp	r2, r3
 8002874:	d093      	beq.n	800279e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800288e:	e071      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289e:	d123      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e067      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d041      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7ff f998 	bl	8001c24 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d136      	bne.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10c      	bne.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e00b      	b.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e021      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10c      	bne.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	43da      	mvns	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e00b      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f af6d 	bne.w	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f886 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e034      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d028      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7ff f91d 	bl	8001c24 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11d      	bne.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d016      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d1c3      	bne.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a5c:	e034      	b.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f83e 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d028      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7ff f8d5 	bl	8001c24 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11d      	bne.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d016      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d1c3      	bne.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af6:	d11b      	bne.n	8002b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e272      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8087 	beq.w	8002c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5c:	4b92      	ldr	r3, [pc, #584]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d00c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b68:	4b8f      	ldr	r3, [pc, #572]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
 8002b74:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b89      	ldr	r3, [pc, #548]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x12c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d168      	bne.n	8002c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e24c      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76>
 8002ba4:	4b80      	ldr	r3, [pc, #512]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7f      	ldr	r2, [pc, #508]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e02e      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b78      	ldr	r3, [pc, #480]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a77      	ldr	r2, [pc, #476]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xbc>
 8002bde:	4b72      	ldr	r3, [pc, #456]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a71      	ldr	r2, [pc, #452]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b6f      	ldr	r3, [pc, #444]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6e      	ldr	r2, [pc, #440]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b68      	ldr	r3, [pc, #416]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a67      	ldr	r2, [pc, #412]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f804 	bl	8001c24 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f800 	bl	8001c24 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e200      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe4>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fff0 	bl	8001c24 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe ffec 	bl	8001c24 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1ec      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x10c>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	4b4c      	ldr	r3, [pc, #304]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c82:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
 8002c8e:	4b46      	ldr	r3, [pc, #280]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1c0      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4939      	ldr	r1, [pc, #228]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_RCC_OscConfig+0x270>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe ffa5 	bl	8001c24 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe ffa1 	bl	8001c24 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1a1      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4927      	ldr	r1, [pc, #156]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_RCC_OscConfig+0x270>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ff84 	bl	8001c24 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe ff80 	bl	8001c24 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e180      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03a      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe ff64 	bl	8001c24 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe ff60 	bl	8001c24 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e160      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f000 face 	bl	8003320 <RCC_Delay>
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe ff4a 	bl	8001c24 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	e00f      	b.n	8002db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe ff46 	bl	8001c24 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e146      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	42420000 	.word	0x42420000
 8002db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b92      	ldr	r3, [pc, #584]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e9      	bne.n	8002d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a6 	beq.w	8002f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b88      	ldr	r3, [pc, #544]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a87      	ldr	r2, [pc, #540]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]
 8002dea:	4b85      	ldr	r3, [pc, #532]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe ff07 	bl	8001c24 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe ff03 	bl	8001c24 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	@ 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e103      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e40:	4b6f      	ldr	r3, [pc, #444]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a6e      	ldr	r2, [pc, #440]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e02d      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x334>
 8002e56:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a69      	ldr	r2, [pc, #420]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a66      	ldr	r2, [pc, #408]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x356>
 8002e78:	4b61      	ldr	r3, [pc, #388]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a60      	ldr	r2, [pc, #384]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	4b5e      	ldr	r3, [pc, #376]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e92:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b58      	ldr	r3, [pc, #352]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a57      	ldr	r2, [pc, #348]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe feb7 	bl	8001c24 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe feb3 	bl	8001c24 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0b1      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCC_OscConfig+0x37e>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fea1 	bl	8001c24 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fe9d 	bl	8001c24 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e09b      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	4b40      	ldr	r3, [pc, #256]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d061      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d146      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b33      	ldr	r3, [pc, #204]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fe71 	bl	8001c24 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fe6d 	bl	8001c24 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e06d      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	4921      	ldr	r1, [pc, #132]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a19      	ldr	r1, [r3, #32]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	430b      	orrs	r3, r1
 8002f92:	491b      	ldr	r1, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fe41 	bl	8001c24 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fe3d 	bl	8001c24 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e03d      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
 8002fc4:	e035      	b.n	8003032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fe2a 	bl	8001c24 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe fe26 	bl	8001c24 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e026      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x498>
 8002ff2:	e01e      	b.n	8003032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e019      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
 8003000:	40021000 	.word	0x40021000
 8003004:	40007000 	.word	0x40007000
 8003008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_OscConfig+0x500>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d0      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4965      	ldr	r1, [pc, #404]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d040      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d115      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e073      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06b      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4936      	ldr	r1, [pc, #216]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7fe fd78 	bl	8001c24 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fe fd74 	bl	8001c24 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e053      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d210      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4922      	ldr	r1, [pc, #136]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	@ (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1cc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fcd6 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	08008758 	.word	0x08008758
 800320c:	20000004 	.word	0x20000004
 8003210:	20000008 	.word	0x20000008

08003214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x30>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x36>
 8003242:	e027      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	613b      	str	r3, [r7, #16]
      break;
 8003248:	e027      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a17      	ldr	r2, [pc, #92]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003262:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0c5b      	lsrs	r3, r3, #17
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	4a11      	ldr	r2, [pc, #68]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0d      	ldr	r2, [pc, #52]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003276:	fb03 f202 	mul.w	r2, r3, r2
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e004      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	613b      	str	r3, [r7, #16]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	613b      	str	r3, [r7, #16]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	693b      	ldr	r3, [r7, #16]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	08008770 	.word	0x08008770
 80032b4:	08008780 	.word	0x08008780
 80032b8:	003d0900 	.word	0x003d0900

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x10>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff2 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000
 80032f4:	08008768 	.word	0x08008768

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff ffde 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0adb      	lsrs	r3, r3, #11
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08008768 	.word	0x08008768

08003320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <RCC_Delay+0x34>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <RCC_Delay+0x38>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a5b      	lsrs	r3, r3, #9
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800333c:	bf00      	nop
  }
  while (Delay --);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <RCC_Delay+0x1c>
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000004 	.word	0x20000004
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e041      	b.n	80033f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe fa62 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f000 fa8a 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e03a      	b.n	800348a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_TIM_Base_Start_IT+0x98>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343e:	d009      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <HAL_TIM_Base_Start_IT+0x9c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x58>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <HAL_TIM_Base_Start_IT+0xa0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d111      	bne.n	8003478 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d010      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	e007      	b.n	8003488 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_TIM_Base_Stop_IT+0x48>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_Base_Stop_IT+0x48>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0202 	mvn.w	r2, #2
 8003530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f998 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f98b 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f99a 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d020      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f972 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f965 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f974 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d020      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0208 	mvn.w	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f94c 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f93f 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f94e 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f926 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f919 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f928 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0201 	mvn.w	r2, #1
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe f848 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa7f 	bl	8003b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8f8 	bl	80038a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0220 	mvn.w	r2, #32
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa52 	bl	8003b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_ConfigClockSource+0x1c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0b4      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x186>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800371e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003730:	d03e      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003736:	f200 8087 	bhi.w	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373e:	f000 8086 	beq.w	800384e <HAL_TIM_ConfigClockSource+0x172>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003746:	d87f      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b70      	cmp	r3, #112	@ 0x70
 800374a:	d01a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xa6>
 800374c:	2b70      	cmp	r3, #112	@ 0x70
 800374e:	d87b      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b60      	cmp	r3, #96	@ 0x60
 8003752:	d050      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003754:	2b60      	cmp	r3, #96	@ 0x60
 8003756:	d877      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b50      	cmp	r3, #80	@ 0x50
 800375a:	d03c      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xfa>
 800375c:	2b50      	cmp	r3, #80	@ 0x50
 800375e:	d873      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d058      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x13a>
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	d86f      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b30      	cmp	r3, #48	@ 0x30
 800376a:	d064      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b30      	cmp	r3, #48	@ 0x30
 800376e:	d86b      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d060      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d867      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05c      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b10      	cmp	r3, #16
 800377e:	d05a      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	e062      	b.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003792:	f000 f974 	bl	8003a7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	609a      	str	r2, [r3, #8]
      break;
 80037ae:	e04f      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	f000 f95d 	bl	8003a7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037d2:	609a      	str	r2, [r3, #8]
      break;
 80037d4:	e03c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 f8d4 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2150      	movs	r1, #80	@ 0x50
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f92b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 80037f4:	e02c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003802:	461a      	mov	r2, r3
 8003804:	f000 f8f2 	bl	80039ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2160      	movs	r1, #96	@ 0x60
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f91b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003814:	e01c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	461a      	mov	r2, r3
 8003824:	f000 f8b4 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2140      	movs	r1, #64	@ 0x40
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f90b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003834:	e00c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f000 f902 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003846:	e003      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e000      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800384e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
	...

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003984 <TIM_Base_SetConfig+0xd0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <TIM_Base_SetConfig+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2b      	ldr	r2, [pc, #172]	@ (800398c <TIM_Base_SetConfig+0xd8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a22      	ldr	r2, [pc, #136]	@ (8003984 <TIM_Base_SetConfig+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <TIM_Base_SetConfig+0xd4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <TIM_Base_SetConfig+0xd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <TIM_Base_SetConfig+0xd0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d103      	bne.n	800395c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]
  }
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 030a 	bic.w	r3, r3, #10
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f023 0210 	bic.w	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f043 0307 	orr.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e046      	b.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b20:	d009      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a10      	ldr	r2, [pc, #64]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10c      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800

08003b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e042      	b.n	8003c34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fe66 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	@ 0x24
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f971 	bl	8003ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d175      	bne.n	8003d48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Transmit+0x2c>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e06e      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2221      	movs	r2, #33	@ 0x21
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd ffd3 	bl	8001c24 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c94:	d108      	bne.n	8003ca8 <HAL_UART_Transmit+0x6c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e003      	b.n	8003cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb0:	e02e      	b.n	8003d10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	@ 0x80
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f848 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e03a      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3302      	adds	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e007      	b.n	8003d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1cb      	bne.n	8003cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	@ 0x40
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f814 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e006      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	e03b      	b.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d037      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6c:	f7fd ff5a 	bl	8001c24 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e03a      	b.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d023      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b80      	cmp	r3, #128	@ 0x80
 8003d98:	d020      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d01d      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d116      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f81d 	bl	8003e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00f      	b.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d0b4      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b095      	sub	sp, #84	@ 0x54
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e9c:	61ba      	str	r2, [r7, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6979      	ldr	r1, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ebe:	bf00      	nop
 8003ec0:	3754      	adds	r7, #84	@ 0x54
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f02:	f023 030c 	bic.w	r3, r3, #12
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fdc <UART_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7ff f9e2 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	e002      	b.n	8003f3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7ff f9ca 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	0119      	lsls	r1, r3, #4
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f76:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2064      	movs	r0, #100	@ 0x64
 8003f7e:	fb00 f303 	mul.w	r3, r0, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	@ 0x32
 8003f88:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f94:	4419      	add	r1, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003fae:	fba3 0302 	umull	r0, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2064      	movs	r0, #100	@ 0x64
 8003fb6:	fb00 f303 	mul.w	r3, r0, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	@ 0x32
 8003fc0:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <__cvt>:
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fea:	461d      	mov	r5, r3
 8003fec:	bfbb      	ittet	lt
 8003fee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	461d      	movlt	r5, r3
 8003ff4:	2300      	movge	r3, #0
 8003ff6:	232d      	movlt	r3, #45	@ 0x2d
 8003ff8:	b088      	sub	sp, #32
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	bfb8      	it	lt
 8003ffe:	4614      	movlt	r4, r2
 8004000:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004002:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004004:	7013      	strb	r3, [r2, #0]
 8004006:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004008:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800400c:	f023 0820 	bic.w	r8, r3, #32
 8004010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004014:	d005      	beq.n	8004022 <__cvt+0x3e>
 8004016:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800401a:	d100      	bne.n	800401e <__cvt+0x3a>
 800401c:	3601      	adds	r6, #1
 800401e:	2302      	movs	r3, #2
 8004020:	e000      	b.n	8004024 <__cvt+0x40>
 8004022:	2303      	movs	r3, #3
 8004024:	aa07      	add	r2, sp, #28
 8004026:	9204      	str	r2, [sp, #16]
 8004028:	aa06      	add	r2, sp, #24
 800402a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800402e:	e9cd 3600 	strd	r3, r6, [sp]
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	f001 f8b7 	bl	80051a8 <_dtoa_r>
 800403a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800403e:	4607      	mov	r7, r0
 8004040:	d119      	bne.n	8004076 <__cvt+0x92>
 8004042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004044:	07db      	lsls	r3, r3, #31
 8004046:	d50e      	bpl.n	8004066 <__cvt+0x82>
 8004048:	eb00 0906 	add.w	r9, r0, r6
 800404c:	2200      	movs	r2, #0
 800404e:	2300      	movs	r3, #0
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8004058:	b108      	cbz	r0, 800405e <__cvt+0x7a>
 800405a:	f8cd 901c 	str.w	r9, [sp, #28]
 800405e:	2230      	movs	r2, #48	@ 0x30
 8004060:	9b07      	ldr	r3, [sp, #28]
 8004062:	454b      	cmp	r3, r9
 8004064:	d31e      	bcc.n	80040a4 <__cvt+0xc0>
 8004066:	4638      	mov	r0, r7
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800406c:	1bdb      	subs	r3, r3, r7
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	b008      	add	sp, #32
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800407a:	eb00 0906 	add.w	r9, r0, r6
 800407e:	d1e5      	bne.n	800404c <__cvt+0x68>
 8004080:	7803      	ldrb	r3, [r0, #0]
 8004082:	2b30      	cmp	r3, #48	@ 0x30
 8004084:	d10a      	bne.n	800409c <__cvt+0xb8>
 8004086:	2200      	movs	r2, #0
 8004088:	2300      	movs	r3, #0
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f7fc fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8004092:	b918      	cbnz	r0, 800409c <__cvt+0xb8>
 8004094:	f1c6 0601 	rsb	r6, r6, #1
 8004098:	f8ca 6000 	str.w	r6, [sl]
 800409c:	f8da 3000 	ldr.w	r3, [sl]
 80040a0:	4499      	add	r9, r3
 80040a2:	e7d3      	b.n	800404c <__cvt+0x68>
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	9107      	str	r1, [sp, #28]
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e7d9      	b.n	8004060 <__cvt+0x7c>

080040ac <__exponent>:
 80040ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ae:	2900      	cmp	r1, #0
 80040b0:	bfb6      	itet	lt
 80040b2:	232d      	movlt	r3, #45	@ 0x2d
 80040b4:	232b      	movge	r3, #43	@ 0x2b
 80040b6:	4249      	neglt	r1, r1
 80040b8:	2909      	cmp	r1, #9
 80040ba:	7002      	strb	r2, [r0, #0]
 80040bc:	7043      	strb	r3, [r0, #1]
 80040be:	dd29      	ble.n	8004114 <__exponent+0x68>
 80040c0:	f10d 0307 	add.w	r3, sp, #7
 80040c4:	461d      	mov	r5, r3
 80040c6:	270a      	movs	r7, #10
 80040c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80040cc:	461a      	mov	r2, r3
 80040ce:	fb07 1416 	mls	r4, r7, r6, r1
 80040d2:	3430      	adds	r4, #48	@ 0x30
 80040d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040d8:	460c      	mov	r4, r1
 80040da:	2c63      	cmp	r4, #99	@ 0x63
 80040dc:	4631      	mov	r1, r6
 80040de:	f103 33ff 	add.w	r3, r3, #4294967295
 80040e2:	dcf1      	bgt.n	80040c8 <__exponent+0x1c>
 80040e4:	3130      	adds	r1, #48	@ 0x30
 80040e6:	1e94      	subs	r4, r2, #2
 80040e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040ec:	4623      	mov	r3, r4
 80040ee:	1c41      	adds	r1, r0, #1
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	d30a      	bcc.n	800410a <__exponent+0x5e>
 80040f4:	f10d 0309 	add.w	r3, sp, #9
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	42ac      	cmp	r4, r5
 80040fc:	bf88      	it	hi
 80040fe:	2300      	movhi	r3, #0
 8004100:	3302      	adds	r3, #2
 8004102:	4403      	add	r3, r0
 8004104:	1a18      	subs	r0, r3, r0
 8004106:	b003      	add	sp, #12
 8004108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800410e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004112:	e7ed      	b.n	80040f0 <__exponent+0x44>
 8004114:	2330      	movs	r3, #48	@ 0x30
 8004116:	3130      	adds	r1, #48	@ 0x30
 8004118:	7083      	strb	r3, [r0, #2]
 800411a:	70c1      	strb	r1, [r0, #3]
 800411c:	1d03      	adds	r3, r0, #4
 800411e:	e7f1      	b.n	8004104 <__exponent+0x58>

08004120 <_printf_float>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	b091      	sub	sp, #68	@ 0x44
 8004126:	460c      	mov	r4, r1
 8004128:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800412c:	4616      	mov	r6, r2
 800412e:	461f      	mov	r7, r3
 8004130:	4605      	mov	r5, r0
 8004132:	f000 ff25 	bl	8004f80 <_localeconv_r>
 8004136:	6803      	ldr	r3, [r0, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	9308      	str	r3, [sp, #32]
 800413c:	f7fc f808 	bl	8000150 <strlen>
 8004140:	2300      	movs	r3, #0
 8004142:	930e      	str	r3, [sp, #56]	@ 0x38
 8004144:	f8d8 3000 	ldr.w	r3, [r8]
 8004148:	9009      	str	r0, [sp, #36]	@ 0x24
 800414a:	3307      	adds	r3, #7
 800414c:	f023 0307 	bic.w	r3, r3, #7
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004158:	f8d4 b000 	ldr.w	fp, [r4]
 800415c:	f8c8 2000 	str.w	r2, [r8]
 8004160:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004164:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800416a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800417a:	4b9c      	ldr	r3, [pc, #624]	@ (80043ec <_printf_float+0x2cc>)
 800417c:	f7fc fc46 	bl	8000a0c <__aeabi_dcmpun>
 8004180:	bb70      	cbnz	r0, 80041e0 <_printf_float+0xc0>
 8004182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	4b98      	ldr	r3, [pc, #608]	@ (80043ec <_printf_float+0x2cc>)
 800418c:	f7fc fc20 	bl	80009d0 <__aeabi_dcmple>
 8004190:	bb30      	cbnz	r0, 80041e0 <_printf_float+0xc0>
 8004192:	2200      	movs	r2, #0
 8004194:	2300      	movs	r3, #0
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f7fc fc0f 	bl	80009bc <__aeabi_dcmplt>
 800419e:	b110      	cbz	r0, 80041a6 <_printf_float+0x86>
 80041a0:	232d      	movs	r3, #45	@ 0x2d
 80041a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a6:	4a92      	ldr	r2, [pc, #584]	@ (80043f0 <_printf_float+0x2d0>)
 80041a8:	4b92      	ldr	r3, [pc, #584]	@ (80043f4 <_printf_float+0x2d4>)
 80041aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041ae:	bf94      	ite	ls
 80041b0:	4690      	movls	r8, r2
 80041b2:	4698      	movhi	r8, r3
 80041b4:	2303      	movs	r3, #3
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	f02b 0304 	bic.w	r3, fp, #4
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	4633      	mov	r3, r6
 80041c4:	4621      	mov	r1, r4
 80041c6:	4628      	mov	r0, r5
 80041c8:	9700      	str	r7, [sp, #0]
 80041ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80041cc:	f000 f9d4 	bl	8004578 <_printf_common>
 80041d0:	3001      	adds	r0, #1
 80041d2:	f040 8090 	bne.w	80042f6 <_printf_float+0x1d6>
 80041d6:	f04f 30ff 	mov.w	r0, #4294967295
 80041da:	b011      	add	sp, #68	@ 0x44
 80041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	4649      	mov	r1, r9
 80041e8:	f7fc fc10 	bl	8000a0c <__aeabi_dcmpun>
 80041ec:	b148      	cbz	r0, 8004202 <_printf_float+0xe2>
 80041ee:	464b      	mov	r3, r9
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfb8      	it	lt
 80041f4:	232d      	movlt	r3, #45	@ 0x2d
 80041f6:	4a80      	ldr	r2, [pc, #512]	@ (80043f8 <_printf_float+0x2d8>)
 80041f8:	bfb8      	it	lt
 80041fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041fe:	4b7f      	ldr	r3, [pc, #508]	@ (80043fc <_printf_float+0x2dc>)
 8004200:	e7d3      	b.n	80041aa <_printf_float+0x8a>
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	d13f      	bne.n	800428c <_printf_float+0x16c>
 800420c:	2306      	movs	r3, #6
 800420e:	6063      	str	r3, [r4, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	9206      	str	r2, [sp, #24]
 800421a:	aa0e      	add	r2, sp, #56	@ 0x38
 800421c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004220:	aa0d      	add	r2, sp, #52	@ 0x34
 8004222:	9203      	str	r2, [sp, #12]
 8004224:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004228:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	4642      	mov	r2, r8
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4628      	mov	r0, r5
 8004234:	464b      	mov	r3, r9
 8004236:	910a      	str	r1, [sp, #40]	@ 0x28
 8004238:	f7ff fed4 	bl	8003fe4 <__cvt>
 800423c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800423e:	4680      	mov	r8, r0
 8004240:	2947      	cmp	r1, #71	@ 0x47
 8004242:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004244:	d128      	bne.n	8004298 <_printf_float+0x178>
 8004246:	1cc8      	adds	r0, r1, #3
 8004248:	db02      	blt.n	8004250 <_printf_float+0x130>
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	4299      	cmp	r1, r3
 800424e:	dd40      	ble.n	80042d2 <_printf_float+0x1b2>
 8004250:	f1aa 0a02 	sub.w	sl, sl, #2
 8004254:	fa5f fa8a 	uxtb.w	sl, sl
 8004258:	4652      	mov	r2, sl
 800425a:	3901      	subs	r1, #1
 800425c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004260:	910d      	str	r1, [sp, #52]	@ 0x34
 8004262:	f7ff ff23 	bl	80040ac <__exponent>
 8004266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004268:	4681      	mov	r9, r0
 800426a:	1813      	adds	r3, r2, r0
 800426c:	2a01      	cmp	r2, #1
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	dc02      	bgt.n	8004278 <_printf_float+0x158>
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	07d2      	lsls	r2, r2, #31
 8004276:	d501      	bpl.n	800427c <_printf_float+0x15c>
 8004278:	3301      	adds	r3, #1
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004280:	2b00      	cmp	r3, #0
 8004282:	d09e      	beq.n	80041c2 <_printf_float+0xa2>
 8004284:	232d      	movs	r3, #45	@ 0x2d
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800428a:	e79a      	b.n	80041c2 <_printf_float+0xa2>
 800428c:	2947      	cmp	r1, #71	@ 0x47
 800428e:	d1bf      	bne.n	8004210 <_printf_float+0xf0>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1bd      	bne.n	8004210 <_printf_float+0xf0>
 8004294:	2301      	movs	r3, #1
 8004296:	e7ba      	b.n	800420e <_printf_float+0xee>
 8004298:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800429c:	d9dc      	bls.n	8004258 <_printf_float+0x138>
 800429e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042a2:	d118      	bne.n	80042d6 <_printf_float+0x1b6>
 80042a4:	2900      	cmp	r1, #0
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	dd0b      	ble.n	80042c2 <_printf_float+0x1a2>
 80042aa:	6121      	str	r1, [r4, #16]
 80042ac:	b913      	cbnz	r3, 80042b4 <_printf_float+0x194>
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	07d0      	lsls	r0, r2, #31
 80042b2:	d502      	bpl.n	80042ba <_printf_float+0x19a>
 80042b4:	3301      	adds	r3, #1
 80042b6:	440b      	add	r3, r1
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	f04f 0900 	mov.w	r9, #0
 80042be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042c0:	e7dc      	b.n	800427c <_printf_float+0x15c>
 80042c2:	b913      	cbnz	r3, 80042ca <_printf_float+0x1aa>
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	07d2      	lsls	r2, r2, #31
 80042c8:	d501      	bpl.n	80042ce <_printf_float+0x1ae>
 80042ca:	3302      	adds	r3, #2
 80042cc:	e7f4      	b.n	80042b8 <_printf_float+0x198>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e7f2      	b.n	80042b8 <_printf_float+0x198>
 80042d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042d8:	4299      	cmp	r1, r3
 80042da:	db05      	blt.n	80042e8 <_printf_float+0x1c8>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	6121      	str	r1, [r4, #16]
 80042e0:	07d8      	lsls	r0, r3, #31
 80042e2:	d5ea      	bpl.n	80042ba <_printf_float+0x19a>
 80042e4:	1c4b      	adds	r3, r1, #1
 80042e6:	e7e7      	b.n	80042b8 <_printf_float+0x198>
 80042e8:	2900      	cmp	r1, #0
 80042ea:	bfcc      	ite	gt
 80042ec:	2201      	movgt	r2, #1
 80042ee:	f1c1 0202 	rsble	r2, r1, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	e7e0      	b.n	80042b8 <_printf_float+0x198>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	055a      	lsls	r2, r3, #21
 80042fa:	d407      	bmi.n	800430c <_printf_float+0x1ec>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	4642      	mov	r2, r8
 8004300:	4631      	mov	r1, r6
 8004302:	4628      	mov	r0, r5
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	d12b      	bne.n	8004362 <_printf_float+0x242>
 800430a:	e764      	b.n	80041d6 <_printf_float+0xb6>
 800430c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004310:	f240 80dc 	bls.w	80044cc <_printf_float+0x3ac>
 8004314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004318:	2200      	movs	r2, #0
 800431a:	2300      	movs	r3, #0
 800431c:	f7fc fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8004320:	2800      	cmp	r0, #0
 8004322:	d033      	beq.n	800438c <_printf_float+0x26c>
 8004324:	2301      	movs	r3, #1
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	4a35      	ldr	r2, [pc, #212]	@ (8004400 <_printf_float+0x2e0>)
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f af51 	beq.w	80041d6 <_printf_float+0xb6>
 8004334:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004338:	4543      	cmp	r3, r8
 800433a:	db02      	blt.n	8004342 <_printf_float+0x222>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	07d8      	lsls	r0, r3, #31
 8004340:	d50f      	bpl.n	8004362 <_printf_float+0x242>
 8004342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	f43f af42 	beq.w	80041d6 <_printf_float+0xb6>
 8004352:	f04f 0900 	mov.w	r9, #0
 8004356:	f108 38ff 	add.w	r8, r8, #4294967295
 800435a:	f104 0a1a 	add.w	sl, r4, #26
 800435e:	45c8      	cmp	r8, r9
 8004360:	dc09      	bgt.n	8004376 <_printf_float+0x256>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	079b      	lsls	r3, r3, #30
 8004366:	f100 8102 	bmi.w	800456e <_printf_float+0x44e>
 800436a:	68e0      	ldr	r0, [r4, #12]
 800436c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800436e:	4298      	cmp	r0, r3
 8004370:	bfb8      	it	lt
 8004372:	4618      	movlt	r0, r3
 8004374:	e731      	b.n	80041da <_printf_float+0xba>
 8004376:	2301      	movs	r3, #1
 8004378:	4652      	mov	r2, sl
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f af28 	beq.w	80041d6 <_printf_float+0xb6>
 8004386:	f109 0901 	add.w	r9, r9, #1
 800438a:	e7e8      	b.n	800435e <_printf_float+0x23e>
 800438c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	dc38      	bgt.n	8004404 <_printf_float+0x2e4>
 8004392:	2301      	movs	r3, #1
 8004394:	4631      	mov	r1, r6
 8004396:	4628      	mov	r0, r5
 8004398:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <_printf_float+0x2e0>)
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f af1a 	beq.w	80041d6 <_printf_float+0xb6>
 80043a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80043a6:	ea59 0303 	orrs.w	r3, r9, r3
 80043aa:	d102      	bne.n	80043b2 <_printf_float+0x292>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	07d9      	lsls	r1, r3, #31
 80043b0:	d5d7      	bpl.n	8004362 <_printf_float+0x242>
 80043b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	47b8      	blx	r7
 80043bc:	3001      	adds	r0, #1
 80043be:	f43f af0a 	beq.w	80041d6 <_printf_float+0xb6>
 80043c2:	f04f 0a00 	mov.w	sl, #0
 80043c6:	f104 0b1a 	add.w	fp, r4, #26
 80043ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043cc:	425b      	negs	r3, r3
 80043ce:	4553      	cmp	r3, sl
 80043d0:	dc01      	bgt.n	80043d6 <_printf_float+0x2b6>
 80043d2:	464b      	mov	r3, r9
 80043d4:	e793      	b.n	80042fe <_printf_float+0x1de>
 80043d6:	2301      	movs	r3, #1
 80043d8:	465a      	mov	r2, fp
 80043da:	4631      	mov	r1, r6
 80043dc:	4628      	mov	r0, r5
 80043de:	47b8      	blx	r7
 80043e0:	3001      	adds	r0, #1
 80043e2:	f43f aef8 	beq.w	80041d6 <_printf_float+0xb6>
 80043e6:	f10a 0a01 	add.w	sl, sl, #1
 80043ea:	e7ee      	b.n	80043ca <_printf_float+0x2aa>
 80043ec:	7fefffff 	.word	0x7fefffff
 80043f0:	08008782 	.word	0x08008782
 80043f4:	08008786 	.word	0x08008786
 80043f8:	0800878a 	.word	0x0800878a
 80043fc:	0800878e 	.word	0x0800878e
 8004400:	08008792 	.word	0x08008792
 8004404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004406:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800440a:	4553      	cmp	r3, sl
 800440c:	bfa8      	it	ge
 800440e:	4653      	movge	r3, sl
 8004410:	2b00      	cmp	r3, #0
 8004412:	4699      	mov	r9, r3
 8004414:	dc36      	bgt.n	8004484 <_printf_float+0x364>
 8004416:	f04f 0b00 	mov.w	fp, #0
 800441a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800441e:	f104 021a 	add.w	r2, r4, #26
 8004422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004424:	930a      	str	r3, [sp, #40]	@ 0x28
 8004426:	eba3 0309 	sub.w	r3, r3, r9
 800442a:	455b      	cmp	r3, fp
 800442c:	dc31      	bgt.n	8004492 <_printf_float+0x372>
 800442e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004430:	459a      	cmp	sl, r3
 8004432:	dc3a      	bgt.n	80044aa <_printf_float+0x38a>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	07da      	lsls	r2, r3, #31
 8004438:	d437      	bmi.n	80044aa <_printf_float+0x38a>
 800443a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800443c:	ebaa 0903 	sub.w	r9, sl, r3
 8004440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004442:	ebaa 0303 	sub.w	r3, sl, r3
 8004446:	4599      	cmp	r9, r3
 8004448:	bfa8      	it	ge
 800444a:	4699      	movge	r9, r3
 800444c:	f1b9 0f00 	cmp.w	r9, #0
 8004450:	dc33      	bgt.n	80044ba <_printf_float+0x39a>
 8004452:	f04f 0800 	mov.w	r8, #0
 8004456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800445a:	f104 0b1a 	add.w	fp, r4, #26
 800445e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004460:	ebaa 0303 	sub.w	r3, sl, r3
 8004464:	eba3 0309 	sub.w	r3, r3, r9
 8004468:	4543      	cmp	r3, r8
 800446a:	f77f af7a 	ble.w	8004362 <_printf_float+0x242>
 800446e:	2301      	movs	r3, #1
 8004470:	465a      	mov	r2, fp
 8004472:	4631      	mov	r1, r6
 8004474:	4628      	mov	r0, r5
 8004476:	47b8      	blx	r7
 8004478:	3001      	adds	r0, #1
 800447a:	f43f aeac 	beq.w	80041d6 <_printf_float+0xb6>
 800447e:	f108 0801 	add.w	r8, r8, #1
 8004482:	e7ec      	b.n	800445e <_printf_float+0x33e>
 8004484:	4642      	mov	r2, r8
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	d1c2      	bne.n	8004416 <_printf_float+0x2f6>
 8004490:	e6a1      	b.n	80041d6 <_printf_float+0xb6>
 8004492:	2301      	movs	r3, #1
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	920a      	str	r2, [sp, #40]	@ 0x28
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f ae9a 	beq.w	80041d6 <_printf_float+0xb6>
 80044a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044a4:	f10b 0b01 	add.w	fp, fp, #1
 80044a8:	e7bb      	b.n	8004422 <_printf_float+0x302>
 80044aa:	4631      	mov	r1, r6
 80044ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1c0      	bne.n	800443a <_printf_float+0x31a>
 80044b8:	e68d      	b.n	80041d6 <_printf_float+0xb6>
 80044ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044bc:	464b      	mov	r3, r9
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	4442      	add	r2, r8
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	d1c3      	bne.n	8004452 <_printf_float+0x332>
 80044ca:	e684      	b.n	80041d6 <_printf_float+0xb6>
 80044cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044d0:	f1ba 0f01 	cmp.w	sl, #1
 80044d4:	dc01      	bgt.n	80044da <_printf_float+0x3ba>
 80044d6:	07db      	lsls	r3, r3, #31
 80044d8:	d536      	bpl.n	8004548 <_printf_float+0x428>
 80044da:	2301      	movs	r3, #1
 80044dc:	4642      	mov	r2, r8
 80044de:	4631      	mov	r1, r6
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	f43f ae76 	beq.w	80041d6 <_printf_float+0xb6>
 80044ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f ae6e 	beq.w	80041d6 <_printf_float+0xb6>
 80044fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004506:	f7fc fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800450a:	b9c0      	cbnz	r0, 800453e <_printf_float+0x41e>
 800450c:	4653      	mov	r3, sl
 800450e:	f108 0201 	add.w	r2, r8, #1
 8004512:	4631      	mov	r1, r6
 8004514:	4628      	mov	r0, r5
 8004516:	47b8      	blx	r7
 8004518:	3001      	adds	r0, #1
 800451a:	d10c      	bne.n	8004536 <_printf_float+0x416>
 800451c:	e65b      	b.n	80041d6 <_printf_float+0xb6>
 800451e:	2301      	movs	r3, #1
 8004520:	465a      	mov	r2, fp
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f ae54 	beq.w	80041d6 <_printf_float+0xb6>
 800452e:	f108 0801 	add.w	r8, r8, #1
 8004532:	45d0      	cmp	r8, sl
 8004534:	dbf3      	blt.n	800451e <_printf_float+0x3fe>
 8004536:	464b      	mov	r3, r9
 8004538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800453c:	e6e0      	b.n	8004300 <_printf_float+0x1e0>
 800453e:	f04f 0800 	mov.w	r8, #0
 8004542:	f104 0b1a 	add.w	fp, r4, #26
 8004546:	e7f4      	b.n	8004532 <_printf_float+0x412>
 8004548:	2301      	movs	r3, #1
 800454a:	4642      	mov	r2, r8
 800454c:	e7e1      	b.n	8004512 <_printf_float+0x3f2>
 800454e:	2301      	movs	r3, #1
 8004550:	464a      	mov	r2, r9
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	f43f ae3c 	beq.w	80041d6 <_printf_float+0xb6>
 800455e:	f108 0801 	add.w	r8, r8, #1
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004566:	1a5b      	subs	r3, r3, r1
 8004568:	4543      	cmp	r3, r8
 800456a:	dcf0      	bgt.n	800454e <_printf_float+0x42e>
 800456c:	e6fd      	b.n	800436a <_printf_float+0x24a>
 800456e:	f04f 0800 	mov.w	r8, #0
 8004572:	f104 0919 	add.w	r9, r4, #25
 8004576:	e7f4      	b.n	8004562 <_printf_float+0x442>

08004578 <_printf_common>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	4616      	mov	r6, r2
 800457e:	4698      	mov	r8, r3
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	4607      	mov	r7, r0
 8004586:	4293      	cmp	r3, r2
 8004588:	bfb8      	it	lt
 800458a:	4613      	movlt	r3, r2
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004592:	460c      	mov	r4, r1
 8004594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004598:	b10a      	cbz	r2, 800459e <_printf_common+0x26>
 800459a:	3301      	adds	r3, #1
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	0699      	lsls	r1, r3, #26
 80045a2:	bf42      	ittt	mi
 80045a4:	6833      	ldrmi	r3, [r6, #0]
 80045a6:	3302      	addmi	r3, #2
 80045a8:	6033      	strmi	r3, [r6, #0]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	f015 0506 	ands.w	r5, r5, #6
 80045b0:	d106      	bne.n	80045c0 <_printf_common+0x48>
 80045b2:	f104 0a19 	add.w	sl, r4, #25
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	6832      	ldr	r2, [r6, #0]
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dc2b      	bgt.n	8004618 <_printf_common+0xa0>
 80045c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	3b00      	subs	r3, #0
 80045c8:	bf18      	it	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	0692      	lsls	r2, r2, #26
 80045ce:	d430      	bmi.n	8004632 <_printf_common+0xba>
 80045d0:	4641      	mov	r1, r8
 80045d2:	4638      	mov	r0, r7
 80045d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d023      	beq.n	8004626 <_printf_common+0xae>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf14      	ite	ne
 80045ea:	2500      	movne	r5, #0
 80045ec:	6833      	ldreq	r3, [r6, #0]
 80045ee:	f04f 0600 	mov.w	r6, #0
 80045f2:	bf08      	it	eq
 80045f4:	68e5      	ldreq	r5, [r4, #12]
 80045f6:	f104 041a 	add.w	r4, r4, #26
 80045fa:	bf08      	it	eq
 80045fc:	1aed      	subeq	r5, r5, r3
 80045fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004602:	bf08      	it	eq
 8004604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004608:	4293      	cmp	r3, r2
 800460a:	bfc4      	itt	gt
 800460c:	1a9b      	subgt	r3, r3, r2
 800460e:	18ed      	addgt	r5, r5, r3
 8004610:	42b5      	cmp	r5, r6
 8004612:	d11a      	bne.n	800464a <_printf_common+0xd2>
 8004614:	2000      	movs	r0, #0
 8004616:	e008      	b.n	800462a <_printf_common+0xb2>
 8004618:	2301      	movs	r3, #1
 800461a:	4652      	mov	r2, sl
 800461c:	4641      	mov	r1, r8
 800461e:	4638      	mov	r0, r7
 8004620:	47c8      	blx	r9
 8004622:	3001      	adds	r0, #1
 8004624:	d103      	bne.n	800462e <_printf_common+0xb6>
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462e:	3501      	adds	r5, #1
 8004630:	e7c1      	b.n	80045b6 <_printf_common+0x3e>
 8004632:	2030      	movs	r0, #48	@ 0x30
 8004634:	18e1      	adds	r1, r4, r3
 8004636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004640:	4422      	add	r2, r4
 8004642:	3302      	adds	r3, #2
 8004644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004648:	e7c2      	b.n	80045d0 <_printf_common+0x58>
 800464a:	2301      	movs	r3, #1
 800464c:	4622      	mov	r2, r4
 800464e:	4641      	mov	r1, r8
 8004650:	4638      	mov	r0, r7
 8004652:	47c8      	blx	r9
 8004654:	3001      	adds	r0, #1
 8004656:	d0e6      	beq.n	8004626 <_printf_common+0xae>
 8004658:	3601      	adds	r6, #1
 800465a:	e7d9      	b.n	8004610 <_printf_common+0x98>

0800465c <_printf_i>:
 800465c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	7e0f      	ldrb	r7, [r1, #24]
 8004662:	4691      	mov	r9, r2
 8004664:	2f78      	cmp	r7, #120	@ 0x78
 8004666:	4680      	mov	r8, r0
 8004668:	460c      	mov	r4, r1
 800466a:	469a      	mov	sl, r3
 800466c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800466e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004672:	d807      	bhi.n	8004684 <_printf_i+0x28>
 8004674:	2f62      	cmp	r7, #98	@ 0x62
 8004676:	d80a      	bhi.n	800468e <_printf_i+0x32>
 8004678:	2f00      	cmp	r7, #0
 800467a:	f000 80d3 	beq.w	8004824 <_printf_i+0x1c8>
 800467e:	2f58      	cmp	r7, #88	@ 0x58
 8004680:	f000 80ba 	beq.w	80047f8 <_printf_i+0x19c>
 8004684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800468c:	e03a      	b.n	8004704 <_printf_i+0xa8>
 800468e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004692:	2b15      	cmp	r3, #21
 8004694:	d8f6      	bhi.n	8004684 <_printf_i+0x28>
 8004696:	a101      	add	r1, pc, #4	@ (adr r1, 800469c <_printf_i+0x40>)
 8004698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	08004709 	.word	0x08004709
 80046a4:	08004685 	.word	0x08004685
 80046a8:	08004685 	.word	0x08004685
 80046ac:	08004685 	.word	0x08004685
 80046b0:	08004685 	.word	0x08004685
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004685 	.word	0x08004685
 80046bc:	08004685 	.word	0x08004685
 80046c0:	08004685 	.word	0x08004685
 80046c4:	08004685 	.word	0x08004685
 80046c8:	0800480b 	.word	0x0800480b
 80046cc:	08004733 	.word	0x08004733
 80046d0:	080047c5 	.word	0x080047c5
 80046d4:	08004685 	.word	0x08004685
 80046d8:	08004685 	.word	0x08004685
 80046dc:	0800482d 	.word	0x0800482d
 80046e0:	08004685 	.word	0x08004685
 80046e4:	08004733 	.word	0x08004733
 80046e8:	08004685 	.word	0x08004685
 80046ec:	08004685 	.word	0x08004685
 80046f0:	080047cd 	.word	0x080047cd
 80046f4:	6833      	ldr	r3, [r6, #0]
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6032      	str	r2, [r6, #0]
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004704:	2301      	movs	r3, #1
 8004706:	e09e      	b.n	8004846 <_printf_i+0x1ea>
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	6031      	str	r1, [r6, #0]
 8004710:	0606      	lsls	r6, r0, #24
 8004712:	d501      	bpl.n	8004718 <_printf_i+0xbc>
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	e003      	b.n	8004720 <_printf_i+0xc4>
 8004718:	0645      	lsls	r5, r0, #25
 800471a:	d5fb      	bpl.n	8004714 <_printf_i+0xb8>
 800471c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004720:	2d00      	cmp	r5, #0
 8004722:	da03      	bge.n	800472c <_printf_i+0xd0>
 8004724:	232d      	movs	r3, #45	@ 0x2d
 8004726:	426d      	negs	r5, r5
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800472c:	230a      	movs	r3, #10
 800472e:	4859      	ldr	r0, [pc, #356]	@ (8004894 <_printf_i+0x238>)
 8004730:	e011      	b.n	8004756 <_printf_i+0xfa>
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	0608      	lsls	r0, r1, #24
 8004738:	f853 5b04 	ldr.w	r5, [r3], #4
 800473c:	d402      	bmi.n	8004744 <_printf_i+0xe8>
 800473e:	0649      	lsls	r1, r1, #25
 8004740:	bf48      	it	mi
 8004742:	b2ad      	uxthmi	r5, r5
 8004744:	2f6f      	cmp	r7, #111	@ 0x6f
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	bf14      	ite	ne
 800474a:	230a      	movne	r3, #10
 800474c:	2308      	moveq	r3, #8
 800474e:	4851      	ldr	r0, [pc, #324]	@ (8004894 <_printf_i+0x238>)
 8004750:	2100      	movs	r1, #0
 8004752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004756:	6866      	ldr	r6, [r4, #4]
 8004758:	2e00      	cmp	r6, #0
 800475a:	bfa8      	it	ge
 800475c:	6821      	ldrge	r1, [r4, #0]
 800475e:	60a6      	str	r6, [r4, #8]
 8004760:	bfa4      	itt	ge
 8004762:	f021 0104 	bicge.w	r1, r1, #4
 8004766:	6021      	strge	r1, [r4, #0]
 8004768:	b90d      	cbnz	r5, 800476e <_printf_i+0x112>
 800476a:	2e00      	cmp	r6, #0
 800476c:	d04b      	beq.n	8004806 <_printf_i+0x1aa>
 800476e:	4616      	mov	r6, r2
 8004770:	fbb5 f1f3 	udiv	r1, r5, r3
 8004774:	fb03 5711 	mls	r7, r3, r1, r5
 8004778:	5dc7      	ldrb	r7, [r0, r7]
 800477a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800477e:	462f      	mov	r7, r5
 8004780:	42bb      	cmp	r3, r7
 8004782:	460d      	mov	r5, r1
 8004784:	d9f4      	bls.n	8004770 <_printf_i+0x114>
 8004786:	2b08      	cmp	r3, #8
 8004788:	d10b      	bne.n	80047a2 <_printf_i+0x146>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	07df      	lsls	r7, r3, #31
 800478e:	d508      	bpl.n	80047a2 <_printf_i+0x146>
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	6861      	ldr	r1, [r4, #4]
 8004794:	4299      	cmp	r1, r3
 8004796:	bfde      	ittt	le
 8004798:	2330      	movle	r3, #48	@ 0x30
 800479a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800479e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047a2:	1b92      	subs	r2, r2, r6
 80047a4:	6122      	str	r2, [r4, #16]
 80047a6:	464b      	mov	r3, r9
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f8cd a000 	str.w	sl, [sp]
 80047b0:	aa03      	add	r2, sp, #12
 80047b2:	f7ff fee1 	bl	8004578 <_printf_common>
 80047b6:	3001      	adds	r0, #1
 80047b8:	d14a      	bne.n	8004850 <_printf_i+0x1f4>
 80047ba:	f04f 30ff 	mov.w	r0, #4294967295
 80047be:	b004      	add	sp, #16
 80047c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	2778      	movs	r7, #120	@ 0x78
 80047ce:	4832      	ldr	r0, [pc, #200]	@ (8004898 <_printf_i+0x23c>)
 80047d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	061f      	lsls	r7, r3, #24
 80047da:	f851 5b04 	ldr.w	r5, [r1], #4
 80047de:	d402      	bmi.n	80047e6 <_printf_i+0x18a>
 80047e0:	065f      	lsls	r7, r3, #25
 80047e2:	bf48      	it	mi
 80047e4:	b2ad      	uxthmi	r5, r5
 80047e6:	6031      	str	r1, [r6, #0]
 80047e8:	07d9      	lsls	r1, r3, #31
 80047ea:	bf44      	itt	mi
 80047ec:	f043 0320 	orrmi.w	r3, r3, #32
 80047f0:	6023      	strmi	r3, [r4, #0]
 80047f2:	b11d      	cbz	r5, 80047fc <_printf_i+0x1a0>
 80047f4:	2310      	movs	r3, #16
 80047f6:	e7ab      	b.n	8004750 <_printf_i+0xf4>
 80047f8:	4826      	ldr	r0, [pc, #152]	@ (8004894 <_printf_i+0x238>)
 80047fa:	e7e9      	b.n	80047d0 <_printf_i+0x174>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f023 0320 	bic.w	r3, r3, #32
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	e7f6      	b.n	80047f4 <_printf_i+0x198>
 8004806:	4616      	mov	r6, r2
 8004808:	e7bd      	b.n	8004786 <_printf_i+0x12a>
 800480a:	6833      	ldr	r3, [r6, #0]
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	1d18      	adds	r0, r3, #4
 8004810:	6961      	ldr	r1, [r4, #20]
 8004812:	6030      	str	r0, [r6, #0]
 8004814:	062e      	lsls	r6, r5, #24
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	d501      	bpl.n	800481e <_printf_i+0x1c2>
 800481a:	6019      	str	r1, [r3, #0]
 800481c:	e002      	b.n	8004824 <_printf_i+0x1c8>
 800481e:	0668      	lsls	r0, r5, #25
 8004820:	d5fb      	bpl.n	800481a <_printf_i+0x1be>
 8004822:	8019      	strh	r1, [r3, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	4616      	mov	r6, r2
 8004828:	6123      	str	r3, [r4, #16]
 800482a:	e7bc      	b.n	80047a6 <_printf_i+0x14a>
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	2100      	movs	r1, #0
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	6032      	str	r2, [r6, #0]
 8004834:	681e      	ldr	r6, [r3, #0]
 8004836:	6862      	ldr	r2, [r4, #4]
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fc18 	bl	800506e <memchr>
 800483e:	b108      	cbz	r0, 8004844 <_printf_i+0x1e8>
 8004840:	1b80      	subs	r0, r0, r6
 8004842:	6060      	str	r0, [r4, #4]
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	2300      	movs	r3, #0
 800484a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800484e:	e7aa      	b.n	80047a6 <_printf_i+0x14a>
 8004850:	4632      	mov	r2, r6
 8004852:	4649      	mov	r1, r9
 8004854:	4640      	mov	r0, r8
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	47d0      	blx	sl
 800485a:	3001      	adds	r0, #1
 800485c:	d0ad      	beq.n	80047ba <_printf_i+0x15e>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	079b      	lsls	r3, r3, #30
 8004862:	d413      	bmi.n	800488c <_printf_i+0x230>
 8004864:	68e0      	ldr	r0, [r4, #12]
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	4298      	cmp	r0, r3
 800486a:	bfb8      	it	lt
 800486c:	4618      	movlt	r0, r3
 800486e:	e7a6      	b.n	80047be <_printf_i+0x162>
 8004870:	2301      	movs	r3, #1
 8004872:	4632      	mov	r2, r6
 8004874:	4649      	mov	r1, r9
 8004876:	4640      	mov	r0, r8
 8004878:	47d0      	blx	sl
 800487a:	3001      	adds	r0, #1
 800487c:	d09d      	beq.n	80047ba <_printf_i+0x15e>
 800487e:	3501      	adds	r5, #1
 8004880:	68e3      	ldr	r3, [r4, #12]
 8004882:	9903      	ldr	r1, [sp, #12]
 8004884:	1a5b      	subs	r3, r3, r1
 8004886:	42ab      	cmp	r3, r5
 8004888:	dcf2      	bgt.n	8004870 <_printf_i+0x214>
 800488a:	e7eb      	b.n	8004864 <_printf_i+0x208>
 800488c:	2500      	movs	r5, #0
 800488e:	f104 0619 	add.w	r6, r4, #25
 8004892:	e7f5      	b.n	8004880 <_printf_i+0x224>
 8004894:	08008794 	.word	0x08008794
 8004898:	080087a5 	.word	0x080087a5

0800489c <_scanf_float>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b087      	sub	sp, #28
 80048a2:	9303      	str	r3, [sp, #12]
 80048a4:	688b      	ldr	r3, [r1, #8]
 80048a6:	4617      	mov	r7, r2
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048ae:	bf82      	ittt	hi
 80048b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80048b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048bc:	460a      	mov	r2, r1
 80048be:	f04f 0500 	mov.w	r5, #0
 80048c2:	bf88      	it	hi
 80048c4:	608b      	strhi	r3, [r1, #8]
 80048c6:	680b      	ldr	r3, [r1, #0]
 80048c8:	4680      	mov	r8, r0
 80048ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80048ce:	f842 3b1c 	str.w	r3, [r2], #28
 80048d2:	460c      	mov	r4, r1
 80048d4:	bf98      	it	ls
 80048d6:	f04f 0b00 	movls.w	fp, #0
 80048da:	4616      	mov	r6, r2
 80048dc:	46aa      	mov	sl, r5
 80048de:	46a9      	mov	r9, r5
 80048e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	9502      	str	r5, [sp, #8]
 80048e8:	68a2      	ldr	r2, [r4, #8]
 80048ea:	b152      	cbz	r2, 8004902 <_scanf_float+0x66>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80048f2:	d865      	bhi.n	80049c0 <_scanf_float+0x124>
 80048f4:	2b40      	cmp	r3, #64	@ 0x40
 80048f6:	d83d      	bhi.n	8004974 <_scanf_float+0xd8>
 80048f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80048fc:	b2c8      	uxtb	r0, r1
 80048fe:	280e      	cmp	r0, #14
 8004900:	d93b      	bls.n	800497a <_scanf_float+0xde>
 8004902:	f1b9 0f00 	cmp.w	r9, #0
 8004906:	d003      	beq.n	8004910 <_scanf_float+0x74>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004914:	f1ba 0f01 	cmp.w	sl, #1
 8004918:	f200 8118 	bhi.w	8004b4c <_scanf_float+0x2b0>
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	429e      	cmp	r6, r3
 8004920:	f200 8109 	bhi.w	8004b36 <_scanf_float+0x29a>
 8004924:	2001      	movs	r0, #1
 8004926:	b007      	add	sp, #28
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004930:	2a0d      	cmp	r2, #13
 8004932:	d8e6      	bhi.n	8004902 <_scanf_float+0x66>
 8004934:	a101      	add	r1, pc, #4	@ (adr r1, 800493c <_scanf_float+0xa0>)
 8004936:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004a83 	.word	0x08004a83
 8004940:	08004903 	.word	0x08004903
 8004944:	08004903 	.word	0x08004903
 8004948:	08004903 	.word	0x08004903
 800494c:	08004ae3 	.word	0x08004ae3
 8004950:	08004abb 	.word	0x08004abb
 8004954:	08004903 	.word	0x08004903
 8004958:	08004903 	.word	0x08004903
 800495c:	08004a91 	.word	0x08004a91
 8004960:	08004903 	.word	0x08004903
 8004964:	08004903 	.word	0x08004903
 8004968:	08004903 	.word	0x08004903
 800496c:	08004903 	.word	0x08004903
 8004970:	08004a49 	.word	0x08004a49
 8004974:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004978:	e7da      	b.n	8004930 <_scanf_float+0x94>
 800497a:	290e      	cmp	r1, #14
 800497c:	d8c1      	bhi.n	8004902 <_scanf_float+0x66>
 800497e:	a001      	add	r0, pc, #4	@ (adr r0, 8004984 <_scanf_float+0xe8>)
 8004980:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004984:	08004a39 	.word	0x08004a39
 8004988:	08004903 	.word	0x08004903
 800498c:	08004a39 	.word	0x08004a39
 8004990:	08004acf 	.word	0x08004acf
 8004994:	08004903 	.word	0x08004903
 8004998:	080049e1 	.word	0x080049e1
 800499c:	08004a1f 	.word	0x08004a1f
 80049a0:	08004a1f 	.word	0x08004a1f
 80049a4:	08004a1f 	.word	0x08004a1f
 80049a8:	08004a1f 	.word	0x08004a1f
 80049ac:	08004a1f 	.word	0x08004a1f
 80049b0:	08004a1f 	.word	0x08004a1f
 80049b4:	08004a1f 	.word	0x08004a1f
 80049b8:	08004a1f 	.word	0x08004a1f
 80049bc:	08004a1f 	.word	0x08004a1f
 80049c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80049c2:	d809      	bhi.n	80049d8 <_scanf_float+0x13c>
 80049c4:	2b60      	cmp	r3, #96	@ 0x60
 80049c6:	d8b1      	bhi.n	800492c <_scanf_float+0x90>
 80049c8:	2b54      	cmp	r3, #84	@ 0x54
 80049ca:	d07b      	beq.n	8004ac4 <_scanf_float+0x228>
 80049cc:	2b59      	cmp	r3, #89	@ 0x59
 80049ce:	d198      	bne.n	8004902 <_scanf_float+0x66>
 80049d0:	2d07      	cmp	r5, #7
 80049d2:	d196      	bne.n	8004902 <_scanf_float+0x66>
 80049d4:	2508      	movs	r5, #8
 80049d6:	e02c      	b.n	8004a32 <_scanf_float+0x196>
 80049d8:	2b74      	cmp	r3, #116	@ 0x74
 80049da:	d073      	beq.n	8004ac4 <_scanf_float+0x228>
 80049dc:	2b79      	cmp	r3, #121	@ 0x79
 80049de:	e7f6      	b.n	80049ce <_scanf_float+0x132>
 80049e0:	6821      	ldr	r1, [r4, #0]
 80049e2:	05c8      	lsls	r0, r1, #23
 80049e4:	d51b      	bpl.n	8004a1e <_scanf_float+0x182>
 80049e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80049ea:	6021      	str	r1, [r4, #0]
 80049ec:	f109 0901 	add.w	r9, r9, #1
 80049f0:	f1bb 0f00 	cmp.w	fp, #0
 80049f4:	d003      	beq.n	80049fe <_scanf_float+0x162>
 80049f6:	3201      	adds	r2, #1
 80049f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049fc:	60a2      	str	r2, [r4, #8]
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	60a3      	str	r3, [r4, #8]
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	f340 8087 	ble.w	8004b24 <_scanf_float+0x288>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	e764      	b.n	80048e8 <_scanf_float+0x4c>
 8004a1e:	eb1a 0105 	adds.w	r1, sl, r5
 8004a22:	f47f af6e 	bne.w	8004902 <_scanf_float+0x66>
 8004a26:	460d      	mov	r5, r1
 8004a28:	468a      	mov	sl, r1
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	f806 3b01 	strb.w	r3, [r6], #1
 8004a36:	e7e2      	b.n	80049fe <_scanf_float+0x162>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	0610      	lsls	r0, r2, #24
 8004a3c:	f57f af61 	bpl.w	8004902 <_scanf_float+0x66>
 8004a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a44:	6022      	str	r2, [r4, #0]
 8004a46:	e7f4      	b.n	8004a32 <_scanf_float+0x196>
 8004a48:	f1ba 0f00 	cmp.w	sl, #0
 8004a4c:	d10e      	bne.n	8004a6c <_scanf_float+0x1d0>
 8004a4e:	f1b9 0f00 	cmp.w	r9, #0
 8004a52:	d10e      	bne.n	8004a72 <_scanf_float+0x1d6>
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a5e:	d108      	bne.n	8004a72 <_scanf_float+0x1d6>
 8004a60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a64:	f04f 0a01 	mov.w	sl, #1
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	e7e2      	b.n	8004a32 <_scanf_float+0x196>
 8004a6c:	f1ba 0f02 	cmp.w	sl, #2
 8004a70:	d055      	beq.n	8004b1e <_scanf_float+0x282>
 8004a72:	2d01      	cmp	r5, #1
 8004a74:	d002      	beq.n	8004a7c <_scanf_float+0x1e0>
 8004a76:	2d04      	cmp	r5, #4
 8004a78:	f47f af43 	bne.w	8004902 <_scanf_float+0x66>
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	b2ed      	uxtb	r5, r5
 8004a80:	e7d7      	b.n	8004a32 <_scanf_float+0x196>
 8004a82:	f1ba 0f01 	cmp.w	sl, #1
 8004a86:	f47f af3c 	bne.w	8004902 <_scanf_float+0x66>
 8004a8a:	f04f 0a02 	mov.w	sl, #2
 8004a8e:	e7d0      	b.n	8004a32 <_scanf_float+0x196>
 8004a90:	b97d      	cbnz	r5, 8004ab2 <_scanf_float+0x216>
 8004a92:	f1b9 0f00 	cmp.w	r9, #0
 8004a96:	f47f af37 	bne.w	8004908 <_scanf_float+0x6c>
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004aa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004aa4:	f040 8103 	bne.w	8004cae <_scanf_float+0x412>
 8004aa8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004aac:	2501      	movs	r5, #1
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	e7bf      	b.n	8004a32 <_scanf_float+0x196>
 8004ab2:	2d03      	cmp	r5, #3
 8004ab4:	d0e2      	beq.n	8004a7c <_scanf_float+0x1e0>
 8004ab6:	2d05      	cmp	r5, #5
 8004ab8:	e7de      	b.n	8004a78 <_scanf_float+0x1dc>
 8004aba:	2d02      	cmp	r5, #2
 8004abc:	f47f af21 	bne.w	8004902 <_scanf_float+0x66>
 8004ac0:	2503      	movs	r5, #3
 8004ac2:	e7b6      	b.n	8004a32 <_scanf_float+0x196>
 8004ac4:	2d06      	cmp	r5, #6
 8004ac6:	f47f af1c 	bne.w	8004902 <_scanf_float+0x66>
 8004aca:	2507      	movs	r5, #7
 8004acc:	e7b1      	b.n	8004a32 <_scanf_float+0x196>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	0591      	lsls	r1, r2, #22
 8004ad2:	f57f af16 	bpl.w	8004902 <_scanf_float+0x66>
 8004ad6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ae0:	e7a7      	b.n	8004a32 <_scanf_float+0x196>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004ae8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004aec:	d006      	beq.n	8004afc <_scanf_float+0x260>
 8004aee:	0550      	lsls	r0, r2, #21
 8004af0:	f57f af07 	bpl.w	8004902 <_scanf_float+0x66>
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	f000 80d9 	beq.w	8004cae <_scanf_float+0x412>
 8004afc:	0591      	lsls	r1, r2, #22
 8004afe:	bf58      	it	pl
 8004b00:	9902      	ldrpl	r1, [sp, #8]
 8004b02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b06:	bf58      	it	pl
 8004b08:	eba9 0101 	subpl.w	r1, r9, r1
 8004b0c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b10:	f04f 0900 	mov.w	r9, #0
 8004b14:	bf58      	it	pl
 8004b16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b1a:	6022      	str	r2, [r4, #0]
 8004b1c:	e789      	b.n	8004a32 <_scanf_float+0x196>
 8004b1e:	f04f 0a03 	mov.w	sl, #3
 8004b22:	e786      	b.n	8004a32 <_scanf_float+0x196>
 8004b24:	4639      	mov	r1, r7
 8004b26:	4640      	mov	r0, r8
 8004b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b2c:	4798      	blx	r3
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	f43f aeda 	beq.w	80048e8 <_scanf_float+0x4c>
 8004b34:	e6e5      	b.n	8004902 <_scanf_float+0x66>
 8004b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b42:	4798      	blx	r3
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	e6e7      	b.n	800491c <_scanf_float+0x80>
 8004b4c:	1e6b      	subs	r3, r5, #1
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d824      	bhi.n	8004b9c <_scanf_float+0x300>
 8004b52:	2d02      	cmp	r5, #2
 8004b54:	d836      	bhi.n	8004bc4 <_scanf_float+0x328>
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	429e      	cmp	r6, r3
 8004b5a:	f67f aee3 	bls.w	8004924 <_scanf_float+0x88>
 8004b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b62:	463a      	mov	r2, r7
 8004b64:	4640      	mov	r0, r8
 8004b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b6a:	4798      	blx	r3
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	e7f0      	b.n	8004b56 <_scanf_float+0x2ba>
 8004b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b78:	463a      	mov	r2, r7
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004b80:	4798      	blx	r3
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	6123      	str	r3, [r4, #16]
 8004b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b90:	f1ba 0f02 	cmp.w	sl, #2
 8004b94:	d1ee      	bne.n	8004b74 <_scanf_float+0x2d8>
 8004b96:	3d03      	subs	r5, #3
 8004b98:	b2ed      	uxtb	r5, r5
 8004b9a:	1b76      	subs	r6, r6, r5
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	05da      	lsls	r2, r3, #23
 8004ba0:	d530      	bpl.n	8004c04 <_scanf_float+0x368>
 8004ba2:	055b      	lsls	r3, r3, #21
 8004ba4:	d511      	bpl.n	8004bca <_scanf_float+0x32e>
 8004ba6:	9b01      	ldr	r3, [sp, #4]
 8004ba8:	429e      	cmp	r6, r3
 8004baa:	f67f aebb 	bls.w	8004924 <_scanf_float+0x88>
 8004bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bba:	4798      	blx	r3
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e7f0      	b.n	8004ba6 <_scanf_float+0x30a>
 8004bc4:	46aa      	mov	sl, r5
 8004bc6:	46b3      	mov	fp, r6
 8004bc8:	e7de      	b.n	8004b88 <_scanf_float+0x2ec>
 8004bca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	2965      	cmp	r1, #101	@ 0x65
 8004bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	d00c      	beq.n	8004bf8 <_scanf_float+0x35c>
 8004bde:	2945      	cmp	r1, #69	@ 0x45
 8004be0:	d00a      	beq.n	8004bf8 <_scanf_float+0x35c>
 8004be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004be6:	463a      	mov	r2, r7
 8004be8:	4640      	mov	r0, r8
 8004bea:	4798      	blx	r3
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	1eb5      	subs	r5, r6, #2
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	463a      	mov	r2, r7
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c00:	4798      	blx	r3
 8004c02:	462e      	mov	r6, r5
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	f012 0210 	ands.w	r2, r2, #16
 8004c0a:	d001      	beq.n	8004c10 <_scanf_float+0x374>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e68a      	b.n	8004926 <_scanf_float+0x8a>
 8004c10:	7032      	strb	r2, [r6, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1c:	d11c      	bne.n	8004c58 <_scanf_float+0x3bc>
 8004c1e:	9b02      	ldr	r3, [sp, #8]
 8004c20:	454b      	cmp	r3, r9
 8004c22:	eba3 0209 	sub.w	r2, r3, r9
 8004c26:	d123      	bne.n	8004c70 <_scanf_float+0x3d4>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	f002 fc23 	bl	8007478 <_strtod_r>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f015 0f02 	tst.w	r5, #2
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	460f      	mov	r7, r1
 8004c40:	f103 0204 	add.w	r2, r3, #4
 8004c44:	d01f      	beq.n	8004c86 <_scanf_float+0x3ea>
 8004c46:	9903      	ldr	r1, [sp, #12]
 8004c48:	600a      	str	r2, [r1, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	e9c3 6700 	strd	r6, r7, [r3]
 8004c50:	68e3      	ldr	r3, [r4, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60e3      	str	r3, [r4, #12]
 8004c56:	e7d9      	b.n	8004c0c <_scanf_float+0x370>
 8004c58:	9b04      	ldr	r3, [sp, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0e4      	beq.n	8004c28 <_scanf_float+0x38c>
 8004c5e:	9905      	ldr	r1, [sp, #20]
 8004c60:	230a      	movs	r3, #10
 8004c62:	4640      	mov	r0, r8
 8004c64:	3101      	adds	r1, #1
 8004c66:	f002 fc87 	bl	8007578 <_strtol_r>
 8004c6a:	9b04      	ldr	r3, [sp, #16]
 8004c6c:	9e05      	ldr	r6, [sp, #20]
 8004c6e:	1ac2      	subs	r2, r0, r3
 8004c70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c74:	429e      	cmp	r6, r3
 8004c76:	bf28      	it	cs
 8004c78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	490d      	ldr	r1, [pc, #52]	@ (8004cb4 <_scanf_float+0x418>)
 8004c80:	f000 f912 	bl	8004ea8 <siprintf>
 8004c84:	e7d0      	b.n	8004c28 <_scanf_float+0x38c>
 8004c86:	076d      	lsls	r5, r5, #29
 8004c88:	d4dd      	bmi.n	8004c46 <_scanf_float+0x3aa>
 8004c8a:	9d03      	ldr	r5, [sp, #12]
 8004c8c:	602a      	str	r2, [r5, #0]
 8004c8e:	681d      	ldr	r5, [r3, #0]
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	f7fb feba 	bl	8000a0c <__aeabi_dcmpun>
 8004c98:	b120      	cbz	r0, 8004ca4 <_scanf_float+0x408>
 8004c9a:	4807      	ldr	r0, [pc, #28]	@ (8004cb8 <_scanf_float+0x41c>)
 8004c9c:	f000 f9f6 	bl	800508c <nanf>
 8004ca0:	6028      	str	r0, [r5, #0]
 8004ca2:	e7d5      	b.n	8004c50 <_scanf_float+0x3b4>
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	f7fb ff0e 	bl	8000ac8 <__aeabi_d2f>
 8004cac:	e7f8      	b.n	8004ca0 <_scanf_float+0x404>
 8004cae:	f04f 0900 	mov.w	r9, #0
 8004cb2:	e62d      	b.n	8004910 <_scanf_float+0x74>
 8004cb4:	080087b6 	.word	0x080087b6
 8004cb8:	08008b4d 	.word	0x08008b4d

08004cbc <std>:
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cca:	6083      	str	r3, [r0, #8]
 8004ccc:	8181      	strh	r1, [r0, #12]
 8004cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cd0:	81c2      	strh	r2, [r0, #14]
 8004cd2:	6183      	str	r3, [r0, #24]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	305c      	adds	r0, #92	@ 0x5c
 8004cda:	f000 f948 	bl	8004f6e <memset>
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <std+0x58>)
 8004ce0:	6224      	str	r4, [r4, #32]
 8004ce2:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <std+0x5c>)
 8004ce6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <std+0x60>)
 8004cea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cec:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <std+0x64>)
 8004cee:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <std+0x68>)
 8004cf2:	429c      	cmp	r4, r3
 8004cf4:	d006      	beq.n	8004d04 <std+0x48>
 8004cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cfa:	4294      	cmp	r4, r2
 8004cfc:	d002      	beq.n	8004d04 <std+0x48>
 8004cfe:	33d0      	adds	r3, #208	@ 0xd0
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d105      	bne.n	8004d10 <std+0x54>
 8004d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0c:	f000 b9ac 	b.w	8005068 <__retarget_lock_init_recursive>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	bf00      	nop
 8004d14:	08004ee9 	.word	0x08004ee9
 8004d18:	08004f0b 	.word	0x08004f0b
 8004d1c:	08004f43 	.word	0x08004f43
 8004d20:	08004f67 	.word	0x08004f67
 8004d24:	20000494 	.word	0x20000494

08004d28 <stdio_exit_handler>:
 8004d28:	4a02      	ldr	r2, [pc, #8]	@ (8004d34 <stdio_exit_handler+0xc>)
 8004d2a:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <stdio_exit_handler+0x10>)
 8004d2c:	4803      	ldr	r0, [pc, #12]	@ (8004d3c <stdio_exit_handler+0x14>)
 8004d2e:	f000 b869 	b.w	8004e04 <_fwalk_sglue>
 8004d32:	bf00      	nop
 8004d34:	20000010 	.word	0x20000010
 8004d38:	0800792d 	.word	0x0800792d
 8004d3c:	20000020 	.word	0x20000020

08004d40 <cleanup_stdio>:
 8004d40:	6841      	ldr	r1, [r0, #4]
 8004d42:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <cleanup_stdio+0x34>)
 8004d44:	b510      	push	{r4, lr}
 8004d46:	4299      	cmp	r1, r3
 8004d48:	4604      	mov	r4, r0
 8004d4a:	d001      	beq.n	8004d50 <cleanup_stdio+0x10>
 8004d4c:	f002 fdee 	bl	800792c <_fflush_r>
 8004d50:	68a1      	ldr	r1, [r4, #8]
 8004d52:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <cleanup_stdio+0x38>)
 8004d54:	4299      	cmp	r1, r3
 8004d56:	d002      	beq.n	8004d5e <cleanup_stdio+0x1e>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f002 fde7 	bl	800792c <_fflush_r>
 8004d5e:	68e1      	ldr	r1, [r4, #12]
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <cleanup_stdio+0x3c>)
 8004d62:	4299      	cmp	r1, r3
 8004d64:	d004      	beq.n	8004d70 <cleanup_stdio+0x30>
 8004d66:	4620      	mov	r0, r4
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	f002 bdde 	b.w	800792c <_fflush_r>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	20000494 	.word	0x20000494
 8004d78:	200004fc 	.word	0x200004fc
 8004d7c:	20000564 	.word	0x20000564

08004d80 <global_stdio_init.part.0>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <global_stdio_init.part.0+0x30>)
 8004d84:	4c0b      	ldr	r4, [pc, #44]	@ (8004db4 <global_stdio_init.part.0+0x34>)
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <global_stdio_init.part.0+0x38>)
 8004d88:	4620      	mov	r0, r4
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f7ff ff94 	bl	8004cbc <std>
 8004d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d98:	2201      	movs	r2, #1
 8004d9a:	2109      	movs	r1, #9
 8004d9c:	f7ff ff8e 	bl	8004cbc <std>
 8004da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004da4:	2202      	movs	r2, #2
 8004da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004daa:	2112      	movs	r1, #18
 8004dac:	f7ff bf86 	b.w	8004cbc <std>
 8004db0:	200005cc 	.word	0x200005cc
 8004db4:	20000494 	.word	0x20000494
 8004db8:	08004d29 	.word	0x08004d29

08004dbc <__sfp_lock_acquire>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	@ (8004dc4 <__sfp_lock_acquire+0x8>)
 8004dbe:	f000 b954 	b.w	800506a <__retarget_lock_acquire_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	200005d5 	.word	0x200005d5

08004dc8 <__sfp_lock_release>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	@ (8004dd0 <__sfp_lock_release+0x8>)
 8004dca:	f000 b94f 	b.w	800506c <__retarget_lock_release_recursive>
 8004dce:	bf00      	nop
 8004dd0:	200005d5 	.word	0x200005d5

08004dd4 <__sinit>:
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	f7ff fff0 	bl	8004dbc <__sfp_lock_acquire>
 8004ddc:	6a23      	ldr	r3, [r4, #32]
 8004dde:	b11b      	cbz	r3, 8004de8 <__sinit+0x14>
 8004de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de4:	f7ff bff0 	b.w	8004dc8 <__sfp_lock_release>
 8004de8:	4b04      	ldr	r3, [pc, #16]	@ (8004dfc <__sinit+0x28>)
 8004dea:	6223      	str	r3, [r4, #32]
 8004dec:	4b04      	ldr	r3, [pc, #16]	@ (8004e00 <__sinit+0x2c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f5      	bne.n	8004de0 <__sinit+0xc>
 8004df4:	f7ff ffc4 	bl	8004d80 <global_stdio_init.part.0>
 8004df8:	e7f2      	b.n	8004de0 <__sinit+0xc>
 8004dfa:	bf00      	nop
 8004dfc:	08004d41 	.word	0x08004d41
 8004e00:	200005cc 	.word	0x200005cc

08004e04 <_fwalk_sglue>:
 8004e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	4607      	mov	r7, r0
 8004e0a:	4688      	mov	r8, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e14:	f1b9 0901 	subs.w	r9, r9, #1
 8004e18:	d505      	bpl.n	8004e26 <_fwalk_sglue+0x22>
 8004e1a:	6824      	ldr	r4, [r4, #0]
 8004e1c:	2c00      	cmp	r4, #0
 8004e1e:	d1f7      	bne.n	8004e10 <_fwalk_sglue+0xc>
 8004e20:	4630      	mov	r0, r6
 8004e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d907      	bls.n	8004e3c <_fwalk_sglue+0x38>
 8004e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e30:	3301      	adds	r3, #1
 8004e32:	d003      	beq.n	8004e3c <_fwalk_sglue+0x38>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	4306      	orrs	r6, r0
 8004e3c:	3568      	adds	r5, #104	@ 0x68
 8004e3e:	e7e9      	b.n	8004e14 <_fwalk_sglue+0x10>

08004e40 <sniprintf>:
 8004e40:	b40c      	push	{r2, r3}
 8004e42:	b530      	push	{r4, r5, lr}
 8004e44:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <sniprintf+0x64>)
 8004e46:	1e0c      	subs	r4, r1, #0
 8004e48:	681d      	ldr	r5, [r3, #0]
 8004e4a:	b09d      	sub	sp, #116	@ 0x74
 8004e4c:	da08      	bge.n	8004e60 <sniprintf+0x20>
 8004e4e:	238b      	movs	r3, #139	@ 0x8b
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	b01d      	add	sp, #116	@ 0x74
 8004e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e5c:	b002      	add	sp, #8
 8004e5e:	4770      	bx	lr
 8004e60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e68:	bf0c      	ite	eq
 8004e6a:	4623      	moveq	r3, r4
 8004e6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	9307      	str	r3, [sp, #28]
 8004e74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e78:	9002      	str	r0, [sp, #8]
 8004e7a:	9006      	str	r0, [sp, #24]
 8004e7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e80:	4628      	mov	r0, r5
 8004e82:	ab21      	add	r3, sp, #132	@ 0x84
 8004e84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e86:	a902      	add	r1, sp, #8
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	f002 fbd3 	bl	8007634 <_svfiprintf_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	bfbc      	itt	lt
 8004e92:	238b      	movlt	r3, #139	@ 0x8b
 8004e94:	602b      	strlt	r3, [r5, #0]
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d0dd      	beq.n	8004e56 <sniprintf+0x16>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e7d9      	b.n	8004e56 <sniprintf+0x16>
 8004ea2:	bf00      	nop
 8004ea4:	2000001c 	.word	0x2000001c

08004ea8 <siprintf>:
 8004ea8:	b40e      	push	{r1, r2, r3}
 8004eaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004eae:	b500      	push	{lr}
 8004eb0:	b09c      	sub	sp, #112	@ 0x70
 8004eb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004eb4:	9002      	str	r0, [sp, #8]
 8004eb6:	9006      	str	r0, [sp, #24]
 8004eb8:	9107      	str	r1, [sp, #28]
 8004eba:	9104      	str	r1, [sp, #16]
 8004ebc:	4808      	ldr	r0, [pc, #32]	@ (8004ee0 <siprintf+0x38>)
 8004ebe:	4909      	ldr	r1, [pc, #36]	@ (8004ee4 <siprintf+0x3c>)
 8004ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec4:	9105      	str	r1, [sp, #20]
 8004ec6:	6800      	ldr	r0, [r0, #0]
 8004ec8:	a902      	add	r1, sp, #8
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	f002 fbb2 	bl	8007634 <_svfiprintf_r>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	b01c      	add	sp, #112	@ 0x70
 8004ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004edc:	b003      	add	sp, #12
 8004ede:	4770      	bx	lr
 8004ee0:	2000001c 	.word	0x2000001c
 8004ee4:	ffff0208 	.word	0xffff0208

08004ee8 <__sread>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	460c      	mov	r4, r1
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	f000 f86c 	bl	8004fcc <_read_r>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	bfab      	itete	ge
 8004ef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004efa:	89a3      	ldrhlt	r3, [r4, #12]
 8004efc:	181b      	addge	r3, r3, r0
 8004efe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f02:	bfac      	ite	ge
 8004f04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f06:	81a3      	strhlt	r3, [r4, #12]
 8004f08:	bd10      	pop	{r4, pc}

08004f0a <__swrite>:
 8004f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	461f      	mov	r7, r3
 8004f10:	898b      	ldrh	r3, [r1, #12]
 8004f12:	4605      	mov	r5, r0
 8004f14:	05db      	lsls	r3, r3, #23
 8004f16:	460c      	mov	r4, r1
 8004f18:	4616      	mov	r6, r2
 8004f1a:	d505      	bpl.n	8004f28 <__swrite+0x1e>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	f000 f840 	bl	8004fa8 <_lseek_r>
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	4632      	mov	r2, r6
 8004f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	4628      	mov	r0, r5
 8004f34:	463b      	mov	r3, r7
 8004f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	f000 b857 	b.w	8004ff0 <_write_r>

08004f42 <__sseek>:
 8004f42:	b510      	push	{r4, lr}
 8004f44:	460c      	mov	r4, r1
 8004f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4a:	f000 f82d 	bl	8004fa8 <_lseek_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	bf15      	itete	ne
 8004f54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f5e:	81a3      	strheq	r3, [r4, #12]
 8004f60:	bf18      	it	ne
 8004f62:	81a3      	strhne	r3, [r4, #12]
 8004f64:	bd10      	pop	{r4, pc}

08004f66 <__sclose>:
 8004f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6a:	f000 b80d 	b.w	8004f88 <_close_r>

08004f6e <memset>:
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4402      	add	r2, r0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d100      	bne.n	8004f78 <memset+0xa>
 8004f76:	4770      	bx	lr
 8004f78:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7c:	e7f9      	b.n	8004f72 <memset+0x4>
	...

08004f80 <_localeconv_r>:
 8004f80:	4800      	ldr	r0, [pc, #0]	@ (8004f84 <_localeconv_r+0x4>)
 8004f82:	4770      	bx	lr
 8004f84:	2000015c 	.word	0x2000015c

08004f88 <_close_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4d05      	ldr	r5, [pc, #20]	@ (8004fa4 <_close_r+0x1c>)
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	f7fc fd5b 	bl	8001a4e <_close>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_close_r+0x1a>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_close_r+0x1a>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	200005d0 	.word	0x200005d0

08004fa8 <_lseek_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4d05      	ldr	r5, [pc, #20]	@ (8004fc8 <_lseek_r+0x20>)
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fc fd6d 	bl	8001a96 <_lseek>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_lseek_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_lseek_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	200005d0 	.word	0x200005d0

08004fcc <_read_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4d05      	ldr	r5, [pc, #20]	@ (8004fec <_read_r+0x20>)
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f7fc fcfe 	bl	80019dc <_read>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_read_r+0x1e>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_read_r+0x1e>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	200005d0 	.word	0x200005d0

08004ff0 <_write_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4d05      	ldr	r5, [pc, #20]	@ (8005010 <_write_r+0x20>)
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7fc fd09 	bl	8001a16 <_write>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_write_r+0x1e>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_write_r+0x1e>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	200005d0 	.word	0x200005d0

08005014 <__errno>:
 8005014:	4b01      	ldr	r3, [pc, #4]	@ (800501c <__errno+0x8>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	2000001c 	.word	0x2000001c

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	2600      	movs	r6, #0
 8005024:	4d0c      	ldr	r5, [pc, #48]	@ (8005058 <__libc_init_array+0x38>)
 8005026:	4c0d      	ldr	r4, [pc, #52]	@ (800505c <__libc_init_array+0x3c>)
 8005028:	1b64      	subs	r4, r4, r5
 800502a:	10a4      	asrs	r4, r4, #2
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	f003 fb68 	bl	8008704 <_init>
 8005034:	2600      	movs	r6, #0
 8005036:	4d0a      	ldr	r5, [pc, #40]	@ (8005060 <__libc_init_array+0x40>)
 8005038:	4c0a      	ldr	r4, [pc, #40]	@ (8005064 <__libc_init_array+0x44>)
 800503a:	1b64      	subs	r4, r4, r5
 800503c:	10a4      	asrs	r4, r4, #2
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	08008bb8 	.word	0x08008bb8
 800505c:	08008bb8 	.word	0x08008bb8
 8005060:	08008bb8 	.word	0x08008bb8
 8005064:	08008bbc 	.word	0x08008bbc

08005068 <__retarget_lock_init_recursive>:
 8005068:	4770      	bx	lr

0800506a <__retarget_lock_acquire_recursive>:
 800506a:	4770      	bx	lr

0800506c <__retarget_lock_release_recursive>:
 800506c:	4770      	bx	lr

0800506e <memchr>:
 800506e:	4603      	mov	r3, r0
 8005070:	b510      	push	{r4, lr}
 8005072:	b2c9      	uxtb	r1, r1
 8005074:	4402      	add	r2, r0
 8005076:	4293      	cmp	r3, r2
 8005078:	4618      	mov	r0, r3
 800507a:	d101      	bne.n	8005080 <memchr+0x12>
 800507c:	2000      	movs	r0, #0
 800507e:	e003      	b.n	8005088 <memchr+0x1a>
 8005080:	7804      	ldrb	r4, [r0, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	428c      	cmp	r4, r1
 8005086:	d1f6      	bne.n	8005076 <memchr+0x8>
 8005088:	bd10      	pop	{r4, pc}
	...

0800508c <nanf>:
 800508c:	4800      	ldr	r0, [pc, #0]	@ (8005090 <nanf+0x4>)
 800508e:	4770      	bx	lr
 8005090:	7fc00000 	.word	0x7fc00000

08005094 <quorem>:
 8005094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005098:	6903      	ldr	r3, [r0, #16]
 800509a:	690c      	ldr	r4, [r1, #16]
 800509c:	4607      	mov	r7, r0
 800509e:	42a3      	cmp	r3, r4
 80050a0:	db7e      	blt.n	80051a0 <quorem+0x10c>
 80050a2:	3c01      	subs	r4, #1
 80050a4:	00a3      	lsls	r3, r4, #2
 80050a6:	f100 0514 	add.w	r5, r0, #20
 80050aa:	f101 0814 	add.w	r8, r1, #20
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050be:	3301      	adds	r3, #1
 80050c0:	429a      	cmp	r2, r3
 80050c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80050c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050ca:	d32e      	bcc.n	800512a <quorem+0x96>
 80050cc:	f04f 0a00 	mov.w	sl, #0
 80050d0:	46c4      	mov	ip, r8
 80050d2:	46ae      	mov	lr, r5
 80050d4:	46d3      	mov	fp, sl
 80050d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80050da:	b298      	uxth	r0, r3
 80050dc:	fb06 a000 	mla	r0, r6, r0, sl
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	0c02      	lsrs	r2, r0, #16
 80050e4:	fb06 2303 	mla	r3, r6, r3, r2
 80050e8:	f8de 2000 	ldr.w	r2, [lr]
 80050ec:	b280      	uxth	r0, r0
 80050ee:	b292      	uxth	r2, r2
 80050f0:	1a12      	subs	r2, r2, r0
 80050f2:	445a      	add	r2, fp
 80050f4:	f8de 0000 	ldr.w	r0, [lr]
 80050f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005102:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005106:	b292      	uxth	r2, r2
 8005108:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800510c:	45e1      	cmp	r9, ip
 800510e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005112:	f84e 2b04 	str.w	r2, [lr], #4
 8005116:	d2de      	bcs.n	80050d6 <quorem+0x42>
 8005118:	9b00      	ldr	r3, [sp, #0]
 800511a:	58eb      	ldr	r3, [r5, r3]
 800511c:	b92b      	cbnz	r3, 800512a <quorem+0x96>
 800511e:	9b01      	ldr	r3, [sp, #4]
 8005120:	3b04      	subs	r3, #4
 8005122:	429d      	cmp	r5, r3
 8005124:	461a      	mov	r2, r3
 8005126:	d32f      	bcc.n	8005188 <quorem+0xf4>
 8005128:	613c      	str	r4, [r7, #16]
 800512a:	4638      	mov	r0, r7
 800512c:	f001 f9c4 	bl	80064b8 <__mcmp>
 8005130:	2800      	cmp	r0, #0
 8005132:	db25      	blt.n	8005180 <quorem+0xec>
 8005134:	4629      	mov	r1, r5
 8005136:	2000      	movs	r0, #0
 8005138:	f858 2b04 	ldr.w	r2, [r8], #4
 800513c:	f8d1 c000 	ldr.w	ip, [r1]
 8005140:	fa1f fe82 	uxth.w	lr, r2
 8005144:	fa1f f38c 	uxth.w	r3, ip
 8005148:	eba3 030e 	sub.w	r3, r3, lr
 800514c:	4403      	add	r3, r0
 800514e:	0c12      	lsrs	r2, r2, #16
 8005150:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005154:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005158:	b29b      	uxth	r3, r3
 800515a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800515e:	45c1      	cmp	r9, r8
 8005160:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005164:	f841 3b04 	str.w	r3, [r1], #4
 8005168:	d2e6      	bcs.n	8005138 <quorem+0xa4>
 800516a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800516e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005172:	b922      	cbnz	r2, 800517e <quorem+0xea>
 8005174:	3b04      	subs	r3, #4
 8005176:	429d      	cmp	r5, r3
 8005178:	461a      	mov	r2, r3
 800517a:	d30b      	bcc.n	8005194 <quorem+0x100>
 800517c:	613c      	str	r4, [r7, #16]
 800517e:	3601      	adds	r6, #1
 8005180:	4630      	mov	r0, r6
 8005182:	b003      	add	sp, #12
 8005184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	3b04      	subs	r3, #4
 800518c:	2a00      	cmp	r2, #0
 800518e:	d1cb      	bne.n	8005128 <quorem+0x94>
 8005190:	3c01      	subs	r4, #1
 8005192:	e7c6      	b.n	8005122 <quorem+0x8e>
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	3b04      	subs	r3, #4
 8005198:	2a00      	cmp	r2, #0
 800519a:	d1ef      	bne.n	800517c <quorem+0xe8>
 800519c:	3c01      	subs	r4, #1
 800519e:	e7ea      	b.n	8005176 <quorem+0xe2>
 80051a0:	2000      	movs	r0, #0
 80051a2:	e7ee      	b.n	8005182 <quorem+0xee>
 80051a4:	0000      	movs	r0, r0
	...

080051a8 <_dtoa_r>:
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	69c7      	ldr	r7, [r0, #28]
 80051b2:	b097      	sub	sp, #92	@ 0x5c
 80051b4:	4683      	mov	fp, r0
 80051b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80051ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80051bc:	b97f      	cbnz	r7, 80051de <_dtoa_r+0x36>
 80051be:	2010      	movs	r0, #16
 80051c0:	f000 fe02 	bl	8005dc8 <malloc>
 80051c4:	4602      	mov	r2, r0
 80051c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80051ca:	b920      	cbnz	r0, 80051d6 <_dtoa_r+0x2e>
 80051cc:	21ef      	movs	r1, #239	@ 0xef
 80051ce:	4ba8      	ldr	r3, [pc, #672]	@ (8005470 <_dtoa_r+0x2c8>)
 80051d0:	48a8      	ldr	r0, [pc, #672]	@ (8005474 <_dtoa_r+0x2cc>)
 80051d2:	f002 fc23 	bl	8007a1c <__assert_func>
 80051d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80051da:	6007      	str	r7, [r0, #0]
 80051dc:	60c7      	str	r7, [r0, #12]
 80051de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	b159      	cbz	r1, 80051fe <_dtoa_r+0x56>
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	2301      	movs	r3, #1
 80051ea:	4093      	lsls	r3, r2
 80051ec:	604a      	str	r2, [r1, #4]
 80051ee:	608b      	str	r3, [r1, #8]
 80051f0:	4658      	mov	r0, fp
 80051f2:	f000 fedf 	bl	8005fb4 <_Bfree>
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	1e2b      	subs	r3, r5, #0
 8005200:	bfaf      	iteee	ge
 8005202:	2300      	movge	r3, #0
 8005204:	2201      	movlt	r2, #1
 8005206:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800520a:	9303      	strlt	r3, [sp, #12]
 800520c:	bfa8      	it	ge
 800520e:	6033      	strge	r3, [r6, #0]
 8005210:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005214:	4b98      	ldr	r3, [pc, #608]	@ (8005478 <_dtoa_r+0x2d0>)
 8005216:	bfb8      	it	lt
 8005218:	6032      	strlt	r2, [r6, #0]
 800521a:	ea33 0308 	bics.w	r3, r3, r8
 800521e:	d112      	bne.n	8005246 <_dtoa_r+0x9e>
 8005220:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005224:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800522c:	4323      	orrs	r3, r4
 800522e:	f000 8550 	beq.w	8005cd2 <_dtoa_r+0xb2a>
 8005232:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005234:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800547c <_dtoa_r+0x2d4>
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8552 	beq.w	8005ce2 <_dtoa_r+0xb3a>
 800523e:	f10a 0303 	add.w	r3, sl, #3
 8005242:	f000 bd4c 	b.w	8005cde <_dtoa_r+0xb36>
 8005246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800524a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800524e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	f7fb fba7 	bl	80009a8 <__aeabi_dcmpeq>
 800525a:	4607      	mov	r7, r0
 800525c:	b158      	cbz	r0, 8005276 <_dtoa_r+0xce>
 800525e:	2301      	movs	r3, #1
 8005260:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005266:	b113      	cbz	r3, 800526e <_dtoa_r+0xc6>
 8005268:	4b85      	ldr	r3, [pc, #532]	@ (8005480 <_dtoa_r+0x2d8>)
 800526a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005484 <_dtoa_r+0x2dc>
 8005272:	f000 bd36 	b.w	8005ce2 <_dtoa_r+0xb3a>
 8005276:	ab14      	add	r3, sp, #80	@ 0x50
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	ab15      	add	r3, sp, #84	@ 0x54
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	4658      	mov	r0, fp
 8005280:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005284:	f001 fa30 	bl	80066e8 <__d2b>
 8005288:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800528c:	4681      	mov	r9, r0
 800528e:	2e00      	cmp	r6, #0
 8005290:	d077      	beq.n	8005382 <_dtoa_r+0x1da>
 8005292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005298:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800529c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80052a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80052a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80052aa:	4619      	mov	r1, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	4b76      	ldr	r3, [pc, #472]	@ (8005488 <_dtoa_r+0x2e0>)
 80052b0:	f7fa ff5a 	bl	8000168 <__aeabi_dsub>
 80052b4:	a368      	add	r3, pc, #416	@ (adr r3, 8005458 <_dtoa_r+0x2b0>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fb f90d 	bl	80004d8 <__aeabi_dmul>
 80052be:	a368      	add	r3, pc, #416	@ (adr r3, 8005460 <_dtoa_r+0x2b8>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fa ff52 	bl	800016c <__adddf3>
 80052c8:	4604      	mov	r4, r0
 80052ca:	4630      	mov	r0, r6
 80052cc:	460d      	mov	r5, r1
 80052ce:	f7fb f899 	bl	8000404 <__aeabi_i2d>
 80052d2:	a365      	add	r3, pc, #404	@ (adr r3, 8005468 <_dtoa_r+0x2c0>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fb f8fe 	bl	80004d8 <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fa ff42 	bl	800016c <__adddf3>
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	f7fb fba4 	bl	8000a38 <__aeabi_d2iz>
 80052f0:	2200      	movs	r2, #0
 80052f2:	4607      	mov	r7, r0
 80052f4:	2300      	movs	r3, #0
 80052f6:	4620      	mov	r0, r4
 80052f8:	4629      	mov	r1, r5
 80052fa:	f7fb fb5f 	bl	80009bc <__aeabi_dcmplt>
 80052fe:	b140      	cbz	r0, 8005312 <_dtoa_r+0x16a>
 8005300:	4638      	mov	r0, r7
 8005302:	f7fb f87f 	bl	8000404 <__aeabi_i2d>
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	f7fb fb4d 	bl	80009a8 <__aeabi_dcmpeq>
 800530e:	b900      	cbnz	r0, 8005312 <_dtoa_r+0x16a>
 8005310:	3f01      	subs	r7, #1
 8005312:	2f16      	cmp	r7, #22
 8005314:	d853      	bhi.n	80053be <_dtoa_r+0x216>
 8005316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800531a:	4b5c      	ldr	r3, [pc, #368]	@ (800548c <_dtoa_r+0x2e4>)
 800531c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb fb4a 	bl	80009bc <__aeabi_dcmplt>
 8005328:	2800      	cmp	r0, #0
 800532a:	d04a      	beq.n	80053c2 <_dtoa_r+0x21a>
 800532c:	2300      	movs	r3, #0
 800532e:	3f01      	subs	r7, #1
 8005330:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005332:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005334:	1b9b      	subs	r3, r3, r6
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	bf46      	itte	mi
 800533a:	f1c3 0801 	rsbmi	r8, r3, #1
 800533e:	2300      	movmi	r3, #0
 8005340:	f04f 0800 	movpl.w	r8, #0
 8005344:	9209      	str	r2, [sp, #36]	@ 0x24
 8005346:	bf48      	it	mi
 8005348:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800534a:	2f00      	cmp	r7, #0
 800534c:	db3b      	blt.n	80053c6 <_dtoa_r+0x21e>
 800534e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005350:	970e      	str	r7, [sp, #56]	@ 0x38
 8005352:	443b      	add	r3, r7
 8005354:	9309      	str	r3, [sp, #36]	@ 0x24
 8005356:	2300      	movs	r3, #0
 8005358:	930a      	str	r3, [sp, #40]	@ 0x28
 800535a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800535c:	2b09      	cmp	r3, #9
 800535e:	d866      	bhi.n	800542e <_dtoa_r+0x286>
 8005360:	2b05      	cmp	r3, #5
 8005362:	bfc4      	itt	gt
 8005364:	3b04      	subgt	r3, #4
 8005366:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005368:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800536a:	bfc8      	it	gt
 800536c:	2400      	movgt	r4, #0
 800536e:	f1a3 0302 	sub.w	r3, r3, #2
 8005372:	bfd8      	it	le
 8005374:	2401      	movle	r4, #1
 8005376:	2b03      	cmp	r3, #3
 8005378:	d864      	bhi.n	8005444 <_dtoa_r+0x29c>
 800537a:	e8df f003 	tbb	[pc, r3]
 800537e:	382b      	.short	0x382b
 8005380:	5636      	.short	0x5636
 8005382:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005386:	441e      	add	r6, r3
 8005388:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800538c:	2b20      	cmp	r3, #32
 800538e:	bfc1      	itttt	gt
 8005390:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005394:	fa08 f803 	lslgt.w	r8, r8, r3
 8005398:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800539c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80053a0:	bfd6      	itet	le
 80053a2:	f1c3 0320 	rsble	r3, r3, #32
 80053a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80053aa:	fa04 f003 	lslle.w	r0, r4, r3
 80053ae:	f7fb f819 	bl	80003e4 <__aeabi_ui2d>
 80053b2:	2201      	movs	r2, #1
 80053b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80053b8:	3e01      	subs	r6, #1
 80053ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80053bc:	e775      	b.n	80052aa <_dtoa_r+0x102>
 80053be:	2301      	movs	r3, #1
 80053c0:	e7b6      	b.n	8005330 <_dtoa_r+0x188>
 80053c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80053c4:	e7b5      	b.n	8005332 <_dtoa_r+0x18a>
 80053c6:	427b      	negs	r3, r7
 80053c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ca:	2300      	movs	r3, #0
 80053cc:	eba8 0807 	sub.w	r8, r8, r7
 80053d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80053d2:	e7c2      	b.n	800535a <_dtoa_r+0x1b2>
 80053d4:	2300      	movs	r3, #0
 80053d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053da:	2b00      	cmp	r3, #0
 80053dc:	dc35      	bgt.n	800544a <_dtoa_r+0x2a2>
 80053de:	2301      	movs	r3, #1
 80053e0:	461a      	mov	r2, r3
 80053e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80053e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80053e8:	e00b      	b.n	8005402 <_dtoa_r+0x25a>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e7f3      	b.n	80053d6 <_dtoa_r+0x22e>
 80053ee:	2300      	movs	r3, #0
 80053f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	9308      	str	r3, [sp, #32]
 80053f8:	3301      	adds	r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	bfb8      	it	lt
 8005400:	2301      	movlt	r3, #1
 8005402:	2100      	movs	r1, #0
 8005404:	2204      	movs	r2, #4
 8005406:	f8db 001c 	ldr.w	r0, [fp, #28]
 800540a:	f102 0514 	add.w	r5, r2, #20
 800540e:	429d      	cmp	r5, r3
 8005410:	d91f      	bls.n	8005452 <_dtoa_r+0x2aa>
 8005412:	6041      	str	r1, [r0, #4]
 8005414:	4658      	mov	r0, fp
 8005416:	f000 fd8d 	bl	8005f34 <_Balloc>
 800541a:	4682      	mov	sl, r0
 800541c:	2800      	cmp	r0, #0
 800541e:	d139      	bne.n	8005494 <_dtoa_r+0x2ec>
 8005420:	4602      	mov	r2, r0
 8005422:	f240 11af 	movw	r1, #431	@ 0x1af
 8005426:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <_dtoa_r+0x2e8>)
 8005428:	e6d2      	b.n	80051d0 <_dtoa_r+0x28>
 800542a:	2301      	movs	r3, #1
 800542c:	e7e0      	b.n	80053f0 <_dtoa_r+0x248>
 800542e:	2401      	movs	r4, #1
 8005430:	2300      	movs	r3, #0
 8005432:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005434:	9320      	str	r3, [sp, #128]	@ 0x80
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	2200      	movs	r2, #0
 800543c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005440:	2312      	movs	r3, #18
 8005442:	e7d0      	b.n	80053e6 <_dtoa_r+0x23e>
 8005444:	2301      	movs	r3, #1
 8005446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005448:	e7f5      	b.n	8005436 <_dtoa_r+0x28e>
 800544a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800544c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005450:	e7d7      	b.n	8005402 <_dtoa_r+0x25a>
 8005452:	3101      	adds	r1, #1
 8005454:	0052      	lsls	r2, r2, #1
 8005456:	e7d8      	b.n	800540a <_dtoa_r+0x262>
 8005458:	636f4361 	.word	0x636f4361
 800545c:	3fd287a7 	.word	0x3fd287a7
 8005460:	8b60c8b3 	.word	0x8b60c8b3
 8005464:	3fc68a28 	.word	0x3fc68a28
 8005468:	509f79fb 	.word	0x509f79fb
 800546c:	3fd34413 	.word	0x3fd34413
 8005470:	080087c8 	.word	0x080087c8
 8005474:	080087df 	.word	0x080087df
 8005478:	7ff00000 	.word	0x7ff00000
 800547c:	080087c4 	.word	0x080087c4
 8005480:	08008793 	.word	0x08008793
 8005484:	08008792 	.word	0x08008792
 8005488:	3ff80000 	.word	0x3ff80000
 800548c:	080088d8 	.word	0x080088d8
 8005490:	08008837 	.word	0x08008837
 8005494:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005498:	6018      	str	r0, [r3, #0]
 800549a:	9b07      	ldr	r3, [sp, #28]
 800549c:	2b0e      	cmp	r3, #14
 800549e:	f200 80a4 	bhi.w	80055ea <_dtoa_r+0x442>
 80054a2:	2c00      	cmp	r4, #0
 80054a4:	f000 80a1 	beq.w	80055ea <_dtoa_r+0x442>
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	dd33      	ble.n	8005514 <_dtoa_r+0x36c>
 80054ac:	4b86      	ldr	r3, [pc, #536]	@ (80056c8 <_dtoa_r+0x520>)
 80054ae:	f007 020f 	and.w	r2, r7, #15
 80054b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b6:	05f8      	lsls	r0, r7, #23
 80054b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80054c4:	d516      	bpl.n	80054f4 <_dtoa_r+0x34c>
 80054c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ca:	4b80      	ldr	r3, [pc, #512]	@ (80056cc <_dtoa_r+0x524>)
 80054cc:	2603      	movs	r6, #3
 80054ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054d2:	f7fb f92b 	bl	800072c <__aeabi_ddiv>
 80054d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054da:	f004 040f 	and.w	r4, r4, #15
 80054de:	4d7b      	ldr	r5, [pc, #492]	@ (80056cc <_dtoa_r+0x524>)
 80054e0:	b954      	cbnz	r4, 80054f8 <_dtoa_r+0x350>
 80054e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ea:	f7fb f91f 	bl	800072c <__aeabi_ddiv>
 80054ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f2:	e028      	b.n	8005546 <_dtoa_r+0x39e>
 80054f4:	2602      	movs	r6, #2
 80054f6:	e7f2      	b.n	80054de <_dtoa_r+0x336>
 80054f8:	07e1      	lsls	r1, r4, #31
 80054fa:	d508      	bpl.n	800550e <_dtoa_r+0x366>
 80054fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005504:	f7fa ffe8 	bl	80004d8 <__aeabi_dmul>
 8005508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800550c:	3601      	adds	r6, #1
 800550e:	1064      	asrs	r4, r4, #1
 8005510:	3508      	adds	r5, #8
 8005512:	e7e5      	b.n	80054e0 <_dtoa_r+0x338>
 8005514:	f000 80d2 	beq.w	80056bc <_dtoa_r+0x514>
 8005518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800551c:	427c      	negs	r4, r7
 800551e:	4b6a      	ldr	r3, [pc, #424]	@ (80056c8 <_dtoa_r+0x520>)
 8005520:	f004 020f 	and.w	r2, r4, #15
 8005524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	2602      	movs	r6, #2
 8005532:	2300      	movs	r3, #0
 8005534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005538:	4d64      	ldr	r5, [pc, #400]	@ (80056cc <_dtoa_r+0x524>)
 800553a:	1124      	asrs	r4, r4, #4
 800553c:	2c00      	cmp	r4, #0
 800553e:	f040 80b2 	bne.w	80056a6 <_dtoa_r+0x4fe>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1d3      	bne.n	80054ee <_dtoa_r+0x346>
 8005546:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800554a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80b7 	beq.w	80056c0 <_dtoa_r+0x518>
 8005552:	2200      	movs	r2, #0
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	4b5d      	ldr	r3, [pc, #372]	@ (80056d0 <_dtoa_r+0x528>)
 800555a:	f7fb fa2f 	bl	80009bc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f000 80ae 	beq.w	80056c0 <_dtoa_r+0x518>
 8005564:	9b07      	ldr	r3, [sp, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80aa 	beq.w	80056c0 <_dtoa_r+0x518>
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dd37      	ble.n	80055e2 <_dtoa_r+0x43a>
 8005572:	1e7b      	subs	r3, r7, #1
 8005574:	4620      	mov	r0, r4
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	2200      	movs	r2, #0
 800557a:	4629      	mov	r1, r5
 800557c:	4b55      	ldr	r3, [pc, #340]	@ (80056d4 <_dtoa_r+0x52c>)
 800557e:	f7fa ffab 	bl	80004d8 <__aeabi_dmul>
 8005582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005586:	9c08      	ldr	r4, [sp, #32]
 8005588:	3601      	adds	r6, #1
 800558a:	4630      	mov	r0, r6
 800558c:	f7fa ff3a 	bl	8000404 <__aeabi_i2d>
 8005590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	4b4f      	ldr	r3, [pc, #316]	@ (80056d8 <_dtoa_r+0x530>)
 800559c:	f7fa fde6 	bl	800016c <__adddf3>
 80055a0:	4605      	mov	r5, r0
 80055a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	f040 809a 	bne.w	80056e0 <_dtoa_r+0x538>
 80055ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	4b4a      	ldr	r3, [pc, #296]	@ (80056dc <_dtoa_r+0x534>)
 80055b4:	f7fa fdd8 	bl	8000168 <__aeabi_dsub>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4633      	mov	r3, r6
 80055c4:	f7fb fa18 	bl	80009f8 <__aeabi_dcmpgt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f040 828e 	bne.w	8005aea <_dtoa_r+0x942>
 80055ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d2:	462a      	mov	r2, r5
 80055d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80055d8:	f7fb f9f0 	bl	80009bc <__aeabi_dcmplt>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f040 8127 	bne.w	8005830 <_dtoa_r+0x688>
 80055e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80055e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80055ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f2c0 8163 	blt.w	80058b8 <_dtoa_r+0x710>
 80055f2:	2f0e      	cmp	r7, #14
 80055f4:	f300 8160 	bgt.w	80058b8 <_dtoa_r+0x710>
 80055f8:	4b33      	ldr	r3, [pc, #204]	@ (80056c8 <_dtoa_r+0x520>)
 80055fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005602:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005606:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005608:	2b00      	cmp	r3, #0
 800560a:	da03      	bge.n	8005614 <_dtoa_r+0x46c>
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f340 8100 	ble.w	8005814 <_dtoa_r+0x66c>
 8005614:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005618:	4656      	mov	r6, sl
 800561a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f7fb f883 	bl	800072c <__aeabi_ddiv>
 8005626:	f7fb fa07 	bl	8000a38 <__aeabi_d2iz>
 800562a:	4680      	mov	r8, r0
 800562c:	f7fa feea 	bl	8000404 <__aeabi_i2d>
 8005630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa fd92 	bl	8000168 <__aeabi_dsub>
 8005644:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005648:	9d07      	ldr	r5, [sp, #28]
 800564a:	f806 4b01 	strb.w	r4, [r6], #1
 800564e:	eba6 040a 	sub.w	r4, r6, sl
 8005652:	42a5      	cmp	r5, r4
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	f040 8116 	bne.w	8005888 <_dtoa_r+0x6e0>
 800565c:	f7fa fd86 	bl	800016c <__adddf3>
 8005660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005664:	4604      	mov	r4, r0
 8005666:	460d      	mov	r5, r1
 8005668:	f7fb f9c6 	bl	80009f8 <__aeabi_dcmpgt>
 800566c:	2800      	cmp	r0, #0
 800566e:	f040 80f8 	bne.w	8005862 <_dtoa_r+0x6ba>
 8005672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fb f995 	bl	80009a8 <__aeabi_dcmpeq>
 800567e:	b118      	cbz	r0, 8005688 <_dtoa_r+0x4e0>
 8005680:	f018 0f01 	tst.w	r8, #1
 8005684:	f040 80ed 	bne.w	8005862 <_dtoa_r+0x6ba>
 8005688:	4649      	mov	r1, r9
 800568a:	4658      	mov	r0, fp
 800568c:	f000 fc92 	bl	8005fb4 <_Bfree>
 8005690:	2300      	movs	r3, #0
 8005692:	7033      	strb	r3, [r6, #0]
 8005694:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005696:	3701      	adds	r7, #1
 8005698:	601f      	str	r7, [r3, #0]
 800569a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8320 	beq.w	8005ce2 <_dtoa_r+0xb3a>
 80056a2:	601e      	str	r6, [r3, #0]
 80056a4:	e31d      	b.n	8005ce2 <_dtoa_r+0xb3a>
 80056a6:	07e2      	lsls	r2, r4, #31
 80056a8:	d505      	bpl.n	80056b6 <_dtoa_r+0x50e>
 80056aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056ae:	f7fa ff13 	bl	80004d8 <__aeabi_dmul>
 80056b2:	2301      	movs	r3, #1
 80056b4:	3601      	adds	r6, #1
 80056b6:	1064      	asrs	r4, r4, #1
 80056b8:	3508      	adds	r5, #8
 80056ba:	e73f      	b.n	800553c <_dtoa_r+0x394>
 80056bc:	2602      	movs	r6, #2
 80056be:	e742      	b.n	8005546 <_dtoa_r+0x39e>
 80056c0:	9c07      	ldr	r4, [sp, #28]
 80056c2:	9704      	str	r7, [sp, #16]
 80056c4:	e761      	b.n	800558a <_dtoa_r+0x3e2>
 80056c6:	bf00      	nop
 80056c8:	080088d8 	.word	0x080088d8
 80056cc:	080088b0 	.word	0x080088b0
 80056d0:	3ff00000 	.word	0x3ff00000
 80056d4:	40240000 	.word	0x40240000
 80056d8:	401c0000 	.word	0x401c0000
 80056dc:	40140000 	.word	0x40140000
 80056e0:	4b70      	ldr	r3, [pc, #448]	@ (80058a4 <_dtoa_r+0x6fc>)
 80056e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80056e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056ec:	4454      	add	r4, sl
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d045      	beq.n	800577e <_dtoa_r+0x5d6>
 80056f2:	2000      	movs	r0, #0
 80056f4:	496c      	ldr	r1, [pc, #432]	@ (80058a8 <_dtoa_r+0x700>)
 80056f6:	f7fb f819 	bl	800072c <__aeabi_ddiv>
 80056fa:	4633      	mov	r3, r6
 80056fc:	462a      	mov	r2, r5
 80056fe:	f7fa fd33 	bl	8000168 <__aeabi_dsub>
 8005702:	4656      	mov	r6, sl
 8005704:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800570c:	f7fb f994 	bl	8000a38 <__aeabi_d2iz>
 8005710:	4605      	mov	r5, r0
 8005712:	f7fa fe77 	bl	8000404 <__aeabi_i2d>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571e:	f7fa fd23 	bl	8000168 <__aeabi_dsub>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	3530      	adds	r5, #48	@ 0x30
 8005728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800572c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005730:	f806 5b01 	strb.w	r5, [r6], #1
 8005734:	f7fb f942 	bl	80009bc <__aeabi_dcmplt>
 8005738:	2800      	cmp	r0, #0
 800573a:	d163      	bne.n	8005804 <_dtoa_r+0x65c>
 800573c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005740:	2000      	movs	r0, #0
 8005742:	495a      	ldr	r1, [pc, #360]	@ (80058ac <_dtoa_r+0x704>)
 8005744:	f7fa fd10 	bl	8000168 <__aeabi_dsub>
 8005748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800574c:	f7fb f936 	bl	80009bc <__aeabi_dcmplt>
 8005750:	2800      	cmp	r0, #0
 8005752:	f040 8087 	bne.w	8005864 <_dtoa_r+0x6bc>
 8005756:	42a6      	cmp	r6, r4
 8005758:	f43f af43 	beq.w	80055e2 <_dtoa_r+0x43a>
 800575c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005760:	2200      	movs	r2, #0
 8005762:	4b53      	ldr	r3, [pc, #332]	@ (80058b0 <_dtoa_r+0x708>)
 8005764:	f7fa feb8 	bl	80004d8 <__aeabi_dmul>
 8005768:	2200      	movs	r2, #0
 800576a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005772:	4b4f      	ldr	r3, [pc, #316]	@ (80058b0 <_dtoa_r+0x708>)
 8005774:	f7fa feb0 	bl	80004d8 <__aeabi_dmul>
 8005778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577c:	e7c4      	b.n	8005708 <_dtoa_r+0x560>
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	f7fa fea9 	bl	80004d8 <__aeabi_dmul>
 8005786:	4656      	mov	r6, sl
 8005788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800578c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800578e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005792:	f7fb f951 	bl	8000a38 <__aeabi_d2iz>
 8005796:	4605      	mov	r5, r0
 8005798:	f7fa fe34 	bl	8000404 <__aeabi_i2d>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a4:	f7fa fce0 	bl	8000168 <__aeabi_dsub>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	3530      	adds	r5, #48	@ 0x30
 80057ae:	f806 5b01 	strb.w	r5, [r6], #1
 80057b2:	42a6      	cmp	r6, r4
 80057b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	d124      	bne.n	8005808 <_dtoa_r+0x660>
 80057be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057c2:	4b39      	ldr	r3, [pc, #228]	@ (80058a8 <_dtoa_r+0x700>)
 80057c4:	f7fa fcd2 	bl	800016c <__adddf3>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d0:	f7fb f912 	bl	80009f8 <__aeabi_dcmpgt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d145      	bne.n	8005864 <_dtoa_r+0x6bc>
 80057d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057dc:	2000      	movs	r0, #0
 80057de:	4932      	ldr	r1, [pc, #200]	@ (80058a8 <_dtoa_r+0x700>)
 80057e0:	f7fa fcc2 	bl	8000168 <__aeabi_dsub>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ec:	f7fb f8e6 	bl	80009bc <__aeabi_dcmplt>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f43f aef6 	beq.w	80055e2 <_dtoa_r+0x43a>
 80057f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80057f8:	1e73      	subs	r3, r6, #1
 80057fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005800:	2b30      	cmp	r3, #48	@ 0x30
 8005802:	d0f8      	beq.n	80057f6 <_dtoa_r+0x64e>
 8005804:	9f04      	ldr	r7, [sp, #16]
 8005806:	e73f      	b.n	8005688 <_dtoa_r+0x4e0>
 8005808:	4b29      	ldr	r3, [pc, #164]	@ (80058b0 <_dtoa_r+0x708>)
 800580a:	f7fa fe65 	bl	80004d8 <__aeabi_dmul>
 800580e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005812:	e7bc      	b.n	800578e <_dtoa_r+0x5e6>
 8005814:	d10c      	bne.n	8005830 <_dtoa_r+0x688>
 8005816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581a:	2200      	movs	r2, #0
 800581c:	4b25      	ldr	r3, [pc, #148]	@ (80058b4 <_dtoa_r+0x70c>)
 800581e:	f7fa fe5b 	bl	80004d8 <__aeabi_dmul>
 8005822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005826:	f7fb f8dd 	bl	80009e4 <__aeabi_dcmpge>
 800582a:	2800      	cmp	r0, #0
 800582c:	f000 815b 	beq.w	8005ae6 <_dtoa_r+0x93e>
 8005830:	2400      	movs	r4, #0
 8005832:	4625      	mov	r5, r4
 8005834:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005836:	4656      	mov	r6, sl
 8005838:	43db      	mvns	r3, r3
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	2700      	movs	r7, #0
 800583e:	4621      	mov	r1, r4
 8005840:	4658      	mov	r0, fp
 8005842:	f000 fbb7 	bl	8005fb4 <_Bfree>
 8005846:	2d00      	cmp	r5, #0
 8005848:	d0dc      	beq.n	8005804 <_dtoa_r+0x65c>
 800584a:	b12f      	cbz	r7, 8005858 <_dtoa_r+0x6b0>
 800584c:	42af      	cmp	r7, r5
 800584e:	d003      	beq.n	8005858 <_dtoa_r+0x6b0>
 8005850:	4639      	mov	r1, r7
 8005852:	4658      	mov	r0, fp
 8005854:	f000 fbae 	bl	8005fb4 <_Bfree>
 8005858:	4629      	mov	r1, r5
 800585a:	4658      	mov	r0, fp
 800585c:	f000 fbaa 	bl	8005fb4 <_Bfree>
 8005860:	e7d0      	b.n	8005804 <_dtoa_r+0x65c>
 8005862:	9704      	str	r7, [sp, #16]
 8005864:	4633      	mov	r3, r6
 8005866:	461e      	mov	r6, r3
 8005868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800586c:	2a39      	cmp	r2, #57	@ 0x39
 800586e:	d107      	bne.n	8005880 <_dtoa_r+0x6d8>
 8005870:	459a      	cmp	sl, r3
 8005872:	d1f8      	bne.n	8005866 <_dtoa_r+0x6be>
 8005874:	9a04      	ldr	r2, [sp, #16]
 8005876:	3201      	adds	r2, #1
 8005878:	9204      	str	r2, [sp, #16]
 800587a:	2230      	movs	r2, #48	@ 0x30
 800587c:	f88a 2000 	strb.w	r2, [sl]
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	3201      	adds	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e7bd      	b.n	8005804 <_dtoa_r+0x65c>
 8005888:	2200      	movs	r2, #0
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <_dtoa_r+0x708>)
 800588c:	f7fa fe24 	bl	80004d8 <__aeabi_dmul>
 8005890:	2200      	movs	r2, #0
 8005892:	2300      	movs	r3, #0
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	f7fb f886 	bl	80009a8 <__aeabi_dcmpeq>
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f aebc 	beq.w	800561a <_dtoa_r+0x472>
 80058a2:	e6f1      	b.n	8005688 <_dtoa_r+0x4e0>
 80058a4:	080088d8 	.word	0x080088d8
 80058a8:	3fe00000 	.word	0x3fe00000
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	40240000 	.word	0x40240000
 80058b4:	40140000 	.word	0x40140000
 80058b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	f000 80db 	beq.w	8005a76 <_dtoa_r+0x8ce>
 80058c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058c2:	2a01      	cmp	r2, #1
 80058c4:	f300 80bf 	bgt.w	8005a46 <_dtoa_r+0x89e>
 80058c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	f000 80b7 	beq.w	8005a3e <_dtoa_r+0x896>
 80058d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80058d4:	4646      	mov	r6, r8
 80058d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058da:	2101      	movs	r1, #1
 80058dc:	441a      	add	r2, r3
 80058de:	4658      	mov	r0, fp
 80058e0:	4498      	add	r8, r3
 80058e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e4:	f000 fc64 	bl	80061b0 <__i2b>
 80058e8:	4605      	mov	r5, r0
 80058ea:	b15e      	cbz	r6, 8005904 <_dtoa_r+0x75c>
 80058ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd08      	ble.n	8005904 <_dtoa_r+0x75c>
 80058f2:	42b3      	cmp	r3, r6
 80058f4:	bfa8      	it	ge
 80058f6:	4633      	movge	r3, r6
 80058f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058fa:	eba8 0803 	sub.w	r8, r8, r3
 80058fe:	1af6      	subs	r6, r6, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	9309      	str	r3, [sp, #36]	@ 0x24
 8005904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005906:	b1f3      	cbz	r3, 8005946 <_dtoa_r+0x79e>
 8005908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80b7 	beq.w	8005a7e <_dtoa_r+0x8d6>
 8005910:	b18c      	cbz	r4, 8005936 <_dtoa_r+0x78e>
 8005912:	4629      	mov	r1, r5
 8005914:	4622      	mov	r2, r4
 8005916:	4658      	mov	r0, fp
 8005918:	f000 fd08 	bl	800632c <__pow5mult>
 800591c:	464a      	mov	r2, r9
 800591e:	4601      	mov	r1, r0
 8005920:	4605      	mov	r5, r0
 8005922:	4658      	mov	r0, fp
 8005924:	f000 fc5a 	bl	80061dc <__multiply>
 8005928:	4649      	mov	r1, r9
 800592a:	9004      	str	r0, [sp, #16]
 800592c:	4658      	mov	r0, fp
 800592e:	f000 fb41 	bl	8005fb4 <_Bfree>
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	4699      	mov	r9, r3
 8005936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005938:	1b1a      	subs	r2, r3, r4
 800593a:	d004      	beq.n	8005946 <_dtoa_r+0x79e>
 800593c:	4649      	mov	r1, r9
 800593e:	4658      	mov	r0, fp
 8005940:	f000 fcf4 	bl	800632c <__pow5mult>
 8005944:	4681      	mov	r9, r0
 8005946:	2101      	movs	r1, #1
 8005948:	4658      	mov	r0, fp
 800594a:	f000 fc31 	bl	80061b0 <__i2b>
 800594e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005950:	4604      	mov	r4, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 81c9 	beq.w	8005cea <_dtoa_r+0xb42>
 8005958:	461a      	mov	r2, r3
 800595a:	4601      	mov	r1, r0
 800595c:	4658      	mov	r0, fp
 800595e:	f000 fce5 	bl	800632c <__pow5mult>
 8005962:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005964:	4604      	mov	r4, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	f300 808f 	bgt.w	8005a8a <_dtoa_r+0x8e2>
 800596c:	9b02      	ldr	r3, [sp, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 8087 	bne.w	8005a82 <_dtoa_r+0x8da>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 8083 	bne.w	8005a86 <_dtoa_r+0x8de>
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005986:	0d1b      	lsrs	r3, r3, #20
 8005988:	051b      	lsls	r3, r3, #20
 800598a:	b12b      	cbz	r3, 8005998 <_dtoa_r+0x7f0>
 800598c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598e:	f108 0801 	add.w	r8, r8, #1
 8005992:	3301      	adds	r3, #1
 8005994:	9309      	str	r3, [sp, #36]	@ 0x24
 8005996:	2301      	movs	r3, #1
 8005998:	930a      	str	r3, [sp, #40]	@ 0x28
 800599a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 81aa 	beq.w	8005cf6 <_dtoa_r+0xb4e>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059a8:	6918      	ldr	r0, [r3, #16]
 80059aa:	f000 fbb5 	bl	8006118 <__hi0bits>
 80059ae:	f1c0 0020 	rsb	r0, r0, #32
 80059b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b4:	4418      	add	r0, r3
 80059b6:	f010 001f 	ands.w	r0, r0, #31
 80059ba:	d071      	beq.n	8005aa0 <_dtoa_r+0x8f8>
 80059bc:	f1c0 0320 	rsb	r3, r0, #32
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	dd65      	ble.n	8005a90 <_dtoa_r+0x8e8>
 80059c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c6:	f1c0 001c 	rsb	r0, r0, #28
 80059ca:	4403      	add	r3, r0
 80059cc:	4480      	add	r8, r0
 80059ce:	4406      	add	r6, r0
 80059d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d2:	f1b8 0f00 	cmp.w	r8, #0
 80059d6:	dd05      	ble.n	80059e4 <_dtoa_r+0x83c>
 80059d8:	4649      	mov	r1, r9
 80059da:	4642      	mov	r2, r8
 80059dc:	4658      	mov	r0, fp
 80059de:	f000 fcff 	bl	80063e0 <__lshift>
 80059e2:	4681      	mov	r9, r0
 80059e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd05      	ble.n	80059f6 <_dtoa_r+0x84e>
 80059ea:	4621      	mov	r1, r4
 80059ec:	461a      	mov	r2, r3
 80059ee:	4658      	mov	r0, fp
 80059f0:	f000 fcf6 	bl	80063e0 <__lshift>
 80059f4:	4604      	mov	r4, r0
 80059f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d053      	beq.n	8005aa4 <_dtoa_r+0x8fc>
 80059fc:	4621      	mov	r1, r4
 80059fe:	4648      	mov	r0, r9
 8005a00:	f000 fd5a 	bl	80064b8 <__mcmp>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	da4d      	bge.n	8005aa4 <_dtoa_r+0x8fc>
 8005a08:	1e7b      	subs	r3, r7, #1
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	220a      	movs	r2, #10
 8005a10:	2300      	movs	r3, #0
 8005a12:	4658      	mov	r0, fp
 8005a14:	f000 faf0 	bl	8005ff8 <__multadd>
 8005a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a1a:	4681      	mov	r9, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 816c 	beq.w	8005cfa <_dtoa_r+0xb52>
 8005a22:	2300      	movs	r3, #0
 8005a24:	4629      	mov	r1, r5
 8005a26:	220a      	movs	r2, #10
 8005a28:	4658      	mov	r0, fp
 8005a2a:	f000 fae5 	bl	8005ff8 <__multadd>
 8005a2e:	9b08      	ldr	r3, [sp, #32]
 8005a30:	4605      	mov	r5, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dc61      	bgt.n	8005afa <_dtoa_r+0x952>
 8005a36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	dc3b      	bgt.n	8005ab4 <_dtoa_r+0x90c>
 8005a3c:	e05d      	b.n	8005afa <_dtoa_r+0x952>
 8005a3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a40:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a44:	e746      	b.n	80058d4 <_dtoa_r+0x72c>
 8005a46:	9b07      	ldr	r3, [sp, #28]
 8005a48:	1e5c      	subs	r4, r3, #1
 8005a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bfbf      	itttt	lt
 8005a50:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005a52:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005a54:	1ae3      	sublt	r3, r4, r3
 8005a56:	18d2      	addlt	r2, r2, r3
 8005a58:	bfa8      	it	ge
 8005a5a:	1b1c      	subge	r4, r3, r4
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	bfbe      	ittt	lt
 8005a60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005a62:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005a64:	2400      	movlt	r4, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfb5      	itete	lt
 8005a6a:	eba8 0603 	sublt.w	r6, r8, r3
 8005a6e:	4646      	movge	r6, r8
 8005a70:	2300      	movlt	r3, #0
 8005a72:	9b07      	ldrge	r3, [sp, #28]
 8005a74:	e730      	b.n	80058d8 <_dtoa_r+0x730>
 8005a76:	4646      	mov	r6, r8
 8005a78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a7c:	e735      	b.n	80058ea <_dtoa_r+0x742>
 8005a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a80:	e75c      	b.n	800593c <_dtoa_r+0x794>
 8005a82:	2300      	movs	r3, #0
 8005a84:	e788      	b.n	8005998 <_dtoa_r+0x7f0>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	e786      	b.n	8005998 <_dtoa_r+0x7f0>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a8e:	e788      	b.n	80059a2 <_dtoa_r+0x7fa>
 8005a90:	d09f      	beq.n	80059d2 <_dtoa_r+0x82a>
 8005a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a94:	331c      	adds	r3, #28
 8005a96:	441a      	add	r2, r3
 8005a98:	4498      	add	r8, r3
 8005a9a:	441e      	add	r6, r3
 8005a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a9e:	e798      	b.n	80059d2 <_dtoa_r+0x82a>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	e7f6      	b.n	8005a92 <_dtoa_r+0x8ea>
 8005aa4:	9b07      	ldr	r3, [sp, #28]
 8005aa6:	9704      	str	r7, [sp, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc20      	bgt.n	8005aee <_dtoa_r+0x946>
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	dd1e      	ble.n	8005af2 <_dtoa_r+0x94a>
 8005ab4:	9b08      	ldr	r3, [sp, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f47f aebc 	bne.w	8005834 <_dtoa_r+0x68c>
 8005abc:	4621      	mov	r1, r4
 8005abe:	2205      	movs	r2, #5
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f000 fa99 	bl	8005ff8 <__multadd>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4648      	mov	r0, r9
 8005acc:	f000 fcf4 	bl	80064b8 <__mcmp>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	f77f aeaf 	ble.w	8005834 <_dtoa_r+0x68c>
 8005ad6:	2331      	movs	r3, #49	@ 0x31
 8005ad8:	4656      	mov	r6, sl
 8005ada:	f806 3b01 	strb.w	r3, [r6], #1
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	e6aa      	b.n	800583c <_dtoa_r+0x694>
 8005ae6:	9c07      	ldr	r4, [sp, #28]
 8005ae8:	9704      	str	r7, [sp, #16]
 8005aea:	4625      	mov	r5, r4
 8005aec:	e7f3      	b.n	8005ad6 <_dtoa_r+0x92e>
 8005aee:	9b07      	ldr	r3, [sp, #28]
 8005af0:	9308      	str	r3, [sp, #32]
 8005af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8104 	beq.w	8005d02 <_dtoa_r+0xb5a>
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	dd05      	ble.n	8005b0a <_dtoa_r+0x962>
 8005afe:	4629      	mov	r1, r5
 8005b00:	4632      	mov	r2, r6
 8005b02:	4658      	mov	r0, fp
 8005b04:	f000 fc6c 	bl	80063e0 <__lshift>
 8005b08:	4605      	mov	r5, r0
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d05a      	beq.n	8005bc6 <_dtoa_r+0xa1e>
 8005b10:	4658      	mov	r0, fp
 8005b12:	6869      	ldr	r1, [r5, #4]
 8005b14:	f000 fa0e 	bl	8005f34 <_Balloc>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	b928      	cbnz	r0, 8005b28 <_dtoa_r+0x980>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b22:	4b83      	ldr	r3, [pc, #524]	@ (8005d30 <_dtoa_r+0xb88>)
 8005b24:	f7ff bb54 	b.w	80051d0 <_dtoa_r+0x28>
 8005b28:	692a      	ldr	r2, [r5, #16]
 8005b2a:	f105 010c 	add.w	r1, r5, #12
 8005b2e:	3202      	adds	r2, #2
 8005b30:	0092      	lsls	r2, r2, #2
 8005b32:	300c      	adds	r0, #12
 8005b34:	f001 ff5e 	bl	80079f4 <memcpy>
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4658      	mov	r0, fp
 8005b3e:	f000 fc4f 	bl	80063e0 <__lshift>
 8005b42:	462f      	mov	r7, r5
 8005b44:	4605      	mov	r5, r0
 8005b46:	f10a 0301 	add.w	r3, sl, #1
 8005b4a:	9307      	str	r3, [sp, #28]
 8005b4c:	9b08      	ldr	r3, [sp, #32]
 8005b4e:	4453      	add	r3, sl
 8005b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b5a:	9b07      	ldr	r3, [sp, #28]
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4648      	mov	r0, r9
 8005b62:	9302      	str	r3, [sp, #8]
 8005b64:	f7ff fa96 	bl	8005094 <quorem>
 8005b68:	4639      	mov	r1, r7
 8005b6a:	9008      	str	r0, [sp, #32]
 8005b6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b70:	4648      	mov	r0, r9
 8005b72:	f000 fca1 	bl	80064b8 <__mcmp>
 8005b76:	462a      	mov	r2, r5
 8005b78:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4658      	mov	r0, fp
 8005b7e:	f000 fcb7 	bl	80064f0 <__mdiff>
 8005b82:	68c2      	ldr	r2, [r0, #12]
 8005b84:	4606      	mov	r6, r0
 8005b86:	bb02      	cbnz	r2, 8005bca <_dtoa_r+0xa22>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4648      	mov	r0, r9
 8005b8c:	f000 fc94 	bl	80064b8 <__mcmp>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4631      	mov	r1, r6
 8005b94:	4658      	mov	r0, fp
 8005b96:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b98:	f000 fa0c 	bl	8005fb4 <_Bfree>
 8005b9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ba0:	9e07      	ldr	r6, [sp, #28]
 8005ba2:	ea43 0102 	orr.w	r1, r3, r2
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba8:	4319      	orrs	r1, r3
 8005baa:	d110      	bne.n	8005bce <_dtoa_r+0xa26>
 8005bac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005bb0:	d029      	beq.n	8005c06 <_dtoa_r+0xa5e>
 8005bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dd02      	ble.n	8005bbe <_dtoa_r+0xa16>
 8005bb8:	9b08      	ldr	r3, [sp, #32]
 8005bba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005bbe:	9b02      	ldr	r3, [sp, #8]
 8005bc0:	f883 8000 	strb.w	r8, [r3]
 8005bc4:	e63b      	b.n	800583e <_dtoa_r+0x696>
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	e7bb      	b.n	8005b42 <_dtoa_r+0x99a>
 8005bca:	2201      	movs	r2, #1
 8005bcc:	e7e1      	b.n	8005b92 <_dtoa_r+0x9ea>
 8005bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	db04      	blt.n	8005bde <_dtoa_r+0xa36>
 8005bd4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	d120      	bne.n	8005c20 <_dtoa_r+0xa78>
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	dded      	ble.n	8005bbe <_dtoa_r+0xa16>
 8005be2:	4649      	mov	r1, r9
 8005be4:	2201      	movs	r2, #1
 8005be6:	4658      	mov	r0, fp
 8005be8:	f000 fbfa 	bl	80063e0 <__lshift>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4681      	mov	r9, r0
 8005bf0:	f000 fc62 	bl	80064b8 <__mcmp>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	dc03      	bgt.n	8005c00 <_dtoa_r+0xa58>
 8005bf8:	d1e1      	bne.n	8005bbe <_dtoa_r+0xa16>
 8005bfa:	f018 0f01 	tst.w	r8, #1
 8005bfe:	d0de      	beq.n	8005bbe <_dtoa_r+0xa16>
 8005c00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c04:	d1d8      	bne.n	8005bb8 <_dtoa_r+0xa10>
 8005c06:	2339      	movs	r3, #57	@ 0x39
 8005c08:	9a02      	ldr	r2, [sp, #8]
 8005c0a:	7013      	strb	r3, [r2, #0]
 8005c0c:	4633      	mov	r3, r6
 8005c0e:	461e      	mov	r6, r3
 8005c10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	2a39      	cmp	r2, #57	@ 0x39
 8005c18:	d052      	beq.n	8005cc0 <_dtoa_r+0xb18>
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e60e      	b.n	800583e <_dtoa_r+0x696>
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	dd07      	ble.n	8005c34 <_dtoa_r+0xa8c>
 8005c24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c28:	d0ed      	beq.n	8005c06 <_dtoa_r+0xa5e>
 8005c2a:	9a02      	ldr	r2, [sp, #8]
 8005c2c:	f108 0301 	add.w	r3, r8, #1
 8005c30:	7013      	strb	r3, [r2, #0]
 8005c32:	e604      	b.n	800583e <_dtoa_r+0x696>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005c3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d028      	beq.n	8005c94 <_dtoa_r+0xaec>
 8005c42:	4649      	mov	r1, r9
 8005c44:	2300      	movs	r3, #0
 8005c46:	220a      	movs	r2, #10
 8005c48:	4658      	mov	r0, fp
 8005c4a:	f000 f9d5 	bl	8005ff8 <__multadd>
 8005c4e:	42af      	cmp	r7, r5
 8005c50:	4681      	mov	r9, r0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	f04f 020a 	mov.w	r2, #10
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4658      	mov	r0, fp
 8005c5e:	d107      	bne.n	8005c70 <_dtoa_r+0xac8>
 8005c60:	f000 f9ca 	bl	8005ff8 <__multadd>
 8005c64:	4607      	mov	r7, r0
 8005c66:	4605      	mov	r5, r0
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	e774      	b.n	8005b5a <_dtoa_r+0x9b2>
 8005c70:	f000 f9c2 	bl	8005ff8 <__multadd>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4607      	mov	r7, r0
 8005c78:	2300      	movs	r3, #0
 8005c7a:	220a      	movs	r2, #10
 8005c7c:	4658      	mov	r0, fp
 8005c7e:	f000 f9bb 	bl	8005ff8 <__multadd>
 8005c82:	4605      	mov	r5, r0
 8005c84:	e7f0      	b.n	8005c68 <_dtoa_r+0xac0>
 8005c86:	9b08      	ldr	r3, [sp, #32]
 8005c88:	2700      	movs	r7, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfcc      	ite	gt
 8005c8e:	461e      	movgt	r6, r3
 8005c90:	2601      	movle	r6, #1
 8005c92:	4456      	add	r6, sl
 8005c94:	4649      	mov	r1, r9
 8005c96:	2201      	movs	r2, #1
 8005c98:	4658      	mov	r0, fp
 8005c9a:	f000 fba1 	bl	80063e0 <__lshift>
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	f000 fc09 	bl	80064b8 <__mcmp>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	dcb0      	bgt.n	8005c0c <_dtoa_r+0xa64>
 8005caa:	d102      	bne.n	8005cb2 <_dtoa_r+0xb0a>
 8005cac:	f018 0f01 	tst.w	r8, #1
 8005cb0:	d1ac      	bne.n	8005c0c <_dtoa_r+0xa64>
 8005cb2:	4633      	mov	r3, r6
 8005cb4:	461e      	mov	r6, r3
 8005cb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cba:	2a30      	cmp	r2, #48	@ 0x30
 8005cbc:	d0fa      	beq.n	8005cb4 <_dtoa_r+0xb0c>
 8005cbe:	e5be      	b.n	800583e <_dtoa_r+0x696>
 8005cc0:	459a      	cmp	sl, r3
 8005cc2:	d1a4      	bne.n	8005c0e <_dtoa_r+0xa66>
 8005cc4:	9b04      	ldr	r3, [sp, #16]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	2331      	movs	r3, #49	@ 0x31
 8005ccc:	f88a 3000 	strb.w	r3, [sl]
 8005cd0:	e5b5      	b.n	800583e <_dtoa_r+0x696>
 8005cd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cd4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005d34 <_dtoa_r+0xb8c>
 8005cd8:	b11b      	cbz	r3, 8005ce2 <_dtoa_r+0xb3a>
 8005cda:	f10a 0308 	add.w	r3, sl, #8
 8005cde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	b017      	add	sp, #92	@ 0x5c
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f77f ae3d 	ble.w	800596c <_dtoa_r+0x7c4>
 8005cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	e65b      	b.n	80059b2 <_dtoa_r+0x80a>
 8005cfa:	9b08      	ldr	r3, [sp, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f77f aed6 	ble.w	8005aae <_dtoa_r+0x906>
 8005d02:	4656      	mov	r6, sl
 8005d04:	4621      	mov	r1, r4
 8005d06:	4648      	mov	r0, r9
 8005d08:	f7ff f9c4 	bl	8005094 <quorem>
 8005d0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d10:	9b08      	ldr	r3, [sp, #32]
 8005d12:	f806 8b01 	strb.w	r8, [r6], #1
 8005d16:	eba6 020a 	sub.w	r2, r6, sl
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	ddb3      	ble.n	8005c86 <_dtoa_r+0xade>
 8005d1e:	4649      	mov	r1, r9
 8005d20:	2300      	movs	r3, #0
 8005d22:	220a      	movs	r2, #10
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 f967 	bl	8005ff8 <__multadd>
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	e7ea      	b.n	8005d04 <_dtoa_r+0xb5c>
 8005d2e:	bf00      	nop
 8005d30:	08008837 	.word	0x08008837
 8005d34:	080087bb 	.word	0x080087bb

08005d38 <_free_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d040      	beq.n	8005dc2 <_free_r+0x8a>
 8005d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d44:	1f0c      	subs	r4, r1, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfb8      	it	lt
 8005d4a:	18e4      	addlt	r4, r4, r3
 8005d4c:	f000 f8e6 	bl	8005f1c <__malloc_lock>
 8005d50:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <_free_r+0x8c>)
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	b933      	cbnz	r3, 8005d64 <_free_r+0x2c>
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6014      	str	r4, [r2, #0]
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d60:	f000 b8e2 	b.w	8005f28 <__malloc_unlock>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d908      	bls.n	8005d7a <_free_r+0x42>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	1821      	adds	r1, r4, r0
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf01      	itttt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	1809      	addeq	r1, r1, r0
 8005d76:	6021      	streq	r1, [r4, #0]
 8005d78:	e7ed      	b.n	8005d56 <_free_r+0x1e>
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	b10b      	cbz	r3, 8005d84 <_free_r+0x4c>
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d9fa      	bls.n	8005d7a <_free_r+0x42>
 8005d84:	6811      	ldr	r1, [r2, #0]
 8005d86:	1850      	adds	r0, r2, r1
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d10b      	bne.n	8005da4 <_free_r+0x6c>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	4401      	add	r1, r0
 8005d90:	1850      	adds	r0, r2, r1
 8005d92:	4283      	cmp	r3, r0
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	d1e0      	bne.n	8005d5a <_free_r+0x22>
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4408      	add	r0, r1
 8005d9e:	6010      	str	r0, [r2, #0]
 8005da0:	6053      	str	r3, [r2, #4]
 8005da2:	e7da      	b.n	8005d5a <_free_r+0x22>
 8005da4:	d902      	bls.n	8005dac <_free_r+0x74>
 8005da6:	230c      	movs	r3, #12
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	e7d6      	b.n	8005d5a <_free_r+0x22>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	1821      	adds	r1, r4, r0
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf01      	itttt	eq
 8005db4:	6819      	ldreq	r1, [r3, #0]
 8005db6:	685b      	ldreq	r3, [r3, #4]
 8005db8:	1809      	addeq	r1, r1, r0
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	6063      	str	r3, [r4, #4]
 8005dbe:	6054      	str	r4, [r2, #4]
 8005dc0:	e7cb      	b.n	8005d5a <_free_r+0x22>
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	200005dc 	.word	0x200005dc

08005dc8 <malloc>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <malloc+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f000 b825 	b.w	8005e1c <_malloc_r>
 8005dd2:	bf00      	nop
 8005dd4:	2000001c 	.word	0x2000001c

08005dd8 <sbrk_aligned>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4e0f      	ldr	r6, [pc, #60]	@ (8005e18 <sbrk_aligned+0x40>)
 8005ddc:	460c      	mov	r4, r1
 8005dde:	6831      	ldr	r1, [r6, #0]
 8005de0:	4605      	mov	r5, r0
 8005de2:	b911      	cbnz	r1, 8005dea <sbrk_aligned+0x12>
 8005de4:	f001 fdf6 	bl	80079d4 <_sbrk_r>
 8005de8:	6030      	str	r0, [r6, #0]
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f001 fdf1 	bl	80079d4 <_sbrk_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d103      	bne.n	8005dfe <sbrk_aligned+0x26>
 8005df6:	f04f 34ff 	mov.w	r4, #4294967295
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
 8005dfe:	1cc4      	adds	r4, r0, #3
 8005e00:	f024 0403 	bic.w	r4, r4, #3
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d0f8      	beq.n	8005dfa <sbrk_aligned+0x22>
 8005e08:	1a21      	subs	r1, r4, r0
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f001 fde2 	bl	80079d4 <_sbrk_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d1f2      	bne.n	8005dfa <sbrk_aligned+0x22>
 8005e14:	e7ef      	b.n	8005df6 <sbrk_aligned+0x1e>
 8005e16:	bf00      	nop
 8005e18:	200005d8 	.word	0x200005d8

08005e1c <_malloc_r>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	1ccd      	adds	r5, r1, #3
 8005e22:	f025 0503 	bic.w	r5, r5, #3
 8005e26:	3508      	adds	r5, #8
 8005e28:	2d0c      	cmp	r5, #12
 8005e2a:	bf38      	it	cc
 8005e2c:	250c      	movcc	r5, #12
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	4606      	mov	r6, r0
 8005e32:	db01      	blt.n	8005e38 <_malloc_r+0x1c>
 8005e34:	42a9      	cmp	r1, r5
 8005e36:	d904      	bls.n	8005e42 <_malloc_r+0x26>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f18 <_malloc_r+0xfc>
 8005e46:	f000 f869 	bl	8005f1c <__malloc_lock>
 8005e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4e:	461c      	mov	r4, r3
 8005e50:	bb44      	cbnz	r4, 8005ea4 <_malloc_r+0x88>
 8005e52:	4629      	mov	r1, r5
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff ffbf 	bl	8005dd8 <sbrk_aligned>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	d158      	bne.n	8005f12 <_malloc_r+0xf6>
 8005e60:	f8d8 4000 	ldr.w	r4, [r8]
 8005e64:	4627      	mov	r7, r4
 8005e66:	2f00      	cmp	r7, #0
 8005e68:	d143      	bne.n	8005ef2 <_malloc_r+0xd6>
 8005e6a:	2c00      	cmp	r4, #0
 8005e6c:	d04b      	beq.n	8005f06 <_malloc_r+0xea>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	4639      	mov	r1, r7
 8005e72:	4630      	mov	r0, r6
 8005e74:	eb04 0903 	add.w	r9, r4, r3
 8005e78:	f001 fdac 	bl	80079d4 <_sbrk_r>
 8005e7c:	4581      	cmp	r9, r0
 8005e7e:	d142      	bne.n	8005f06 <_malloc_r+0xea>
 8005e80:	6821      	ldr	r1, [r4, #0]
 8005e82:	4630      	mov	r0, r6
 8005e84:	1a6d      	subs	r5, r5, r1
 8005e86:	4629      	mov	r1, r5
 8005e88:	f7ff ffa6 	bl	8005dd8 <sbrk_aligned>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d03a      	beq.n	8005f06 <_malloc_r+0xea>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	442b      	add	r3, r5
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	bb62      	cbnz	r2, 8005ef8 <_malloc_r+0xdc>
 8005e9e:	f8c8 7000 	str.w	r7, [r8]
 8005ea2:	e00f      	b.n	8005ec4 <_malloc_r+0xa8>
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	1b52      	subs	r2, r2, r5
 8005ea8:	d420      	bmi.n	8005eec <_malloc_r+0xd0>
 8005eaa:	2a0b      	cmp	r2, #11
 8005eac:	d917      	bls.n	8005ede <_malloc_r+0xc2>
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	6025      	str	r5, [r4, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	6059      	strne	r1, [r3, #4]
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	bf08      	it	eq
 8005ebc:	f8c8 1000 	streq.w	r1, [r8]
 8005ec0:	5162      	str	r2, [r4, r5]
 8005ec2:	604b      	str	r3, [r1, #4]
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 f82f 	bl	8005f28 <__malloc_unlock>
 8005eca:	f104 000b 	add.w	r0, r4, #11
 8005ece:	1d23      	adds	r3, r4, #4
 8005ed0:	f020 0007 	bic.w	r0, r0, #7
 8005ed4:	1ac2      	subs	r2, r0, r3
 8005ed6:	bf1c      	itt	ne
 8005ed8:	1a1b      	subne	r3, r3, r0
 8005eda:	50a3      	strne	r3, [r4, r2]
 8005edc:	e7af      	b.n	8005e3e <_malloc_r+0x22>
 8005ede:	6862      	ldr	r2, [r4, #4]
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	bf0c      	ite	eq
 8005ee4:	f8c8 2000 	streq.w	r2, [r8]
 8005ee8:	605a      	strne	r2, [r3, #4]
 8005eea:	e7eb      	b.n	8005ec4 <_malloc_r+0xa8>
 8005eec:	4623      	mov	r3, r4
 8005eee:	6864      	ldr	r4, [r4, #4]
 8005ef0:	e7ae      	b.n	8005e50 <_malloc_r+0x34>
 8005ef2:	463c      	mov	r4, r7
 8005ef4:	687f      	ldr	r7, [r7, #4]
 8005ef6:	e7b6      	b.n	8005e66 <_malloc_r+0x4a>
 8005ef8:	461a      	mov	r2, r3
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d1fb      	bne.n	8005ef8 <_malloc_r+0xdc>
 8005f00:	2300      	movs	r3, #0
 8005f02:	6053      	str	r3, [r2, #4]
 8005f04:	e7de      	b.n	8005ec4 <_malloc_r+0xa8>
 8005f06:	230c      	movs	r3, #12
 8005f08:	4630      	mov	r0, r6
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f000 f80c 	bl	8005f28 <__malloc_unlock>
 8005f10:	e794      	b.n	8005e3c <_malloc_r+0x20>
 8005f12:	6005      	str	r5, [r0, #0]
 8005f14:	e7d6      	b.n	8005ec4 <_malloc_r+0xa8>
 8005f16:	bf00      	nop
 8005f18:	200005dc 	.word	0x200005dc

08005f1c <__malloc_lock>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	@ (8005f24 <__malloc_lock+0x8>)
 8005f1e:	f7ff b8a4 	b.w	800506a <__retarget_lock_acquire_recursive>
 8005f22:	bf00      	nop
 8005f24:	200005d4 	.word	0x200005d4

08005f28 <__malloc_unlock>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__malloc_unlock+0x8>)
 8005f2a:	f7ff b89f 	b.w	800506c <__retarget_lock_release_recursive>
 8005f2e:	bf00      	nop
 8005f30:	200005d4 	.word	0x200005d4

08005f34 <_Balloc>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	69c6      	ldr	r6, [r0, #28]
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	b976      	cbnz	r6, 8005f5c <_Balloc+0x28>
 8005f3e:	2010      	movs	r0, #16
 8005f40:	f7ff ff42 	bl	8005dc8 <malloc>
 8005f44:	4602      	mov	r2, r0
 8005f46:	61e0      	str	r0, [r4, #28]
 8005f48:	b920      	cbnz	r0, 8005f54 <_Balloc+0x20>
 8005f4a:	216b      	movs	r1, #107	@ 0x6b
 8005f4c:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <_Balloc+0x78>)
 8005f4e:	4818      	ldr	r0, [pc, #96]	@ (8005fb0 <_Balloc+0x7c>)
 8005f50:	f001 fd64 	bl	8007a1c <__assert_func>
 8005f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f58:	6006      	str	r6, [r0, #0]
 8005f5a:	60c6      	str	r6, [r0, #12]
 8005f5c:	69e6      	ldr	r6, [r4, #28]
 8005f5e:	68f3      	ldr	r3, [r6, #12]
 8005f60:	b183      	cbz	r3, 8005f84 <_Balloc+0x50>
 8005f62:	69e3      	ldr	r3, [r4, #28]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f6a:	b9b8      	cbnz	r0, 8005f9c <_Balloc+0x68>
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f72:	1d72      	adds	r2, r6, #5
 8005f74:	4620      	mov	r0, r4
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	f001 fd6e 	bl	8007a58 <_calloc_r>
 8005f7c:	b160      	cbz	r0, 8005f98 <_Balloc+0x64>
 8005f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f82:	e00e      	b.n	8005fa2 <_Balloc+0x6e>
 8005f84:	2221      	movs	r2, #33	@ 0x21
 8005f86:	2104      	movs	r1, #4
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f001 fd65 	bl	8007a58 <_calloc_r>
 8005f8e:	69e3      	ldr	r3, [r4, #28]
 8005f90:	60f0      	str	r0, [r6, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e4      	bne.n	8005f62 <_Balloc+0x2e>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	6802      	ldr	r2, [r0, #0]
 8005f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fa8:	e7f7      	b.n	8005f9a <_Balloc+0x66>
 8005faa:	bf00      	nop
 8005fac:	080087c8 	.word	0x080087c8
 8005fb0:	08008848 	.word	0x08008848

08005fb4 <_Bfree>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	69c6      	ldr	r6, [r0, #28]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b976      	cbnz	r6, 8005fdc <_Bfree+0x28>
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f7ff ff02 	bl	8005dc8 <malloc>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	61e8      	str	r0, [r5, #28]
 8005fc8:	b920      	cbnz	r0, 8005fd4 <_Bfree+0x20>
 8005fca:	218f      	movs	r1, #143	@ 0x8f
 8005fcc:	4b08      	ldr	r3, [pc, #32]	@ (8005ff0 <_Bfree+0x3c>)
 8005fce:	4809      	ldr	r0, [pc, #36]	@ (8005ff4 <_Bfree+0x40>)
 8005fd0:	f001 fd24 	bl	8007a1c <__assert_func>
 8005fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd8:	6006      	str	r6, [r0, #0]
 8005fda:	60c6      	str	r6, [r0, #12]
 8005fdc:	b13c      	cbz	r4, 8005fee <_Bfree+0x3a>
 8005fde:	69eb      	ldr	r3, [r5, #28]
 8005fe0:	6862      	ldr	r2, [r4, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	6021      	str	r1, [r4, #0]
 8005fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	080087c8 	.word	0x080087c8
 8005ff4:	08008848 	.word	0x08008848

08005ff8 <__multadd>:
 8005ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	461e      	mov	r6, r3
 8006002:	2000      	movs	r0, #0
 8006004:	690d      	ldr	r5, [r1, #16]
 8006006:	f101 0c14 	add.w	ip, r1, #20
 800600a:	f8dc 3000 	ldr.w	r3, [ip]
 800600e:	3001      	adds	r0, #1
 8006010:	b299      	uxth	r1, r3
 8006012:	fb02 6101 	mla	r1, r2, r1, r6
 8006016:	0c1e      	lsrs	r6, r3, #16
 8006018:	0c0b      	lsrs	r3, r1, #16
 800601a:	fb02 3306 	mla	r3, r2, r6, r3
 800601e:	b289      	uxth	r1, r1
 8006020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006024:	4285      	cmp	r5, r0
 8006026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800602a:	f84c 1b04 	str.w	r1, [ip], #4
 800602e:	dcec      	bgt.n	800600a <__multadd+0x12>
 8006030:	b30e      	cbz	r6, 8006076 <__multadd+0x7e>
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	42ab      	cmp	r3, r5
 8006036:	dc19      	bgt.n	800606c <__multadd+0x74>
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4638      	mov	r0, r7
 800603c:	3101      	adds	r1, #1
 800603e:	f7ff ff79 	bl	8005f34 <_Balloc>
 8006042:	4680      	mov	r8, r0
 8006044:	b928      	cbnz	r0, 8006052 <__multadd+0x5a>
 8006046:	4602      	mov	r2, r0
 8006048:	21ba      	movs	r1, #186	@ 0xba
 800604a:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <__multadd+0x84>)
 800604c:	480c      	ldr	r0, [pc, #48]	@ (8006080 <__multadd+0x88>)
 800604e:	f001 fce5 	bl	8007a1c <__assert_func>
 8006052:	6922      	ldr	r2, [r4, #16]
 8006054:	f104 010c 	add.w	r1, r4, #12
 8006058:	3202      	adds	r2, #2
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	300c      	adds	r0, #12
 800605e:	f001 fcc9 	bl	80079f4 <memcpy>
 8006062:	4621      	mov	r1, r4
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff ffa5 	bl	8005fb4 <_Bfree>
 800606a:	4644      	mov	r4, r8
 800606c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006070:	3501      	adds	r5, #1
 8006072:	615e      	str	r6, [r3, #20]
 8006074:	6125      	str	r5, [r4, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	08008837 	.word	0x08008837
 8006080:	08008848 	.word	0x08008848

08006084 <__s2b>:
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006088:	4615      	mov	r5, r2
 800608a:	2209      	movs	r2, #9
 800608c:	461f      	mov	r7, r3
 800608e:	3308      	adds	r3, #8
 8006090:	460c      	mov	r4, r1
 8006092:	fb93 f3f2 	sdiv	r3, r3, r2
 8006096:	4606      	mov	r6, r0
 8006098:	2201      	movs	r2, #1
 800609a:	2100      	movs	r1, #0
 800609c:	429a      	cmp	r2, r3
 800609e:	db09      	blt.n	80060b4 <__s2b+0x30>
 80060a0:	4630      	mov	r0, r6
 80060a2:	f7ff ff47 	bl	8005f34 <_Balloc>
 80060a6:	b940      	cbnz	r0, 80060ba <__s2b+0x36>
 80060a8:	4602      	mov	r2, r0
 80060aa:	21d3      	movs	r1, #211	@ 0xd3
 80060ac:	4b18      	ldr	r3, [pc, #96]	@ (8006110 <__s2b+0x8c>)
 80060ae:	4819      	ldr	r0, [pc, #100]	@ (8006114 <__s2b+0x90>)
 80060b0:	f001 fcb4 	bl	8007a1c <__assert_func>
 80060b4:	0052      	lsls	r2, r2, #1
 80060b6:	3101      	adds	r1, #1
 80060b8:	e7f0      	b.n	800609c <__s2b+0x18>
 80060ba:	9b08      	ldr	r3, [sp, #32]
 80060bc:	2d09      	cmp	r5, #9
 80060be:	6143      	str	r3, [r0, #20]
 80060c0:	f04f 0301 	mov.w	r3, #1
 80060c4:	6103      	str	r3, [r0, #16]
 80060c6:	dd16      	ble.n	80060f6 <__s2b+0x72>
 80060c8:	f104 0909 	add.w	r9, r4, #9
 80060cc:	46c8      	mov	r8, r9
 80060ce:	442c      	add	r4, r5
 80060d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060d4:	4601      	mov	r1, r0
 80060d6:	220a      	movs	r2, #10
 80060d8:	4630      	mov	r0, r6
 80060da:	3b30      	subs	r3, #48	@ 0x30
 80060dc:	f7ff ff8c 	bl	8005ff8 <__multadd>
 80060e0:	45a0      	cmp	r8, r4
 80060e2:	d1f5      	bne.n	80060d0 <__s2b+0x4c>
 80060e4:	f1a5 0408 	sub.w	r4, r5, #8
 80060e8:	444c      	add	r4, r9
 80060ea:	1b2d      	subs	r5, r5, r4
 80060ec:	1963      	adds	r3, r4, r5
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	db04      	blt.n	80060fc <__s2b+0x78>
 80060f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f6:	2509      	movs	r5, #9
 80060f8:	340a      	adds	r4, #10
 80060fa:	e7f6      	b.n	80060ea <__s2b+0x66>
 80060fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006100:	4601      	mov	r1, r0
 8006102:	220a      	movs	r2, #10
 8006104:	4630      	mov	r0, r6
 8006106:	3b30      	subs	r3, #48	@ 0x30
 8006108:	f7ff ff76 	bl	8005ff8 <__multadd>
 800610c:	e7ee      	b.n	80060ec <__s2b+0x68>
 800610e:	bf00      	nop
 8006110:	08008837 	.word	0x08008837
 8006114:	08008848 	.word	0x08008848

08006118 <__hi0bits>:
 8006118:	4603      	mov	r3, r0
 800611a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800611e:	bf3a      	itte	cc
 8006120:	0403      	lslcc	r3, r0, #16
 8006122:	2010      	movcc	r0, #16
 8006124:	2000      	movcs	r0, #0
 8006126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800612a:	bf3c      	itt	cc
 800612c:	021b      	lslcc	r3, r3, #8
 800612e:	3008      	addcc	r0, #8
 8006130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006134:	bf3c      	itt	cc
 8006136:	011b      	lslcc	r3, r3, #4
 8006138:	3004      	addcc	r0, #4
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613e:	bf3c      	itt	cc
 8006140:	009b      	lslcc	r3, r3, #2
 8006142:	3002      	addcc	r0, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	db05      	blt.n	8006154 <__hi0bits+0x3c>
 8006148:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800614c:	f100 0001 	add.w	r0, r0, #1
 8006150:	bf08      	it	eq
 8006152:	2020      	moveq	r0, #32
 8006154:	4770      	bx	lr

08006156 <__lo0bits>:
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	4602      	mov	r2, r0
 800615a:	f013 0007 	ands.w	r0, r3, #7
 800615e:	d00b      	beq.n	8006178 <__lo0bits+0x22>
 8006160:	07d9      	lsls	r1, r3, #31
 8006162:	d421      	bmi.n	80061a8 <__lo0bits+0x52>
 8006164:	0798      	lsls	r0, r3, #30
 8006166:	bf49      	itett	mi
 8006168:	085b      	lsrmi	r3, r3, #1
 800616a:	089b      	lsrpl	r3, r3, #2
 800616c:	2001      	movmi	r0, #1
 800616e:	6013      	strmi	r3, [r2, #0]
 8006170:	bf5c      	itt	pl
 8006172:	2002      	movpl	r0, #2
 8006174:	6013      	strpl	r3, [r2, #0]
 8006176:	4770      	bx	lr
 8006178:	b299      	uxth	r1, r3
 800617a:	b909      	cbnz	r1, 8006180 <__lo0bits+0x2a>
 800617c:	2010      	movs	r0, #16
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	b2d9      	uxtb	r1, r3
 8006182:	b909      	cbnz	r1, 8006188 <__lo0bits+0x32>
 8006184:	3008      	adds	r0, #8
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	0719      	lsls	r1, r3, #28
 800618a:	bf04      	itt	eq
 800618c:	091b      	lsreq	r3, r3, #4
 800618e:	3004      	addeq	r0, #4
 8006190:	0799      	lsls	r1, r3, #30
 8006192:	bf04      	itt	eq
 8006194:	089b      	lsreq	r3, r3, #2
 8006196:	3002      	addeq	r0, #2
 8006198:	07d9      	lsls	r1, r3, #31
 800619a:	d403      	bmi.n	80061a4 <__lo0bits+0x4e>
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	f100 0001 	add.w	r0, r0, #1
 80061a2:	d003      	beq.n	80061ac <__lo0bits+0x56>
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4770      	bx	lr
 80061a8:	2000      	movs	r0, #0
 80061aa:	4770      	bx	lr
 80061ac:	2020      	movs	r0, #32
 80061ae:	4770      	bx	lr

080061b0 <__i2b>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	2101      	movs	r1, #1
 80061b6:	f7ff febd 	bl	8005f34 <_Balloc>
 80061ba:	4602      	mov	r2, r0
 80061bc:	b928      	cbnz	r0, 80061ca <__i2b+0x1a>
 80061be:	f240 1145 	movw	r1, #325	@ 0x145
 80061c2:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <__i2b+0x24>)
 80061c4:	4804      	ldr	r0, [pc, #16]	@ (80061d8 <__i2b+0x28>)
 80061c6:	f001 fc29 	bl	8007a1c <__assert_func>
 80061ca:	2301      	movs	r3, #1
 80061cc:	6144      	str	r4, [r0, #20]
 80061ce:	6103      	str	r3, [r0, #16]
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	bf00      	nop
 80061d4:	08008837 	.word	0x08008837
 80061d8:	08008848 	.word	0x08008848

080061dc <__multiply>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	4614      	mov	r4, r2
 80061e2:	690a      	ldr	r2, [r1, #16]
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	460f      	mov	r7, r1
 80061e8:	429a      	cmp	r2, r3
 80061ea:	bfa2      	ittt	ge
 80061ec:	4623      	movge	r3, r4
 80061ee:	460c      	movge	r4, r1
 80061f0:	461f      	movge	r7, r3
 80061f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80061f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80061fa:	68a3      	ldr	r3, [r4, #8]
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	eb0a 0609 	add.w	r6, sl, r9
 8006202:	42b3      	cmp	r3, r6
 8006204:	b085      	sub	sp, #20
 8006206:	bfb8      	it	lt
 8006208:	3101      	addlt	r1, #1
 800620a:	f7ff fe93 	bl	8005f34 <_Balloc>
 800620e:	b930      	cbnz	r0, 800621e <__multiply+0x42>
 8006210:	4602      	mov	r2, r0
 8006212:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006216:	4b43      	ldr	r3, [pc, #268]	@ (8006324 <__multiply+0x148>)
 8006218:	4843      	ldr	r0, [pc, #268]	@ (8006328 <__multiply+0x14c>)
 800621a:	f001 fbff 	bl	8007a1c <__assert_func>
 800621e:	f100 0514 	add.w	r5, r0, #20
 8006222:	462b      	mov	r3, r5
 8006224:	2200      	movs	r2, #0
 8006226:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800622a:	4543      	cmp	r3, r8
 800622c:	d321      	bcc.n	8006272 <__multiply+0x96>
 800622e:	f107 0114 	add.w	r1, r7, #20
 8006232:	f104 0214 	add.w	r2, r4, #20
 8006236:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800623a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800623e:	9302      	str	r3, [sp, #8]
 8006240:	1b13      	subs	r3, r2, r4
 8006242:	3b15      	subs	r3, #21
 8006244:	f023 0303 	bic.w	r3, r3, #3
 8006248:	3304      	adds	r3, #4
 800624a:	f104 0715 	add.w	r7, r4, #21
 800624e:	42ba      	cmp	r2, r7
 8006250:	bf38      	it	cc
 8006252:	2304      	movcc	r3, #4
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	428b      	cmp	r3, r1
 800625c:	d80c      	bhi.n	8006278 <__multiply+0x9c>
 800625e:	2e00      	cmp	r6, #0
 8006260:	dd03      	ble.n	800626a <__multiply+0x8e>
 8006262:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006266:	2b00      	cmp	r3, #0
 8006268:	d05a      	beq.n	8006320 <__multiply+0x144>
 800626a:	6106      	str	r6, [r0, #16]
 800626c:	b005      	add	sp, #20
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	f843 2b04 	str.w	r2, [r3], #4
 8006276:	e7d8      	b.n	800622a <__multiply+0x4e>
 8006278:	f8b1 a000 	ldrh.w	sl, [r1]
 800627c:	f1ba 0f00 	cmp.w	sl, #0
 8006280:	d023      	beq.n	80062ca <__multiply+0xee>
 8006282:	46a9      	mov	r9, r5
 8006284:	f04f 0c00 	mov.w	ip, #0
 8006288:	f104 0e14 	add.w	lr, r4, #20
 800628c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006290:	f8d9 3000 	ldr.w	r3, [r9]
 8006294:	fa1f fb87 	uxth.w	fp, r7
 8006298:	b29b      	uxth	r3, r3
 800629a:	fb0a 330b 	mla	r3, sl, fp, r3
 800629e:	4463      	add	r3, ip
 80062a0:	f8d9 c000 	ldr.w	ip, [r9]
 80062a4:	0c3f      	lsrs	r7, r7, #16
 80062a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062aa:	fb0a c707 	mla	r7, sl, r7, ip
 80062ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062b8:	4572      	cmp	r2, lr
 80062ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80062be:	f849 3b04 	str.w	r3, [r9], #4
 80062c2:	d8e3      	bhi.n	800628c <__multiply+0xb0>
 80062c4:	9b01      	ldr	r3, [sp, #4]
 80062c6:	f845 c003 	str.w	ip, [r5, r3]
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	3104      	adds	r1, #4
 80062ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80062d2:	f1b9 0f00 	cmp.w	r9, #0
 80062d6:	d021      	beq.n	800631c <__multiply+0x140>
 80062d8:	46ae      	mov	lr, r5
 80062da:	f04f 0a00 	mov.w	sl, #0
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	f104 0c14 	add.w	ip, r4, #20
 80062e4:	f8bc b000 	ldrh.w	fp, [ip]
 80062e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	fb09 770b 	mla	r7, r9, fp, r7
 80062f2:	4457      	add	r7, sl
 80062f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062f8:	f84e 3b04 	str.w	r3, [lr], #4
 80062fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006304:	f8be 3000 	ldrh.w	r3, [lr]
 8006308:	4562      	cmp	r2, ip
 800630a:	fb09 330a 	mla	r3, r9, sl, r3
 800630e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006316:	d8e5      	bhi.n	80062e4 <__multiply+0x108>
 8006318:	9f01      	ldr	r7, [sp, #4]
 800631a:	51eb      	str	r3, [r5, r7]
 800631c:	3504      	adds	r5, #4
 800631e:	e79a      	b.n	8006256 <__multiply+0x7a>
 8006320:	3e01      	subs	r6, #1
 8006322:	e79c      	b.n	800625e <__multiply+0x82>
 8006324:	08008837 	.word	0x08008837
 8006328:	08008848 	.word	0x08008848

0800632c <__pow5mult>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	4615      	mov	r5, r2
 8006332:	f012 0203 	ands.w	r2, r2, #3
 8006336:	4607      	mov	r7, r0
 8006338:	460e      	mov	r6, r1
 800633a:	d007      	beq.n	800634c <__pow5mult+0x20>
 800633c:	4c25      	ldr	r4, [pc, #148]	@ (80063d4 <__pow5mult+0xa8>)
 800633e:	3a01      	subs	r2, #1
 8006340:	2300      	movs	r3, #0
 8006342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006346:	f7ff fe57 	bl	8005ff8 <__multadd>
 800634a:	4606      	mov	r6, r0
 800634c:	10ad      	asrs	r5, r5, #2
 800634e:	d03d      	beq.n	80063cc <__pow5mult+0xa0>
 8006350:	69fc      	ldr	r4, [r7, #28]
 8006352:	b97c      	cbnz	r4, 8006374 <__pow5mult+0x48>
 8006354:	2010      	movs	r0, #16
 8006356:	f7ff fd37 	bl	8005dc8 <malloc>
 800635a:	4602      	mov	r2, r0
 800635c:	61f8      	str	r0, [r7, #28]
 800635e:	b928      	cbnz	r0, 800636c <__pow5mult+0x40>
 8006360:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006364:	4b1c      	ldr	r3, [pc, #112]	@ (80063d8 <__pow5mult+0xac>)
 8006366:	481d      	ldr	r0, [pc, #116]	@ (80063dc <__pow5mult+0xb0>)
 8006368:	f001 fb58 	bl	8007a1c <__assert_func>
 800636c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006370:	6004      	str	r4, [r0, #0]
 8006372:	60c4      	str	r4, [r0, #12]
 8006374:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800637c:	b94c      	cbnz	r4, 8006392 <__pow5mult+0x66>
 800637e:	f240 2171 	movw	r1, #625	@ 0x271
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff ff14 	bl	80061b0 <__i2b>
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	f04f 0900 	mov.w	r9, #0
 8006396:	07eb      	lsls	r3, r5, #31
 8006398:	d50a      	bpl.n	80063b0 <__pow5mult+0x84>
 800639a:	4631      	mov	r1, r6
 800639c:	4622      	mov	r2, r4
 800639e:	4638      	mov	r0, r7
 80063a0:	f7ff ff1c 	bl	80061dc <__multiply>
 80063a4:	4680      	mov	r8, r0
 80063a6:	4631      	mov	r1, r6
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff fe03 	bl	8005fb4 <_Bfree>
 80063ae:	4646      	mov	r6, r8
 80063b0:	106d      	asrs	r5, r5, #1
 80063b2:	d00b      	beq.n	80063cc <__pow5mult+0xa0>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	b938      	cbnz	r0, 80063c8 <__pow5mult+0x9c>
 80063b8:	4622      	mov	r2, r4
 80063ba:	4621      	mov	r1, r4
 80063bc:	4638      	mov	r0, r7
 80063be:	f7ff ff0d 	bl	80061dc <__multiply>
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	f8c0 9000 	str.w	r9, [r0]
 80063c8:	4604      	mov	r4, r0
 80063ca:	e7e4      	b.n	8006396 <__pow5mult+0x6a>
 80063cc:	4630      	mov	r0, r6
 80063ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d2:	bf00      	nop
 80063d4:	080088a4 	.word	0x080088a4
 80063d8:	080087c8 	.word	0x080087c8
 80063dc:	08008848 	.word	0x08008848

080063e0 <__lshift>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	460c      	mov	r4, r1
 80063e6:	4607      	mov	r7, r0
 80063e8:	4691      	mov	r9, r2
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	6849      	ldr	r1, [r1, #4]
 80063ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063f8:	f108 0601 	add.w	r6, r8, #1
 80063fc:	42b3      	cmp	r3, r6
 80063fe:	db0b      	blt.n	8006418 <__lshift+0x38>
 8006400:	4638      	mov	r0, r7
 8006402:	f7ff fd97 	bl	8005f34 <_Balloc>
 8006406:	4605      	mov	r5, r0
 8006408:	b948      	cbnz	r0, 800641e <__lshift+0x3e>
 800640a:	4602      	mov	r2, r0
 800640c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006410:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <__lshift+0xd0>)
 8006412:	4828      	ldr	r0, [pc, #160]	@ (80064b4 <__lshift+0xd4>)
 8006414:	f001 fb02 	bl	8007a1c <__assert_func>
 8006418:	3101      	adds	r1, #1
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	e7ee      	b.n	80063fc <__lshift+0x1c>
 800641e:	2300      	movs	r3, #0
 8006420:	f100 0114 	add.w	r1, r0, #20
 8006424:	f100 0210 	add.w	r2, r0, #16
 8006428:	4618      	mov	r0, r3
 800642a:	4553      	cmp	r3, sl
 800642c:	db33      	blt.n	8006496 <__lshift+0xb6>
 800642e:	6920      	ldr	r0, [r4, #16]
 8006430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006434:	f104 0314 	add.w	r3, r4, #20
 8006438:	f019 091f 	ands.w	r9, r9, #31
 800643c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006440:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006444:	d02b      	beq.n	800649e <__lshift+0xbe>
 8006446:	468a      	mov	sl, r1
 8006448:	2200      	movs	r2, #0
 800644a:	f1c9 0e20 	rsb	lr, r9, #32
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	fa00 f009 	lsl.w	r0, r0, r9
 8006454:	4310      	orrs	r0, r2
 8006456:	f84a 0b04 	str.w	r0, [sl], #4
 800645a:	f853 2b04 	ldr.w	r2, [r3], #4
 800645e:	459c      	cmp	ip, r3
 8006460:	fa22 f20e 	lsr.w	r2, r2, lr
 8006464:	d8f3      	bhi.n	800644e <__lshift+0x6e>
 8006466:	ebac 0304 	sub.w	r3, ip, r4
 800646a:	3b15      	subs	r3, #21
 800646c:	f023 0303 	bic.w	r3, r3, #3
 8006470:	3304      	adds	r3, #4
 8006472:	f104 0015 	add.w	r0, r4, #21
 8006476:	4584      	cmp	ip, r0
 8006478:	bf38      	it	cc
 800647a:	2304      	movcc	r3, #4
 800647c:	50ca      	str	r2, [r1, r3]
 800647e:	b10a      	cbz	r2, 8006484 <__lshift+0xa4>
 8006480:	f108 0602 	add.w	r6, r8, #2
 8006484:	3e01      	subs	r6, #1
 8006486:	4638      	mov	r0, r7
 8006488:	4621      	mov	r1, r4
 800648a:	612e      	str	r6, [r5, #16]
 800648c:	f7ff fd92 	bl	8005fb4 <_Bfree>
 8006490:	4628      	mov	r0, r5
 8006492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006496:	f842 0f04 	str.w	r0, [r2, #4]!
 800649a:	3301      	adds	r3, #1
 800649c:	e7c5      	b.n	800642a <__lshift+0x4a>
 800649e:	3904      	subs	r1, #4
 80064a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a4:	459c      	cmp	ip, r3
 80064a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80064aa:	d8f9      	bhi.n	80064a0 <__lshift+0xc0>
 80064ac:	e7ea      	b.n	8006484 <__lshift+0xa4>
 80064ae:	bf00      	nop
 80064b0:	08008837 	.word	0x08008837
 80064b4:	08008848 	.word	0x08008848

080064b8 <__mcmp>:
 80064b8:	4603      	mov	r3, r0
 80064ba:	690a      	ldr	r2, [r1, #16]
 80064bc:	6900      	ldr	r0, [r0, #16]
 80064be:	b530      	push	{r4, r5, lr}
 80064c0:	1a80      	subs	r0, r0, r2
 80064c2:	d10e      	bne.n	80064e2 <__mcmp+0x2a>
 80064c4:	3314      	adds	r3, #20
 80064c6:	3114      	adds	r1, #20
 80064c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064d8:	4295      	cmp	r5, r2
 80064da:	d003      	beq.n	80064e4 <__mcmp+0x2c>
 80064dc:	d205      	bcs.n	80064ea <__mcmp+0x32>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	bd30      	pop	{r4, r5, pc}
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d3f3      	bcc.n	80064d0 <__mcmp+0x18>
 80064e8:	e7fb      	b.n	80064e2 <__mcmp+0x2a>
 80064ea:	2001      	movs	r0, #1
 80064ec:	e7f9      	b.n	80064e2 <__mcmp+0x2a>
	...

080064f0 <__mdiff>:
 80064f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4689      	mov	r9, r1
 80064f6:	4606      	mov	r6, r0
 80064f8:	4611      	mov	r1, r2
 80064fa:	4648      	mov	r0, r9
 80064fc:	4614      	mov	r4, r2
 80064fe:	f7ff ffdb 	bl	80064b8 <__mcmp>
 8006502:	1e05      	subs	r5, r0, #0
 8006504:	d112      	bne.n	800652c <__mdiff+0x3c>
 8006506:	4629      	mov	r1, r5
 8006508:	4630      	mov	r0, r6
 800650a:	f7ff fd13 	bl	8005f34 <_Balloc>
 800650e:	4602      	mov	r2, r0
 8006510:	b928      	cbnz	r0, 800651e <__mdiff+0x2e>
 8006512:	f240 2137 	movw	r1, #567	@ 0x237
 8006516:	4b3e      	ldr	r3, [pc, #248]	@ (8006610 <__mdiff+0x120>)
 8006518:	483e      	ldr	r0, [pc, #248]	@ (8006614 <__mdiff+0x124>)
 800651a:	f001 fa7f 	bl	8007a1c <__assert_func>
 800651e:	2301      	movs	r3, #1
 8006520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006524:	4610      	mov	r0, r2
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	bfbc      	itt	lt
 800652e:	464b      	movlt	r3, r9
 8006530:	46a1      	movlt	r9, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006538:	bfba      	itte	lt
 800653a:	461c      	movlt	r4, r3
 800653c:	2501      	movlt	r5, #1
 800653e:	2500      	movge	r5, #0
 8006540:	f7ff fcf8 	bl	8005f34 <_Balloc>
 8006544:	4602      	mov	r2, r0
 8006546:	b918      	cbnz	r0, 8006550 <__mdiff+0x60>
 8006548:	f240 2145 	movw	r1, #581	@ 0x245
 800654c:	4b30      	ldr	r3, [pc, #192]	@ (8006610 <__mdiff+0x120>)
 800654e:	e7e3      	b.n	8006518 <__mdiff+0x28>
 8006550:	f100 0b14 	add.w	fp, r0, #20
 8006554:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006558:	f109 0310 	add.w	r3, r9, #16
 800655c:	60c5      	str	r5, [r0, #12]
 800655e:	f04f 0c00 	mov.w	ip, #0
 8006562:	f109 0514 	add.w	r5, r9, #20
 8006566:	46d9      	mov	r9, fp
 8006568:	6926      	ldr	r6, [r4, #16]
 800656a:	f104 0e14 	add.w	lr, r4, #20
 800656e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006572:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	9b01      	ldr	r3, [sp, #4]
 800657a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800657e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006582:	b281      	uxth	r1, r0
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	fa1f f38a 	uxth.w	r3, sl
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	0c00      	lsrs	r0, r0, #16
 800658e:	4463      	add	r3, ip
 8006590:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006594:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006598:	b29b      	uxth	r3, r3
 800659a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800659e:	4576      	cmp	r6, lr
 80065a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065a4:	f849 3b04 	str.w	r3, [r9], #4
 80065a8:	d8e6      	bhi.n	8006578 <__mdiff+0x88>
 80065aa:	1b33      	subs	r3, r6, r4
 80065ac:	3b15      	subs	r3, #21
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	3415      	adds	r4, #21
 80065b4:	3304      	adds	r3, #4
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	bf38      	it	cc
 80065ba:	2304      	movcc	r3, #4
 80065bc:	441d      	add	r5, r3
 80065be:	445b      	add	r3, fp
 80065c0:	461e      	mov	r6, r3
 80065c2:	462c      	mov	r4, r5
 80065c4:	4544      	cmp	r4, r8
 80065c6:	d30e      	bcc.n	80065e6 <__mdiff+0xf6>
 80065c8:	f108 0103 	add.w	r1, r8, #3
 80065cc:	1b49      	subs	r1, r1, r5
 80065ce:	f021 0103 	bic.w	r1, r1, #3
 80065d2:	3d03      	subs	r5, #3
 80065d4:	45a8      	cmp	r8, r5
 80065d6:	bf38      	it	cc
 80065d8:	2100      	movcc	r1, #0
 80065da:	440b      	add	r3, r1
 80065dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065e0:	b199      	cbz	r1, 800660a <__mdiff+0x11a>
 80065e2:	6117      	str	r7, [r2, #16]
 80065e4:	e79e      	b.n	8006524 <__mdiff+0x34>
 80065e6:	46e6      	mov	lr, ip
 80065e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80065ec:	fa1f fc81 	uxth.w	ip, r1
 80065f0:	44f4      	add	ip, lr
 80065f2:	0c08      	lsrs	r0, r1, #16
 80065f4:	4471      	add	r1, lr
 80065f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065fa:	b289      	uxth	r1, r1
 80065fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006604:	f846 1b04 	str.w	r1, [r6], #4
 8006608:	e7dc      	b.n	80065c4 <__mdiff+0xd4>
 800660a:	3f01      	subs	r7, #1
 800660c:	e7e6      	b.n	80065dc <__mdiff+0xec>
 800660e:	bf00      	nop
 8006610:	08008837 	.word	0x08008837
 8006614:	08008848 	.word	0x08008848

08006618 <__ulp>:
 8006618:	4b0e      	ldr	r3, [pc, #56]	@ (8006654 <__ulp+0x3c>)
 800661a:	400b      	ands	r3, r1
 800661c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc08      	bgt.n	8006636 <__ulp+0x1e>
 8006624:	425b      	negs	r3, r3
 8006626:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800662a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800662e:	da04      	bge.n	800663a <__ulp+0x22>
 8006630:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006634:	4113      	asrs	r3, r2
 8006636:	2200      	movs	r2, #0
 8006638:	e008      	b.n	800664c <__ulp+0x34>
 800663a:	f1a2 0314 	sub.w	r3, r2, #20
 800663e:	2b1e      	cmp	r3, #30
 8006640:	bfd6      	itet	le
 8006642:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006646:	2201      	movgt	r2, #1
 8006648:	40da      	lsrle	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	7ff00000 	.word	0x7ff00000

08006658 <__b2d>:
 8006658:	6902      	ldr	r2, [r0, #16]
 800665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665c:	f100 0614 	add.w	r6, r0, #20
 8006660:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006664:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006668:	4f1e      	ldr	r7, [pc, #120]	@ (80066e4 <__b2d+0x8c>)
 800666a:	4620      	mov	r0, r4
 800666c:	f7ff fd54 	bl	8006118 <__hi0bits>
 8006670:	4603      	mov	r3, r0
 8006672:	f1c0 0020 	rsb	r0, r0, #32
 8006676:	2b0a      	cmp	r3, #10
 8006678:	f1a2 0504 	sub.w	r5, r2, #4
 800667c:	6008      	str	r0, [r1, #0]
 800667e:	dc12      	bgt.n	80066a6 <__b2d+0x4e>
 8006680:	42ae      	cmp	r6, r5
 8006682:	bf2c      	ite	cs
 8006684:	2200      	movcs	r2, #0
 8006686:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800668a:	f1c3 0c0b 	rsb	ip, r3, #11
 800668e:	3315      	adds	r3, #21
 8006690:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006694:	fa04 f303 	lsl.w	r3, r4, r3
 8006698:	fa22 f20c 	lsr.w	r2, r2, ip
 800669c:	ea4e 0107 	orr.w	r1, lr, r7
 80066a0:	431a      	orrs	r2, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a6:	42ae      	cmp	r6, r5
 80066a8:	bf36      	itet	cc
 80066aa:	f1a2 0508 	subcc.w	r5, r2, #8
 80066ae:	2200      	movcs	r2, #0
 80066b0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80066b4:	3b0b      	subs	r3, #11
 80066b6:	d012      	beq.n	80066de <__b2d+0x86>
 80066b8:	f1c3 0720 	rsb	r7, r3, #32
 80066bc:	fa22 f107 	lsr.w	r1, r2, r7
 80066c0:	409c      	lsls	r4, r3
 80066c2:	430c      	orrs	r4, r1
 80066c4:	42b5      	cmp	r5, r6
 80066c6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80066ca:	bf94      	ite	ls
 80066cc:	2400      	movls	r4, #0
 80066ce:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80066d2:	409a      	lsls	r2, r3
 80066d4:	40fc      	lsrs	r4, r7
 80066d6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80066da:	4322      	orrs	r2, r4
 80066dc:	e7e1      	b.n	80066a2 <__b2d+0x4a>
 80066de:	ea44 0107 	orr.w	r1, r4, r7
 80066e2:	e7de      	b.n	80066a2 <__b2d+0x4a>
 80066e4:	3ff00000 	.word	0x3ff00000

080066e8 <__d2b>:
 80066e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80066ec:	2101      	movs	r1, #1
 80066ee:	4690      	mov	r8, r2
 80066f0:	4699      	mov	r9, r3
 80066f2:	9e08      	ldr	r6, [sp, #32]
 80066f4:	f7ff fc1e 	bl	8005f34 <_Balloc>
 80066f8:	4604      	mov	r4, r0
 80066fa:	b930      	cbnz	r0, 800670a <__d2b+0x22>
 80066fc:	4602      	mov	r2, r0
 80066fe:	f240 310f 	movw	r1, #783	@ 0x30f
 8006702:	4b23      	ldr	r3, [pc, #140]	@ (8006790 <__d2b+0xa8>)
 8006704:	4823      	ldr	r0, [pc, #140]	@ (8006794 <__d2b+0xac>)
 8006706:	f001 f989 	bl	8007a1c <__assert_func>
 800670a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800670e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006712:	b10d      	cbz	r5, 8006718 <__d2b+0x30>
 8006714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	f1b8 0300 	subs.w	r3, r8, #0
 800671e:	d024      	beq.n	800676a <__d2b+0x82>
 8006720:	4668      	mov	r0, sp
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	f7ff fd17 	bl	8006156 <__lo0bits>
 8006728:	e9dd 1200 	ldrd	r1, r2, [sp]
 800672c:	b1d8      	cbz	r0, 8006766 <__d2b+0x7e>
 800672e:	f1c0 0320 	rsb	r3, r0, #32
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	430b      	orrs	r3, r1
 8006738:	40c2      	lsrs	r2, r0
 800673a:	6163      	str	r3, [r4, #20]
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf0c      	ite	eq
 8006744:	2201      	moveq	r2, #1
 8006746:	2202      	movne	r2, #2
 8006748:	61a3      	str	r3, [r4, #24]
 800674a:	6122      	str	r2, [r4, #16]
 800674c:	b1ad      	cbz	r5, 800677a <__d2b+0x92>
 800674e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006752:	4405      	add	r5, r0
 8006754:	6035      	str	r5, [r6, #0]
 8006756:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	4620      	mov	r0, r4
 8006760:	b002      	add	sp, #8
 8006762:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006766:	6161      	str	r1, [r4, #20]
 8006768:	e7e9      	b.n	800673e <__d2b+0x56>
 800676a:	a801      	add	r0, sp, #4
 800676c:	f7ff fcf3 	bl	8006156 <__lo0bits>
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	6163      	str	r3, [r4, #20]
 8006776:	3020      	adds	r0, #32
 8006778:	e7e7      	b.n	800674a <__d2b+0x62>
 800677a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800677e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006782:	6030      	str	r0, [r6, #0]
 8006784:	6918      	ldr	r0, [r3, #16]
 8006786:	f7ff fcc7 	bl	8006118 <__hi0bits>
 800678a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800678e:	e7e4      	b.n	800675a <__d2b+0x72>
 8006790:	08008837 	.word	0x08008837
 8006794:	08008848 	.word	0x08008848

08006798 <__ratio>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	b085      	sub	sp, #20
 800679e:	e9cd 1000 	strd	r1, r0, [sp]
 80067a2:	a902      	add	r1, sp, #8
 80067a4:	f7ff ff58 	bl	8006658 <__b2d>
 80067a8:	468b      	mov	fp, r1
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	9800      	ldr	r0, [sp, #0]
 80067b0:	a903      	add	r1, sp, #12
 80067b2:	f7ff ff51 	bl	8006658 <__b2d>
 80067b6:	460d      	mov	r5, r1
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	4689      	mov	r9, r1
 80067bc:	6919      	ldr	r1, [r3, #16]
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	4604      	mov	r4, r0
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4630      	mov	r0, r6
 80067c6:	1ac9      	subs	r1, r1, r3
 80067c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfcd      	iteet	gt
 80067d6:	463a      	movgt	r2, r7
 80067d8:	462a      	movle	r2, r5
 80067da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80067e2:	bfd8      	it	le
 80067e4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80067e8:	464b      	mov	r3, r9
 80067ea:	4622      	mov	r2, r4
 80067ec:	4659      	mov	r1, fp
 80067ee:	f7f9 ff9d 	bl	800072c <__aeabi_ddiv>
 80067f2:	b005      	add	sp, #20
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067f8 <__copybits>:
 80067f8:	3901      	subs	r1, #1
 80067fa:	b570      	push	{r4, r5, r6, lr}
 80067fc:	1149      	asrs	r1, r1, #5
 80067fe:	6914      	ldr	r4, [r2, #16]
 8006800:	3101      	adds	r1, #1
 8006802:	f102 0314 	add.w	r3, r2, #20
 8006806:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800680a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800680e:	1f05      	subs	r5, r0, #4
 8006810:	42a3      	cmp	r3, r4
 8006812:	d30c      	bcc.n	800682e <__copybits+0x36>
 8006814:	1aa3      	subs	r3, r4, r2
 8006816:	3b11      	subs	r3, #17
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	3211      	adds	r2, #17
 800681e:	42a2      	cmp	r2, r4
 8006820:	bf88      	it	hi
 8006822:	2300      	movhi	r3, #0
 8006824:	4418      	add	r0, r3
 8006826:	2300      	movs	r3, #0
 8006828:	4288      	cmp	r0, r1
 800682a:	d305      	bcc.n	8006838 <__copybits+0x40>
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006832:	f845 6f04 	str.w	r6, [r5, #4]!
 8006836:	e7eb      	b.n	8006810 <__copybits+0x18>
 8006838:	f840 3b04 	str.w	r3, [r0], #4
 800683c:	e7f4      	b.n	8006828 <__copybits+0x30>

0800683e <__any_on>:
 800683e:	f100 0214 	add.w	r2, r0, #20
 8006842:	6900      	ldr	r0, [r0, #16]
 8006844:	114b      	asrs	r3, r1, #5
 8006846:	4298      	cmp	r0, r3
 8006848:	b510      	push	{r4, lr}
 800684a:	db11      	blt.n	8006870 <__any_on+0x32>
 800684c:	dd0a      	ble.n	8006864 <__any_on+0x26>
 800684e:	f011 011f 	ands.w	r1, r1, #31
 8006852:	d007      	beq.n	8006864 <__any_on+0x26>
 8006854:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006858:	fa24 f001 	lsr.w	r0, r4, r1
 800685c:	fa00 f101 	lsl.w	r1, r0, r1
 8006860:	428c      	cmp	r4, r1
 8006862:	d10b      	bne.n	800687c <__any_on+0x3e>
 8006864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006868:	4293      	cmp	r3, r2
 800686a:	d803      	bhi.n	8006874 <__any_on+0x36>
 800686c:	2000      	movs	r0, #0
 800686e:	bd10      	pop	{r4, pc}
 8006870:	4603      	mov	r3, r0
 8006872:	e7f7      	b.n	8006864 <__any_on+0x26>
 8006874:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006878:	2900      	cmp	r1, #0
 800687a:	d0f5      	beq.n	8006868 <__any_on+0x2a>
 800687c:	2001      	movs	r0, #1
 800687e:	e7f6      	b.n	800686e <__any_on+0x30>

08006880 <sulp>:
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	460f      	mov	r7, r1
 8006886:	4690      	mov	r8, r2
 8006888:	f7ff fec6 	bl	8006618 <__ulp>
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	f1b8 0f00 	cmp.w	r8, #0
 8006894:	d011      	beq.n	80068ba <sulp+0x3a>
 8006896:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800689a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dd0b      	ble.n	80068ba <sulp+0x3a>
 80068a2:	2400      	movs	r4, #0
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f7f9 fe11 	bl	80004d8 <__aeabi_dmul>
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c2:	0000      	movs	r0, r0
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <_strtod_l>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b09f      	sub	sp, #124	@ 0x7c
 80068ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80068d0:	2200      	movs	r2, #0
 80068d2:	460c      	mov	r4, r1
 80068d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80068d6:	f04f 0a00 	mov.w	sl, #0
 80068da:	f04f 0b00 	mov.w	fp, #0
 80068de:	460a      	mov	r2, r1
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068e4:	7811      	ldrb	r1, [r2, #0]
 80068e6:	292b      	cmp	r1, #43	@ 0x2b
 80068e8:	d048      	beq.n	800697c <_strtod_l+0xb4>
 80068ea:	d836      	bhi.n	800695a <_strtod_l+0x92>
 80068ec:	290d      	cmp	r1, #13
 80068ee:	d830      	bhi.n	8006952 <_strtod_l+0x8a>
 80068f0:	2908      	cmp	r1, #8
 80068f2:	d830      	bhi.n	8006956 <_strtod_l+0x8e>
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d039      	beq.n	800696c <_strtod_l+0xa4>
 80068f8:	2200      	movs	r2, #0
 80068fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068fe:	782a      	ldrb	r2, [r5, #0]
 8006900:	2a30      	cmp	r2, #48	@ 0x30
 8006902:	f040 80b1 	bne.w	8006a68 <_strtod_l+0x1a0>
 8006906:	786a      	ldrb	r2, [r5, #1]
 8006908:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800690c:	2a58      	cmp	r2, #88	@ 0x58
 800690e:	d16c      	bne.n	80069ea <_strtod_l+0x122>
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006914:	4a8e      	ldr	r2, [pc, #568]	@ (8006b50 <_strtod_l+0x288>)
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	ab1a      	add	r3, sp, #104	@ 0x68
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006920:	a919      	add	r1, sp, #100	@ 0x64
 8006922:	f001 f915 	bl	8007b50 <__gethex>
 8006926:	f010 060f 	ands.w	r6, r0, #15
 800692a:	4604      	mov	r4, r0
 800692c:	d005      	beq.n	800693a <_strtod_l+0x72>
 800692e:	2e06      	cmp	r6, #6
 8006930:	d126      	bne.n	8006980 <_strtod_l+0xb8>
 8006932:	2300      	movs	r3, #0
 8006934:	3501      	adds	r5, #1
 8006936:	9519      	str	r5, [sp, #100]	@ 0x64
 8006938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800693a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8584 	bne.w	800744a <_strtod_l+0xb82>
 8006942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006944:	b1bb      	cbz	r3, 8006976 <_strtod_l+0xae>
 8006946:	4650      	mov	r0, sl
 8006948:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800694c:	b01f      	add	sp, #124	@ 0x7c
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	2920      	cmp	r1, #32
 8006954:	d1d0      	bne.n	80068f8 <_strtod_l+0x30>
 8006956:	3201      	adds	r2, #1
 8006958:	e7c3      	b.n	80068e2 <_strtod_l+0x1a>
 800695a:	292d      	cmp	r1, #45	@ 0x2d
 800695c:	d1cc      	bne.n	80068f8 <_strtod_l+0x30>
 800695e:	2101      	movs	r1, #1
 8006960:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006962:	1c51      	adds	r1, r2, #1
 8006964:	9119      	str	r1, [sp, #100]	@ 0x64
 8006966:	7852      	ldrb	r2, [r2, #1]
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1c7      	bne.n	80068fc <_strtod_l+0x34>
 800696c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800696e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8568 	bne.w	8007446 <_strtod_l+0xb7e>
 8006976:	4650      	mov	r0, sl
 8006978:	4659      	mov	r1, fp
 800697a:	e7e7      	b.n	800694c <_strtod_l+0x84>
 800697c:	2100      	movs	r1, #0
 800697e:	e7ef      	b.n	8006960 <_strtod_l+0x98>
 8006980:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006982:	b13a      	cbz	r2, 8006994 <_strtod_l+0xcc>
 8006984:	2135      	movs	r1, #53	@ 0x35
 8006986:	a81c      	add	r0, sp, #112	@ 0x70
 8006988:	f7ff ff36 	bl	80067f8 <__copybits>
 800698c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800698e:	9805      	ldr	r0, [sp, #20]
 8006990:	f7ff fb10 	bl	8005fb4 <_Bfree>
 8006994:	3e01      	subs	r6, #1
 8006996:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006998:	2e04      	cmp	r6, #4
 800699a:	d806      	bhi.n	80069aa <_strtod_l+0xe2>
 800699c:	e8df f006 	tbb	[pc, r6]
 80069a0:	201d0314 	.word	0x201d0314
 80069a4:	14          	.byte	0x14
 80069a5:	00          	.byte	0x00
 80069a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80069aa:	05e1      	lsls	r1, r4, #23
 80069ac:	bf48      	it	mi
 80069ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069b6:	0d1b      	lsrs	r3, r3, #20
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1bd      	bne.n	800693a <_strtod_l+0x72>
 80069be:	f7fe fb29 	bl	8005014 <__errno>
 80069c2:	2322      	movs	r3, #34	@ 0x22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	e7b8      	b.n	800693a <_strtod_l+0x72>
 80069c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80069cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80069d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069d8:	e7e7      	b.n	80069aa <_strtod_l+0xe2>
 80069da:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006b54 <_strtod_l+0x28c>
 80069de:	e7e4      	b.n	80069aa <_strtod_l+0xe2>
 80069e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069e4:	f04f 3aff 	mov.w	sl, #4294967295
 80069e8:	e7df      	b.n	80069aa <_strtod_l+0xe2>
 80069ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b30      	cmp	r3, #48	@ 0x30
 80069f4:	d0f9      	beq.n	80069ea <_strtod_l+0x122>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d09f      	beq.n	800693a <_strtod_l+0x72>
 80069fa:	2301      	movs	r3, #1
 80069fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a00:	220a      	movs	r2, #10
 8006a02:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a04:	2300      	movs	r3, #0
 8006a06:	461f      	mov	r7, r3
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a0c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a0e:	7805      	ldrb	r5, [r0, #0]
 8006a10:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	2909      	cmp	r1, #9
 8006a18:	d928      	bls.n	8006a6c <_strtod_l+0x1a4>
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	494e      	ldr	r1, [pc, #312]	@ (8006b58 <_strtod_l+0x290>)
 8006a1e:	f000 ffc7 	bl	80079b0 <strncmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d032      	beq.n	8006a8c <_strtod_l+0x1c4>
 8006a26:	2000      	movs	r0, #0
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	463d      	mov	r5, r7
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2a65      	cmp	r2, #101	@ 0x65
 8006a32:	d001      	beq.n	8006a38 <_strtod_l+0x170>
 8006a34:	2a45      	cmp	r2, #69	@ 0x45
 8006a36:	d114      	bne.n	8006a62 <_strtod_l+0x19a>
 8006a38:	b91d      	cbnz	r5, 8006a42 <_strtod_l+0x17a>
 8006a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3c:	4302      	orrs	r2, r0
 8006a3e:	d095      	beq.n	800696c <_strtod_l+0xa4>
 8006a40:	2500      	movs	r5, #0
 8006a42:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a44:	1c62      	adds	r2, r4, #1
 8006a46:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a48:	7862      	ldrb	r2, [r4, #1]
 8006a4a:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a4c:	d077      	beq.n	8006b3e <_strtod_l+0x276>
 8006a4e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a50:	d07b      	beq.n	8006b4a <_strtod_l+0x282>
 8006a52:	f04f 0c00 	mov.w	ip, #0
 8006a56:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a5a:	2909      	cmp	r1, #9
 8006a5c:	f240 8082 	bls.w	8006b64 <_strtod_l+0x29c>
 8006a60:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	e0a2      	b.n	8006bae <_strtod_l+0x2e6>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e7c7      	b.n	80069fc <_strtod_l+0x134>
 8006a6c:	2f08      	cmp	r7, #8
 8006a6e:	bfd5      	itete	le
 8006a70:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006a72:	9908      	ldrgt	r1, [sp, #32]
 8006a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a78:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a7c:	f100 0001 	add.w	r0, r0, #1
 8006a80:	bfd4      	ite	le
 8006a82:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006a84:	9308      	strgt	r3, [sp, #32]
 8006a86:	3701      	adds	r7, #1
 8006a88:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a8a:	e7bf      	b.n	8006a0c <_strtod_l+0x144>
 8006a8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a92:	785a      	ldrb	r2, [r3, #1]
 8006a94:	b37f      	cbz	r7, 8006af6 <_strtod_l+0x22e>
 8006a96:	4681      	mov	r9, r0
 8006a98:	463d      	mov	r5, r7
 8006a9a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d912      	bls.n	8006ac8 <_strtod_l+0x200>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7c4      	b.n	8006a30 <_strtod_l+0x168>
 8006aa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aae:	785a      	ldrb	r2, [r3, #1]
 8006ab0:	2a30      	cmp	r2, #48	@ 0x30
 8006ab2:	d0f8      	beq.n	8006aa6 <_strtod_l+0x1de>
 8006ab4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	f200 84cb 	bhi.w	8007454 <_strtod_l+0xb8c>
 8006abe:	4681      	mov	r9, r0
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ac6:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ac8:	3a30      	subs	r2, #48	@ 0x30
 8006aca:	f100 0301 	add.w	r3, r0, #1
 8006ace:	d02a      	beq.n	8006b26 <_strtod_l+0x25e>
 8006ad0:	4499      	add	r9, r3
 8006ad2:	210a      	movs	r1, #10
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	eb00 0c05 	add.w	ip, r0, r5
 8006ada:	4563      	cmp	r3, ip
 8006adc:	d10d      	bne.n	8006afa <_strtod_l+0x232>
 8006ade:	1c69      	adds	r1, r5, #1
 8006ae0:	4401      	add	r1, r0
 8006ae2:	4428      	add	r0, r5
 8006ae4:	2808      	cmp	r0, #8
 8006ae6:	dc16      	bgt.n	8006b16 <_strtod_l+0x24e>
 8006ae8:	230a      	movs	r3, #10
 8006aea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006aec:	fb03 2300 	mla	r3, r3, r0, r2
 8006af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006af2:	2300      	movs	r3, #0
 8006af4:	e018      	b.n	8006b28 <_strtod_l+0x260>
 8006af6:	4638      	mov	r0, r7
 8006af8:	e7da      	b.n	8006ab0 <_strtod_l+0x1e8>
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	f103 0301 	add.w	r3, r3, #1
 8006b00:	dc03      	bgt.n	8006b0a <_strtod_l+0x242>
 8006b02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006b04:	434e      	muls	r6, r1
 8006b06:	960a      	str	r6, [sp, #40]	@ 0x28
 8006b08:	e7e7      	b.n	8006ada <_strtod_l+0x212>
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	bfde      	ittt	le
 8006b0e:	9e08      	ldrle	r6, [sp, #32]
 8006b10:	434e      	mulle	r6, r1
 8006b12:	9608      	strle	r6, [sp, #32]
 8006b14:	e7e1      	b.n	8006ada <_strtod_l+0x212>
 8006b16:	280f      	cmp	r0, #15
 8006b18:	dceb      	bgt.n	8006af2 <_strtod_l+0x22a>
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	9808      	ldr	r0, [sp, #32]
 8006b1e:	fb03 2300 	mla	r3, r3, r0, r2
 8006b22:	9308      	str	r3, [sp, #32]
 8006b24:	e7e5      	b.n	8006af2 <_strtod_l+0x22a>
 8006b26:	4629      	mov	r1, r5
 8006b28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	1c50      	adds	r0, r2, #1
 8006b2e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006b30:	7852      	ldrb	r2, [r2, #1]
 8006b32:	4618      	mov	r0, r3
 8006b34:	e7b1      	b.n	8006a9a <_strtod_l+0x1d2>
 8006b36:	f04f 0900 	mov.w	r9, #0
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e77d      	b.n	8006a3a <_strtod_l+0x172>
 8006b3e:	f04f 0c00 	mov.w	ip, #0
 8006b42:	1ca2      	adds	r2, r4, #2
 8006b44:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b46:	78a2      	ldrb	r2, [r4, #2]
 8006b48:	e785      	b.n	8006a56 <_strtod_l+0x18e>
 8006b4a:	f04f 0c01 	mov.w	ip, #1
 8006b4e:	e7f8      	b.n	8006b42 <_strtod_l+0x27a>
 8006b50:	080089b8 	.word	0x080089b8
 8006b54:	7ff00000 	.word	0x7ff00000
 8006b58:	080089a0 	.word	0x080089a0
 8006b5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b5e:	1c51      	adds	r1, r2, #1
 8006b60:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b62:	7852      	ldrb	r2, [r2, #1]
 8006b64:	2a30      	cmp	r2, #48	@ 0x30
 8006b66:	d0f9      	beq.n	8006b5c <_strtod_l+0x294>
 8006b68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b6c:	2908      	cmp	r1, #8
 8006b6e:	f63f af78 	bhi.w	8006a62 <_strtod_l+0x19a>
 8006b72:	f04f 080a 	mov.w	r8, #10
 8006b76:	3a30      	subs	r2, #48	@ 0x30
 8006b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b80:	1c56      	adds	r6, r2, #1
 8006b82:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b84:	7852      	ldrb	r2, [r2, #1]
 8006b86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b8a:	f1be 0f09 	cmp.w	lr, #9
 8006b8e:	d939      	bls.n	8006c04 <_strtod_l+0x33c>
 8006b90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b96:	1a76      	subs	r6, r6, r1
 8006b98:	2e08      	cmp	r6, #8
 8006b9a:	dc03      	bgt.n	8006ba4 <_strtod_l+0x2dc>
 8006b9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b9e:	4588      	cmp	r8, r1
 8006ba0:	bfa8      	it	ge
 8006ba2:	4688      	movge	r8, r1
 8006ba4:	f1bc 0f00 	cmp.w	ip, #0
 8006ba8:	d001      	beq.n	8006bae <_strtod_l+0x2e6>
 8006baa:	f1c8 0800 	rsb	r8, r8, #0
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	d14e      	bne.n	8006c50 <_strtod_l+0x388>
 8006bb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bb4:	4308      	orrs	r0, r1
 8006bb6:	f47f aec0 	bne.w	800693a <_strtod_l+0x72>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f47f aed6 	bne.w	800696c <_strtod_l+0xa4>
 8006bc0:	2a69      	cmp	r2, #105	@ 0x69
 8006bc2:	d028      	beq.n	8006c16 <_strtod_l+0x34e>
 8006bc4:	dc25      	bgt.n	8006c12 <_strtod_l+0x34a>
 8006bc6:	2a49      	cmp	r2, #73	@ 0x49
 8006bc8:	d025      	beq.n	8006c16 <_strtod_l+0x34e>
 8006bca:	2a4e      	cmp	r2, #78	@ 0x4e
 8006bcc:	f47f aece 	bne.w	800696c <_strtod_l+0xa4>
 8006bd0:	499a      	ldr	r1, [pc, #616]	@ (8006e3c <_strtod_l+0x574>)
 8006bd2:	a819      	add	r0, sp, #100	@ 0x64
 8006bd4:	f001 f9de 	bl	8007f94 <__match>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f43f aec7 	beq.w	800696c <_strtod_l+0xa4>
 8006bde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b28      	cmp	r3, #40	@ 0x28
 8006be4:	d12e      	bne.n	8006c44 <_strtod_l+0x37c>
 8006be6:	4996      	ldr	r1, [pc, #600]	@ (8006e40 <_strtod_l+0x578>)
 8006be8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bea:	a819      	add	r0, sp, #100	@ 0x64
 8006bec:	f001 f9e6 	bl	8007fbc <__hexnan>
 8006bf0:	2805      	cmp	r0, #5
 8006bf2:	d127      	bne.n	8006c44 <_strtod_l+0x37c>
 8006bf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bf6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bfa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006bfe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c02:	e69a      	b.n	800693a <_strtod_l+0x72>
 8006c04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c06:	fb08 2101 	mla	r1, r8, r1, r2
 8006c0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c10:	e7b5      	b.n	8006b7e <_strtod_l+0x2b6>
 8006c12:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c14:	e7da      	b.n	8006bcc <_strtod_l+0x304>
 8006c16:	498b      	ldr	r1, [pc, #556]	@ (8006e44 <_strtod_l+0x57c>)
 8006c18:	a819      	add	r0, sp, #100	@ 0x64
 8006c1a:	f001 f9bb 	bl	8007f94 <__match>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f aea4 	beq.w	800696c <_strtod_l+0xa4>
 8006c24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c26:	4988      	ldr	r1, [pc, #544]	@ (8006e48 <_strtod_l+0x580>)
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	a819      	add	r0, sp, #100	@ 0x64
 8006c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c2e:	f001 f9b1 	bl	8007f94 <__match>
 8006c32:	b910      	cbnz	r0, 8006c3a <_strtod_l+0x372>
 8006c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c36:	3301      	adds	r3, #1
 8006c38:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c3a:	f04f 0a00 	mov.w	sl, #0
 8006c3e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006e4c <_strtod_l+0x584>
 8006c42:	e67a      	b.n	800693a <_strtod_l+0x72>
 8006c44:	4882      	ldr	r0, [pc, #520]	@ (8006e50 <_strtod_l+0x588>)
 8006c46:	f000 fee3 	bl	8007a10 <nan>
 8006c4a:	4682      	mov	sl, r0
 8006c4c:	468b      	mov	fp, r1
 8006c4e:	e674      	b.n	800693a <_strtod_l+0x72>
 8006c50:	eba8 0309 	sub.w	r3, r8, r9
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	bf08      	it	eq
 8006c58:	462f      	moveq	r7, r5
 8006c5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c5c:	2d10      	cmp	r5, #16
 8006c5e:	462c      	mov	r4, r5
 8006c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c62:	bfa8      	it	ge
 8006c64:	2410      	movge	r4, #16
 8006c66:	f7f9 fbbd 	bl	80003e4 <__aeabi_ui2d>
 8006c6a:	2d09      	cmp	r5, #9
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	468b      	mov	fp, r1
 8006c70:	dc11      	bgt.n	8006c96 <_strtod_l+0x3ce>
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f43f ae60 	beq.w	800693a <_strtod_l+0x72>
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	dd76      	ble.n	8006d6c <_strtod_l+0x4a4>
 8006c7e:	2b16      	cmp	r3, #22
 8006c80:	dc5d      	bgt.n	8006d3e <_strtod_l+0x476>
 8006c82:	4974      	ldr	r1, [pc, #464]	@ (8006e54 <_strtod_l+0x58c>)
 8006c84:	4652      	mov	r2, sl
 8006c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	e7d9      	b.n	8006c4a <_strtod_l+0x382>
 8006c96:	4b6f      	ldr	r3, [pc, #444]	@ (8006e54 <_strtod_l+0x58c>)
 8006c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ca0:	f7f9 fc1a 	bl	80004d8 <__aeabi_dmul>
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	9808      	ldr	r0, [sp, #32]
 8006ca8:	468b      	mov	fp, r1
 8006caa:	f7f9 fb9b 	bl	80003e4 <__aeabi_ui2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	4659      	mov	r1, fp
 8006cb6:	f7f9 fa59 	bl	800016c <__adddf3>
 8006cba:	2d0f      	cmp	r5, #15
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	468b      	mov	fp, r1
 8006cc0:	ddd7      	ble.n	8006c72 <_strtod_l+0x3aa>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc4:	1b2c      	subs	r4, r5, r4
 8006cc6:	441c      	add	r4, r3
 8006cc8:	2c00      	cmp	r4, #0
 8006cca:	f340 8096 	ble.w	8006dfa <_strtod_l+0x532>
 8006cce:	f014 030f 	ands.w	r3, r4, #15
 8006cd2:	d00a      	beq.n	8006cea <_strtod_l+0x422>
 8006cd4:	495f      	ldr	r1, [pc, #380]	@ (8006e54 <_strtod_l+0x58c>)
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	f034 040f 	bics.w	r4, r4, #15
 8006cee:	d073      	beq.n	8006dd8 <_strtod_l+0x510>
 8006cf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006cf4:	dd48      	ble.n	8006d88 <_strtod_l+0x4c0>
 8006cf6:	2400      	movs	r4, #0
 8006cf8:	46a0      	mov	r8, r4
 8006cfa:	46a1      	mov	r9, r4
 8006cfc:	940a      	str	r4, [sp, #40]	@ 0x28
 8006cfe:	2322      	movs	r3, #34	@ 0x22
 8006d00:	f04f 0a00 	mov.w	sl, #0
 8006d04:	9a05      	ldr	r2, [sp, #20]
 8006d06:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006e4c <_strtod_l+0x584>
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f43f ae13 	beq.w	800693a <_strtod_l+0x72>
 8006d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d16:	9805      	ldr	r0, [sp, #20]
 8006d18:	f7ff f94c 	bl	8005fb4 <_Bfree>
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	9805      	ldr	r0, [sp, #20]
 8006d20:	f7ff f948 	bl	8005fb4 <_Bfree>
 8006d24:	4641      	mov	r1, r8
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	f7ff f944 	bl	8005fb4 <_Bfree>
 8006d2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d2e:	9805      	ldr	r0, [sp, #20]
 8006d30:	f7ff f940 	bl	8005fb4 <_Bfree>
 8006d34:	4621      	mov	r1, r4
 8006d36:	9805      	ldr	r0, [sp, #20]
 8006d38:	f7ff f93c 	bl	8005fb4 <_Bfree>
 8006d3c:	e5fd      	b.n	800693a <_strtod_l+0x72>
 8006d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d44:	4293      	cmp	r3, r2
 8006d46:	dbbc      	blt.n	8006cc2 <_strtod_l+0x3fa>
 8006d48:	4c42      	ldr	r4, [pc, #264]	@ (8006e54 <_strtod_l+0x58c>)
 8006d4a:	f1c5 050f 	rsb	r5, r5, #15
 8006d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d52:	4652      	mov	r2, sl
 8006d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d58:	465b      	mov	r3, fp
 8006d5a:	f7f9 fbbd 	bl	80004d8 <__aeabi_dmul>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	1b5d      	subs	r5, r3, r5
 8006d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d6a:	e791      	b.n	8006c90 <_strtod_l+0x3c8>
 8006d6c:	3316      	adds	r3, #22
 8006d6e:	dba8      	blt.n	8006cc2 <_strtod_l+0x3fa>
 8006d70:	4b38      	ldr	r3, [pc, #224]	@ (8006e54 <_strtod_l+0x58c>)
 8006d72:	eba9 0808 	sub.w	r8, r9, r8
 8006d76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d80:	4659      	mov	r1, fp
 8006d82:	f7f9 fcd3 	bl	800072c <__aeabi_ddiv>
 8006d86:	e760      	b.n	8006c4a <_strtod_l+0x382>
 8006d88:	4b33      	ldr	r3, [pc, #204]	@ (8006e58 <_strtod_l+0x590>)
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4659      	mov	r1, fp
 8006d92:	461e      	mov	r6, r3
 8006d94:	1124      	asrs	r4, r4, #4
 8006d96:	2c01      	cmp	r4, #1
 8006d98:	dc21      	bgt.n	8006dde <_strtod_l+0x516>
 8006d9a:	b10b      	cbz	r3, 8006da0 <_strtod_l+0x4d8>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	492d      	ldr	r1, [pc, #180]	@ (8006e58 <_strtod_l+0x590>)
 8006da2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006da6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006daa:	4652      	mov	r2, sl
 8006dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db0:	465b      	mov	r3, fp
 8006db2:	f7f9 fb91 	bl	80004d8 <__aeabi_dmul>
 8006db6:	4b25      	ldr	r3, [pc, #148]	@ (8006e4c <_strtod_l+0x584>)
 8006db8:	460a      	mov	r2, r1
 8006dba:	400b      	ands	r3, r1
 8006dbc:	4927      	ldr	r1, [pc, #156]	@ (8006e5c <_strtod_l+0x594>)
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	d898      	bhi.n	8006cf6 <_strtod_l+0x42e>
 8006dc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf86      	itte	hi
 8006dcc:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dd0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006e60 <_strtod_l+0x598>
 8006dd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9308      	str	r3, [sp, #32]
 8006ddc:	e07a      	b.n	8006ed4 <_strtod_l+0x60c>
 8006dde:	07e2      	lsls	r2, r4, #31
 8006de0:	d505      	bpl.n	8006dee <_strtod_l+0x526>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9a08      	ldr	r2, [sp, #32]
 8006df0:	3601      	adds	r6, #1
 8006df2:	3208      	adds	r2, #8
 8006df4:	1064      	asrs	r4, r4, #1
 8006df6:	9208      	str	r2, [sp, #32]
 8006df8:	e7cd      	b.n	8006d96 <_strtod_l+0x4ce>
 8006dfa:	d0ed      	beq.n	8006dd8 <_strtod_l+0x510>
 8006dfc:	4264      	negs	r4, r4
 8006dfe:	f014 020f 	ands.w	r2, r4, #15
 8006e02:	d00a      	beq.n	8006e1a <_strtod_l+0x552>
 8006e04:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <_strtod_l+0x58c>)
 8006e06:	4650      	mov	r0, sl
 8006e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f7f9 fc8b 	bl	800072c <__aeabi_ddiv>
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	1124      	asrs	r4, r4, #4
 8006e1c:	d0dc      	beq.n	8006dd8 <_strtod_l+0x510>
 8006e1e:	2c1f      	cmp	r4, #31
 8006e20:	dd20      	ble.n	8006e64 <_strtod_l+0x59c>
 8006e22:	2400      	movs	r4, #0
 8006e24:	46a0      	mov	r8, r4
 8006e26:	46a1      	mov	r9, r4
 8006e28:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e2a:	2322      	movs	r3, #34	@ 0x22
 8006e2c:	9a05      	ldr	r2, [sp, #20]
 8006e2e:	f04f 0a00 	mov.w	sl, #0
 8006e32:	f04f 0b00 	mov.w	fp, #0
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	e768      	b.n	8006d0c <_strtod_l+0x444>
 8006e3a:	bf00      	nop
 8006e3c:	0800878f 	.word	0x0800878f
 8006e40:	080089a4 	.word	0x080089a4
 8006e44:	08008787 	.word	0x08008787
 8006e48:	080087be 	.word	0x080087be
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	08008b4d 	.word	0x08008b4d
 8006e54:	080088d8 	.word	0x080088d8
 8006e58:	080088b0 	.word	0x080088b0
 8006e5c:	7ca00000 	.word	0x7ca00000
 8006e60:	7fefffff 	.word	0x7fefffff
 8006e64:	f014 0310 	ands.w	r3, r4, #16
 8006e68:	bf18      	it	ne
 8006e6a:	236a      	movne	r3, #106	@ 0x6a
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	9308      	str	r3, [sp, #32]
 8006e70:	4659      	mov	r1, fp
 8006e72:	2300      	movs	r3, #0
 8006e74:	4ea9      	ldr	r6, [pc, #676]	@ (800711c <_strtod_l+0x854>)
 8006e76:	07e2      	lsls	r2, r4, #31
 8006e78:	d504      	bpl.n	8006e84 <_strtod_l+0x5bc>
 8006e7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e7e:	f7f9 fb2b 	bl	80004d8 <__aeabi_dmul>
 8006e82:	2301      	movs	r3, #1
 8006e84:	1064      	asrs	r4, r4, #1
 8006e86:	f106 0608 	add.w	r6, r6, #8
 8006e8a:	d1f4      	bne.n	8006e76 <_strtod_l+0x5ae>
 8006e8c:	b10b      	cbz	r3, 8006e92 <_strtod_l+0x5ca>
 8006e8e:	4682      	mov	sl, r0
 8006e90:	468b      	mov	fp, r1
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	b1b3      	cbz	r3, 8006ec4 <_strtod_l+0x5fc>
 8006e96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	dd0f      	ble.n	8006ec4 <_strtod_l+0x5fc>
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	dd57      	ble.n	8006f58 <_strtod_l+0x690>
 8006ea8:	2b34      	cmp	r3, #52	@ 0x34
 8006eaa:	bfd8      	it	le
 8006eac:	f04f 33ff 	movle.w	r3, #4294967295
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	bfcf      	iteee	gt
 8006eb6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006eba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006ebe:	4093      	lslle	r3, r2
 8006ec0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4659      	mov	r1, fp
 8006ecc:	f7f9 fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d1a6      	bne.n	8006e22 <_strtod_l+0x55a>
 8006ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006edc:	462b      	mov	r3, r5
 8006ede:	9805      	ldr	r0, [sp, #20]
 8006ee0:	f7ff f8d0 	bl	8006084 <__s2b>
 8006ee4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f43f af05 	beq.w	8006cf6 <_strtod_l+0x42e>
 8006eec:	2400      	movs	r4, #0
 8006eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef0:	eba9 0308 	sub.w	r3, r9, r8
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	bfa8      	it	ge
 8006ef8:	2300      	movge	r3, #0
 8006efa:	46a0      	mov	r8, r4
 8006efc:	9312      	str	r3, [sp, #72]	@ 0x48
 8006efe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f02:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f06:	9805      	ldr	r0, [sp, #20]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	f7ff f813 	bl	8005f34 <_Balloc>
 8006f0e:	4681      	mov	r9, r0
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f43f aef4 	beq.w	8006cfe <_strtod_l+0x436>
 8006f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f18:	300c      	adds	r0, #12
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	f103 010c 	add.w	r1, r3, #12
 8006f20:	3202      	adds	r2, #2
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	f000 fd66 	bl	80079f4 <memcpy>
 8006f28:	ab1c      	add	r3, sp, #112	@ 0x70
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	4652      	mov	r2, sl
 8006f32:	465b      	mov	r3, fp
 8006f34:	9805      	ldr	r0, [sp, #20]
 8006f36:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f3a:	f7ff fbd5 	bl	80066e8 <__d2b>
 8006f3e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f aedc 	beq.w	8006cfe <_strtod_l+0x436>
 8006f46:	2101      	movs	r1, #1
 8006f48:	9805      	ldr	r0, [sp, #20]
 8006f4a:	f7ff f931 	bl	80061b0 <__i2b>
 8006f4e:	4680      	mov	r8, r0
 8006f50:	b948      	cbnz	r0, 8006f66 <_strtod_l+0x69e>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	e6d2      	b.n	8006cfe <_strtod_l+0x436>
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	ea03 0a0a 	and.w	sl, r3, sl
 8006f64:	e7ae      	b.n	8006ec4 <_strtod_l+0x5fc>
 8006f66:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f68:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	bfab      	itete	ge
 8006f6e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f70:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f72:	18ef      	addge	r7, r5, r3
 8006f74:	1b5e      	sublt	r6, r3, r5
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	bfa8      	it	ge
 8006f7a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f7c:	eba5 0503 	sub.w	r5, r5, r3
 8006f80:	4415      	add	r5, r2
 8006f82:	4b67      	ldr	r3, [pc, #412]	@ (8007120 <_strtod_l+0x858>)
 8006f84:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f88:	bfb8      	it	lt
 8006f8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f8c:	429d      	cmp	r5, r3
 8006f8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f92:	da50      	bge.n	8007036 <_strtod_l+0x76e>
 8006f94:	1b5b      	subs	r3, r3, r5
 8006f96:	2b1f      	cmp	r3, #31
 8006f98:	f04f 0101 	mov.w	r1, #1
 8006f9c:	eba2 0203 	sub.w	r2, r2, r3
 8006fa0:	dc3d      	bgt.n	800701e <_strtod_l+0x756>
 8006fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fac:	18bd      	adds	r5, r7, r2
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	42af      	cmp	r7, r5
 8006fb2:	4416      	add	r6, r2
 8006fb4:	441e      	add	r6, r3
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	bfa8      	it	ge
 8006fba:	462b      	movge	r3, r5
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	bfa8      	it	ge
 8006fc0:	4633      	movge	r3, r6
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfc2      	ittt	gt
 8006fc6:	1aed      	subgt	r5, r5, r3
 8006fc8:	1af6      	subgt	r6, r6, r3
 8006fca:	1aff      	subgt	r7, r7, r3
 8006fcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd16      	ble.n	8007000 <_strtod_l+0x738>
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	9805      	ldr	r0, [sp, #20]
 8006fd8:	f7ff f9a8 	bl	800632c <__pow5mult>
 8006fdc:	4680      	mov	r8, r0
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0b7      	beq.n	8006f52 <_strtod_l+0x68a>
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	f7ff f8f8 	bl	80061dc <__multiply>
 8006fec:	900e      	str	r0, [sp, #56]	@ 0x38
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f ae85 	beq.w	8006cfe <_strtod_l+0x436>
 8006ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff6:	9805      	ldr	r0, [sp, #20]
 8006ff8:	f7fe ffdc 	bl	8005fb4 <_Bfree>
 8006ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007000:	2d00      	cmp	r5, #0
 8007002:	dc1d      	bgt.n	8007040 <_strtod_l+0x778>
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd23      	ble.n	8007052 <_strtod_l+0x78a>
 800700a:	4649      	mov	r1, r9
 800700c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	f7ff f98c 	bl	800632c <__pow5mult>
 8007014:	4681      	mov	r9, r0
 8007016:	b9e0      	cbnz	r0, 8007052 <_strtod_l+0x78a>
 8007018:	f04f 0900 	mov.w	r9, #0
 800701c:	e66f      	b.n	8006cfe <_strtod_l+0x436>
 800701e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007022:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007026:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800702a:	35e2      	adds	r5, #226	@ 0xe2
 800702c:	fa01 f305 	lsl.w	r3, r1, r5
 8007030:	9310      	str	r3, [sp, #64]	@ 0x40
 8007032:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007034:	e7ba      	b.n	8006fac <_strtod_l+0x6e4>
 8007036:	2300      	movs	r3, #0
 8007038:	9310      	str	r3, [sp, #64]	@ 0x40
 800703a:	2301      	movs	r3, #1
 800703c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800703e:	e7b5      	b.n	8006fac <_strtod_l+0x6e4>
 8007040:	462a      	mov	r2, r5
 8007042:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007044:	9805      	ldr	r0, [sp, #20]
 8007046:	f7ff f9cb 	bl	80063e0 <__lshift>
 800704a:	901a      	str	r0, [sp, #104]	@ 0x68
 800704c:	2800      	cmp	r0, #0
 800704e:	d1d9      	bne.n	8007004 <_strtod_l+0x73c>
 8007050:	e655      	b.n	8006cfe <_strtod_l+0x436>
 8007052:	2e00      	cmp	r6, #0
 8007054:	dd07      	ble.n	8007066 <_strtod_l+0x79e>
 8007056:	4649      	mov	r1, r9
 8007058:	4632      	mov	r2, r6
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	f7ff f9c0 	bl	80063e0 <__lshift>
 8007060:	4681      	mov	r9, r0
 8007062:	2800      	cmp	r0, #0
 8007064:	d0d8      	beq.n	8007018 <_strtod_l+0x750>
 8007066:	2f00      	cmp	r7, #0
 8007068:	dd08      	ble.n	800707c <_strtod_l+0x7b4>
 800706a:	4641      	mov	r1, r8
 800706c:	463a      	mov	r2, r7
 800706e:	9805      	ldr	r0, [sp, #20]
 8007070:	f7ff f9b6 	bl	80063e0 <__lshift>
 8007074:	4680      	mov	r8, r0
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f ae41 	beq.w	8006cfe <_strtod_l+0x436>
 800707c:	464a      	mov	r2, r9
 800707e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007080:	9805      	ldr	r0, [sp, #20]
 8007082:	f7ff fa35 	bl	80064f0 <__mdiff>
 8007086:	4604      	mov	r4, r0
 8007088:	2800      	cmp	r0, #0
 800708a:	f43f ae38 	beq.w	8006cfe <_strtod_l+0x436>
 800708e:	68c3      	ldr	r3, [r0, #12]
 8007090:	4641      	mov	r1, r8
 8007092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007094:	2300      	movs	r3, #0
 8007096:	60c3      	str	r3, [r0, #12]
 8007098:	f7ff fa0e 	bl	80064b8 <__mcmp>
 800709c:	2800      	cmp	r0, #0
 800709e:	da45      	bge.n	800712c <_strtod_l+0x864>
 80070a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a2:	ea53 030a 	orrs.w	r3, r3, sl
 80070a6:	d16b      	bne.n	8007180 <_strtod_l+0x8b8>
 80070a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d167      	bne.n	8007180 <_strtod_l+0x8b8>
 80070b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	051b      	lsls	r3, r3, #20
 80070b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070bc:	d960      	bls.n	8007180 <_strtod_l+0x8b8>
 80070be:	6963      	ldr	r3, [r4, #20]
 80070c0:	b913      	cbnz	r3, 80070c8 <_strtod_l+0x800>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	dd5b      	ble.n	8007180 <_strtod_l+0x8b8>
 80070c8:	4621      	mov	r1, r4
 80070ca:	2201      	movs	r2, #1
 80070cc:	9805      	ldr	r0, [sp, #20]
 80070ce:	f7ff f987 	bl	80063e0 <__lshift>
 80070d2:	4641      	mov	r1, r8
 80070d4:	4604      	mov	r4, r0
 80070d6:	f7ff f9ef 	bl	80064b8 <__mcmp>
 80070da:	2800      	cmp	r0, #0
 80070dc:	dd50      	ble.n	8007180 <_strtod_l+0x8b8>
 80070de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070e2:	9a08      	ldr	r2, [sp, #32]
 80070e4:	0d1b      	lsrs	r3, r3, #20
 80070e6:	051b      	lsls	r3, r3, #20
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d06a      	beq.n	80071c2 <_strtod_l+0x8fa>
 80070ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070f0:	d867      	bhi.n	80071c2 <_strtod_l+0x8fa>
 80070f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070f6:	f67f ae98 	bls.w	8006e2a <_strtod_l+0x562>
 80070fa:	4650      	mov	r0, sl
 80070fc:	4659      	mov	r1, fp
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <_strtod_l+0x85c>)
 8007100:	2200      	movs	r2, #0
 8007102:	f7f9 f9e9 	bl	80004d8 <__aeabi_dmul>
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <_strtod_l+0x860>)
 8007108:	4682      	mov	sl, r0
 800710a:	400b      	ands	r3, r1
 800710c:	468b      	mov	fp, r1
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f ae00 	bne.w	8006d14 <_strtod_l+0x44c>
 8007114:	2322      	movs	r3, #34	@ 0x22
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	e5fb      	b.n	8006d14 <_strtod_l+0x44c>
 800711c:	080089d0 	.word	0x080089d0
 8007120:	fffffc02 	.word	0xfffffc02
 8007124:	39500000 	.word	0x39500000
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007130:	d165      	bne.n	80071fe <_strtod_l+0x936>
 8007132:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007138:	b35a      	cbz	r2, 8007192 <_strtod_l+0x8ca>
 800713a:	4a99      	ldr	r2, [pc, #612]	@ (80073a0 <_strtod_l+0xad8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d12b      	bne.n	8007198 <_strtod_l+0x8d0>
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	4651      	mov	r1, sl
 8007144:	b303      	cbz	r3, 8007188 <_strtod_l+0x8c0>
 8007146:	465a      	mov	r2, fp
 8007148:	4b96      	ldr	r3, [pc, #600]	@ (80073a4 <_strtod_l+0xadc>)
 800714a:	4013      	ands	r3, r2
 800714c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	d81b      	bhi.n	800718e <_strtod_l+0x8c6>
 8007156:	0d1b      	lsrs	r3, r3, #20
 8007158:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	4299      	cmp	r1, r3
 8007162:	d119      	bne.n	8007198 <_strtod_l+0x8d0>
 8007164:	4b90      	ldr	r3, [pc, #576]	@ (80073a8 <_strtod_l+0xae0>)
 8007166:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007168:	429a      	cmp	r2, r3
 800716a:	d102      	bne.n	8007172 <_strtod_l+0x8aa>
 800716c:	3101      	adds	r1, #1
 800716e:	f43f adc6 	beq.w	8006cfe <_strtod_l+0x436>
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	4b8b      	ldr	r3, [pc, #556]	@ (80073a4 <_strtod_l+0xadc>)
 8007178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800717a:	401a      	ands	r2, r3
 800717c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1b9      	bne.n	80070fa <_strtod_l+0x832>
 8007186:	e5c5      	b.n	8006d14 <_strtod_l+0x44c>
 8007188:	f04f 33ff 	mov.w	r3, #4294967295
 800718c:	e7e8      	b.n	8007160 <_strtod_l+0x898>
 800718e:	4613      	mov	r3, r2
 8007190:	e7e6      	b.n	8007160 <_strtod_l+0x898>
 8007192:	ea53 030a 	orrs.w	r3, r3, sl
 8007196:	d0a2      	beq.n	80070de <_strtod_l+0x816>
 8007198:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800719a:	b1db      	cbz	r3, 80071d4 <_strtod_l+0x90c>
 800719c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800719e:	4213      	tst	r3, r2
 80071a0:	d0ee      	beq.n	8007180 <_strtod_l+0x8b8>
 80071a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071a4:	4650      	mov	r0, sl
 80071a6:	4659      	mov	r1, fp
 80071a8:	9a08      	ldr	r2, [sp, #32]
 80071aa:	b1bb      	cbz	r3, 80071dc <_strtod_l+0x914>
 80071ac:	f7ff fb68 	bl	8006880 <sulp>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071b8:	f7f8 ffd8 	bl	800016c <__adddf3>
 80071bc:	4682      	mov	sl, r0
 80071be:	468b      	mov	fp, r1
 80071c0:	e7de      	b.n	8007180 <_strtod_l+0x8b8>
 80071c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80071c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071ca:	f04f 3aff 	mov.w	sl, #4294967295
 80071ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071d2:	e7d5      	b.n	8007180 <_strtod_l+0x8b8>
 80071d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071d6:	ea13 0f0a 	tst.w	r3, sl
 80071da:	e7e1      	b.n	80071a0 <_strtod_l+0x8d8>
 80071dc:	f7ff fb50 	bl	8006880 <sulp>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071e8:	f7f8 ffbe 	bl	8000168 <__aeabi_dsub>
 80071ec:	2200      	movs	r2, #0
 80071ee:	2300      	movs	r3, #0
 80071f0:	4682      	mov	sl, r0
 80071f2:	468b      	mov	fp, r1
 80071f4:	f7f9 fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d0c1      	beq.n	8007180 <_strtod_l+0x8b8>
 80071fc:	e615      	b.n	8006e2a <_strtod_l+0x562>
 80071fe:	4641      	mov	r1, r8
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff fac9 	bl	8006798 <__ratio>
 8007206:	2200      	movs	r2, #0
 8007208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	f7f9 fbde 	bl	80009d0 <__aeabi_dcmple>
 8007214:	2800      	cmp	r0, #0
 8007216:	d06d      	beq.n	80072f4 <_strtod_l+0xa2c>
 8007218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d178      	bne.n	8007310 <_strtod_l+0xa48>
 800721e:	f1ba 0f00 	cmp.w	sl, #0
 8007222:	d156      	bne.n	80072d2 <_strtod_l+0xa0a>
 8007224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800722a:	2b00      	cmp	r3, #0
 800722c:	d158      	bne.n	80072e0 <_strtod_l+0xa18>
 800722e:	2200      	movs	r2, #0
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	4b5d      	ldr	r3, [pc, #372]	@ (80073ac <_strtod_l+0xae4>)
 8007236:	f7f9 fbc1 	bl	80009bc <__aeabi_dcmplt>
 800723a:	2800      	cmp	r0, #0
 800723c:	d157      	bne.n	80072ee <_strtod_l+0xa26>
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	2200      	movs	r2, #0
 8007244:	4b5a      	ldr	r3, [pc, #360]	@ (80073b0 <_strtod_l+0xae8>)
 8007246:	f7f9 f947 	bl	80004d8 <__aeabi_dmul>
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007252:	9606      	str	r6, [sp, #24]
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800725a:	4d52      	ldr	r5, [pc, #328]	@ (80073a4 <_strtod_l+0xadc>)
 800725c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007262:	401d      	ands	r5, r3
 8007264:	4b53      	ldr	r3, [pc, #332]	@ (80073b4 <_strtod_l+0xaec>)
 8007266:	429d      	cmp	r5, r3
 8007268:	f040 80aa 	bne.w	80073c0 <_strtod_l+0xaf8>
 800726c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800726e:	4650      	mov	r0, sl
 8007270:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007274:	4659      	mov	r1, fp
 8007276:	f7ff f9cf 	bl	8006618 <__ulp>
 800727a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800727e:	f7f9 f92b 	bl	80004d8 <__aeabi_dmul>
 8007282:	4652      	mov	r2, sl
 8007284:	465b      	mov	r3, fp
 8007286:	f7f8 ff71 	bl	800016c <__adddf3>
 800728a:	460b      	mov	r3, r1
 800728c:	4945      	ldr	r1, [pc, #276]	@ (80073a4 <_strtod_l+0xadc>)
 800728e:	4a4a      	ldr	r2, [pc, #296]	@ (80073b8 <_strtod_l+0xaf0>)
 8007290:	4019      	ands	r1, r3
 8007292:	4291      	cmp	r1, r2
 8007294:	4682      	mov	sl, r0
 8007296:	d942      	bls.n	800731e <_strtod_l+0xa56>
 8007298:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800729a:	4b43      	ldr	r3, [pc, #268]	@ (80073a8 <_strtod_l+0xae0>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d103      	bne.n	80072a8 <_strtod_l+0x9e0>
 80072a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072a2:	3301      	adds	r3, #1
 80072a4:	f43f ad2b 	beq.w	8006cfe <_strtod_l+0x436>
 80072a8:	f04f 3aff 	mov.w	sl, #4294967295
 80072ac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80073a8 <_strtod_l+0xae0>
 80072b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072b2:	9805      	ldr	r0, [sp, #20]
 80072b4:	f7fe fe7e 	bl	8005fb4 <_Bfree>
 80072b8:	4649      	mov	r1, r9
 80072ba:	9805      	ldr	r0, [sp, #20]
 80072bc:	f7fe fe7a 	bl	8005fb4 <_Bfree>
 80072c0:	4641      	mov	r1, r8
 80072c2:	9805      	ldr	r0, [sp, #20]
 80072c4:	f7fe fe76 	bl	8005fb4 <_Bfree>
 80072c8:	4621      	mov	r1, r4
 80072ca:	9805      	ldr	r0, [sp, #20]
 80072cc:	f7fe fe72 	bl	8005fb4 <_Bfree>
 80072d0:	e618      	b.n	8006f04 <_strtod_l+0x63c>
 80072d2:	f1ba 0f01 	cmp.w	sl, #1
 80072d6:	d103      	bne.n	80072e0 <_strtod_l+0xa18>
 80072d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f43f ada5 	beq.w	8006e2a <_strtod_l+0x562>
 80072e0:	2200      	movs	r2, #0
 80072e2:	4b36      	ldr	r3, [pc, #216]	@ (80073bc <_strtod_l+0xaf4>)
 80072e4:	2600      	movs	r6, #0
 80072e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072ea:	4f30      	ldr	r7, [pc, #192]	@ (80073ac <_strtod_l+0xae4>)
 80072ec:	e7b3      	b.n	8007256 <_strtod_l+0x98e>
 80072ee:	2600      	movs	r6, #0
 80072f0:	4f2f      	ldr	r7, [pc, #188]	@ (80073b0 <_strtod_l+0xae8>)
 80072f2:	e7ac      	b.n	800724e <_strtod_l+0x986>
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	4b2d      	ldr	r3, [pc, #180]	@ (80073b0 <_strtod_l+0xae8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	f7f9 f8ec 	bl	80004d8 <__aeabi_dmul>
 8007300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0a1      	beq.n	800724e <_strtod_l+0x986>
 800730a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800730e:	e7a2      	b.n	8007256 <_strtod_l+0x98e>
 8007310:	2200      	movs	r2, #0
 8007312:	4b26      	ldr	r3, [pc, #152]	@ (80073ac <_strtod_l+0xae4>)
 8007314:	4616      	mov	r6, r2
 8007316:	461f      	mov	r7, r3
 8007318:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800731c:	e79b      	b.n	8007256 <_strtod_l+0x98e>
 800731e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1c1      	bne.n	80072b0 <_strtod_l+0x9e8>
 800732c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007330:	0d1b      	lsrs	r3, r3, #20
 8007332:	051b      	lsls	r3, r3, #20
 8007334:	429d      	cmp	r5, r3
 8007336:	d1bb      	bne.n	80072b0 <_strtod_l+0x9e8>
 8007338:	4630      	mov	r0, r6
 800733a:	4639      	mov	r1, r7
 800733c:	f7f9 fd22 	bl	8000d84 <__aeabi_d2lz>
 8007340:	f7f9 f89c 	bl	800047c <__aeabi_l2d>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f8 ff0c 	bl	8000168 <__aeabi_dsub>
 8007350:	460b      	mov	r3, r1
 8007352:	4602      	mov	r2, r0
 8007354:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007358:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800735c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800735e:	ea46 060a 	orr.w	r6, r6, sl
 8007362:	431e      	orrs	r6, r3
 8007364:	d069      	beq.n	800743a <_strtod_l+0xb72>
 8007366:	a30a      	add	r3, pc, #40	@ (adr r3, 8007390 <_strtod_l+0xac8>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f9 fb26 	bl	80009bc <__aeabi_dcmplt>
 8007370:	2800      	cmp	r0, #0
 8007372:	f47f accf 	bne.w	8006d14 <_strtod_l+0x44c>
 8007376:	a308      	add	r3, pc, #32	@ (adr r3, 8007398 <_strtod_l+0xad0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007380:	f7f9 fb3a 	bl	80009f8 <__aeabi_dcmpgt>
 8007384:	2800      	cmp	r0, #0
 8007386:	d093      	beq.n	80072b0 <_strtod_l+0x9e8>
 8007388:	e4c4      	b.n	8006d14 <_strtod_l+0x44c>
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fdfffff 	.word	0x3fdfffff
 8007398:	35afe535 	.word	0x35afe535
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	000fffff 	.word	0x000fffff
 80073a4:	7ff00000 	.word	0x7ff00000
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	3ff00000 	.word	0x3ff00000
 80073b0:	3fe00000 	.word	0x3fe00000
 80073b4:	7fe00000 	.word	0x7fe00000
 80073b8:	7c9fffff 	.word	0x7c9fffff
 80073bc:	bff00000 	.word	0xbff00000
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	b323      	cbz	r3, 800740e <_strtod_l+0xb46>
 80073c4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80073c8:	d821      	bhi.n	800740e <_strtod_l+0xb46>
 80073ca:	a327      	add	r3, pc, #156	@ (adr r3, 8007468 <_strtod_l+0xba0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fafc 	bl	80009d0 <__aeabi_dcmple>
 80073d8:	b1a0      	cbz	r0, 8007404 <_strtod_l+0xb3c>
 80073da:	4639      	mov	r1, r7
 80073dc:	4630      	mov	r0, r6
 80073de:	f7f9 fb53 	bl	8000a88 <__aeabi_d2uiz>
 80073e2:	2801      	cmp	r0, #1
 80073e4:	bf38      	it	cc
 80073e6:	2001      	movcc	r0, #1
 80073e8:	f7f8 fffc 	bl	80003e4 <__aeabi_ui2d>
 80073ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	b9fb      	cbnz	r3, 8007434 <_strtod_l+0xb6c>
 80073f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073f8:	9014      	str	r0, [sp, #80]	@ 0x50
 80073fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80073fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007400:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007404:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007406:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800740a:	1b5b      	subs	r3, r3, r5
 800740c:	9311      	str	r3, [sp, #68]	@ 0x44
 800740e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007412:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007416:	f7ff f8ff 	bl	8006618 <__ulp>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4650      	mov	r0, sl
 8007420:	4659      	mov	r1, fp
 8007422:	f7f9 f859 	bl	80004d8 <__aeabi_dmul>
 8007426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800742a:	f7f8 fe9f 	bl	800016c <__adddf3>
 800742e:	4682      	mov	sl, r0
 8007430:	468b      	mov	fp, r1
 8007432:	e776      	b.n	8007322 <_strtod_l+0xa5a>
 8007434:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007438:	e7e0      	b.n	80073fc <_strtod_l+0xb34>
 800743a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007470 <_strtod_l+0xba8>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f7f9 fabc 	bl	80009bc <__aeabi_dcmplt>
 8007444:	e79e      	b.n	8007384 <_strtod_l+0xabc>
 8007446:	2300      	movs	r3, #0
 8007448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800744a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800744c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	f7ff ba77 	b.w	8006942 <_strtod_l+0x7a>
 8007454:	2a65      	cmp	r2, #101	@ 0x65
 8007456:	f43f ab6e 	beq.w	8006b36 <_strtod_l+0x26e>
 800745a:	2a45      	cmp	r2, #69	@ 0x45
 800745c:	f43f ab6b 	beq.w	8006b36 <_strtod_l+0x26e>
 8007460:	2301      	movs	r3, #1
 8007462:	f7ff bba6 	b.w	8006bb2 <_strtod_l+0x2ea>
 8007466:	bf00      	nop
 8007468:	ffc00000 	.word	0xffc00000
 800746c:	41dfffff 	.word	0x41dfffff
 8007470:	94a03595 	.word	0x94a03595
 8007474:	3fcfffff 	.word	0x3fcfffff

08007478 <_strtod_r>:
 8007478:	4b01      	ldr	r3, [pc, #4]	@ (8007480 <_strtod_r+0x8>)
 800747a:	f7ff ba25 	b.w	80068c8 <_strtod_l>
 800747e:	bf00      	nop
 8007480:	2000006c 	.word	0x2000006c

08007484 <_strtol_l.constprop.0>:
 8007484:	2b24      	cmp	r3, #36	@ 0x24
 8007486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748a:	4686      	mov	lr, r0
 800748c:	4690      	mov	r8, r2
 800748e:	d801      	bhi.n	8007494 <_strtol_l.constprop.0+0x10>
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <_strtol_l.constprop.0+0x1e>
 8007494:	f7fd fdbe 	bl	8005014 <__errno>
 8007498:	2316      	movs	r3, #22
 800749a:	6003      	str	r3, [r0, #0]
 800749c:	2000      	movs	r0, #0
 800749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a2:	460d      	mov	r5, r1
 80074a4:	4833      	ldr	r0, [pc, #204]	@ (8007574 <_strtol_l.constprop.0+0xf0>)
 80074a6:	462a      	mov	r2, r5
 80074a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ac:	5d06      	ldrb	r6, [r0, r4]
 80074ae:	f016 0608 	ands.w	r6, r6, #8
 80074b2:	d1f8      	bne.n	80074a6 <_strtol_l.constprop.0+0x22>
 80074b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80074b6:	d12d      	bne.n	8007514 <_strtol_l.constprop.0+0x90>
 80074b8:	2601      	movs	r6, #1
 80074ba:	782c      	ldrb	r4, [r5, #0]
 80074bc:	1c95      	adds	r5, r2, #2
 80074be:	f033 0210 	bics.w	r2, r3, #16
 80074c2:	d109      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 80074c4:	2c30      	cmp	r4, #48	@ 0x30
 80074c6:	d12a      	bne.n	800751e <_strtol_l.constprop.0+0x9a>
 80074c8:	782a      	ldrb	r2, [r5, #0]
 80074ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80074ce:	2a58      	cmp	r2, #88	@ 0x58
 80074d0:	d125      	bne.n	800751e <_strtol_l.constprop.0+0x9a>
 80074d2:	2310      	movs	r3, #16
 80074d4:	786c      	ldrb	r4, [r5, #1]
 80074d6:	3502      	adds	r5, #2
 80074d8:	2200      	movs	r2, #0
 80074da:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80074de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074e2:	fbbc f9f3 	udiv	r9, ip, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80074ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074f0:	2f09      	cmp	r7, #9
 80074f2:	d81b      	bhi.n	800752c <_strtol_l.constprop.0+0xa8>
 80074f4:	463c      	mov	r4, r7
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	dd27      	ble.n	800754a <_strtol_l.constprop.0+0xc6>
 80074fa:	1c57      	adds	r7, r2, #1
 80074fc:	d007      	beq.n	800750e <_strtol_l.constprop.0+0x8a>
 80074fe:	4581      	cmp	r9, r0
 8007500:	d320      	bcc.n	8007544 <_strtol_l.constprop.0+0xc0>
 8007502:	d101      	bne.n	8007508 <_strtol_l.constprop.0+0x84>
 8007504:	45a2      	cmp	sl, r4
 8007506:	db1d      	blt.n	8007544 <_strtol_l.constprop.0+0xc0>
 8007508:	2201      	movs	r2, #1
 800750a:	fb00 4003 	mla	r0, r0, r3, r4
 800750e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007512:	e7eb      	b.n	80074ec <_strtol_l.constprop.0+0x68>
 8007514:	2c2b      	cmp	r4, #43	@ 0x2b
 8007516:	bf04      	itt	eq
 8007518:	782c      	ldrbeq	r4, [r5, #0]
 800751a:	1c95      	addeq	r5, r2, #2
 800751c:	e7cf      	b.n	80074be <_strtol_l.constprop.0+0x3a>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1da      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 8007522:	2c30      	cmp	r4, #48	@ 0x30
 8007524:	bf0c      	ite	eq
 8007526:	2308      	moveq	r3, #8
 8007528:	230a      	movne	r3, #10
 800752a:	e7d5      	b.n	80074d8 <_strtol_l.constprop.0+0x54>
 800752c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007530:	2f19      	cmp	r7, #25
 8007532:	d801      	bhi.n	8007538 <_strtol_l.constprop.0+0xb4>
 8007534:	3c37      	subs	r4, #55	@ 0x37
 8007536:	e7de      	b.n	80074f6 <_strtol_l.constprop.0+0x72>
 8007538:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800753c:	2f19      	cmp	r7, #25
 800753e:	d804      	bhi.n	800754a <_strtol_l.constprop.0+0xc6>
 8007540:	3c57      	subs	r4, #87	@ 0x57
 8007542:	e7d8      	b.n	80074f6 <_strtol_l.constprop.0+0x72>
 8007544:	f04f 32ff 	mov.w	r2, #4294967295
 8007548:	e7e1      	b.n	800750e <_strtol_l.constprop.0+0x8a>
 800754a:	1c53      	adds	r3, r2, #1
 800754c:	d108      	bne.n	8007560 <_strtol_l.constprop.0+0xdc>
 800754e:	2322      	movs	r3, #34	@ 0x22
 8007550:	4660      	mov	r0, ip
 8007552:	f8ce 3000 	str.w	r3, [lr]
 8007556:	f1b8 0f00 	cmp.w	r8, #0
 800755a:	d0a0      	beq.n	800749e <_strtol_l.constprop.0+0x1a>
 800755c:	1e69      	subs	r1, r5, #1
 800755e:	e006      	b.n	800756e <_strtol_l.constprop.0+0xea>
 8007560:	b106      	cbz	r6, 8007564 <_strtol_l.constprop.0+0xe0>
 8007562:	4240      	negs	r0, r0
 8007564:	f1b8 0f00 	cmp.w	r8, #0
 8007568:	d099      	beq.n	800749e <_strtol_l.constprop.0+0x1a>
 800756a:	2a00      	cmp	r2, #0
 800756c:	d1f6      	bne.n	800755c <_strtol_l.constprop.0+0xd8>
 800756e:	f8c8 1000 	str.w	r1, [r8]
 8007572:	e794      	b.n	800749e <_strtol_l.constprop.0+0x1a>
 8007574:	080089f9 	.word	0x080089f9

08007578 <_strtol_r>:
 8007578:	f7ff bf84 	b.w	8007484 <_strtol_l.constprop.0>

0800757c <__ssputs_r>:
 800757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	461f      	mov	r7, r3
 8007582:	688e      	ldr	r6, [r1, #8]
 8007584:	4682      	mov	sl, r0
 8007586:	42be      	cmp	r6, r7
 8007588:	460c      	mov	r4, r1
 800758a:	4690      	mov	r8, r2
 800758c:	680b      	ldr	r3, [r1, #0]
 800758e:	d82d      	bhi.n	80075ec <__ssputs_r+0x70>
 8007590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007598:	d026      	beq.n	80075e8 <__ssputs_r+0x6c>
 800759a:	6965      	ldr	r5, [r4, #20]
 800759c:	6909      	ldr	r1, [r1, #16]
 800759e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075a2:	eba3 0901 	sub.w	r9, r3, r1
 80075a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075aa:	1c7b      	adds	r3, r7, #1
 80075ac:	444b      	add	r3, r9
 80075ae:	106d      	asrs	r5, r5, #1
 80075b0:	429d      	cmp	r5, r3
 80075b2:	bf38      	it	cc
 80075b4:	461d      	movcc	r5, r3
 80075b6:	0553      	lsls	r3, r2, #21
 80075b8:	d527      	bpl.n	800760a <__ssputs_r+0x8e>
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7fe fc2e 	bl	8005e1c <_malloc_r>
 80075c0:	4606      	mov	r6, r0
 80075c2:	b360      	cbz	r0, 800761e <__ssputs_r+0xa2>
 80075c4:	464a      	mov	r2, r9
 80075c6:	6921      	ldr	r1, [r4, #16]
 80075c8:	f000 fa14 	bl	80079f4 <memcpy>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	6126      	str	r6, [r4, #16]
 80075da:	444e      	add	r6, r9
 80075dc:	6026      	str	r6, [r4, #0]
 80075de:	463e      	mov	r6, r7
 80075e0:	6165      	str	r5, [r4, #20]
 80075e2:	eba5 0509 	sub.w	r5, r5, r9
 80075e6:	60a5      	str	r5, [r4, #8]
 80075e8:	42be      	cmp	r6, r7
 80075ea:	d900      	bls.n	80075ee <__ssputs_r+0x72>
 80075ec:	463e      	mov	r6, r7
 80075ee:	4632      	mov	r2, r6
 80075f0:	4641      	mov	r1, r8
 80075f2:	6820      	ldr	r0, [r4, #0]
 80075f4:	f000 f9c2 	bl	800797c <memmove>
 80075f8:	2000      	movs	r0, #0
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	1b9b      	subs	r3, r3, r6
 80075fe:	60a3      	str	r3, [r4, #8]
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	4433      	add	r3, r6
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760a:	462a      	mov	r2, r5
 800760c:	f000 fd83 	bl	8008116 <_realloc_r>
 8007610:	4606      	mov	r6, r0
 8007612:	2800      	cmp	r0, #0
 8007614:	d1e0      	bne.n	80075d8 <__ssputs_r+0x5c>
 8007616:	4650      	mov	r0, sl
 8007618:	6921      	ldr	r1, [r4, #16]
 800761a:	f7fe fb8d 	bl	8005d38 <_free_r>
 800761e:	230c      	movs	r3, #12
 8007620:	f8ca 3000 	str.w	r3, [sl]
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	e7e9      	b.n	8007606 <__ssputs_r+0x8a>
	...

08007634 <_svfiprintf_r>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4698      	mov	r8, r3
 800763a:	898b      	ldrh	r3, [r1, #12]
 800763c:	4607      	mov	r7, r0
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	460d      	mov	r5, r1
 8007642:	4614      	mov	r4, r2
 8007644:	b09d      	sub	sp, #116	@ 0x74
 8007646:	d510      	bpl.n	800766a <_svfiprintf_r+0x36>
 8007648:	690b      	ldr	r3, [r1, #16]
 800764a:	b973      	cbnz	r3, 800766a <_svfiprintf_r+0x36>
 800764c:	2140      	movs	r1, #64	@ 0x40
 800764e:	f7fe fbe5 	bl	8005e1c <_malloc_r>
 8007652:	6028      	str	r0, [r5, #0]
 8007654:	6128      	str	r0, [r5, #16]
 8007656:	b930      	cbnz	r0, 8007666 <_svfiprintf_r+0x32>
 8007658:	230c      	movs	r3, #12
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	f04f 30ff 	mov.w	r0, #4294967295
 8007660:	b01d      	add	sp, #116	@ 0x74
 8007662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007666:	2340      	movs	r3, #64	@ 0x40
 8007668:	616b      	str	r3, [r5, #20]
 800766a:	2300      	movs	r3, #0
 800766c:	9309      	str	r3, [sp, #36]	@ 0x24
 800766e:	2320      	movs	r3, #32
 8007670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007674:	2330      	movs	r3, #48	@ 0x30
 8007676:	f04f 0901 	mov.w	r9, #1
 800767a:	f8cd 800c 	str.w	r8, [sp, #12]
 800767e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007818 <_svfiprintf_r+0x1e4>
 8007682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007686:	4623      	mov	r3, r4
 8007688:	469a      	mov	sl, r3
 800768a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800768e:	b10a      	cbz	r2, 8007694 <_svfiprintf_r+0x60>
 8007690:	2a25      	cmp	r2, #37	@ 0x25
 8007692:	d1f9      	bne.n	8007688 <_svfiprintf_r+0x54>
 8007694:	ebba 0b04 	subs.w	fp, sl, r4
 8007698:	d00b      	beq.n	80076b2 <_svfiprintf_r+0x7e>
 800769a:	465b      	mov	r3, fp
 800769c:	4622      	mov	r2, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff ff6b 	bl	800757c <__ssputs_r>
 80076a6:	3001      	adds	r0, #1
 80076a8:	f000 80a7 	beq.w	80077fa <_svfiprintf_r+0x1c6>
 80076ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ae:	445a      	add	r2, fp
 80076b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b2:	f89a 3000 	ldrb.w	r3, [sl]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 809f 	beq.w	80077fa <_svfiprintf_r+0x1c6>
 80076bc:	2300      	movs	r3, #0
 80076be:	f04f 32ff 	mov.w	r2, #4294967295
 80076c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c6:	f10a 0a01 	add.w	sl, sl, #1
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80076d4:	4654      	mov	r4, sl
 80076d6:	2205      	movs	r2, #5
 80076d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076dc:	484e      	ldr	r0, [pc, #312]	@ (8007818 <_svfiprintf_r+0x1e4>)
 80076de:	f7fd fcc6 	bl	800506e <memchr>
 80076e2:	9a04      	ldr	r2, [sp, #16]
 80076e4:	b9d8      	cbnz	r0, 800771e <_svfiprintf_r+0xea>
 80076e6:	06d0      	lsls	r0, r2, #27
 80076e8:	bf44      	itt	mi
 80076ea:	2320      	movmi	r3, #32
 80076ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f0:	0711      	lsls	r1, r2, #28
 80076f2:	bf44      	itt	mi
 80076f4:	232b      	movmi	r3, #43	@ 0x2b
 80076f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076fa:	f89a 3000 	ldrb.w	r3, [sl]
 80076fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007700:	d015      	beq.n	800772e <_svfiprintf_r+0xfa>
 8007702:	4654      	mov	r4, sl
 8007704:	2000      	movs	r0, #0
 8007706:	f04f 0c0a 	mov.w	ip, #10
 800770a:	9a07      	ldr	r2, [sp, #28]
 800770c:	4621      	mov	r1, r4
 800770e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007712:	3b30      	subs	r3, #48	@ 0x30
 8007714:	2b09      	cmp	r3, #9
 8007716:	d94b      	bls.n	80077b0 <_svfiprintf_r+0x17c>
 8007718:	b1b0      	cbz	r0, 8007748 <_svfiprintf_r+0x114>
 800771a:	9207      	str	r2, [sp, #28]
 800771c:	e014      	b.n	8007748 <_svfiprintf_r+0x114>
 800771e:	eba0 0308 	sub.w	r3, r0, r8
 8007722:	fa09 f303 	lsl.w	r3, r9, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	46a2      	mov	sl, r4
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	e7d2      	b.n	80076d4 <_svfiprintf_r+0xa0>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	1d19      	adds	r1, r3, #4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	9103      	str	r1, [sp, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfbb      	ittet	lt
 800773a:	425b      	neglt	r3, r3
 800773c:	f042 0202 	orrlt.w	r2, r2, #2
 8007740:	9307      	strge	r3, [sp, #28]
 8007742:	9307      	strlt	r3, [sp, #28]
 8007744:	bfb8      	it	lt
 8007746:	9204      	strlt	r2, [sp, #16]
 8007748:	7823      	ldrb	r3, [r4, #0]
 800774a:	2b2e      	cmp	r3, #46	@ 0x2e
 800774c:	d10a      	bne.n	8007764 <_svfiprintf_r+0x130>
 800774e:	7863      	ldrb	r3, [r4, #1]
 8007750:	2b2a      	cmp	r3, #42	@ 0x2a
 8007752:	d132      	bne.n	80077ba <_svfiprintf_r+0x186>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	3402      	adds	r4, #2
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9203      	str	r2, [sp, #12]
 800775e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800781c <_svfiprintf_r+0x1e8>
 8007768:	2203      	movs	r2, #3
 800776a:	4650      	mov	r0, sl
 800776c:	7821      	ldrb	r1, [r4, #0]
 800776e:	f7fd fc7e 	bl	800506e <memchr>
 8007772:	b138      	cbz	r0, 8007784 <_svfiprintf_r+0x150>
 8007774:	2240      	movs	r2, #64	@ 0x40
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	eba0 000a 	sub.w	r0, r0, sl
 800777c:	4082      	lsls	r2, r0
 800777e:	4313      	orrs	r3, r2
 8007780:	3401      	adds	r4, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007788:	2206      	movs	r2, #6
 800778a:	4825      	ldr	r0, [pc, #148]	@ (8007820 <_svfiprintf_r+0x1ec>)
 800778c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007790:	f7fd fc6d 	bl	800506e <memchr>
 8007794:	2800      	cmp	r0, #0
 8007796:	d036      	beq.n	8007806 <_svfiprintf_r+0x1d2>
 8007798:	4b22      	ldr	r3, [pc, #136]	@ (8007824 <_svfiprintf_r+0x1f0>)
 800779a:	bb1b      	cbnz	r3, 80077e4 <_svfiprintf_r+0x1b0>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	3307      	adds	r3, #7
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	3308      	adds	r3, #8
 80077a6:	9303      	str	r3, [sp, #12]
 80077a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077aa:	4433      	add	r3, r6
 80077ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ae:	e76a      	b.n	8007686 <_svfiprintf_r+0x52>
 80077b0:	460c      	mov	r4, r1
 80077b2:	2001      	movs	r0, #1
 80077b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b8:	e7a8      	b.n	800770c <_svfiprintf_r+0xd8>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f04f 0c0a 	mov.w	ip, #10
 80077c0:	4619      	mov	r1, r3
 80077c2:	3401      	adds	r4, #1
 80077c4:	9305      	str	r3, [sp, #20]
 80077c6:	4620      	mov	r0, r4
 80077c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077cc:	3a30      	subs	r2, #48	@ 0x30
 80077ce:	2a09      	cmp	r2, #9
 80077d0:	d903      	bls.n	80077da <_svfiprintf_r+0x1a6>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0c6      	beq.n	8007764 <_svfiprintf_r+0x130>
 80077d6:	9105      	str	r1, [sp, #20]
 80077d8:	e7c4      	b.n	8007764 <_svfiprintf_r+0x130>
 80077da:	4604      	mov	r4, r0
 80077dc:	2301      	movs	r3, #1
 80077de:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e2:	e7f0      	b.n	80077c6 <_svfiprintf_r+0x192>
 80077e4:	ab03      	add	r3, sp, #12
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	462a      	mov	r2, r5
 80077ea:	4638      	mov	r0, r7
 80077ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <_svfiprintf_r+0x1f4>)
 80077ee:	a904      	add	r1, sp, #16
 80077f0:	f7fc fc96 	bl	8004120 <_printf_float>
 80077f4:	1c42      	adds	r2, r0, #1
 80077f6:	4606      	mov	r6, r0
 80077f8:	d1d6      	bne.n	80077a8 <_svfiprintf_r+0x174>
 80077fa:	89ab      	ldrh	r3, [r5, #12]
 80077fc:	065b      	lsls	r3, r3, #25
 80077fe:	f53f af2d 	bmi.w	800765c <_svfiprintf_r+0x28>
 8007802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007804:	e72c      	b.n	8007660 <_svfiprintf_r+0x2c>
 8007806:	ab03      	add	r3, sp, #12
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	462a      	mov	r2, r5
 800780c:	4638      	mov	r0, r7
 800780e:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <_svfiprintf_r+0x1f4>)
 8007810:	a904      	add	r1, sp, #16
 8007812:	f7fc ff23 	bl	800465c <_printf_i>
 8007816:	e7ed      	b.n	80077f4 <_svfiprintf_r+0x1c0>
 8007818:	08008af9 	.word	0x08008af9
 800781c:	08008aff 	.word	0x08008aff
 8007820:	08008b03 	.word	0x08008b03
 8007824:	08004121 	.word	0x08004121
 8007828:	0800757d 	.word	0x0800757d

0800782c <__sflush_r>:
 800782c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	0716      	lsls	r6, r2, #28
 8007834:	4605      	mov	r5, r0
 8007836:	460c      	mov	r4, r1
 8007838:	d454      	bmi.n	80078e4 <__sflush_r+0xb8>
 800783a:	684b      	ldr	r3, [r1, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc02      	bgt.n	8007846 <__sflush_r+0x1a>
 8007840:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd48      	ble.n	80078d8 <__sflush_r+0xac>
 8007846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007848:	2e00      	cmp	r6, #0
 800784a:	d045      	beq.n	80078d8 <__sflush_r+0xac>
 800784c:	2300      	movs	r3, #0
 800784e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007852:	682f      	ldr	r7, [r5, #0]
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	d030      	beq.n	80078bc <__sflush_r+0x90>
 800785a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	0759      	lsls	r1, r3, #29
 8007860:	d505      	bpl.n	800786e <__sflush_r+0x42>
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	1ad2      	subs	r2, r2, r3
 8007866:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007868:	b10b      	cbz	r3, 800786e <__sflush_r+0x42>
 800786a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800786c:	1ad2      	subs	r2, r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	4628      	mov	r0, r5
 8007872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007874:	6a21      	ldr	r1, [r4, #32]
 8007876:	47b0      	blx	r6
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	d106      	bne.n	800788c <__sflush_r+0x60>
 800787e:	6829      	ldr	r1, [r5, #0]
 8007880:	291d      	cmp	r1, #29
 8007882:	d82b      	bhi.n	80078dc <__sflush_r+0xb0>
 8007884:	4a28      	ldr	r2, [pc, #160]	@ (8007928 <__sflush_r+0xfc>)
 8007886:	410a      	asrs	r2, r1
 8007888:	07d6      	lsls	r6, r2, #31
 800788a:	d427      	bmi.n	80078dc <__sflush_r+0xb0>
 800788c:	2200      	movs	r2, #0
 800788e:	6062      	str	r2, [r4, #4]
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	04d9      	lsls	r1, r3, #19
 8007894:	6022      	str	r2, [r4, #0]
 8007896:	d504      	bpl.n	80078a2 <__sflush_r+0x76>
 8007898:	1c42      	adds	r2, r0, #1
 800789a:	d101      	bne.n	80078a0 <__sflush_r+0x74>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b903      	cbnz	r3, 80078a2 <__sflush_r+0x76>
 80078a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80078a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a4:	602f      	str	r7, [r5, #0]
 80078a6:	b1b9      	cbz	r1, 80078d8 <__sflush_r+0xac>
 80078a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d002      	beq.n	80078b6 <__sflush_r+0x8a>
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7fe fa41 	bl	8005d38 <_free_r>
 80078b6:	2300      	movs	r3, #0
 80078b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ba:	e00d      	b.n	80078d8 <__sflush_r+0xac>
 80078bc:	2301      	movs	r3, #1
 80078be:	4628      	mov	r0, r5
 80078c0:	47b0      	blx	r6
 80078c2:	4602      	mov	r2, r0
 80078c4:	1c50      	adds	r0, r2, #1
 80078c6:	d1c9      	bne.n	800785c <__sflush_r+0x30>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c6      	beq.n	800785c <__sflush_r+0x30>
 80078ce:	2b1d      	cmp	r3, #29
 80078d0:	d001      	beq.n	80078d6 <__sflush_r+0xaa>
 80078d2:	2b16      	cmp	r3, #22
 80078d4:	d11d      	bne.n	8007912 <__sflush_r+0xe6>
 80078d6:	602f      	str	r7, [r5, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e021      	b.n	8007920 <__sflush_r+0xf4>
 80078dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e0:	b21b      	sxth	r3, r3
 80078e2:	e01a      	b.n	800791a <__sflush_r+0xee>
 80078e4:	690f      	ldr	r7, [r1, #16]
 80078e6:	2f00      	cmp	r7, #0
 80078e8:	d0f6      	beq.n	80078d8 <__sflush_r+0xac>
 80078ea:	0793      	lsls	r3, r2, #30
 80078ec:	bf18      	it	ne
 80078ee:	2300      	movne	r3, #0
 80078f0:	680e      	ldr	r6, [r1, #0]
 80078f2:	bf08      	it	eq
 80078f4:	694b      	ldreq	r3, [r1, #20]
 80078f6:	1bf6      	subs	r6, r6, r7
 80078f8:	600f      	str	r7, [r1, #0]
 80078fa:	608b      	str	r3, [r1, #8]
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	ddeb      	ble.n	80078d8 <__sflush_r+0xac>
 8007900:	4633      	mov	r3, r6
 8007902:	463a      	mov	r2, r7
 8007904:	4628      	mov	r0, r5
 8007906:	6a21      	ldr	r1, [r4, #32]
 8007908:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800790c:	47e0      	blx	ip
 800790e:	2800      	cmp	r0, #0
 8007910:	dc07      	bgt.n	8007922 <__sflush_r+0xf6>
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007922:	4407      	add	r7, r0
 8007924:	1a36      	subs	r6, r6, r0
 8007926:	e7e9      	b.n	80078fc <__sflush_r+0xd0>
 8007928:	dfbffffe 	.word	0xdfbffffe

0800792c <_fflush_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b913      	cbnz	r3, 800793c <_fflush_r+0x10>
 8007936:	2500      	movs	r5, #0
 8007938:	4628      	mov	r0, r5
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	b118      	cbz	r0, 8007946 <_fflush_r+0x1a>
 800793e:	6a03      	ldr	r3, [r0, #32]
 8007940:	b90b      	cbnz	r3, 8007946 <_fflush_r+0x1a>
 8007942:	f7fd fa47 	bl	8004dd4 <__sinit>
 8007946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f3      	beq.n	8007936 <_fflush_r+0xa>
 800794e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007950:	07d0      	lsls	r0, r2, #31
 8007952:	d404      	bmi.n	800795e <_fflush_r+0x32>
 8007954:	0599      	lsls	r1, r3, #22
 8007956:	d402      	bmi.n	800795e <_fflush_r+0x32>
 8007958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795a:	f7fd fb86 	bl	800506a <__retarget_lock_acquire_recursive>
 800795e:	4628      	mov	r0, r5
 8007960:	4621      	mov	r1, r4
 8007962:	f7ff ff63 	bl	800782c <__sflush_r>
 8007966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007968:	4605      	mov	r5, r0
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	d4e4      	bmi.n	8007938 <_fflush_r+0xc>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	059b      	lsls	r3, r3, #22
 8007972:	d4e1      	bmi.n	8007938 <_fflush_r+0xc>
 8007974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007976:	f7fd fb79 	bl	800506c <__retarget_lock_release_recursive>
 800797a:	e7dd      	b.n	8007938 <_fflush_r+0xc>

0800797c <memmove>:
 800797c:	4288      	cmp	r0, r1
 800797e:	b510      	push	{r4, lr}
 8007980:	eb01 0402 	add.w	r4, r1, r2
 8007984:	d902      	bls.n	800798c <memmove+0x10>
 8007986:	4284      	cmp	r4, r0
 8007988:	4623      	mov	r3, r4
 800798a:	d807      	bhi.n	800799c <memmove+0x20>
 800798c:	1e43      	subs	r3, r0, #1
 800798e:	42a1      	cmp	r1, r4
 8007990:	d008      	beq.n	80079a4 <memmove+0x28>
 8007992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800799a:	e7f8      	b.n	800798e <memmove+0x12>
 800799c:	4601      	mov	r1, r0
 800799e:	4402      	add	r2, r0
 80079a0:	428a      	cmp	r2, r1
 80079a2:	d100      	bne.n	80079a6 <memmove+0x2a>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ae:	e7f7      	b.n	80079a0 <memmove+0x24>

080079b0 <strncmp>:
 80079b0:	b510      	push	{r4, lr}
 80079b2:	b16a      	cbz	r2, 80079d0 <strncmp+0x20>
 80079b4:	3901      	subs	r1, #1
 80079b6:	1884      	adds	r4, r0, r2
 80079b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d103      	bne.n	80079cc <strncmp+0x1c>
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	d001      	beq.n	80079cc <strncmp+0x1c>
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	d1f5      	bne.n	80079b8 <strncmp+0x8>
 80079cc:	1ad0      	subs	r0, r2, r3
 80079ce:	bd10      	pop	{r4, pc}
 80079d0:	4610      	mov	r0, r2
 80079d2:	e7fc      	b.n	80079ce <strncmp+0x1e>

080079d4 <_sbrk_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	2300      	movs	r3, #0
 80079d8:	4d05      	ldr	r5, [pc, #20]	@ (80079f0 <_sbrk_r+0x1c>)
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7fa f866 	bl	8001ab0 <_sbrk>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_sbrk_r+0x1a>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_sbrk_r+0x1a>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	200005d0 	.word	0x200005d0

080079f4 <memcpy>:
 80079f4:	440a      	add	r2, r1
 80079f6:	4291      	cmp	r1, r2
 80079f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079fc:	d100      	bne.n	8007a00 <memcpy+0xc>
 80079fe:	4770      	bx	lr
 8007a00:	b510      	push	{r4, lr}
 8007a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a06:	4291      	cmp	r1, r2
 8007a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0c:	d1f9      	bne.n	8007a02 <memcpy+0xe>
 8007a0e:	bd10      	pop	{r4, pc}

08007a10 <nan>:
 8007a10:	2000      	movs	r0, #0
 8007a12:	4901      	ldr	r1, [pc, #4]	@ (8007a18 <nan+0x8>)
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	7ff80000 	.word	0x7ff80000

08007a1c <__assert_func>:
 8007a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a1e:	4614      	mov	r4, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	4b09      	ldr	r3, [pc, #36]	@ (8007a48 <__assert_func+0x2c>)
 8007a24:	4605      	mov	r5, r0
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68d8      	ldr	r0, [r3, #12]
 8007a2a:	b954      	cbnz	r4, 8007a42 <__assert_func+0x26>
 8007a2c:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <__assert_func+0x30>)
 8007a2e:	461c      	mov	r4, r3
 8007a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a34:	9100      	str	r1, [sp, #0]
 8007a36:	462b      	mov	r3, r5
 8007a38:	4905      	ldr	r1, [pc, #20]	@ (8007a50 <__assert_func+0x34>)
 8007a3a:	f000 fba7 	bl	800818c <fiprintf>
 8007a3e:	f000 fbb7 	bl	80081b0 <abort>
 8007a42:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <__assert_func+0x38>)
 8007a44:	e7f4      	b.n	8007a30 <__assert_func+0x14>
 8007a46:	bf00      	nop
 8007a48:	2000001c 	.word	0x2000001c
 8007a4c:	08008b4d 	.word	0x08008b4d
 8007a50:	08008b1f 	.word	0x08008b1f
 8007a54:	08008b12 	.word	0x08008b12

08007a58 <_calloc_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8007a5e:	b93c      	cbnz	r4, 8007a70 <_calloc_r+0x18>
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7fe f9db 	bl	8005e1c <_malloc_r>
 8007a66:	4606      	mov	r6, r0
 8007a68:	b928      	cbnz	r0, 8007a76 <_calloc_r+0x1e>
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	220c      	movs	r2, #12
 8007a72:	6002      	str	r2, [r0, #0]
 8007a74:	e7f9      	b.n	8007a6a <_calloc_r+0x12>
 8007a76:	462a      	mov	r2, r5
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7fd fa78 	bl	8004f6e <memset>
 8007a7e:	e7f5      	b.n	8007a6c <_calloc_r+0x14>

08007a80 <rshift>:
 8007a80:	6903      	ldr	r3, [r0, #16]
 8007a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a8a:	f100 0414 	add.w	r4, r0, #20
 8007a8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a92:	dd46      	ble.n	8007b22 <rshift+0xa2>
 8007a94:	f011 011f 	ands.w	r1, r1, #31
 8007a98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007aa0:	d10c      	bne.n	8007abc <rshift+0x3c>
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f100 0710 	add.w	r7, r0, #16
 8007aa8:	42b1      	cmp	r1, r6
 8007aaa:	d335      	bcc.n	8007b18 <rshift+0x98>
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	1eea      	subs	r2, r5, #3
 8007ab2:	4296      	cmp	r6, r2
 8007ab4:	bf38      	it	cc
 8007ab6:	2300      	movcc	r3, #0
 8007ab8:	4423      	add	r3, r4
 8007aba:	e015      	b.n	8007ae8 <rshift+0x68>
 8007abc:	46a1      	mov	r9, r4
 8007abe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ac2:	f1c1 0820 	rsb	r8, r1, #32
 8007ac6:	40cf      	lsrs	r7, r1
 8007ac8:	f105 0e04 	add.w	lr, r5, #4
 8007acc:	4576      	cmp	r6, lr
 8007ace:	46f4      	mov	ip, lr
 8007ad0:	d816      	bhi.n	8007b00 <rshift+0x80>
 8007ad2:	1a9a      	subs	r2, r3, r2
 8007ad4:	0092      	lsls	r2, r2, #2
 8007ad6:	3a04      	subs	r2, #4
 8007ad8:	3501      	adds	r5, #1
 8007ada:	42ae      	cmp	r6, r5
 8007adc:	bf38      	it	cc
 8007ade:	2200      	movcc	r2, #0
 8007ae0:	18a3      	adds	r3, r4, r2
 8007ae2:	50a7      	str	r7, [r4, r2]
 8007ae4:	b107      	cbz	r7, 8007ae8 <rshift+0x68>
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	eba3 0204 	sub.w	r2, r3, r4
 8007aee:	bf08      	it	eq
 8007af0:	2300      	moveq	r3, #0
 8007af2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007af6:	6102      	str	r2, [r0, #16]
 8007af8:	bf08      	it	eq
 8007afa:	6143      	streq	r3, [r0, #20]
 8007afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b00:	f8dc c000 	ldr.w	ip, [ip]
 8007b04:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b08:	ea4c 0707 	orr.w	r7, ip, r7
 8007b0c:	f849 7b04 	str.w	r7, [r9], #4
 8007b10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b14:	40cf      	lsrs	r7, r1
 8007b16:	e7d9      	b.n	8007acc <rshift+0x4c>
 8007b18:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b20:	e7c2      	b.n	8007aa8 <rshift+0x28>
 8007b22:	4623      	mov	r3, r4
 8007b24:	e7e0      	b.n	8007ae8 <rshift+0x68>

08007b26 <__hexdig_fun>:
 8007b26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007b2a:	2b09      	cmp	r3, #9
 8007b2c:	d802      	bhi.n	8007b34 <__hexdig_fun+0xe>
 8007b2e:	3820      	subs	r0, #32
 8007b30:	b2c0      	uxtb	r0, r0
 8007b32:	4770      	bx	lr
 8007b34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b38:	2b05      	cmp	r3, #5
 8007b3a:	d801      	bhi.n	8007b40 <__hexdig_fun+0x1a>
 8007b3c:	3847      	subs	r0, #71	@ 0x47
 8007b3e:	e7f7      	b.n	8007b30 <__hexdig_fun+0xa>
 8007b40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b44:	2b05      	cmp	r3, #5
 8007b46:	d801      	bhi.n	8007b4c <__hexdig_fun+0x26>
 8007b48:	3827      	subs	r0, #39	@ 0x27
 8007b4a:	e7f1      	b.n	8007b30 <__hexdig_fun+0xa>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	4770      	bx	lr

08007b50 <__gethex>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	468a      	mov	sl, r1
 8007b56:	4690      	mov	r8, r2
 8007b58:	b085      	sub	sp, #20
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	680b      	ldr	r3, [r1, #0]
 8007b5e:	9001      	str	r0, [sp, #4]
 8007b60:	1c9c      	adds	r4, r3, #2
 8007b62:	46a1      	mov	r9, r4
 8007b64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b68:	2830      	cmp	r0, #48	@ 0x30
 8007b6a:	d0fa      	beq.n	8007b62 <__gethex+0x12>
 8007b6c:	eba9 0303 	sub.w	r3, r9, r3
 8007b70:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b74:	f7ff ffd7 	bl	8007b26 <__hexdig_fun>
 8007b78:	4605      	mov	r5, r0
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d168      	bne.n	8007c50 <__gethex+0x100>
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4648      	mov	r0, r9
 8007b82:	499f      	ldr	r1, [pc, #636]	@ (8007e00 <__gethex+0x2b0>)
 8007b84:	f7ff ff14 	bl	80079b0 <strncmp>
 8007b88:	4607      	mov	r7, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d167      	bne.n	8007c5e <__gethex+0x10e>
 8007b8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b92:	4626      	mov	r6, r4
 8007b94:	f7ff ffc7 	bl	8007b26 <__hexdig_fun>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d062      	beq.n	8007c62 <__gethex+0x112>
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	7818      	ldrb	r0, [r3, #0]
 8007ba0:	4699      	mov	r9, r3
 8007ba2:	2830      	cmp	r0, #48	@ 0x30
 8007ba4:	f103 0301 	add.w	r3, r3, #1
 8007ba8:	d0f9      	beq.n	8007b9e <__gethex+0x4e>
 8007baa:	f7ff ffbc 	bl	8007b26 <__hexdig_fun>
 8007bae:	fab0 f580 	clz	r5, r0
 8007bb2:	f04f 0b01 	mov.w	fp, #1
 8007bb6:	096d      	lsrs	r5, r5, #5
 8007bb8:	464a      	mov	r2, r9
 8007bba:	4616      	mov	r6, r2
 8007bbc:	7830      	ldrb	r0, [r6, #0]
 8007bbe:	3201      	adds	r2, #1
 8007bc0:	f7ff ffb1 	bl	8007b26 <__hexdig_fun>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d1f8      	bne.n	8007bba <__gethex+0x6a>
 8007bc8:	2201      	movs	r2, #1
 8007bca:	4630      	mov	r0, r6
 8007bcc:	498c      	ldr	r1, [pc, #560]	@ (8007e00 <__gethex+0x2b0>)
 8007bce:	f7ff feef 	bl	80079b0 <strncmp>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d13f      	bne.n	8007c56 <__gethex+0x106>
 8007bd6:	b944      	cbnz	r4, 8007bea <__gethex+0x9a>
 8007bd8:	1c74      	adds	r4, r6, #1
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4616      	mov	r6, r2
 8007bde:	7830      	ldrb	r0, [r6, #0]
 8007be0:	3201      	adds	r2, #1
 8007be2:	f7ff ffa0 	bl	8007b26 <__hexdig_fun>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d1f8      	bne.n	8007bdc <__gethex+0x8c>
 8007bea:	1ba4      	subs	r4, r4, r6
 8007bec:	00a7      	lsls	r7, r4, #2
 8007bee:	7833      	ldrb	r3, [r6, #0]
 8007bf0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007bf4:	2b50      	cmp	r3, #80	@ 0x50
 8007bf6:	d13e      	bne.n	8007c76 <__gethex+0x126>
 8007bf8:	7873      	ldrb	r3, [r6, #1]
 8007bfa:	2b2b      	cmp	r3, #43	@ 0x2b
 8007bfc:	d033      	beq.n	8007c66 <__gethex+0x116>
 8007bfe:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c00:	d034      	beq.n	8007c6c <__gethex+0x11c>
 8007c02:	2400      	movs	r4, #0
 8007c04:	1c71      	adds	r1, r6, #1
 8007c06:	7808      	ldrb	r0, [r1, #0]
 8007c08:	f7ff ff8d 	bl	8007b26 <__hexdig_fun>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b18      	cmp	r3, #24
 8007c12:	d830      	bhi.n	8007c76 <__gethex+0x126>
 8007c14:	f1a0 0210 	sub.w	r2, r0, #16
 8007c18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c1c:	f7ff ff83 	bl	8007b26 <__hexdig_fun>
 8007c20:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c24:	fa5f fc8c 	uxtb.w	ip, ip
 8007c28:	f1bc 0f18 	cmp.w	ip, #24
 8007c2c:	f04f 030a 	mov.w	r3, #10
 8007c30:	d91e      	bls.n	8007c70 <__gethex+0x120>
 8007c32:	b104      	cbz	r4, 8007c36 <__gethex+0xe6>
 8007c34:	4252      	negs	r2, r2
 8007c36:	4417      	add	r7, r2
 8007c38:	f8ca 1000 	str.w	r1, [sl]
 8007c3c:	b1ed      	cbz	r5, 8007c7a <__gethex+0x12a>
 8007c3e:	f1bb 0f00 	cmp.w	fp, #0
 8007c42:	bf0c      	ite	eq
 8007c44:	2506      	moveq	r5, #6
 8007c46:	2500      	movne	r5, #0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	b005      	add	sp, #20
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	2500      	movs	r5, #0
 8007c52:	462c      	mov	r4, r5
 8007c54:	e7b0      	b.n	8007bb8 <__gethex+0x68>
 8007c56:	2c00      	cmp	r4, #0
 8007c58:	d1c7      	bne.n	8007bea <__gethex+0x9a>
 8007c5a:	4627      	mov	r7, r4
 8007c5c:	e7c7      	b.n	8007bee <__gethex+0x9e>
 8007c5e:	464e      	mov	r6, r9
 8007c60:	462f      	mov	r7, r5
 8007c62:	2501      	movs	r5, #1
 8007c64:	e7c3      	b.n	8007bee <__gethex+0x9e>
 8007c66:	2400      	movs	r4, #0
 8007c68:	1cb1      	adds	r1, r6, #2
 8007c6a:	e7cc      	b.n	8007c06 <__gethex+0xb6>
 8007c6c:	2401      	movs	r4, #1
 8007c6e:	e7fb      	b.n	8007c68 <__gethex+0x118>
 8007c70:	fb03 0002 	mla	r0, r3, r2, r0
 8007c74:	e7ce      	b.n	8007c14 <__gethex+0xc4>
 8007c76:	4631      	mov	r1, r6
 8007c78:	e7de      	b.n	8007c38 <__gethex+0xe8>
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	eba6 0309 	sub.w	r3, r6, r9
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b07      	cmp	r3, #7
 8007c84:	dc0a      	bgt.n	8007c9c <__gethex+0x14c>
 8007c86:	9801      	ldr	r0, [sp, #4]
 8007c88:	f7fe f954 	bl	8005f34 <_Balloc>
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	b940      	cbnz	r0, 8007ca2 <__gethex+0x152>
 8007c90:	4602      	mov	r2, r0
 8007c92:	21e4      	movs	r1, #228	@ 0xe4
 8007c94:	4b5b      	ldr	r3, [pc, #364]	@ (8007e04 <__gethex+0x2b4>)
 8007c96:	485c      	ldr	r0, [pc, #368]	@ (8007e08 <__gethex+0x2b8>)
 8007c98:	f7ff fec0 	bl	8007a1c <__assert_func>
 8007c9c:	3101      	adds	r1, #1
 8007c9e:	105b      	asrs	r3, r3, #1
 8007ca0:	e7ef      	b.n	8007c82 <__gethex+0x132>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f100 0a14 	add.w	sl, r0, #20
 8007ca8:	4655      	mov	r5, sl
 8007caa:	469b      	mov	fp, r3
 8007cac:	45b1      	cmp	r9, r6
 8007cae:	d337      	bcc.n	8007d20 <__gethex+0x1d0>
 8007cb0:	f845 bb04 	str.w	fp, [r5], #4
 8007cb4:	eba5 050a 	sub.w	r5, r5, sl
 8007cb8:	10ad      	asrs	r5, r5, #2
 8007cba:	6125      	str	r5, [r4, #16]
 8007cbc:	4658      	mov	r0, fp
 8007cbe:	f7fe fa2b 	bl	8006118 <__hi0bits>
 8007cc2:	016d      	lsls	r5, r5, #5
 8007cc4:	f8d8 6000 	ldr.w	r6, [r8]
 8007cc8:	1a2d      	subs	r5, r5, r0
 8007cca:	42b5      	cmp	r5, r6
 8007ccc:	dd54      	ble.n	8007d78 <__gethex+0x228>
 8007cce:	1bad      	subs	r5, r5, r6
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7fe fdb3 	bl	800683e <__any_on>
 8007cd8:	4681      	mov	r9, r0
 8007cda:	b178      	cbz	r0, 8007cfc <__gethex+0x1ac>
 8007cdc:	f04f 0901 	mov.w	r9, #1
 8007ce0:	1e6b      	subs	r3, r5, #1
 8007ce2:	1159      	asrs	r1, r3, #5
 8007ce4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007ce8:	f003 021f 	and.w	r2, r3, #31
 8007cec:	fa09 f202 	lsl.w	r2, r9, r2
 8007cf0:	420a      	tst	r2, r1
 8007cf2:	d003      	beq.n	8007cfc <__gethex+0x1ac>
 8007cf4:	454b      	cmp	r3, r9
 8007cf6:	dc36      	bgt.n	8007d66 <__gethex+0x216>
 8007cf8:	f04f 0902 	mov.w	r9, #2
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff febe 	bl	8007a80 <rshift>
 8007d04:	442f      	add	r7, r5
 8007d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d0a:	42bb      	cmp	r3, r7
 8007d0c:	da42      	bge.n	8007d94 <__gethex+0x244>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	9801      	ldr	r0, [sp, #4]
 8007d12:	f7fe f94f 	bl	8005fb4 <_Bfree>
 8007d16:	2300      	movs	r3, #0
 8007d18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d1a:	25a3      	movs	r5, #163	@ 0xa3
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e793      	b.n	8007c48 <__gethex+0xf8>
 8007d20:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007d24:	2a2e      	cmp	r2, #46	@ 0x2e
 8007d26:	d012      	beq.n	8007d4e <__gethex+0x1fe>
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d104      	bne.n	8007d36 <__gethex+0x1e6>
 8007d2c:	f845 bb04 	str.w	fp, [r5], #4
 8007d30:	f04f 0b00 	mov.w	fp, #0
 8007d34:	465b      	mov	r3, fp
 8007d36:	7830      	ldrb	r0, [r6, #0]
 8007d38:	9303      	str	r3, [sp, #12]
 8007d3a:	f7ff fef4 	bl	8007b26 <__hexdig_fun>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	f000 000f 	and.w	r0, r0, #15
 8007d44:	4098      	lsls	r0, r3
 8007d46:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	e7ae      	b.n	8007cac <__gethex+0x15c>
 8007d4e:	45b1      	cmp	r9, r6
 8007d50:	d8ea      	bhi.n	8007d28 <__gethex+0x1d8>
 8007d52:	2201      	movs	r2, #1
 8007d54:	4630      	mov	r0, r6
 8007d56:	492a      	ldr	r1, [pc, #168]	@ (8007e00 <__gethex+0x2b0>)
 8007d58:	9303      	str	r3, [sp, #12]
 8007d5a:	f7ff fe29 	bl	80079b0 <strncmp>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1e1      	bne.n	8007d28 <__gethex+0x1d8>
 8007d64:	e7a2      	b.n	8007cac <__gethex+0x15c>
 8007d66:	4620      	mov	r0, r4
 8007d68:	1ea9      	subs	r1, r5, #2
 8007d6a:	f7fe fd68 	bl	800683e <__any_on>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0c2      	beq.n	8007cf8 <__gethex+0x1a8>
 8007d72:	f04f 0903 	mov.w	r9, #3
 8007d76:	e7c1      	b.n	8007cfc <__gethex+0x1ac>
 8007d78:	da09      	bge.n	8007d8e <__gethex+0x23e>
 8007d7a:	1b75      	subs	r5, r6, r5
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	462a      	mov	r2, r5
 8007d80:	9801      	ldr	r0, [sp, #4]
 8007d82:	f7fe fb2d 	bl	80063e0 <__lshift>
 8007d86:	4604      	mov	r4, r0
 8007d88:	1b7f      	subs	r7, r7, r5
 8007d8a:	f100 0a14 	add.w	sl, r0, #20
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	e7b8      	b.n	8007d06 <__gethex+0x1b6>
 8007d94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d98:	42bd      	cmp	r5, r7
 8007d9a:	dd6f      	ble.n	8007e7c <__gethex+0x32c>
 8007d9c:	1bed      	subs	r5, r5, r7
 8007d9e:	42ae      	cmp	r6, r5
 8007da0:	dc34      	bgt.n	8007e0c <__gethex+0x2bc>
 8007da2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d022      	beq.n	8007df0 <__gethex+0x2a0>
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d024      	beq.n	8007df8 <__gethex+0x2a8>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d115      	bne.n	8007dde <__gethex+0x28e>
 8007db2:	42ae      	cmp	r6, r5
 8007db4:	d113      	bne.n	8007dde <__gethex+0x28e>
 8007db6:	2e01      	cmp	r6, #1
 8007db8:	d10b      	bne.n	8007dd2 <__gethex+0x282>
 8007dba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007dbe:	9a02      	ldr	r2, [sp, #8]
 8007dc0:	2562      	movs	r5, #98	@ 0x62
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	f8ca 3000 	str.w	r3, [sl]
 8007dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dce:	601c      	str	r4, [r3, #0]
 8007dd0:	e73a      	b.n	8007c48 <__gethex+0xf8>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	1e71      	subs	r1, r6, #1
 8007dd6:	f7fe fd32 	bl	800683e <__any_on>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d1ed      	bne.n	8007dba <__gethex+0x26a>
 8007dde:	4621      	mov	r1, r4
 8007de0:	9801      	ldr	r0, [sp, #4]
 8007de2:	f7fe f8e7 	bl	8005fb4 <_Bfree>
 8007de6:	2300      	movs	r3, #0
 8007de8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dea:	2550      	movs	r5, #80	@ 0x50
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	e72b      	b.n	8007c48 <__gethex+0xf8>
 8007df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f3      	bne.n	8007dde <__gethex+0x28e>
 8007df6:	e7e0      	b.n	8007dba <__gethex+0x26a>
 8007df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1dd      	bne.n	8007dba <__gethex+0x26a>
 8007dfe:	e7ee      	b.n	8007dde <__gethex+0x28e>
 8007e00:	080089a0 	.word	0x080089a0
 8007e04:	08008837 	.word	0x08008837
 8007e08:	08008b4e 	.word	0x08008b4e
 8007e0c:	1e6f      	subs	r7, r5, #1
 8007e0e:	f1b9 0f00 	cmp.w	r9, #0
 8007e12:	d130      	bne.n	8007e76 <__gethex+0x326>
 8007e14:	b127      	cbz	r7, 8007e20 <__gethex+0x2d0>
 8007e16:	4639      	mov	r1, r7
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7fe fd10 	bl	800683e <__any_on>
 8007e1e:	4681      	mov	r9, r0
 8007e20:	2301      	movs	r3, #1
 8007e22:	4629      	mov	r1, r5
 8007e24:	1b76      	subs	r6, r6, r5
 8007e26:	2502      	movs	r5, #2
 8007e28:	117a      	asrs	r2, r7, #5
 8007e2a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e2e:	f007 071f 	and.w	r7, r7, #31
 8007e32:	40bb      	lsls	r3, r7
 8007e34:	4213      	tst	r3, r2
 8007e36:	4620      	mov	r0, r4
 8007e38:	bf18      	it	ne
 8007e3a:	f049 0902 	orrne.w	r9, r9, #2
 8007e3e:	f7ff fe1f 	bl	8007a80 <rshift>
 8007e42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	d047      	beq.n	8007edc <__gethex+0x38c>
 8007e4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d015      	beq.n	8007e80 <__gethex+0x330>
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d017      	beq.n	8007e88 <__gethex+0x338>
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d109      	bne.n	8007e70 <__gethex+0x320>
 8007e5c:	f019 0f02 	tst.w	r9, #2
 8007e60:	d006      	beq.n	8007e70 <__gethex+0x320>
 8007e62:	f8da 3000 	ldr.w	r3, [sl]
 8007e66:	ea49 0903 	orr.w	r9, r9, r3
 8007e6a:	f019 0f01 	tst.w	r9, #1
 8007e6e:	d10e      	bne.n	8007e8e <__gethex+0x33e>
 8007e70:	f045 0510 	orr.w	r5, r5, #16
 8007e74:	e032      	b.n	8007edc <__gethex+0x38c>
 8007e76:	f04f 0901 	mov.w	r9, #1
 8007e7a:	e7d1      	b.n	8007e20 <__gethex+0x2d0>
 8007e7c:	2501      	movs	r5, #1
 8007e7e:	e7e2      	b.n	8007e46 <__gethex+0x2f6>
 8007e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e82:	f1c3 0301 	rsb	r3, r3, #1
 8007e86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f0      	beq.n	8007e70 <__gethex+0x320>
 8007e8e:	f04f 0c00 	mov.w	ip, #0
 8007e92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e96:	f104 0314 	add.w	r3, r4, #20
 8007e9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007eac:	d01b      	beq.n	8007ee6 <__gethex+0x396>
 8007eae:	3201      	adds	r2, #1
 8007eb0:	6002      	str	r2, [r0, #0]
 8007eb2:	2d02      	cmp	r5, #2
 8007eb4:	f104 0314 	add.w	r3, r4, #20
 8007eb8:	d13c      	bne.n	8007f34 <__gethex+0x3e4>
 8007eba:	f8d8 2000 	ldr.w	r2, [r8]
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	42b2      	cmp	r2, r6
 8007ec2:	d109      	bne.n	8007ed8 <__gethex+0x388>
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	1171      	asrs	r1, r6, #5
 8007ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ecc:	f006 061f 	and.w	r6, r6, #31
 8007ed0:	fa02 f606 	lsl.w	r6, r2, r6
 8007ed4:	421e      	tst	r6, r3
 8007ed6:	d13a      	bne.n	8007f4e <__gethex+0x3fe>
 8007ed8:	f045 0520 	orr.w	r5, r5, #32
 8007edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ede:	601c      	str	r4, [r3, #0]
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	601f      	str	r7, [r3, #0]
 8007ee4:	e6b0      	b.n	8007c48 <__gethex+0xf8>
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007eec:	d8d9      	bhi.n	8007ea2 <__gethex+0x352>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	459b      	cmp	fp, r3
 8007ef2:	db17      	blt.n	8007f24 <__gethex+0x3d4>
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	9801      	ldr	r0, [sp, #4]
 8007ef8:	3101      	adds	r1, #1
 8007efa:	f7fe f81b 	bl	8005f34 <_Balloc>
 8007efe:	4681      	mov	r9, r0
 8007f00:	b918      	cbnz	r0, 8007f0a <__gethex+0x3ba>
 8007f02:	4602      	mov	r2, r0
 8007f04:	2184      	movs	r1, #132	@ 0x84
 8007f06:	4b19      	ldr	r3, [pc, #100]	@ (8007f6c <__gethex+0x41c>)
 8007f08:	e6c5      	b.n	8007c96 <__gethex+0x146>
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	f104 010c 	add.w	r1, r4, #12
 8007f10:	3202      	adds	r2, #2
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	300c      	adds	r0, #12
 8007f16:	f7ff fd6d 	bl	80079f4 <memcpy>
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	9801      	ldr	r0, [sp, #4]
 8007f1e:	f7fe f849 	bl	8005fb4 <_Bfree>
 8007f22:	464c      	mov	r4, r9
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	6122      	str	r2, [r4, #16]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f30:	615a      	str	r2, [r3, #20]
 8007f32:	e7be      	b.n	8007eb2 <__gethex+0x362>
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	455a      	cmp	r2, fp
 8007f38:	dd0b      	ble.n	8007f52 <__gethex+0x402>
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff fd9f 	bl	8007a80 <rshift>
 8007f42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f46:	3701      	adds	r7, #1
 8007f48:	42bb      	cmp	r3, r7
 8007f4a:	f6ff aee0 	blt.w	8007d0e <__gethex+0x1be>
 8007f4e:	2501      	movs	r5, #1
 8007f50:	e7c2      	b.n	8007ed8 <__gethex+0x388>
 8007f52:	f016 061f 	ands.w	r6, r6, #31
 8007f56:	d0fa      	beq.n	8007f4e <__gethex+0x3fe>
 8007f58:	4453      	add	r3, sl
 8007f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f5e:	f7fe f8db 	bl	8006118 <__hi0bits>
 8007f62:	f1c6 0620 	rsb	r6, r6, #32
 8007f66:	42b0      	cmp	r0, r6
 8007f68:	dbe7      	blt.n	8007f3a <__gethex+0x3ea>
 8007f6a:	e7f0      	b.n	8007f4e <__gethex+0x3fe>
 8007f6c:	08008837 	.word	0x08008837

08007f70 <L_shift>:
 8007f70:	f1c2 0208 	rsb	r2, r2, #8
 8007f74:	0092      	lsls	r2, r2, #2
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	f1c2 0620 	rsb	r6, r2, #32
 8007f7c:	6843      	ldr	r3, [r0, #4]
 8007f7e:	6804      	ldr	r4, [r0, #0]
 8007f80:	fa03 f506 	lsl.w	r5, r3, r6
 8007f84:	432c      	orrs	r4, r5
 8007f86:	40d3      	lsrs	r3, r2
 8007f88:	6004      	str	r4, [r0, #0]
 8007f8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f8e:	4288      	cmp	r0, r1
 8007f90:	d3f4      	bcc.n	8007f7c <L_shift+0xc>
 8007f92:	bd70      	pop	{r4, r5, r6, pc}

08007f94 <__match>:
 8007f94:	b530      	push	{r4, r5, lr}
 8007f96:	6803      	ldr	r3, [r0, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9e:	b914      	cbnz	r4, 8007fa6 <__match+0x12>
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	bd30      	pop	{r4, r5, pc}
 8007fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007faa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007fae:	2d19      	cmp	r5, #25
 8007fb0:	bf98      	it	ls
 8007fb2:	3220      	addls	r2, #32
 8007fb4:	42a2      	cmp	r2, r4
 8007fb6:	d0f0      	beq.n	8007f9a <__match+0x6>
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e7f3      	b.n	8007fa4 <__match+0x10>

08007fbc <__hexnan>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	115e      	asrs	r6, r3, #5
 8007fc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fcc:	f013 031f 	ands.w	r3, r3, #31
 8007fd0:	bf18      	it	ne
 8007fd2:	3604      	addne	r6, #4
 8007fd4:	1f37      	subs	r7, r6, #4
 8007fd6:	4690      	mov	r8, r2
 8007fd8:	46b9      	mov	r9, r7
 8007fda:	463c      	mov	r4, r7
 8007fdc:	46ab      	mov	fp, r5
 8007fde:	b087      	sub	sp, #28
 8007fe0:	6801      	ldr	r1, [r0, #0]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fe8:	9502      	str	r5, [sp, #8]
 8007fea:	784a      	ldrb	r2, [r1, #1]
 8007fec:	1c4b      	adds	r3, r1, #1
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	b342      	cbz	r2, 8008044 <__hexnan+0x88>
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	9105      	str	r1, [sp, #20]
 8007ff6:	9204      	str	r2, [sp, #16]
 8007ff8:	f7ff fd95 	bl	8007b26 <__hexdig_fun>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d151      	bne.n	80080a4 <__hexnan+0xe8>
 8008000:	9a04      	ldr	r2, [sp, #16]
 8008002:	9905      	ldr	r1, [sp, #20]
 8008004:	2a20      	cmp	r2, #32
 8008006:	d818      	bhi.n	800803a <__hexnan+0x7e>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	459b      	cmp	fp, r3
 800800c:	dd13      	ble.n	8008036 <__hexnan+0x7a>
 800800e:	454c      	cmp	r4, r9
 8008010:	d206      	bcs.n	8008020 <__hexnan+0x64>
 8008012:	2d07      	cmp	r5, #7
 8008014:	dc04      	bgt.n	8008020 <__hexnan+0x64>
 8008016:	462a      	mov	r2, r5
 8008018:	4649      	mov	r1, r9
 800801a:	4620      	mov	r0, r4
 800801c:	f7ff ffa8 	bl	8007f70 <L_shift>
 8008020:	4544      	cmp	r4, r8
 8008022:	d952      	bls.n	80080ca <__hexnan+0x10e>
 8008024:	2300      	movs	r3, #0
 8008026:	f1a4 0904 	sub.w	r9, r4, #4
 800802a:	f844 3c04 	str.w	r3, [r4, #-4]
 800802e:	461d      	mov	r5, r3
 8008030:	464c      	mov	r4, r9
 8008032:	f8cd b008 	str.w	fp, [sp, #8]
 8008036:	9903      	ldr	r1, [sp, #12]
 8008038:	e7d7      	b.n	8007fea <__hexnan+0x2e>
 800803a:	2a29      	cmp	r2, #41	@ 0x29
 800803c:	d157      	bne.n	80080ee <__hexnan+0x132>
 800803e:	3102      	adds	r1, #2
 8008040:	f8ca 1000 	str.w	r1, [sl]
 8008044:	f1bb 0f00 	cmp.w	fp, #0
 8008048:	d051      	beq.n	80080ee <__hexnan+0x132>
 800804a:	454c      	cmp	r4, r9
 800804c:	d206      	bcs.n	800805c <__hexnan+0xa0>
 800804e:	2d07      	cmp	r5, #7
 8008050:	dc04      	bgt.n	800805c <__hexnan+0xa0>
 8008052:	462a      	mov	r2, r5
 8008054:	4649      	mov	r1, r9
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff ff8a 	bl	8007f70 <L_shift>
 800805c:	4544      	cmp	r4, r8
 800805e:	d936      	bls.n	80080ce <__hexnan+0x112>
 8008060:	4623      	mov	r3, r4
 8008062:	f1a8 0204 	sub.w	r2, r8, #4
 8008066:	f853 1b04 	ldr.w	r1, [r3], #4
 800806a:	429f      	cmp	r7, r3
 800806c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008070:	d2f9      	bcs.n	8008066 <__hexnan+0xaa>
 8008072:	1b3b      	subs	r3, r7, r4
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	3304      	adds	r3, #4
 800807a:	3401      	adds	r4, #1
 800807c:	3e03      	subs	r6, #3
 800807e:	42b4      	cmp	r4, r6
 8008080:	bf88      	it	hi
 8008082:	2304      	movhi	r3, #4
 8008084:	2200      	movs	r2, #0
 8008086:	4443      	add	r3, r8
 8008088:	f843 2b04 	str.w	r2, [r3], #4
 800808c:	429f      	cmp	r7, r3
 800808e:	d2fb      	bcs.n	8008088 <__hexnan+0xcc>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	b91b      	cbnz	r3, 800809c <__hexnan+0xe0>
 8008094:	4547      	cmp	r7, r8
 8008096:	d128      	bne.n	80080ea <__hexnan+0x12e>
 8008098:	2301      	movs	r3, #1
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	2005      	movs	r0, #5
 800809e:	b007      	add	sp, #28
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	3501      	adds	r5, #1
 80080a6:	2d08      	cmp	r5, #8
 80080a8:	f10b 0b01 	add.w	fp, fp, #1
 80080ac:	dd06      	ble.n	80080bc <__hexnan+0x100>
 80080ae:	4544      	cmp	r4, r8
 80080b0:	d9c1      	bls.n	8008036 <__hexnan+0x7a>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2501      	movs	r5, #1
 80080b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ba:	3c04      	subs	r4, #4
 80080bc:	6822      	ldr	r2, [r4, #0]
 80080be:	f000 000f 	and.w	r0, r0, #15
 80080c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080c6:	6020      	str	r0, [r4, #0]
 80080c8:	e7b5      	b.n	8008036 <__hexnan+0x7a>
 80080ca:	2508      	movs	r5, #8
 80080cc:	e7b3      	b.n	8008036 <__hexnan+0x7a>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0dd      	beq.n	8008090 <__hexnan+0xd4>
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	f1c3 0320 	rsb	r3, r3, #32
 80080dc:	40da      	lsrs	r2, r3
 80080de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080e2:	4013      	ands	r3, r2
 80080e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80080e8:	e7d2      	b.n	8008090 <__hexnan+0xd4>
 80080ea:	3f04      	subs	r7, #4
 80080ec:	e7d0      	b.n	8008090 <__hexnan+0xd4>
 80080ee:	2004      	movs	r0, #4
 80080f0:	e7d5      	b.n	800809e <__hexnan+0xe2>

080080f2 <__ascii_mbtowc>:
 80080f2:	b082      	sub	sp, #8
 80080f4:	b901      	cbnz	r1, 80080f8 <__ascii_mbtowc+0x6>
 80080f6:	a901      	add	r1, sp, #4
 80080f8:	b142      	cbz	r2, 800810c <__ascii_mbtowc+0x1a>
 80080fa:	b14b      	cbz	r3, 8008110 <__ascii_mbtowc+0x1e>
 80080fc:	7813      	ldrb	r3, [r2, #0]
 80080fe:	600b      	str	r3, [r1, #0]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	1e10      	subs	r0, r2, #0
 8008104:	bf18      	it	ne
 8008106:	2001      	movne	r0, #1
 8008108:	b002      	add	sp, #8
 800810a:	4770      	bx	lr
 800810c:	4610      	mov	r0, r2
 800810e:	e7fb      	b.n	8008108 <__ascii_mbtowc+0x16>
 8008110:	f06f 0001 	mvn.w	r0, #1
 8008114:	e7f8      	b.n	8008108 <__ascii_mbtowc+0x16>

08008116 <_realloc_r>:
 8008116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	4680      	mov	r8, r0
 800811c:	4615      	mov	r5, r2
 800811e:	460c      	mov	r4, r1
 8008120:	b921      	cbnz	r1, 800812c <_realloc_r+0x16>
 8008122:	4611      	mov	r1, r2
 8008124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	f7fd be78 	b.w	8005e1c <_malloc_r>
 800812c:	b92a      	cbnz	r2, 800813a <_realloc_r+0x24>
 800812e:	f7fd fe03 	bl	8005d38 <_free_r>
 8008132:	2400      	movs	r4, #0
 8008134:	4620      	mov	r0, r4
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813a:	f000 f840 	bl	80081be <_malloc_usable_size_r>
 800813e:	4285      	cmp	r5, r0
 8008140:	4606      	mov	r6, r0
 8008142:	d802      	bhi.n	800814a <_realloc_r+0x34>
 8008144:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008148:	d8f4      	bhi.n	8008134 <_realloc_r+0x1e>
 800814a:	4629      	mov	r1, r5
 800814c:	4640      	mov	r0, r8
 800814e:	f7fd fe65 	bl	8005e1c <_malloc_r>
 8008152:	4607      	mov	r7, r0
 8008154:	2800      	cmp	r0, #0
 8008156:	d0ec      	beq.n	8008132 <_realloc_r+0x1c>
 8008158:	42b5      	cmp	r5, r6
 800815a:	462a      	mov	r2, r5
 800815c:	4621      	mov	r1, r4
 800815e:	bf28      	it	cs
 8008160:	4632      	movcs	r2, r6
 8008162:	f7ff fc47 	bl	80079f4 <memcpy>
 8008166:	4621      	mov	r1, r4
 8008168:	4640      	mov	r0, r8
 800816a:	f7fd fde5 	bl	8005d38 <_free_r>
 800816e:	463c      	mov	r4, r7
 8008170:	e7e0      	b.n	8008134 <_realloc_r+0x1e>

08008172 <__ascii_wctomb>:
 8008172:	4603      	mov	r3, r0
 8008174:	4608      	mov	r0, r1
 8008176:	b141      	cbz	r1, 800818a <__ascii_wctomb+0x18>
 8008178:	2aff      	cmp	r2, #255	@ 0xff
 800817a:	d904      	bls.n	8008186 <__ascii_wctomb+0x14>
 800817c:	228a      	movs	r2, #138	@ 0x8a
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	4770      	bx	lr
 8008186:	2001      	movs	r0, #1
 8008188:	700a      	strb	r2, [r1, #0]
 800818a:	4770      	bx	lr

0800818c <fiprintf>:
 800818c:	b40e      	push	{r1, r2, r3}
 800818e:	b503      	push	{r0, r1, lr}
 8008190:	4601      	mov	r1, r0
 8008192:	ab03      	add	r3, sp, #12
 8008194:	4805      	ldr	r0, [pc, #20]	@ (80081ac <fiprintf+0x20>)
 8008196:	f853 2b04 	ldr.w	r2, [r3], #4
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	f000 f83d 	bl	800821c <_vfiprintf_r>
 80081a2:	b002      	add	sp, #8
 80081a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a8:	b003      	add	sp, #12
 80081aa:	4770      	bx	lr
 80081ac:	2000001c 	.word	0x2000001c

080081b0 <abort>:
 80081b0:	2006      	movs	r0, #6
 80081b2:	b508      	push	{r3, lr}
 80081b4:	f000 fa06 	bl	80085c4 <raise>
 80081b8:	2001      	movs	r0, #1
 80081ba:	f7f9 fc04 	bl	80019c6 <_exit>

080081be <_malloc_usable_size_r>:
 80081be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c2:	1f18      	subs	r0, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfbc      	itt	lt
 80081c8:	580b      	ldrlt	r3, [r1, r0]
 80081ca:	18c0      	addlt	r0, r0, r3
 80081cc:	4770      	bx	lr

080081ce <__sfputc_r>:
 80081ce:	6893      	ldr	r3, [r2, #8]
 80081d0:	b410      	push	{r4}
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	6093      	str	r3, [r2, #8]
 80081d8:	da07      	bge.n	80081ea <__sfputc_r+0x1c>
 80081da:	6994      	ldr	r4, [r2, #24]
 80081dc:	42a3      	cmp	r3, r4
 80081de:	db01      	blt.n	80081e4 <__sfputc_r+0x16>
 80081e0:	290a      	cmp	r1, #10
 80081e2:	d102      	bne.n	80081ea <__sfputc_r+0x1c>
 80081e4:	bc10      	pop	{r4}
 80081e6:	f000 b931 	b.w	800844c <__swbuf_r>
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	1c58      	adds	r0, r3, #1
 80081ee:	6010      	str	r0, [r2, #0]
 80081f0:	7019      	strb	r1, [r3, #0]
 80081f2:	4608      	mov	r0, r1
 80081f4:	bc10      	pop	{r4}
 80081f6:	4770      	bx	lr

080081f8 <__sfputs_r>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	4614      	mov	r4, r2
 8008200:	18d5      	adds	r5, r2, r3
 8008202:	42ac      	cmp	r4, r5
 8008204:	d101      	bne.n	800820a <__sfputs_r+0x12>
 8008206:	2000      	movs	r0, #0
 8008208:	e007      	b.n	800821a <__sfputs_r+0x22>
 800820a:	463a      	mov	r2, r7
 800820c:	4630      	mov	r0, r6
 800820e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008212:	f7ff ffdc 	bl	80081ce <__sfputc_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d1f3      	bne.n	8008202 <__sfputs_r+0xa>
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	4614      	mov	r4, r2
 8008224:	4698      	mov	r8, r3
 8008226:	4606      	mov	r6, r0
 8008228:	b09d      	sub	sp, #116	@ 0x74
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6a03      	ldr	r3, [r0, #32]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f7fc fdd0 	bl	8004dd4 <__sinit>
 8008234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008236:	07d9      	lsls	r1, r3, #31
 8008238:	d405      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	059a      	lsls	r2, r3, #22
 800823e:	d402      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 8008240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008242:	f7fc ff12 	bl	800506a <__retarget_lock_acquire_recursive>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	071b      	lsls	r3, r3, #28
 800824a:	d501      	bpl.n	8008250 <_vfiprintf_r+0x34>
 800824c:	692b      	ldr	r3, [r5, #16]
 800824e:	b99b      	cbnz	r3, 8008278 <_vfiprintf_r+0x5c>
 8008250:	4629      	mov	r1, r5
 8008252:	4630      	mov	r0, r6
 8008254:	f000 f938 	bl	80084c8 <__swsetup_r>
 8008258:	b170      	cbz	r0, 8008278 <_vfiprintf_r+0x5c>
 800825a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800825c:	07dc      	lsls	r4, r3, #31
 800825e:	d504      	bpl.n	800826a <_vfiprintf_r+0x4e>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	b01d      	add	sp, #116	@ 0x74
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	0598      	lsls	r0, r3, #22
 800826e:	d4f7      	bmi.n	8008260 <_vfiprintf_r+0x44>
 8008270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008272:	f7fc fefb 	bl	800506c <__retarget_lock_release_recursive>
 8008276:	e7f3      	b.n	8008260 <_vfiprintf_r+0x44>
 8008278:	2300      	movs	r3, #0
 800827a:	9309      	str	r3, [sp, #36]	@ 0x24
 800827c:	2320      	movs	r3, #32
 800827e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008282:	2330      	movs	r3, #48	@ 0x30
 8008284:	f04f 0901 	mov.w	r9, #1
 8008288:	f8cd 800c 	str.w	r8, [sp, #12]
 800828c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008438 <_vfiprintf_r+0x21c>
 8008290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008294:	4623      	mov	r3, r4
 8008296:	469a      	mov	sl, r3
 8008298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800829c:	b10a      	cbz	r2, 80082a2 <_vfiprintf_r+0x86>
 800829e:	2a25      	cmp	r2, #37	@ 0x25
 80082a0:	d1f9      	bne.n	8008296 <_vfiprintf_r+0x7a>
 80082a2:	ebba 0b04 	subs.w	fp, sl, r4
 80082a6:	d00b      	beq.n	80082c0 <_vfiprintf_r+0xa4>
 80082a8:	465b      	mov	r3, fp
 80082aa:	4622      	mov	r2, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffa2 	bl	80081f8 <__sfputs_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	f000 80a7 	beq.w	8008408 <_vfiprintf_r+0x1ec>
 80082ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082bc:	445a      	add	r2, fp
 80082be:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 809f 	beq.w	8008408 <_vfiprintf_r+0x1ec>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d4:	f10a 0a01 	add.w	sl, sl, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e2:	4654      	mov	r4, sl
 80082e4:	2205      	movs	r2, #5
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4853      	ldr	r0, [pc, #332]	@ (8008438 <_vfiprintf_r+0x21c>)
 80082ec:	f7fc febf 	bl	800506e <memchr>
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	b9d8      	cbnz	r0, 800832c <_vfiprintf_r+0x110>
 80082f4:	06d1      	lsls	r1, r2, #27
 80082f6:	bf44      	itt	mi
 80082f8:	2320      	movmi	r3, #32
 80082fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082fe:	0713      	lsls	r3, r2, #28
 8008300:	bf44      	itt	mi
 8008302:	232b      	movmi	r3, #43	@ 0x2b
 8008304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008308:	f89a 3000 	ldrb.w	r3, [sl]
 800830c:	2b2a      	cmp	r3, #42	@ 0x2a
 800830e:	d015      	beq.n	800833c <_vfiprintf_r+0x120>
 8008310:	4654      	mov	r4, sl
 8008312:	2000      	movs	r0, #0
 8008314:	f04f 0c0a 	mov.w	ip, #10
 8008318:	9a07      	ldr	r2, [sp, #28]
 800831a:	4621      	mov	r1, r4
 800831c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008320:	3b30      	subs	r3, #48	@ 0x30
 8008322:	2b09      	cmp	r3, #9
 8008324:	d94b      	bls.n	80083be <_vfiprintf_r+0x1a2>
 8008326:	b1b0      	cbz	r0, 8008356 <_vfiprintf_r+0x13a>
 8008328:	9207      	str	r2, [sp, #28]
 800832a:	e014      	b.n	8008356 <_vfiprintf_r+0x13a>
 800832c:	eba0 0308 	sub.w	r3, r0, r8
 8008330:	fa09 f303 	lsl.w	r3, r9, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	46a2      	mov	sl, r4
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	e7d2      	b.n	80082e2 <_vfiprintf_r+0xc6>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d19      	adds	r1, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9103      	str	r1, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbb      	ittet	lt
 8008348:	425b      	neglt	r3, r3
 800834a:	f042 0202 	orrlt.w	r2, r2, #2
 800834e:	9307      	strge	r3, [sp, #28]
 8008350:	9307      	strlt	r3, [sp, #28]
 8008352:	bfb8      	it	lt
 8008354:	9204      	strlt	r2, [sp, #16]
 8008356:	7823      	ldrb	r3, [r4, #0]
 8008358:	2b2e      	cmp	r3, #46	@ 0x2e
 800835a:	d10a      	bne.n	8008372 <_vfiprintf_r+0x156>
 800835c:	7863      	ldrb	r3, [r4, #1]
 800835e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008360:	d132      	bne.n	80083c8 <_vfiprintf_r+0x1ac>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	3402      	adds	r4, #2
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	9203      	str	r2, [sp, #12]
 800836c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800843c <_vfiprintf_r+0x220>
 8008376:	2203      	movs	r2, #3
 8008378:	4650      	mov	r0, sl
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	f7fc fe77 	bl	800506e <memchr>
 8008380:	b138      	cbz	r0, 8008392 <_vfiprintf_r+0x176>
 8008382:	2240      	movs	r2, #64	@ 0x40
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	eba0 000a 	sub.w	r0, r0, sl
 800838a:	4082      	lsls	r2, r0
 800838c:	4313      	orrs	r3, r2
 800838e:	3401      	adds	r4, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	2206      	movs	r2, #6
 8008398:	4829      	ldr	r0, [pc, #164]	@ (8008440 <_vfiprintf_r+0x224>)
 800839a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800839e:	f7fc fe66 	bl	800506e <memchr>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d03f      	beq.n	8008426 <_vfiprintf_r+0x20a>
 80083a6:	4b27      	ldr	r3, [pc, #156]	@ (8008444 <_vfiprintf_r+0x228>)
 80083a8:	bb1b      	cbnz	r3, 80083f2 <_vfiprintf_r+0x1d6>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	3307      	adds	r3, #7
 80083ae:	f023 0307 	bic.w	r3, r3, #7
 80083b2:	3308      	adds	r3, #8
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	443b      	add	r3, r7
 80083ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80083bc:	e76a      	b.n	8008294 <_vfiprintf_r+0x78>
 80083be:	460c      	mov	r4, r1
 80083c0:	2001      	movs	r0, #1
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	e7a8      	b.n	800831a <_vfiprintf_r+0xfe>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4619      	mov	r1, r3
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083da:	3a30      	subs	r2, #48	@ 0x30
 80083dc:	2a09      	cmp	r2, #9
 80083de:	d903      	bls.n	80083e8 <_vfiprintf_r+0x1cc>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c6      	beq.n	8008372 <_vfiprintf_r+0x156>
 80083e4:	9105      	str	r1, [sp, #20]
 80083e6:	e7c4      	b.n	8008372 <_vfiprintf_r+0x156>
 80083e8:	4604      	mov	r4, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	e7f0      	b.n	80083d4 <_vfiprintf_r+0x1b8>
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	462a      	mov	r2, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	4b13      	ldr	r3, [pc, #76]	@ (8008448 <_vfiprintf_r+0x22c>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	f7fb fe8f 	bl	8004120 <_printf_float>
 8008402:	4607      	mov	r7, r0
 8008404:	1c78      	adds	r0, r7, #1
 8008406:	d1d6      	bne.n	80083b6 <_vfiprintf_r+0x19a>
 8008408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	d405      	bmi.n	800841a <_vfiprintf_r+0x1fe>
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	059a      	lsls	r2, r3, #22
 8008412:	d402      	bmi.n	800841a <_vfiprintf_r+0x1fe>
 8008414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008416:	f7fc fe29 	bl	800506c <__retarget_lock_release_recursive>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	065b      	lsls	r3, r3, #25
 800841e:	f53f af1f 	bmi.w	8008260 <_vfiprintf_r+0x44>
 8008422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008424:	e71e      	b.n	8008264 <_vfiprintf_r+0x48>
 8008426:	ab03      	add	r3, sp, #12
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	462a      	mov	r2, r5
 800842c:	4630      	mov	r0, r6
 800842e:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <_vfiprintf_r+0x22c>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	f7fc f913 	bl	800465c <_printf_i>
 8008436:	e7e4      	b.n	8008402 <_vfiprintf_r+0x1e6>
 8008438:	08008af9 	.word	0x08008af9
 800843c:	08008aff 	.word	0x08008aff
 8008440:	08008b03 	.word	0x08008b03
 8008444:	08004121 	.word	0x08004121
 8008448:	080081f9 	.word	0x080081f9

0800844c <__swbuf_r>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	460e      	mov	r6, r1
 8008450:	4614      	mov	r4, r2
 8008452:	4605      	mov	r5, r0
 8008454:	b118      	cbz	r0, 800845e <__swbuf_r+0x12>
 8008456:	6a03      	ldr	r3, [r0, #32]
 8008458:	b90b      	cbnz	r3, 800845e <__swbuf_r+0x12>
 800845a:	f7fc fcbb 	bl	8004dd4 <__sinit>
 800845e:	69a3      	ldr	r3, [r4, #24]
 8008460:	60a3      	str	r3, [r4, #8]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	071a      	lsls	r2, r3, #28
 8008466:	d501      	bpl.n	800846c <__swbuf_r+0x20>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	b943      	cbnz	r3, 800847e <__swbuf_r+0x32>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f82a 	bl	80084c8 <__swsetup_r>
 8008474:	b118      	cbz	r0, 800847e <__swbuf_r+0x32>
 8008476:	f04f 37ff 	mov.w	r7, #4294967295
 800847a:	4638      	mov	r0, r7
 800847c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	b2f6      	uxtb	r6, r6
 8008484:	1a98      	subs	r0, r3, r2
 8008486:	6963      	ldr	r3, [r4, #20]
 8008488:	4637      	mov	r7, r6
 800848a:	4283      	cmp	r3, r0
 800848c:	dc05      	bgt.n	800849a <__swbuf_r+0x4e>
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fa4b 	bl	800792c <_fflush_r>
 8008496:	2800      	cmp	r0, #0
 8008498:	d1ed      	bne.n	8008476 <__swbuf_r+0x2a>
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	3b01      	subs	r3, #1
 800849e:	60a3      	str	r3, [r4, #8]
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	6022      	str	r2, [r4, #0]
 80084a6:	701e      	strb	r6, [r3, #0]
 80084a8:	6962      	ldr	r2, [r4, #20]
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d004      	beq.n	80084ba <__swbuf_r+0x6e>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	07db      	lsls	r3, r3, #31
 80084b4:	d5e1      	bpl.n	800847a <__swbuf_r+0x2e>
 80084b6:	2e0a      	cmp	r6, #10
 80084b8:	d1df      	bne.n	800847a <__swbuf_r+0x2e>
 80084ba:	4621      	mov	r1, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	f7ff fa35 	bl	800792c <_fflush_r>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d0d9      	beq.n	800847a <__swbuf_r+0x2e>
 80084c6:	e7d6      	b.n	8008476 <__swbuf_r+0x2a>

080084c8 <__swsetup_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4b29      	ldr	r3, [pc, #164]	@ (8008570 <__swsetup_r+0xa8>)
 80084cc:	4605      	mov	r5, r0
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	460c      	mov	r4, r1
 80084d2:	b118      	cbz	r0, 80084dc <__swsetup_r+0x14>
 80084d4:	6a03      	ldr	r3, [r0, #32]
 80084d6:	b90b      	cbnz	r3, 80084dc <__swsetup_r+0x14>
 80084d8:	f7fc fc7c 	bl	8004dd4 <__sinit>
 80084dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e0:	0719      	lsls	r1, r3, #28
 80084e2:	d422      	bmi.n	800852a <__swsetup_r+0x62>
 80084e4:	06da      	lsls	r2, r3, #27
 80084e6:	d407      	bmi.n	80084f8 <__swsetup_r+0x30>
 80084e8:	2209      	movs	r2, #9
 80084ea:	602a      	str	r2, [r5, #0]
 80084ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e033      	b.n	8008560 <__swsetup_r+0x98>
 80084f8:	0758      	lsls	r0, r3, #29
 80084fa:	d512      	bpl.n	8008522 <__swsetup_r+0x5a>
 80084fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084fe:	b141      	cbz	r1, 8008512 <__swsetup_r+0x4a>
 8008500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008504:	4299      	cmp	r1, r3
 8008506:	d002      	beq.n	800850e <__swsetup_r+0x46>
 8008508:	4628      	mov	r0, r5
 800850a:	f7fd fc15 	bl	8005d38 <_free_r>
 800850e:	2300      	movs	r3, #0
 8008510:	6363      	str	r3, [r4, #52]	@ 0x34
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	2300      	movs	r3, #0
 800851c:	6063      	str	r3, [r4, #4]
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	f043 0308 	orr.w	r3, r3, #8
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	6923      	ldr	r3, [r4, #16]
 800852c:	b94b      	cbnz	r3, 8008542 <__swsetup_r+0x7a>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008538:	d003      	beq.n	8008542 <__swsetup_r+0x7a>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f882 	bl	8008646 <__smakebuf_r>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	f013 0201 	ands.w	r2, r3, #1
 800854a:	d00a      	beq.n	8008562 <__swsetup_r+0x9a>
 800854c:	2200      	movs	r2, #0
 800854e:	60a2      	str	r2, [r4, #8]
 8008550:	6962      	ldr	r2, [r4, #20]
 8008552:	4252      	negs	r2, r2
 8008554:	61a2      	str	r2, [r4, #24]
 8008556:	6922      	ldr	r2, [r4, #16]
 8008558:	b942      	cbnz	r2, 800856c <__swsetup_r+0xa4>
 800855a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800855e:	d1c5      	bne.n	80084ec <__swsetup_r+0x24>
 8008560:	bd38      	pop	{r3, r4, r5, pc}
 8008562:	0799      	lsls	r1, r3, #30
 8008564:	bf58      	it	pl
 8008566:	6962      	ldrpl	r2, [r4, #20]
 8008568:	60a2      	str	r2, [r4, #8]
 800856a:	e7f4      	b.n	8008556 <__swsetup_r+0x8e>
 800856c:	2000      	movs	r0, #0
 800856e:	e7f7      	b.n	8008560 <__swsetup_r+0x98>
 8008570:	2000001c 	.word	0x2000001c

08008574 <_raise_r>:
 8008574:	291f      	cmp	r1, #31
 8008576:	b538      	push	{r3, r4, r5, lr}
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	d904      	bls.n	8008588 <_raise_r+0x14>
 800857e:	2316      	movs	r3, #22
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	f04f 30ff 	mov.w	r0, #4294967295
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800858a:	b112      	cbz	r2, 8008592 <_raise_r+0x1e>
 800858c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008590:	b94b      	cbnz	r3, 80085a6 <_raise_r+0x32>
 8008592:	4628      	mov	r0, r5
 8008594:	f000 f830 	bl	80085f8 <_getpid_r>
 8008598:	4622      	mov	r2, r4
 800859a:	4601      	mov	r1, r0
 800859c:	4628      	mov	r0, r5
 800859e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a2:	f000 b817 	b.w	80085d4 <_kill_r>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d00a      	beq.n	80085c0 <_raise_r+0x4c>
 80085aa:	1c59      	adds	r1, r3, #1
 80085ac:	d103      	bne.n	80085b6 <_raise_r+0x42>
 80085ae:	2316      	movs	r3, #22
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	2001      	movs	r0, #1
 80085b4:	e7e7      	b.n	8008586 <_raise_r+0x12>
 80085b6:	2100      	movs	r1, #0
 80085b8:	4620      	mov	r0, r4
 80085ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80085be:	4798      	blx	r3
 80085c0:	2000      	movs	r0, #0
 80085c2:	e7e0      	b.n	8008586 <_raise_r+0x12>

080085c4 <raise>:
 80085c4:	4b02      	ldr	r3, [pc, #8]	@ (80085d0 <raise+0xc>)
 80085c6:	4601      	mov	r1, r0
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f7ff bfd3 	b.w	8008574 <_raise_r>
 80085ce:	bf00      	nop
 80085d0:	2000001c 	.word	0x2000001c

080085d4 <_kill_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	2300      	movs	r3, #0
 80085d8:	4d06      	ldr	r5, [pc, #24]	@ (80085f4 <_kill_r+0x20>)
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	4611      	mov	r1, r2
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	f7f9 f9e0 	bl	80019a6 <_kill>
 80085e6:	1c43      	adds	r3, r0, #1
 80085e8:	d102      	bne.n	80085f0 <_kill_r+0x1c>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b103      	cbz	r3, 80085f0 <_kill_r+0x1c>
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	bd38      	pop	{r3, r4, r5, pc}
 80085f2:	bf00      	nop
 80085f4:	200005d0 	.word	0x200005d0

080085f8 <_getpid_r>:
 80085f8:	f7f9 b9ce 	b.w	8001998 <_getpid>

080085fc <__swhatbuf_r>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	460c      	mov	r4, r1
 8008600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008604:	4615      	mov	r5, r2
 8008606:	2900      	cmp	r1, #0
 8008608:	461e      	mov	r6, r3
 800860a:	b096      	sub	sp, #88	@ 0x58
 800860c:	da0c      	bge.n	8008628 <__swhatbuf_r+0x2c>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	2100      	movs	r1, #0
 8008612:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008616:	bf14      	ite	ne
 8008618:	2340      	movne	r3, #64	@ 0x40
 800861a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800861e:	2000      	movs	r0, #0
 8008620:	6031      	str	r1, [r6, #0]
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	b016      	add	sp, #88	@ 0x58
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	466a      	mov	r2, sp
 800862a:	f000 f849 	bl	80086c0 <_fstat_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	dbed      	blt.n	800860e <__swhatbuf_r+0x12>
 8008632:	9901      	ldr	r1, [sp, #4]
 8008634:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008638:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800863c:	4259      	negs	r1, r3
 800863e:	4159      	adcs	r1, r3
 8008640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008644:	e7eb      	b.n	800861e <__swhatbuf_r+0x22>

08008646 <__smakebuf_r>:
 8008646:	898b      	ldrh	r3, [r1, #12]
 8008648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800864a:	079d      	lsls	r5, r3, #30
 800864c:	4606      	mov	r6, r0
 800864e:	460c      	mov	r4, r1
 8008650:	d507      	bpl.n	8008662 <__smakebuf_r+0x1c>
 8008652:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	6123      	str	r3, [r4, #16]
 800865a:	2301      	movs	r3, #1
 800865c:	6163      	str	r3, [r4, #20]
 800865e:	b003      	add	sp, #12
 8008660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008662:	466a      	mov	r2, sp
 8008664:	ab01      	add	r3, sp, #4
 8008666:	f7ff ffc9 	bl	80085fc <__swhatbuf_r>
 800866a:	9f00      	ldr	r7, [sp, #0]
 800866c:	4605      	mov	r5, r0
 800866e:	4639      	mov	r1, r7
 8008670:	4630      	mov	r0, r6
 8008672:	f7fd fbd3 	bl	8005e1c <_malloc_r>
 8008676:	b948      	cbnz	r0, 800868c <__smakebuf_r+0x46>
 8008678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867c:	059a      	lsls	r2, r3, #22
 800867e:	d4ee      	bmi.n	800865e <__smakebuf_r+0x18>
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	f043 0302 	orr.w	r3, r3, #2
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	e7e2      	b.n	8008652 <__smakebuf_r+0xc>
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	6020      	str	r0, [r4, #0]
 800869c:	b15b      	cbz	r3, 80086b6 <__smakebuf_r+0x70>
 800869e:	4630      	mov	r0, r6
 80086a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a4:	f000 f81e 	bl	80086e4 <_isatty_r>
 80086a8:	b128      	cbz	r0, 80086b6 <__smakebuf_r+0x70>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	431d      	orrs	r5, r3
 80086ba:	81a5      	strh	r5, [r4, #12]
 80086bc:	e7cf      	b.n	800865e <__smakebuf_r+0x18>
	...

080086c0 <_fstat_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	2300      	movs	r3, #0
 80086c4:	4d06      	ldr	r5, [pc, #24]	@ (80086e0 <_fstat_r+0x20>)
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	4611      	mov	r1, r2
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	f7f9 f9c9 	bl	8001a64 <_fstat>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	d102      	bne.n	80086dc <_fstat_r+0x1c>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	b103      	cbz	r3, 80086dc <_fstat_r+0x1c>
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop
 80086e0:	200005d0 	.word	0x200005d0

080086e4 <_isatty_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	2300      	movs	r3, #0
 80086e8:	4d05      	ldr	r5, [pc, #20]	@ (8008700 <_isatty_r+0x1c>)
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f9 f9c7 	bl	8001a82 <_isatty>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_isatty_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_isatty_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	200005d0 	.word	0x200005d0

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr
